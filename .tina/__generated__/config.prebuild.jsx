var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/next-tinacms-cloudinary/dist/index.js
var require_dist = __commonJS({
  "node_modules/next-tinacms-cloudinary/dist/index.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2["next-tinacms-cloudinary"] = {}));
    })(exports, function(exports2) {
      "use strict";
      var commonjsGlobal$4 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      var react = { exports: {} };
      var react_production_min = {};
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty$t = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject$1(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i2 = 0; i2 < 10; i2++) {
            test2["_" + String.fromCharCode(i2)] = i2;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
            return test2[n2];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to2 = toObject$1(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from2 = Object(arguments[s2]);
          for (var key in from2) {
            if (hasOwnProperty$t.call(from2, key)) {
              to2[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              if (propIsEnumerable.call(from2, symbols[i2])) {
                to2[symbols[i2]] = from2[symbols[i2]];
              }
            }
          }
        }
        return to2;
      };
      var l$3 = objectAssign, n$3 = 60103, p$3 = 60106;
      react_production_min.Fragment = 60107;
      react_production_min.StrictMode = 60108;
      react_production_min.Profiler = 60114;
      var q$2 = 60109, r$4 = 60110, t$2 = 60112;
      react_production_min.Suspense = 60113;
      var u$3 = 60115, v$1 = 60116;
      if (typeof Symbol === "function" && Symbol.for) {
        var w$1 = Symbol.for;
        n$3 = w$1("react.element");
        p$3 = w$1("react.portal");
        react_production_min.Fragment = w$1("react.fragment");
        react_production_min.StrictMode = w$1("react.strict_mode");
        react_production_min.Profiler = w$1("react.profiler");
        q$2 = w$1("react.provider");
        r$4 = w$1("react.context");
        t$2 = w$1("react.forward_ref");
        react_production_min.Suspense = w$1("react.suspense");
        u$3 = w$1("react.memo");
        v$1 = w$1("react.lazy");
      }
      var x$1 = typeof Symbol === "function" && Symbol.iterator;
      function y$2(a2) {
        if (a2 === null || typeof a2 !== "object")
          return null;
        a2 = x$1 && a2[x$1] || a2["@@iterator"];
        return typeof a2 === "function" ? a2 : null;
      }
      function z$2(a2) {
        for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
          b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
        return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var A$1 = { isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      } }, B$3 = {};
      function C$1(a2, b2, c2) {
        this.props = a2;
        this.context = b2;
        this.refs = B$3;
        this.updater = c2 || A$1;
      }
      C$1.prototype.isReactComponent = {};
      C$1.prototype.setState = function(a2, b2) {
        if (typeof a2 !== "object" && typeof a2 !== "function" && a2 != null)
          throw Error(z$2(85));
        this.updater.enqueueSetState(this, a2, b2, "setState");
      };
      C$1.prototype.forceUpdate = function(a2) {
        this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
      };
      function D$3() {
      }
      D$3.prototype = C$1.prototype;
      function E$3(a2, b2, c2) {
        this.props = a2;
        this.context = b2;
        this.refs = B$3;
        this.updater = c2 || A$1;
      }
      var F$3 = E$3.prototype = new D$3();
      F$3.constructor = E$3;
      l$3(F$3, C$1.prototype);
      F$3.isPureReactComponent = true;
      var G$2 = { current: null }, H$2 = Object.prototype.hasOwnProperty, I$3 = { key: true, ref: true, __self: true, __source: true };
      function J$1(a2, b2, c2) {
        var e2, d2 = {}, k2 = null, h2 = null;
        if (b2 != null)
          for (e2 in b2.ref !== void 0 && (h2 = b2.ref), b2.key !== void 0 && (k2 = "" + b2.key), b2)
            H$2.call(b2, e2) && !I$3.hasOwnProperty(e2) && (d2[e2] = b2[e2]);
        var g2 = arguments.length - 2;
        if (g2 === 1)
          d2.children = c2;
        else if (1 < g2) {
          for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
            f2[m2] = arguments[m2 + 2];
          d2.children = f2;
        }
        if (a2 && a2.defaultProps)
          for (e2 in g2 = a2.defaultProps, g2)
            d2[e2] === void 0 && (d2[e2] = g2[e2]);
        return { $$typeof: n$3, type: a2, key: k2, ref: h2, props: d2, _owner: G$2.current };
      }
      function K$1(a2, b2) {
        return { $$typeof: n$3, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
      }
      function L$1(a2) {
        return typeof a2 === "object" && a2 !== null && a2.$$typeof === n$3;
      }
      function escape(a2) {
        var b2 = { "=": "=0", ":": "=2" };
        return "$" + a2.replace(/[=:]/g, function(a3) {
          return b2[a3];
        });
      }
      var M$3 = /\/+/g;
      function N$2(a2, b2) {
        return typeof a2 === "object" && a2 !== null && a2.key != null ? escape("" + a2.key) : b2.toString(36);
      }
      function O$3(a2, b2, c2, e2, d2) {
        var k2 = typeof a2;
        if (k2 === "undefined" || k2 === "boolean")
          a2 = null;
        var h2 = false;
        if (a2 === null)
          h2 = true;
        else
          switch (k2) {
            case "string":
            case "number":
              h2 = true;
              break;
            case "object":
              switch (a2.$$typeof) {
                case n$3:
                case p$3:
                  h2 = true;
              }
          }
        if (h2)
          return h2 = a2, d2 = d2(h2), a2 = e2 === "" ? "." + N$2(h2, 0) : e2, Array.isArray(d2) ? (c2 = "", a2 != null && (c2 = a2.replace(M$3, "$&/") + "/"), O$3(d2, b2, c2, "", function(a3) {
            return a3;
          })) : d2 != null && (L$1(d2) && (d2 = K$1(d2, c2 + (!d2.key || h2 && h2.key === d2.key ? "" : ("" + d2.key).replace(M$3, "$&/") + "/") + a2)), b2.push(d2)), 1;
        h2 = 0;
        e2 = e2 === "" ? "." : e2 + ":";
        if (Array.isArray(a2))
          for (var g2 = 0; g2 < a2.length; g2++) {
            k2 = a2[g2];
            var f2 = e2 + N$2(k2, g2);
            h2 += O$3(k2, b2, c2, f2, d2);
          }
        else if (f2 = y$2(a2), typeof f2 === "function")
          for (a2 = f2.call(a2), g2 = 0; !(k2 = a2.next()).done; )
            k2 = k2.value, f2 = e2 + N$2(k2, g2++), h2 += O$3(k2, b2, c2, f2, d2);
        else if (k2 === "object")
          throw b2 = "" + a2, Error(z$2(31, b2 === "[object Object]" ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2));
        return h2;
      }
      function P$3(a2, b2, c2) {
        if (a2 == null)
          return a2;
        var e2 = [], d2 = 0;
        O$3(a2, e2, "", "", function(a3) {
          return b2.call(c2, a3, d2++);
        });
        return e2;
      }
      function Q$2(a2) {
        if (a2._status === -1) {
          var b2 = a2._result;
          b2 = b2();
          a2._status = 0;
          a2._result = b2;
          b2.then(function(b3) {
            a2._status === 0 && (b3 = b3.default, a2._status = 1, a2._result = b3);
          }, function(b3) {
            a2._status === 0 && (a2._status = 2, a2._result = b3);
          });
        }
        if (a2._status === 1)
          return a2._result;
        throw a2._result;
      }
      var R$3 = { current: null };
      function S$3() {
        var a2 = R$3.current;
        if (a2 === null)
          throw Error(z$2(321));
        return a2;
      }
      var T$2 = { ReactCurrentDispatcher: R$3, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G$2, IsSomeRendererActing: { current: false }, assign: l$3 };
      react_production_min.Children = { map: P$3, forEach: function(a2, b2, c2) {
        P$3(a2, function() {
          b2.apply(this, arguments);
        }, c2);
      }, count: function(a2) {
        var b2 = 0;
        P$3(a2, function() {
          b2++;
        });
        return b2;
      }, toArray: function(a2) {
        return P$3(a2, function(a3) {
          return a3;
        }) || [];
      }, only: function(a2) {
        if (!L$1(a2))
          throw Error(z$2(143));
        return a2;
      } };
      react_production_min.Component = C$1;
      react_production_min.PureComponent = E$3;
      react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T$2;
      react_production_min.cloneElement = function(a2, b2, c2) {
        if (a2 === null || a2 === void 0)
          throw Error(z$2(267, a2));
        var e2 = l$3({}, a2.props), d2 = a2.key, k2 = a2.ref, h2 = a2._owner;
        if (b2 != null) {
          b2.ref !== void 0 && (k2 = b2.ref, h2 = G$2.current);
          b2.key !== void 0 && (d2 = "" + b2.key);
          if (a2.type && a2.type.defaultProps)
            var g2 = a2.type.defaultProps;
          for (f2 in b2)
            H$2.call(b2, f2) && !I$3.hasOwnProperty(f2) && (e2[f2] = b2[f2] === void 0 && g2 !== void 0 ? g2[f2] : b2[f2]);
        }
        var f2 = arguments.length - 2;
        if (f2 === 1)
          e2.children = c2;
        else if (1 < f2) {
          g2 = Array(f2);
          for (var m2 = 0; m2 < f2; m2++)
            g2[m2] = arguments[m2 + 2];
          e2.children = g2;
        }
        return {
          $$typeof: n$3,
          type: a2.type,
          key: d2,
          ref: k2,
          props: e2,
          _owner: h2
        };
      };
      react_production_min.createContext = function(a2, b2) {
        b2 === void 0 && (b2 = null);
        a2 = { $$typeof: r$4, _calculateChangedBits: b2, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null };
        a2.Provider = { $$typeof: q$2, _context: a2 };
        return a2.Consumer = a2;
      };
      react_production_min.createElement = J$1;
      react_production_min.createFactory = function(a2) {
        var b2 = J$1.bind(null, a2);
        b2.type = a2;
        return b2;
      };
      react_production_min.createRef = function() {
        return { current: null };
      };
      react_production_min.forwardRef = function(a2) {
        return { $$typeof: t$2, render: a2 };
      };
      react_production_min.isValidElement = L$1;
      react_production_min.lazy = function(a2) {
        return { $$typeof: v$1, _payload: { _status: -1, _result: a2 }, _init: Q$2 };
      };
      react_production_min.memo = function(a2, b2) {
        return { $$typeof: u$3, type: a2, compare: b2 === void 0 ? null : b2 };
      };
      react_production_min.useCallback = function(a2, b2) {
        return S$3().useCallback(a2, b2);
      };
      react_production_min.useContext = function(a2, b2) {
        return S$3().useContext(a2, b2);
      };
      react_production_min.useDebugValue = function() {
      };
      react_production_min.useEffect = function(a2, b2) {
        return S$3().useEffect(a2, b2);
      };
      react_production_min.useImperativeHandle = function(a2, b2, c2) {
        return S$3().useImperativeHandle(a2, b2, c2);
      };
      react_production_min.useLayoutEffect = function(a2, b2) {
        return S$3().useLayoutEffect(a2, b2);
      };
      react_production_min.useMemo = function(a2, b2) {
        return S$3().useMemo(a2, b2);
      };
      react_production_min.useReducer = function(a2, b2, c2) {
        return S$3().useReducer(a2, b2, c2);
      };
      react_production_min.useRef = function(a2) {
        return S$3().useRef(a2);
      };
      react_production_min.useState = function(a2) {
        return S$3().useState(a2);
      };
      react_production_min.version = "17.0.2";
      {
        react.exports = react_production_min;
      }
      var React__default = react.exports;
      var reactDom = { exports: {} };
      var reactDom_production_min = {};
      var scheduler = { exports: {} };
      var scheduler_production_min = {};
      (function(exports3) {
        var f2, g2, h2, k2;
        if (typeof performance === "object" && typeof performance.now === "function") {
          var l2 = performance;
          exports3.unstable_now = function() {
            return l2.now();
          };
        } else {
          var p2 = Date, q2 = p2.now();
          exports3.unstable_now = function() {
            return p2.now() - q2;
          };
        }
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var t2 = null, u2 = null, w2 = function() {
            if (t2 !== null)
              try {
                var a2 = exports3.unstable_now();
                t2(true, a2);
                t2 = null;
              } catch (b2) {
                throw setTimeout(w2, 0), b2;
              }
          };
          f2 = function(a2) {
            t2 !== null ? setTimeout(f2, 0, a2) : (t2 = a2, setTimeout(w2, 0));
          };
          g2 = function(a2, b2) {
            u2 = setTimeout(a2, b2);
          };
          h2 = function() {
            clearTimeout(u2);
          };
          exports3.unstable_shouldYield = function() {
            return false;
          };
          k2 = exports3.unstable_forceFrameRate = function() {
          };
        } else {
          var x2 = window.setTimeout, y2 = window.clearTimeout;
          if (typeof console !== "undefined") {
            var z2 = window.cancelAnimationFrame;
            typeof window.requestAnimationFrame !== "function" && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            typeof z2 !== "function" && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
          var A2 = false, B2 = null, C2 = -1, D2 = 5, E2 = 0;
          exports3.unstable_shouldYield = function() {
            return exports3.unstable_now() >= E2;
          };
          k2 = function() {
          };
          exports3.unstable_forceFrameRate = function(a2) {
            0 > a2 || 125 < a2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D2 = 0 < a2 ? Math.floor(1e3 / a2) : 5;
          };
          var F2 = new MessageChannel(), G2 = F2.port2;
          F2.port1.onmessage = function() {
            if (B2 !== null) {
              var a2 = exports3.unstable_now();
              E2 = a2 + D2;
              try {
                B2(true, a2) ? G2.postMessage(null) : (A2 = false, B2 = null);
              } catch (b2) {
                throw G2.postMessage(null), b2;
              }
            } else
              A2 = false;
          };
          f2 = function(a2) {
            B2 = a2;
            A2 || (A2 = true, G2.postMessage(null));
          };
          g2 = function(a2, b2) {
            C2 = x2(function() {
              a2(exports3.unstable_now());
            }, b2);
          };
          h2 = function() {
            y2(C2);
            C2 = -1;
          };
        }
        function H2(a2, b2) {
          var c2 = a2.length;
          a2.push(b2);
          a:
            for (; ; ) {
              var d2 = c2 - 1 >>> 1, e2 = a2[d2];
              if (e2 !== void 0 && 0 < I2(e2, b2))
                a2[d2] = b2, a2[c2] = e2, c2 = d2;
              else
                break a;
            }
        }
        function J2(a2) {
          a2 = a2[0];
          return a2 === void 0 ? null : a2;
        }
        function K2(a2) {
          var b2 = a2[0];
          if (b2 !== void 0) {
            var c2 = a2.pop();
            if (c2 !== b2) {
              a2[0] = c2;
              a:
                for (var d2 = 0, e2 = a2.length; d2 < e2; ) {
                  var m2 = 2 * (d2 + 1) - 1, n2 = a2[m2], v2 = m2 + 1, r2 = a2[v2];
                  if (n2 !== void 0 && 0 > I2(n2, c2))
                    r2 !== void 0 && 0 > I2(r2, n2) ? (a2[d2] = r2, a2[v2] = c2, d2 = v2) : (a2[d2] = n2, a2[m2] = c2, d2 = m2);
                  else if (r2 !== void 0 && 0 > I2(r2, c2))
                    a2[d2] = r2, a2[v2] = c2, d2 = v2;
                  else
                    break a;
                }
            }
            return b2;
          }
          return null;
        }
        function I2(a2, b2) {
          var c2 = a2.sortIndex - b2.sortIndex;
          return c2 !== 0 ? c2 : a2.id - b2.id;
        }
        var L2 = [], M2 = [], N2 = 1, O2 = null, P2 = 3, Q2 = false, R2 = false, S2 = false;
        function T2(a2) {
          for (var b2 = J2(M2); b2 !== null; ) {
            if (b2.callback === null)
              K2(M2);
            else if (b2.startTime <= a2)
              K2(M2), b2.sortIndex = b2.expirationTime, H2(L2, b2);
            else
              break;
            b2 = J2(M2);
          }
        }
        function U2(a2) {
          S2 = false;
          T2(a2);
          if (!R2)
            if (J2(L2) !== null)
              R2 = true, f2(V2);
            else {
              var b2 = J2(M2);
              b2 !== null && g2(U2, b2.startTime - a2);
            }
        }
        function V2(a2, b2) {
          R2 = false;
          S2 && (S2 = false, h2());
          Q2 = true;
          var c2 = P2;
          try {
            T2(b2);
            for (O2 = J2(L2); O2 !== null && (!(O2.expirationTime > b2) || a2 && !exports3.unstable_shouldYield()); ) {
              var d2 = O2.callback;
              if (typeof d2 === "function") {
                O2.callback = null;
                P2 = O2.priorityLevel;
                var e2 = d2(O2.expirationTime <= b2);
                b2 = exports3.unstable_now();
                typeof e2 === "function" ? O2.callback = e2 : O2 === J2(L2) && K2(L2);
                T2(b2);
              } else
                K2(L2);
              O2 = J2(L2);
            }
            if (O2 !== null)
              var m2 = true;
            else {
              var n2 = J2(M2);
              n2 !== null && g2(U2, n2.startTime - b2);
              m2 = false;
            }
            return m2;
          } finally {
            O2 = null, P2 = c2, Q2 = false;
          }
        }
        var W2 = k2;
        exports3.unstable_IdlePriority = 5;
        exports3.unstable_ImmediatePriority = 1;
        exports3.unstable_LowPriority = 4;
        exports3.unstable_NormalPriority = 3;
        exports3.unstable_Profiling = null;
        exports3.unstable_UserBlockingPriority = 2;
        exports3.unstable_cancelCallback = function(a2) {
          a2.callback = null;
        };
        exports3.unstable_continueExecution = function() {
          R2 || Q2 || (R2 = true, f2(V2));
        };
        exports3.unstable_getCurrentPriorityLevel = function() {
          return P2;
        };
        exports3.unstable_getFirstCallbackNode = function() {
          return J2(L2);
        };
        exports3.unstable_next = function(a2) {
          switch (P2) {
            case 1:
            case 2:
            case 3:
              var b2 = 3;
              break;
            default:
              b2 = P2;
          }
          var c2 = P2;
          P2 = b2;
          try {
            return a2();
          } finally {
            P2 = c2;
          }
        };
        exports3.unstable_pauseExecution = function() {
        };
        exports3.unstable_requestPaint = W2;
        exports3.unstable_runWithPriority = function(a2, b2) {
          switch (a2) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              a2 = 3;
          }
          var c2 = P2;
          P2 = a2;
          try {
            return b2();
          } finally {
            P2 = c2;
          }
        };
        exports3.unstable_scheduleCallback = function(a2, b2, c2) {
          var d2 = exports3.unstable_now();
          typeof c2 === "object" && c2 !== null ? (c2 = c2.delay, c2 = typeof c2 === "number" && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
          switch (a2) {
            case 1:
              var e2 = -1;
              break;
            case 2:
              e2 = 250;
              break;
            case 5:
              e2 = 1073741823;
              break;
            case 4:
              e2 = 1e4;
              break;
            default:
              e2 = 5e3;
          }
          e2 = c2 + e2;
          a2 = { id: N2++, callback: b2, priorityLevel: a2, startTime: c2, expirationTime: e2, sortIndex: -1 };
          c2 > d2 ? (a2.sortIndex = c2, H2(M2, a2), J2(L2) === null && a2 === J2(M2) && (S2 ? h2() : S2 = true, g2(U2, c2 - d2))) : (a2.sortIndex = e2, H2(L2, a2), R2 || Q2 || (R2 = true, f2(V2)));
          return a2;
        };
        exports3.unstable_wrapCallback = function(a2) {
          var b2 = P2;
          return function() {
            var c2 = P2;
            P2 = b2;
            try {
              return a2.apply(this, arguments);
            } finally {
              P2 = c2;
            }
          };
        };
      })(scheduler_production_min);
      {
        scheduler.exports = scheduler_production_min;
      }
      var aa$1 = react.exports, m$2 = objectAssign, r$3 = scheduler.exports;
      function y$1(a2) {
        for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
          b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
        return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      if (!aa$1)
        throw Error(y$1(227));
      var ba$1 = /* @__PURE__ */ new Set(), ca$1 = {};
      function da$1(a2, b2) {
        ea$1(a2, b2);
        ea$1(a2 + "Capture", b2);
      }
      function ea$1(a2, b2) {
        ca$1[a2] = b2;
        for (a2 = 0; a2 < b2.length; a2++)
          ba$1.add(b2[a2]);
      }
      var fa$1 = !(typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined"), ha$1 = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ia$1 = Object.prototype.hasOwnProperty, ja$1 = {}, ka$1 = {};
      function la$1(a2) {
        if (ia$1.call(ka$1, a2))
          return true;
        if (ia$1.call(ja$1, a2))
          return false;
        if (ha$1.test(a2))
          return ka$1[a2] = true;
        ja$1[a2] = true;
        return false;
      }
      function ma$1(a2, b2, c2, d2) {
        if (c2 !== null && c2.type === 0)
          return false;
        switch (typeof b2) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            if (d2)
              return false;
            if (c2 !== null)
              return !c2.acceptsBooleans;
            a2 = a2.toLowerCase().slice(0, 5);
            return a2 !== "data-" && a2 !== "aria-";
          default:
            return false;
        }
      }
      function na$1(a2, b2, c2, d2) {
        if (b2 === null || typeof b2 === "undefined" || ma$1(a2, b2, c2, d2))
          return true;
        if (d2)
          return false;
        if (c2 !== null)
          switch (c2.type) {
            case 3:
              return !b2;
            case 4:
              return b2 === false;
            case 5:
              return isNaN(b2);
            case 6:
              return isNaN(b2) || 1 > b2;
          }
        return false;
      }
      function B$2(a2, b2, c2, d2, e2, f2, g2) {
        this.acceptsBooleans = b2 === 2 || b2 === 3 || b2 === 4;
        this.attributeName = d2;
        this.attributeNamespace = e2;
        this.mustUseProperty = c2;
        this.propertyName = a2;
        this.type = b2;
        this.sanitizeURL = f2;
        this.removeEmptyString = g2;
      }
      var D$2 = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a2) {
        D$2[a2] = new B$2(a2, 0, false, a2, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a2) {
        var b2 = a2[0];
        D$2[b2] = new B$2(b2, 1, false, a2[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a2) {
        D$2[a2] = new B$2(a2, 2, false, a2.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a2) {
        D$2[a2] = new B$2(a2, 2, false, a2, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a2) {
        D$2[a2] = new B$2(a2, 3, false, a2.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(a2) {
        D$2[a2] = new B$2(a2, 3, true, a2, null, false, false);
      });
      ["capture", "download"].forEach(function(a2) {
        D$2[a2] = new B$2(a2, 4, false, a2, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(a2) {
        D$2[a2] = new B$2(a2, 6, false, a2, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(a2) {
        D$2[a2] = new B$2(a2, 5, false, a2.toLowerCase(), null, false, false);
      });
      var oa$1 = /[\-:]([a-z])/g;
      function pa$1(a2) {
        return a2[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a2) {
        var b2 = a2.replace(oa$1, pa$1);
        D$2[b2] = new B$2(b2, 1, false, a2, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a2) {
        var b2 = a2.replace(oa$1, pa$1);
        D$2[b2] = new B$2(b2, 1, false, a2, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(a2) {
        var b2 = a2.replace(oa$1, pa$1);
        D$2[b2] = new B$2(b2, 1, false, a2, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(a2) {
        D$2[a2] = new B$2(a2, 1, false, a2.toLowerCase(), null, false, false);
      });
      D$2.xlinkHref = new B$2("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(a2) {
        D$2[a2] = new B$2(a2, 1, false, a2.toLowerCase(), null, true, true);
      });
      function qa$1(a2, b2, c2, d2) {
        var e2 = D$2.hasOwnProperty(b2) ? D$2[b2] : null;
        var f2 = e2 !== null ? e2.type === 0 : d2 ? false : !(2 < b2.length) || b2[0] !== "o" && b2[0] !== "O" || b2[1] !== "n" && b2[1] !== "N" ? false : true;
        f2 || (na$1(b2, c2, e2, d2) && (c2 = null), d2 || e2 === null ? la$1(b2) && (c2 === null ? a2.removeAttribute(b2) : a2.setAttribute(b2, "" + c2)) : e2.mustUseProperty ? a2[e2.propertyName] = c2 === null ? e2.type === 3 ? false : "" : c2 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, c2 === null ? a2.removeAttribute(b2) : (e2 = e2.type, c2 = e2 === 3 || e2 === 4 && c2 === true ? "" : "" + c2, d2 ? a2.setAttributeNS(d2, b2, c2) : a2.setAttribute(b2, c2))));
      }
      var ra$1 = aa$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa$1 = 60103, ta$1 = 60106, ua$1 = 60107, wa$1 = 60108, xa$1 = 60114, ya$1 = 60109, za$1 = 60110, Aa$1 = 60112, Ba$1 = 60113, Ca$1 = 60120, Da$1 = 60115, Ea$1 = 60116, Fa$1 = 60121, Ga$1 = 60128, Ha$1 = 60129, Ia$1 = 60130, Ja$1 = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var E$2 = Symbol.for;
        sa$1 = E$2("react.element");
        ta$1 = E$2("react.portal");
        ua$1 = E$2("react.fragment");
        wa$1 = E$2("react.strict_mode");
        xa$1 = E$2("react.profiler");
        ya$1 = E$2("react.provider");
        za$1 = E$2("react.context");
        Aa$1 = E$2("react.forward_ref");
        Ba$1 = E$2("react.suspense");
        Ca$1 = E$2("react.suspense_list");
        Da$1 = E$2("react.memo");
        Ea$1 = E$2("react.lazy");
        Fa$1 = E$2("react.block");
        E$2("react.scope");
        Ga$1 = E$2("react.opaque.id");
        Ha$1 = E$2("react.debug_trace_mode");
        Ia$1 = E$2("react.offscreen");
        Ja$1 = E$2("react.legacy_hidden");
      }
      var Ka$1 = typeof Symbol === "function" && Symbol.iterator;
      function La$1(a2) {
        if (a2 === null || typeof a2 !== "object")
          return null;
        a2 = Ka$1 && a2[Ka$1] || a2["@@iterator"];
        return typeof a2 === "function" ? a2 : null;
      }
      var Ma$1;
      function Na$1(a2) {
        if (Ma$1 === void 0)
          try {
            throw Error();
          } catch (c2) {
            var b2 = c2.stack.trim().match(/\n( *(at )?)/);
            Ma$1 = b2 && b2[1] || "";
          }
        return "\n" + Ma$1 + a2;
      }
      var Oa$1 = false;
      function Pa$1(a2, b2) {
        if (!a2 || Oa$1)
          return "";
        Oa$1 = true;
        var c2 = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b2)
            if (b2 = function() {
              throw Error();
            }, Object.defineProperty(b2.prototype, "props", { set: function() {
              throw Error();
            } }), typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(b2, []);
              } catch (k2) {
                var d2 = k2;
              }
              Reflect.construct(a2, [], b2);
            } else {
              try {
                b2.call();
              } catch (k2) {
                d2 = k2;
              }
              a2.call(b2.prototype);
            }
          else {
            try {
              throw Error();
            } catch (k2) {
              d2 = k2;
            }
            a2();
          }
        } catch (k2) {
          if (k2 && d2 && typeof k2.stack === "string") {
            for (var e2 = k2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e2[g2] !== f2[h2]; )
              h2--;
            for (; 1 <= g2 && 0 <= h2; g2--, h2--)
              if (e2[g2] !== f2[h2]) {
                if (g2 !== 1 || h2 !== 1) {
                  do
                    if (g2--, h2--, 0 > h2 || e2[g2] !== f2[h2])
                      return "\n" + e2[g2].replace(" at new ", " at ");
                  while (1 <= g2 && 0 <= h2);
                }
                break;
              }
          }
        } finally {
          Oa$1 = false, Error.prepareStackTrace = c2;
        }
        return (a2 = a2 ? a2.displayName || a2.name : "") ? Na$1(a2) : "";
      }
      function Qa$1(a2) {
        switch (a2.tag) {
          case 5:
            return Na$1(a2.type);
          case 16:
            return Na$1("Lazy");
          case 13:
            return Na$1("Suspense");
          case 19:
            return Na$1("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a2 = Pa$1(a2.type, false), a2;
          case 11:
            return a2 = Pa$1(a2.type.render, false), a2;
          case 22:
            return a2 = Pa$1(a2.type._render, false), a2;
          case 1:
            return a2 = Pa$1(a2.type, true), a2;
          default:
            return "";
        }
      }
      function Ra$1(a2) {
        if (a2 == null)
          return null;
        if (typeof a2 === "function")
          return a2.displayName || a2.name || null;
        if (typeof a2 === "string")
          return a2;
        switch (a2) {
          case ua$1:
            return "Fragment";
          case ta$1:
            return "Portal";
          case xa$1:
            return "Profiler";
          case wa$1:
            return "StrictMode";
          case Ba$1:
            return "Suspense";
          case Ca$1:
            return "SuspenseList";
        }
        if (typeof a2 === "object")
          switch (a2.$$typeof) {
            case za$1:
              return (a2.displayName || "Context") + ".Consumer";
            case ya$1:
              return (a2._context.displayName || "Context") + ".Provider";
            case Aa$1:
              var b2 = a2.render;
              b2 = b2.displayName || b2.name || "";
              return a2.displayName || (b2 !== "" ? "ForwardRef(" + b2 + ")" : "ForwardRef");
            case Da$1:
              return Ra$1(a2.type);
            case Fa$1:
              return Ra$1(a2._render);
            case Ea$1:
              b2 = a2._payload;
              a2 = a2._init;
              try {
                return Ra$1(a2(b2));
              } catch (c2) {
              }
          }
        return null;
      }
      function Sa$1(a2) {
        switch (typeof a2) {
          case "boolean":
          case "number":
          case "object":
          case "string":
          case "undefined":
            return a2;
          default:
            return "";
        }
      }
      function Ta$1(a2) {
        var b2 = a2.type;
        return (a2 = a2.nodeName) && a2.toLowerCase() === "input" && (b2 === "checkbox" || b2 === "radio");
      }
      function Ua$1(a2) {
        var b2 = Ta$1(a2) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a2.constructor.prototype, b2), d2 = "" + a2[b2];
        if (!a2.hasOwnProperty(b2) && typeof c2 !== "undefined" && typeof c2.get === "function" && typeof c2.set === "function") {
          var e2 = c2.get, f2 = c2.set;
          Object.defineProperty(a2, b2, { configurable: true, get: function() {
            return e2.call(this);
          }, set: function(a3) {
            d2 = "" + a3;
            f2.call(this, a3);
          } });
          Object.defineProperty(a2, b2, { enumerable: c2.enumerable });
          return { getValue: function() {
            return d2;
          }, setValue: function(a3) {
            d2 = "" + a3;
          }, stopTracking: function() {
            a2._valueTracker = null;
            delete a2[b2];
          } };
        }
      }
      function Va$1(a2) {
        a2._valueTracker || (a2._valueTracker = Ua$1(a2));
      }
      function Wa$1(a2) {
        if (!a2)
          return false;
        var b2 = a2._valueTracker;
        if (!b2)
          return true;
        var c2 = b2.getValue();
        var d2 = "";
        a2 && (d2 = Ta$1(a2) ? a2.checked ? "true" : "false" : a2.value);
        a2 = d2;
        return a2 !== c2 ? (b2.setValue(a2), true) : false;
      }
      function Xa$1(a2) {
        a2 = a2 || (typeof document !== "undefined" ? document : void 0);
        if (typeof a2 === "undefined")
          return null;
        try {
          return a2.activeElement || a2.body;
        } catch (b2) {
          return a2.body;
        }
      }
      function Ya$1(a2, b2) {
        var c2 = b2.checked;
        return m$2({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c2 != null ? c2 : a2._wrapperState.initialChecked });
      }
      function Za$1(a2, b2) {
        var c2 = b2.defaultValue == null ? "" : b2.defaultValue, d2 = b2.checked != null ? b2.checked : b2.defaultChecked;
        c2 = Sa$1(b2.value != null ? b2.value : c2);
        a2._wrapperState = { initialChecked: d2, initialValue: c2, controlled: b2.type === "checkbox" || b2.type === "radio" ? b2.checked != null : b2.value != null };
      }
      function $a$1(a2, b2) {
        b2 = b2.checked;
        b2 != null && qa$1(a2, "checked", b2, false);
      }
      function ab$1(a2, b2) {
        $a$1(a2, b2);
        var c2 = Sa$1(b2.value), d2 = b2.type;
        if (c2 != null)
          if (d2 === "number") {
            if (c2 === 0 && a2.value === "" || a2.value != c2)
              a2.value = "" + c2;
          } else
            a2.value !== "" + c2 && (a2.value = "" + c2);
        else if (d2 === "submit" || d2 === "reset") {
          a2.removeAttribute("value");
          return;
        }
        b2.hasOwnProperty("value") ? bb$1(a2, b2.type, c2) : b2.hasOwnProperty("defaultValue") && bb$1(a2, b2.type, Sa$1(b2.defaultValue));
        b2.checked == null && b2.defaultChecked != null && (a2.defaultChecked = !!b2.defaultChecked);
      }
      function cb(a2, b2, c2) {
        if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
          var d2 = b2.type;
          if (!(d2 !== "submit" && d2 !== "reset" || b2.value !== void 0 && b2.value !== null))
            return;
          b2 = "" + a2._wrapperState.initialValue;
          c2 || b2 === a2.value || (a2.value = b2);
          a2.defaultValue = b2;
        }
        c2 = a2.name;
        c2 !== "" && (a2.name = "");
        a2.defaultChecked = !!a2._wrapperState.initialChecked;
        c2 !== "" && (a2.name = c2);
      }
      function bb$1(a2, b2, c2) {
        if (b2 !== "number" || Xa$1(a2.ownerDocument) !== a2)
          c2 == null ? a2.defaultValue = "" + a2._wrapperState.initialValue : a2.defaultValue !== "" + c2 && (a2.defaultValue = "" + c2);
      }
      function db(a2) {
        var b2 = "";
        aa$1.Children.forEach(a2, function(a3) {
          a3 != null && (b2 += a3);
        });
        return b2;
      }
      function eb(a2, b2) {
        a2 = m$2({ children: void 0 }, b2);
        if (b2 = db(b2.children))
          a2.children = b2;
        return a2;
      }
      function fb(a2, b2, c2, d2) {
        a2 = a2.options;
        if (b2) {
          b2 = {};
          for (var e2 = 0; e2 < c2.length; e2++)
            b2["$" + c2[e2]] = true;
          for (c2 = 0; c2 < a2.length; c2++)
            e2 = b2.hasOwnProperty("$" + a2[c2].value), a2[c2].selected !== e2 && (a2[c2].selected = e2), e2 && d2 && (a2[c2].defaultSelected = true);
        } else {
          c2 = "" + Sa$1(c2);
          b2 = null;
          for (e2 = 0; e2 < a2.length; e2++) {
            if (a2[e2].value === c2) {
              a2[e2].selected = true;
              d2 && (a2[e2].defaultSelected = true);
              return;
            }
            b2 !== null || a2[e2].disabled || (b2 = a2[e2]);
          }
          b2 !== null && (b2.selected = true);
        }
      }
      function gb(a2, b2) {
        if (b2.dangerouslySetInnerHTML != null)
          throw Error(y$1(91));
        return m$2({}, b2, { value: void 0, defaultValue: void 0, children: "" + a2._wrapperState.initialValue });
      }
      function hb(a2, b2) {
        var c2 = b2.value;
        if (c2 == null) {
          c2 = b2.children;
          b2 = b2.defaultValue;
          if (c2 != null) {
            if (b2 != null)
              throw Error(y$1(92));
            if (Array.isArray(c2)) {
              if (!(1 >= c2.length))
                throw Error(y$1(93));
              c2 = c2[0];
            }
            b2 = c2;
          }
          b2 == null && (b2 = "");
          c2 = b2;
        }
        a2._wrapperState = { initialValue: Sa$1(c2) };
      }
      function ib(a2, b2) {
        var c2 = Sa$1(b2.value), d2 = Sa$1(b2.defaultValue);
        c2 != null && (c2 = "" + c2, c2 !== a2.value && (a2.value = c2), b2.defaultValue == null && a2.defaultValue !== c2 && (a2.defaultValue = c2));
        d2 != null && (a2.defaultValue = "" + d2);
      }
      function jb(a2) {
        var b2 = a2.textContent;
        b2 === a2._wrapperState.initialValue && b2 !== "" && b2 !== null && (a2.value = b2);
      }
      var kb = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
      function lb(a2) {
        switch (a2) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function mb(a2, b2) {
        return a2 == null || a2 === "http://www.w3.org/1999/xhtml" ? lb(b2) : a2 === "http://www.w3.org/2000/svg" && b2 === "foreignObject" ? "http://www.w3.org/1999/xhtml" : a2;
      }
      var nb, ob = function(a2) {
        return typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e2) {
          MSApp.execUnsafeLocalFunction(function() {
            return a2(b2, c2, d2, e2);
          });
        } : a2;
      }(function(a2, b2) {
        if (a2.namespaceURI !== kb.svg || "innerHTML" in a2)
          a2.innerHTML = b2;
        else {
          nb = nb || document.createElement("div");
          nb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
          for (b2 = nb.firstChild; a2.firstChild; )
            a2.removeChild(a2.firstChild);
          for (; b2.firstChild; )
            a2.appendChild(b2.firstChild);
        }
      });
      function pb(a2, b2) {
        if (b2) {
          var c2 = a2.firstChild;
          if (c2 && c2 === a2.lastChild && c2.nodeType === 3) {
            c2.nodeValue = b2;
            return;
          }
        }
        a2.textContent = b2;
      }
      var qb = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      }, rb = ["Webkit", "ms", "Moz", "O"];
      Object.keys(qb).forEach(function(a2) {
        rb.forEach(function(b2) {
          b2 = b2 + a2.charAt(0).toUpperCase() + a2.substring(1);
          qb[b2] = qb[a2];
        });
      });
      function sb(a2, b2, c2) {
        return b2 == null || typeof b2 === "boolean" || b2 === "" ? "" : c2 || typeof b2 !== "number" || b2 === 0 || qb.hasOwnProperty(a2) && qb[a2] ? ("" + b2).trim() : b2 + "px";
      }
      function tb(a2, b2) {
        a2 = a2.style;
        for (var c2 in b2)
          if (b2.hasOwnProperty(c2)) {
            var d2 = c2.indexOf("--") === 0, e2 = sb(c2, b2[c2], d2);
            c2 === "float" && (c2 = "cssFloat");
            d2 ? a2.setProperty(c2, e2) : a2[c2] = e2;
          }
      }
      var ub = m$2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
      function vb(a2, b2) {
        if (b2) {
          if (ub[a2] && (b2.children != null || b2.dangerouslySetInnerHTML != null))
            throw Error(y$1(137, a2));
          if (b2.dangerouslySetInnerHTML != null) {
            if (b2.children != null)
              throw Error(y$1(60));
            if (!(typeof b2.dangerouslySetInnerHTML === "object" && "__html" in b2.dangerouslySetInnerHTML))
              throw Error(y$1(61));
          }
          if (b2.style != null && typeof b2.style !== "object")
            throw Error(y$1(62));
        }
      }
      function wb(a2, b2) {
        if (a2.indexOf("-") === -1)
          return typeof b2.is === "string";
        switch (a2) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      function xb(a2) {
        a2 = a2.target || a2.srcElement || window;
        a2.correspondingUseElement && (a2 = a2.correspondingUseElement);
        return a2.nodeType === 3 ? a2.parentNode : a2;
      }
      var yb = null, zb = null, Ab = null;
      function Bb(a2) {
        if (a2 = Cb(a2)) {
          if (typeof yb !== "function")
            throw Error(y$1(280));
          var b2 = a2.stateNode;
          b2 && (b2 = Db(b2), yb(a2.stateNode, a2.type, b2));
        }
      }
      function Eb(a2) {
        zb ? Ab ? Ab.push(a2) : Ab = [a2] : zb = a2;
      }
      function Fb() {
        if (zb) {
          var a2 = zb, b2 = Ab;
          Ab = zb = null;
          Bb(a2);
          if (b2)
            for (a2 = 0; a2 < b2.length; a2++)
              Bb(b2[a2]);
        }
      }
      function Gb(a2, b2) {
        return a2(b2);
      }
      function Hb(a2, b2, c2, d2, e2) {
        return a2(b2, c2, d2, e2);
      }
      function Ib() {
      }
      var Jb = Gb, Kb = false, Lb = false;
      function Mb() {
        if (zb !== null || Ab !== null)
          Ib(), Fb();
      }
      function Nb(a2, b2, c2) {
        if (Lb)
          return a2(b2, c2);
        Lb = true;
        try {
          return Jb(a2, b2, c2);
        } finally {
          Lb = false, Mb();
        }
      }
      function Ob(a2, b2) {
        var c2 = a2.stateNode;
        if (c2 === null)
          return null;
        var d2 = Db(c2);
        if (d2 === null)
          return null;
        c2 = d2[b2];
        a:
          switch (b2) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (d2 = !d2.disabled) || (a2 = a2.type, d2 = !(a2 === "button" || a2 === "input" || a2 === "select" || a2 === "textarea"));
              a2 = !d2;
              break a;
            default:
              a2 = false;
          }
        if (a2)
          return null;
        if (c2 && typeof c2 !== "function")
          throw Error(y$1(231, b2, typeof c2));
        return c2;
      }
      var Pb = false;
      if (fa$1)
        try {
          var Qb = {};
          Object.defineProperty(Qb, "passive", { get: function() {
            Pb = true;
          } });
          window.addEventListener("test", Qb, Qb);
          window.removeEventListener("test", Qb, Qb);
        } catch (a2) {
          Pb = false;
        }
      function Rb(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
        var l2 = Array.prototype.slice.call(arguments, 3);
        try {
          b2.apply(c2, l2);
        } catch (n2) {
          this.onError(n2);
        }
      }
      var Sb = false, Tb = null, Ub = false, Vb = null, Wb = { onError: function(a2) {
        Sb = true;
        Tb = a2;
      } };
      function Xb(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
        Sb = false;
        Tb = null;
        Rb.apply(Wb, arguments);
      }
      function Yb(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
        Xb.apply(this, arguments);
        if (Sb) {
          if (Sb) {
            var l2 = Tb;
            Sb = false;
            Tb = null;
          } else
            throw Error(y$1(198));
          Ub || (Ub = true, Vb = l2);
        }
      }
      function Zb(a2) {
        var b2 = a2, c2 = a2;
        if (a2.alternate)
          for (; b2.return; )
            b2 = b2.return;
        else {
          a2 = b2;
          do
            b2 = a2, (b2.flags & 1026) !== 0 && (c2 = b2.return), a2 = b2.return;
          while (a2);
        }
        return b2.tag === 3 ? c2 : null;
      }
      function $b(a2) {
        if (a2.tag === 13) {
          var b2 = a2.memoizedState;
          b2 === null && (a2 = a2.alternate, a2 !== null && (b2 = a2.memoizedState));
          if (b2 !== null)
            return b2.dehydrated;
        }
        return null;
      }
      function ac(a2) {
        if (Zb(a2) !== a2)
          throw Error(y$1(188));
      }
      function bc(a2) {
        var b2 = a2.alternate;
        if (!b2) {
          b2 = Zb(a2);
          if (b2 === null)
            throw Error(y$1(188));
          return b2 !== a2 ? null : a2;
        }
        for (var c2 = a2, d2 = b2; ; ) {
          var e2 = c2.return;
          if (e2 === null)
            break;
          var f2 = e2.alternate;
          if (f2 === null) {
            d2 = e2.return;
            if (d2 !== null) {
              c2 = d2;
              continue;
            }
            break;
          }
          if (e2.child === f2.child) {
            for (f2 = e2.child; f2; ) {
              if (f2 === c2)
                return ac(e2), a2;
              if (f2 === d2)
                return ac(e2), b2;
              f2 = f2.sibling;
            }
            throw Error(y$1(188));
          }
          if (c2.return !== d2.return)
            c2 = e2, d2 = f2;
          else {
            for (var g2 = false, h2 = e2.child; h2; ) {
              if (h2 === c2) {
                g2 = true;
                c2 = e2;
                d2 = f2;
                break;
              }
              if (h2 === d2) {
                g2 = true;
                d2 = e2;
                c2 = f2;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g2) {
              for (h2 = f2.child; h2; ) {
                if (h2 === c2) {
                  g2 = true;
                  c2 = f2;
                  d2 = e2;
                  break;
                }
                if (h2 === d2) {
                  g2 = true;
                  d2 = f2;
                  c2 = e2;
                  break;
                }
                h2 = h2.sibling;
              }
              if (!g2)
                throw Error(y$1(189));
            }
          }
          if (c2.alternate !== d2)
            throw Error(y$1(190));
        }
        if (c2.tag !== 3)
          throw Error(y$1(188));
        return c2.stateNode.current === c2 ? a2 : b2;
      }
      function cc(a2) {
        a2 = bc(a2);
        if (!a2)
          return null;
        for (var b2 = a2; ; ) {
          if (b2.tag === 5 || b2.tag === 6)
            return b2;
          if (b2.child)
            b2.child.return = b2, b2 = b2.child;
          else {
            if (b2 === a2)
              break;
            for (; !b2.sibling; ) {
              if (!b2.return || b2.return === a2)
                return null;
              b2 = b2.return;
            }
            b2.sibling.return = b2.return;
            b2 = b2.sibling;
          }
        }
        return null;
      }
      function dc(a2, b2) {
        for (var c2 = a2.alternate; b2 !== null; ) {
          if (b2 === a2 || b2 === c2)
            return true;
          b2 = b2.return;
        }
        return false;
      }
      var ec, fc, gc, hc, ic = false, jc = [], kc = null, lc = null, mc = null, nc = /* @__PURE__ */ new Map(), oc = /* @__PURE__ */ new Map(), pc = [], qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function rc(a2, b2, c2, d2, e2) {
        return { blockedOn: a2, domEventName: b2, eventSystemFlags: c2 | 16, nativeEvent: e2, targetContainers: [d2] };
      }
      function sc(a2, b2) {
        switch (a2) {
          case "focusin":
          case "focusout":
            kc = null;
            break;
          case "dragenter":
          case "dragleave":
            lc = null;
            break;
          case "mouseover":
          case "mouseout":
            mc = null;
            break;
          case "pointerover":
          case "pointerout":
            nc.delete(b2.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            oc.delete(b2.pointerId);
        }
      }
      function tc(a2, b2, c2, d2, e2, f2) {
        if (a2 === null || a2.nativeEvent !== f2)
          return a2 = rc(b2, c2, d2, e2, f2), b2 !== null && (b2 = Cb(b2), b2 !== null && fc(b2)), a2;
        a2.eventSystemFlags |= d2;
        b2 = a2.targetContainers;
        e2 !== null && b2.indexOf(e2) === -1 && b2.push(e2);
        return a2;
      }
      function uc(a2, b2, c2, d2, e2) {
        switch (b2) {
          case "focusin":
            return kc = tc(kc, a2, b2, c2, d2, e2), true;
          case "dragenter":
            return lc = tc(lc, a2, b2, c2, d2, e2), true;
          case "mouseover":
            return mc = tc(mc, a2, b2, c2, d2, e2), true;
          case "pointerover":
            var f2 = e2.pointerId;
            nc.set(f2, tc(nc.get(f2) || null, a2, b2, c2, d2, e2));
            return true;
          case "gotpointercapture":
            return f2 = e2.pointerId, oc.set(f2, tc(oc.get(f2) || null, a2, b2, c2, d2, e2)), true;
        }
        return false;
      }
      function vc(a2) {
        var b2 = wc(a2.target);
        if (b2 !== null) {
          var c2 = Zb(b2);
          if (c2 !== null) {
            if (b2 = c2.tag, b2 === 13) {
              if (b2 = $b(c2), b2 !== null) {
                a2.blockedOn = b2;
                hc(a2.lanePriority, function() {
                  r$3.unstable_runWithPriority(a2.priority, function() {
                    gc(c2);
                  });
                });
                return;
              }
            } else if (b2 === 3 && c2.stateNode.hydrate) {
              a2.blockedOn = c2.tag === 3 ? c2.stateNode.containerInfo : null;
              return;
            }
          }
        }
        a2.blockedOn = null;
      }
      function xc(a2) {
        if (a2.blockedOn !== null)
          return false;
        for (var b2 = a2.targetContainers; 0 < b2.length; ) {
          var c2 = yc(a2.domEventName, a2.eventSystemFlags, b2[0], a2.nativeEvent);
          if (c2 !== null)
            return b2 = Cb(c2), b2 !== null && fc(b2), a2.blockedOn = c2, false;
          b2.shift();
        }
        return true;
      }
      function zc(a2, b2, c2) {
        xc(a2) && c2.delete(b2);
      }
      function Ac() {
        for (ic = false; 0 < jc.length; ) {
          var a2 = jc[0];
          if (a2.blockedOn !== null) {
            a2 = Cb(a2.blockedOn);
            a2 !== null && ec(a2);
            break;
          }
          for (var b2 = a2.targetContainers; 0 < b2.length; ) {
            var c2 = yc(a2.domEventName, a2.eventSystemFlags, b2[0], a2.nativeEvent);
            if (c2 !== null) {
              a2.blockedOn = c2;
              break;
            }
            b2.shift();
          }
          a2.blockedOn === null && jc.shift();
        }
        kc !== null && xc(kc) && (kc = null);
        lc !== null && xc(lc) && (lc = null);
        mc !== null && xc(mc) && (mc = null);
        nc.forEach(zc);
        oc.forEach(zc);
      }
      function Bc(a2, b2) {
        a2.blockedOn === b2 && (a2.blockedOn = null, ic || (ic = true, r$3.unstable_scheduleCallback(r$3.unstable_NormalPriority, Ac)));
      }
      function Cc(a2) {
        function b2(b3) {
          return Bc(b3, a2);
        }
        if (0 < jc.length) {
          Bc(jc[0], a2);
          for (var c2 = 1; c2 < jc.length; c2++) {
            var d2 = jc[c2];
            d2.blockedOn === a2 && (d2.blockedOn = null);
          }
        }
        kc !== null && Bc(kc, a2);
        lc !== null && Bc(lc, a2);
        mc !== null && Bc(mc, a2);
        nc.forEach(b2);
        oc.forEach(b2);
        for (c2 = 0; c2 < pc.length; c2++)
          d2 = pc[c2], d2.blockedOn === a2 && (d2.blockedOn = null);
        for (; 0 < pc.length && (c2 = pc[0], c2.blockedOn === null); )
          vc(c2), c2.blockedOn === null && pc.shift();
      }
      function Dc(a2, b2) {
        var c2 = {};
        c2[a2.toLowerCase()] = b2.toLowerCase();
        c2["Webkit" + a2] = "webkit" + b2;
        c2["Moz" + a2] = "moz" + b2;
        return c2;
      }
      var Ec = { animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd") }, Fc = {}, Gc = {};
      fa$1 && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
      function Hc(a2) {
        if (Fc[a2])
          return Fc[a2];
        if (!Ec[a2])
          return a2;
        var b2 = Ec[a2], c2;
        for (c2 in b2)
          if (b2.hasOwnProperty(c2) && c2 in Gc)
            return Fc[a2] = b2[c2];
        return a2;
      }
      var Ic = Hc("animationend"), Jc = Hc("animationiteration"), Kc = Hc("animationstart"), Lc = Hc("transitionend"), Mc = /* @__PURE__ */ new Map(), Nc = /* @__PURE__ */ new Map(), Oc = [
        "abort",
        "abort",
        Ic,
        "animationEnd",
        Jc,
        "animationIteration",
        Kc,
        "animationStart",
        "canplay",
        "canPlay",
        "canplaythrough",
        "canPlayThrough",
        "durationchange",
        "durationChange",
        "emptied",
        "emptied",
        "encrypted",
        "encrypted",
        "ended",
        "ended",
        "error",
        "error",
        "gotpointercapture",
        "gotPointerCapture",
        "load",
        "load",
        "loadeddata",
        "loadedData",
        "loadedmetadata",
        "loadedMetadata",
        "loadstart",
        "loadStart",
        "lostpointercapture",
        "lostPointerCapture",
        "playing",
        "playing",
        "progress",
        "progress",
        "seeking",
        "seeking",
        "stalled",
        "stalled",
        "suspend",
        "suspend",
        "timeupdate",
        "timeUpdate",
        Lc,
        "transitionEnd",
        "waiting",
        "waiting"
      ];
      function Pc(a2, b2) {
        for (var c2 = 0; c2 < a2.length; c2 += 2) {
          var d2 = a2[c2], e2 = a2[c2 + 1];
          e2 = "on" + (e2[0].toUpperCase() + e2.slice(1));
          Nc.set(d2, b2);
          Mc.set(d2, e2);
          da$1(e2, [d2]);
        }
      }
      var Qc = r$3.unstable_now;
      Qc();
      var F$2 = 8;
      function Rc(a2) {
        if ((1 & a2) !== 0)
          return F$2 = 15, 1;
        if ((2 & a2) !== 0)
          return F$2 = 14, 2;
        if ((4 & a2) !== 0)
          return F$2 = 13, 4;
        var b2 = 24 & a2;
        if (b2 !== 0)
          return F$2 = 12, b2;
        if ((a2 & 32) !== 0)
          return F$2 = 11, 32;
        b2 = 192 & a2;
        if (b2 !== 0)
          return F$2 = 10, b2;
        if ((a2 & 256) !== 0)
          return F$2 = 9, 256;
        b2 = 3584 & a2;
        if (b2 !== 0)
          return F$2 = 8, b2;
        if ((a2 & 4096) !== 0)
          return F$2 = 7, 4096;
        b2 = 4186112 & a2;
        if (b2 !== 0)
          return F$2 = 6, b2;
        b2 = 62914560 & a2;
        if (b2 !== 0)
          return F$2 = 5, b2;
        if (a2 & 67108864)
          return F$2 = 4, 67108864;
        if ((a2 & 134217728) !== 0)
          return F$2 = 3, 134217728;
        b2 = 805306368 & a2;
        if (b2 !== 0)
          return F$2 = 2, b2;
        if ((1073741824 & a2) !== 0)
          return F$2 = 1, 1073741824;
        F$2 = 8;
        return a2;
      }
      function Sc(a2) {
        switch (a2) {
          case 99:
            return 15;
          case 98:
            return 10;
          case 97:
          case 96:
            return 8;
          case 95:
            return 2;
          default:
            return 0;
        }
      }
      function Tc(a2) {
        switch (a2) {
          case 15:
          case 14:
            return 99;
          case 13:
          case 12:
          case 11:
          case 10:
            return 98;
          case 9:
          case 8:
          case 7:
          case 6:
          case 4:
          case 5:
            return 97;
          case 3:
          case 2:
          case 1:
            return 95;
          case 0:
            return 90;
          default:
            throw Error(y$1(358, a2));
        }
      }
      function Uc(a2, b2) {
        var c2 = a2.pendingLanes;
        if (c2 === 0)
          return F$2 = 0;
        var d2 = 0, e2 = 0, f2 = a2.expiredLanes, g2 = a2.suspendedLanes, h2 = a2.pingedLanes;
        if (f2 !== 0)
          d2 = f2, e2 = F$2 = 15;
        else if (f2 = c2 & 134217727, f2 !== 0) {
          var k2 = f2 & ~g2;
          k2 !== 0 ? (d2 = Rc(k2), e2 = F$2) : (h2 &= f2, h2 !== 0 && (d2 = Rc(h2), e2 = F$2));
        } else
          f2 = c2 & ~g2, f2 !== 0 ? (d2 = Rc(f2), e2 = F$2) : h2 !== 0 && (d2 = Rc(h2), e2 = F$2);
        if (d2 === 0)
          return 0;
        d2 = 31 - Vc(d2);
        d2 = c2 & ((0 > d2 ? 0 : 1 << d2) << 1) - 1;
        if (b2 !== 0 && b2 !== d2 && (b2 & g2) === 0) {
          Rc(b2);
          if (e2 <= F$2)
            return b2;
          F$2 = e2;
        }
        b2 = a2.entangledLanes;
        if (b2 !== 0)
          for (a2 = a2.entanglements, b2 &= d2; 0 < b2; )
            c2 = 31 - Vc(b2), e2 = 1 << c2, d2 |= a2[c2], b2 &= ~e2;
        return d2;
      }
      function Wc(a2) {
        a2 = a2.pendingLanes & -1073741825;
        return a2 !== 0 ? a2 : a2 & 1073741824 ? 1073741824 : 0;
      }
      function Xc(a2, b2) {
        switch (a2) {
          case 15:
            return 1;
          case 14:
            return 2;
          case 12:
            return a2 = Yc(24 & ~b2), a2 === 0 ? Xc(10, b2) : a2;
          case 10:
            return a2 = Yc(192 & ~b2), a2 === 0 ? Xc(8, b2) : a2;
          case 8:
            return a2 = Yc(3584 & ~b2), a2 === 0 && (a2 = Yc(4186112 & ~b2), a2 === 0 && (a2 = 512)), a2;
          case 2:
            return b2 = Yc(805306368 & ~b2), b2 === 0 && (b2 = 268435456), b2;
        }
        throw Error(y$1(358, a2));
      }
      function Yc(a2) {
        return a2 & -a2;
      }
      function Zc(a2) {
        for (var b2 = [], c2 = 0; 31 > c2; c2++)
          b2.push(a2);
        return b2;
      }
      function $c(a2, b2, c2) {
        a2.pendingLanes |= b2;
        var d2 = b2 - 1;
        a2.suspendedLanes &= d2;
        a2.pingedLanes &= d2;
        a2 = a2.eventTimes;
        b2 = 31 - Vc(b2);
        a2[b2] = c2;
      }
      var Vc = Math.clz32 ? Math.clz32 : ad, bd = Math.log, cd = Math.LN2;
      function ad(a2) {
        return a2 === 0 ? 32 : 31 - (bd(a2) / cd | 0) | 0;
      }
      var dd = r$3.unstable_UserBlockingPriority, ed = r$3.unstable_runWithPriority, fd = true;
      function gd(a2, b2, c2, d2) {
        Kb || Ib();
        var e2 = hd, f2 = Kb;
        Kb = true;
        try {
          Hb(e2, a2, b2, c2, d2);
        } finally {
          (Kb = f2) || Mb();
        }
      }
      function id(a2, b2, c2, d2) {
        ed(dd, hd.bind(null, a2, b2, c2, d2));
      }
      function hd(a2, b2, c2, d2) {
        if (fd) {
          var e2;
          if ((e2 = (b2 & 4) === 0) && 0 < jc.length && -1 < qc.indexOf(a2))
            a2 = rc(null, a2, b2, c2, d2), jc.push(a2);
          else {
            var f2 = yc(a2, b2, c2, d2);
            if (f2 === null)
              e2 && sc(a2, d2);
            else {
              if (e2) {
                if (-1 < qc.indexOf(a2)) {
                  a2 = rc(f2, a2, b2, c2, d2);
                  jc.push(a2);
                  return;
                }
                if (uc(f2, a2, b2, c2, d2))
                  return;
                sc(a2, d2);
              }
              jd(a2, b2, d2, null, c2);
            }
          }
        }
      }
      function yc(a2, b2, c2, d2) {
        var e2 = xb(d2);
        e2 = wc(e2);
        if (e2 !== null) {
          var f2 = Zb(e2);
          if (f2 === null)
            e2 = null;
          else {
            var g2 = f2.tag;
            if (g2 === 13) {
              e2 = $b(f2);
              if (e2 !== null)
                return e2;
              e2 = null;
            } else if (g2 === 3) {
              if (f2.stateNode.hydrate)
                return f2.tag === 3 ? f2.stateNode.containerInfo : null;
              e2 = null;
            } else
              f2 !== e2 && (e2 = null);
          }
        }
        jd(a2, b2, d2, e2, c2);
        return null;
      }
      var kd = null, ld = null, md = null;
      function nd() {
        if (md)
          return md;
        var a2, b2 = ld, c2 = b2.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
        for (a2 = 0; a2 < c2 && b2[a2] === e2[a2]; a2++)
          ;
        var g2 = c2 - a2;
        for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e2[f2 - d2]; d2++)
          ;
        return md = e2.slice(a2, 1 < d2 ? 1 - d2 : void 0);
      }
      function od(a2) {
        var b2 = a2.keyCode;
        "charCode" in a2 ? (a2 = a2.charCode, a2 === 0 && b2 === 13 && (a2 = 13)) : a2 = b2;
        a2 === 10 && (a2 = 13);
        return 32 <= a2 || a2 === 13 ? a2 : 0;
      }
      function pd() {
        return true;
      }
      function qd() {
        return false;
      }
      function rd(a2) {
        function b2(b3, d2, e2, f2, g2) {
          this._reactName = b3;
          this._targetInst = e2;
          this.type = d2;
          this.nativeEvent = f2;
          this.target = g2;
          this.currentTarget = null;
          for (var c2 in a2)
            a2.hasOwnProperty(c2) && (b3 = a2[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
          this.isDefaultPrevented = (f2.defaultPrevented != null ? f2.defaultPrevented : f2.returnValue === false) ? pd : qd;
          this.isPropagationStopped = qd;
          return this;
        }
        m$2(b2.prototype, { preventDefault: function() {
          this.defaultPrevented = true;
          var a3 = this.nativeEvent;
          a3 && (a3.preventDefault ? a3.preventDefault() : typeof a3.returnValue !== "unknown" && (a3.returnValue = false), this.isDefaultPrevented = pd);
        }, stopPropagation: function() {
          var a3 = this.nativeEvent;
          a3 && (a3.stopPropagation ? a3.stopPropagation() : typeof a3.cancelBubble !== "unknown" && (a3.cancelBubble = true), this.isPropagationStopped = pd);
        }, persist: function() {
        }, isPersistent: pd });
        return b2;
      }
      var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a2) {
        return a2.timeStamp || Date.now();
      }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = m$2({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = m$2({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a2) {
        return a2.relatedTarget === void 0 ? a2.fromElement === a2.srcElement ? a2.toElement : a2.fromElement : a2.relatedTarget;
      }, movementX: function(a2) {
        if ("movementX" in a2)
          return a2.movementX;
        a2 !== yd && (yd && a2.type === "mousemove" ? (wd = a2.screenX - yd.screenX, xd = a2.screenY - yd.screenY) : xd = wd = 0, yd = a2);
        return wd;
      }, movementY: function(a2) {
        return "movementY" in a2 ? a2.movementY : xd;
      } }), Bd = rd(Ad), Cd = m$2({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = m$2({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = m$2({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = m$2({}, sd, { clipboardData: function(a2) {
        return "clipboardData" in a2 ? a2.clipboardData : window.clipboardData;
      } }), Jd = rd(Id), Kd = m$2({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      }, Nd = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
      function Pd(a2) {
        var b2 = this.nativeEvent;
        return b2.getModifierState ? b2.getModifierState(a2) : (a2 = Od[a2]) ? !!b2[a2] : false;
      }
      function zd() {
        return Pd;
      }
      var Qd = m$2({}, ud, { key: function(a2) {
        if (a2.key) {
          var b2 = Md[a2.key] || a2.key;
          if (b2 !== "Unidentified")
            return b2;
        }
        return a2.type === "keypress" ? (a2 = od(a2), a2 === 13 ? "Enter" : String.fromCharCode(a2)) : a2.type === "keydown" || a2.type === "keyup" ? Nd[a2.keyCode] || "Unidentified" : "";
      }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a2) {
        return a2.type === "keypress" ? od(a2) : 0;
      }, keyCode: function(a2) {
        return a2.type === "keydown" || a2.type === "keyup" ? a2.keyCode : 0;
      }, which: function(a2) {
        return a2.type === "keypress" ? od(a2) : a2.type === "keydown" || a2.type === "keyup" ? a2.keyCode : 0;
      } }), Rd = rd(Qd), Sd = m$2({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = m$2({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = m$2({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = m$2({}, Ad, {
        deltaX: function(a2) {
          return "deltaX" in a2 ? a2.deltaX : "wheelDeltaX" in a2 ? -a2.wheelDeltaX : 0;
        },
        deltaY: function(a2) {
          return "deltaY" in a2 ? a2.deltaY : "wheelDeltaY" in a2 ? -a2.wheelDeltaY : "wheelDelta" in a2 ? -a2.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = fa$1 && "CompositionEvent" in window, be = null;
      fa$1 && "documentMode" in document && (be = document.documentMode);
      var ce = fa$1 && "TextEvent" in window && !be, de = fa$1 && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
      function ge(a2, b2) {
        switch (a2) {
          case "keyup":
            return $d.indexOf(b2.keyCode) !== -1;
          case "keydown":
            return b2.keyCode !== 229;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function he(a2) {
        a2 = a2.detail;
        return typeof a2 === "object" && "data" in a2 ? a2.data : null;
      }
      var ie = false;
      function je(a2, b2) {
        switch (a2) {
          case "compositionend":
            return he(b2);
          case "keypress":
            if (b2.which !== 32)
              return null;
            fe = true;
            return ee;
          case "textInput":
            return a2 = b2.data, a2 === ee && fe ? null : a2;
          default:
            return null;
        }
      }
      function ke(a2, b2) {
        if (ie)
          return a2 === "compositionend" || !ae && ge(a2, b2) ? (a2 = nd(), md = ld = kd = null, ie = false, a2) : null;
        switch (a2) {
          case "paste":
            return null;
          case "keypress":
            if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
              if (b2.char && 1 < b2.char.length)
                return b2.char;
              if (b2.which)
                return String.fromCharCode(b2.which);
            }
            return null;
          case "compositionend":
            return de && b2.locale !== "ko" ? null : b2.data;
          default:
            return null;
        }
      }
      var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
      function me(a2) {
        var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
        return b2 === "input" ? !!le[a2.type] : b2 === "textarea" ? true : false;
      }
      function ne(a2, b2, c2, d2) {
        Eb(d2);
        b2 = oe(b2, "onChange");
        0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a2.push({ event: c2, listeners: b2 }));
      }
      var pe = null, qe = null;
      function re(a2) {
        se(a2, 0);
      }
      function te(a2) {
        var b2 = ue(a2);
        if (Wa$1(b2))
          return a2;
      }
      function ve(a2, b2) {
        if (a2 === "change")
          return b2;
      }
      var we = false;
      if (fa$1) {
        var xe;
        if (fa$1) {
          var ye = "oninput" in document;
          if (!ye) {
            var ze = document.createElement("div");
            ze.setAttribute("oninput", "return;");
            ye = typeof ze.oninput === "function";
          }
          xe = ye;
        } else
          xe = false;
        we = xe && (!document.documentMode || 9 < document.documentMode);
      }
      function Ae() {
        pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
      }
      function Be(a2) {
        if (a2.propertyName === "value" && te(qe)) {
          var b2 = [];
          ne(b2, qe, a2, xb(a2));
          a2 = re;
          if (Kb)
            a2(b2);
          else {
            Kb = true;
            try {
              Gb(a2, b2);
            } finally {
              Kb = false, Mb();
            }
          }
        }
      }
      function Ce(a2, b2, c2) {
        a2 === "focusin" ? (Ae(), pe = b2, qe = c2, pe.attachEvent("onpropertychange", Be)) : a2 === "focusout" && Ae();
      }
      function De(a2) {
        if (a2 === "selectionchange" || a2 === "keyup" || a2 === "keydown")
          return te(qe);
      }
      function Ee(a2, b2) {
        if (a2 === "click")
          return te(b2);
      }
      function Fe(a2, b2) {
        if (a2 === "input" || a2 === "change")
          return te(b2);
      }
      function Ge(a2, b2) {
        return a2 === b2 && (a2 !== 0 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
      }
      var He = typeof Object.is === "function" ? Object.is : Ge, Ie = Object.prototype.hasOwnProperty;
      function Je(a2, b2) {
        if (He(a2, b2))
          return true;
        if (typeof a2 !== "object" || a2 === null || typeof b2 !== "object" || b2 === null)
          return false;
        var c2 = Object.keys(a2), d2 = Object.keys(b2);
        if (c2.length !== d2.length)
          return false;
        for (d2 = 0; d2 < c2.length; d2++)
          if (!Ie.call(b2, c2[d2]) || !He(a2[c2[d2]], b2[c2[d2]]))
            return false;
        return true;
      }
      function Ke(a2) {
        for (; a2 && a2.firstChild; )
          a2 = a2.firstChild;
        return a2;
      }
      function Le(a2, b2) {
        var c2 = Ke(a2);
        a2 = 0;
        for (var d2; c2; ) {
          if (c2.nodeType === 3) {
            d2 = a2 + c2.textContent.length;
            if (a2 <= b2 && d2 >= b2)
              return { node: c2, offset: b2 - a2 };
            a2 = d2;
          }
          a: {
            for (; c2; ) {
              if (c2.nextSibling) {
                c2 = c2.nextSibling;
                break a;
              }
              c2 = c2.parentNode;
            }
            c2 = void 0;
          }
          c2 = Ke(c2);
        }
      }
      function Me(a2, b2) {
        return a2 && b2 ? a2 === b2 ? true : a2 && a2.nodeType === 3 ? false : b2 && b2.nodeType === 3 ? Me(a2, b2.parentNode) : "contains" in a2 ? a2.contains(b2) : a2.compareDocumentPosition ? !!(a2.compareDocumentPosition(b2) & 16) : false : false;
      }
      function Ne() {
        for (var a2 = window, b2 = Xa$1(); b2 instanceof a2.HTMLIFrameElement; ) {
          try {
            var c2 = typeof b2.contentWindow.location.href === "string";
          } catch (d2) {
            c2 = false;
          }
          if (c2)
            a2 = b2.contentWindow;
          else
            break;
          b2 = Xa$1(a2.document);
        }
        return b2;
      }
      function Oe(a2) {
        var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
        return b2 && (b2 === "input" && (a2.type === "text" || a2.type === "search" || a2.type === "tel" || a2.type === "url" || a2.type === "password") || b2 === "textarea" || a2.contentEditable === "true");
      }
      var Pe = fa$1 && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
      function Ue(a2, b2, c2) {
        var d2 = c2.window === c2 ? c2.document : c2.nodeType === 9 ? c2 : c2.ownerDocument;
        Te || Qe == null || Qe !== Xa$1(d2) || (d2 = Qe, "selectionStart" in d2 && Oe(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Je(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a2.push({ event: b2, listeners: d2 }), b2.target = Qe)));
      }
      Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
      Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
      Pc(Oc, 2);
      for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++)
        Nc.set(Ve[We], 0);
      ea$1("onMouseEnter", ["mouseout", "mouseover"]);
      ea$1("onMouseLeave", ["mouseout", "mouseover"]);
      ea$1("onPointerEnter", ["pointerout", "pointerover"]);
      ea$1("onPointerLeave", ["pointerout", "pointerover"]);
      da$1("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      da$1("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      da$1("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      da$1("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      da$1("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      da$1("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
      function Ze(a2, b2, c2) {
        var d2 = a2.type || "unknown-event";
        a2.currentTarget = c2;
        Yb(d2, b2, void 0, a2);
        a2.currentTarget = null;
      }
      function se(a2, b2) {
        b2 = (b2 & 4) !== 0;
        for (var c2 = 0; c2 < a2.length; c2++) {
          var d2 = a2[c2], e2 = d2.event;
          d2 = d2.listeners;
          a: {
            var f2 = void 0;
            if (b2)
              for (var g2 = d2.length - 1; 0 <= g2; g2--) {
                var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
                h2 = h2.listener;
                if (k2 !== f2 && e2.isPropagationStopped())
                  break a;
                Ze(e2, h2, l2);
                f2 = k2;
              }
            else
              for (g2 = 0; g2 < d2.length; g2++) {
                h2 = d2[g2];
                k2 = h2.instance;
                l2 = h2.currentTarget;
                h2 = h2.listener;
                if (k2 !== f2 && e2.isPropagationStopped())
                  break a;
                Ze(e2, h2, l2);
                f2 = k2;
              }
          }
        }
        if (Ub)
          throw a2 = Vb, Ub = false, Vb = null, a2;
      }
      function G$1(a2, b2) {
        var c2 = $e(b2), d2 = a2 + "__bubble";
        c2.has(d2) || (af(b2, a2, 2, false), c2.add(d2));
      }
      var bf = "_reactListening" + Math.random().toString(36).slice(2);
      function cf(a2) {
        a2[bf] || (a2[bf] = true, ba$1.forEach(function(b2) {
          Ye.has(b2) || df(b2, false, a2, null);
          df(b2, true, a2, null);
        }));
      }
      function df(a2, b2, c2, d2) {
        var e2 = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 0, f2 = c2;
        a2 === "selectionchange" && c2.nodeType !== 9 && (f2 = c2.ownerDocument);
        if (d2 !== null && !b2 && Ye.has(a2)) {
          if (a2 !== "scroll")
            return;
          e2 |= 2;
          f2 = d2;
        }
        var g2 = $e(f2), h2 = a2 + "__" + (b2 ? "capture" : "bubble");
        g2.has(h2) || (b2 && (e2 |= 4), af(f2, a2, e2, b2), g2.add(h2));
      }
      function af(a2, b2, c2, d2) {
        var e2 = Nc.get(b2);
        switch (e2 === void 0 ? 2 : e2) {
          case 0:
            e2 = gd;
            break;
          case 1:
            e2 = id;
            break;
          default:
            e2 = hd;
        }
        c2 = e2.bind(null, b2, c2, a2);
        e2 = void 0;
        !Pb || b2 !== "touchstart" && b2 !== "touchmove" && b2 !== "wheel" || (e2 = true);
        d2 ? e2 !== void 0 ? a2.addEventListener(b2, c2, { capture: true, passive: e2 }) : a2.addEventListener(b2, c2, true) : e2 !== void 0 ? a2.addEventListener(b2, c2, { passive: e2 }) : a2.addEventListener(b2, c2, false);
      }
      function jd(a2, b2, c2, d2, e2) {
        var f2 = d2;
        if ((b2 & 1) === 0 && (b2 & 2) === 0 && d2 !== null)
          a:
            for (; ; ) {
              if (d2 === null)
                return;
              var g2 = d2.tag;
              if (g2 === 3 || g2 === 4) {
                var h2 = d2.stateNode.containerInfo;
                if (h2 === e2 || h2.nodeType === 8 && h2.parentNode === e2)
                  break;
                if (g2 === 4)
                  for (g2 = d2.return; g2 !== null; ) {
                    var k2 = g2.tag;
                    if (k2 === 3 || k2 === 4) {
                      if (k2 = g2.stateNode.containerInfo, k2 === e2 || k2.nodeType === 8 && k2.parentNode === e2)
                        return;
                    }
                    g2 = g2.return;
                  }
                for (; h2 !== null; ) {
                  g2 = wc(h2);
                  if (g2 === null)
                    return;
                  k2 = g2.tag;
                  if (k2 === 5 || k2 === 6) {
                    d2 = f2 = g2;
                    continue a;
                  }
                  h2 = h2.parentNode;
                }
              }
              d2 = d2.return;
            }
        Nb(function() {
          var d3 = f2, e3 = xb(c2), g3 = [];
          a: {
            var h3 = Mc.get(a2);
            if (h3 !== void 0) {
              var k3 = td, x2 = a2;
              switch (a2) {
                case "keypress":
                  if (od(c2) === 0)
                    break a;
                case "keydown":
                case "keyup":
                  k3 = Rd;
                  break;
                case "focusin":
                  x2 = "focus";
                  k3 = Fd;
                  break;
                case "focusout":
                  x2 = "blur";
                  k3 = Fd;
                  break;
                case "beforeblur":
                case "afterblur":
                  k3 = Fd;
                  break;
                case "click":
                  if (c2.button === 2)
                    break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  k3 = Bd;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  k3 = Dd;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  k3 = Vd;
                  break;
                case Ic:
                case Jc:
                case Kc:
                  k3 = Hd;
                  break;
                case Lc:
                  k3 = Xd;
                  break;
                case "scroll":
                  k3 = vd;
                  break;
                case "wheel":
                  k3 = Zd;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  k3 = Jd;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  k3 = Td;
              }
              var w2 = (b2 & 4) !== 0, z2 = !w2 && a2 === "scroll", u2 = w2 ? h3 !== null ? h3 + "Capture" : null : h3;
              w2 = [];
              for (var t2 = d3, q2; t2 !== null; ) {
                q2 = t2;
                var v2 = q2.stateNode;
                q2.tag === 5 && v2 !== null && (q2 = v2, u2 !== null && (v2 = Ob(t2, u2), v2 != null && w2.push(ef(t2, v2, q2))));
                if (z2)
                  break;
                t2 = t2.return;
              }
              0 < w2.length && (h3 = new k3(h3, x2, null, c2, e3), g3.push({ event: h3, listeners: w2 }));
            }
          }
          if ((b2 & 7) === 0) {
            a: {
              h3 = a2 === "mouseover" || a2 === "pointerover";
              k3 = a2 === "mouseout" || a2 === "pointerout";
              if (h3 && (b2 & 16) === 0 && (x2 = c2.relatedTarget || c2.fromElement) && (wc(x2) || x2[ff]))
                break a;
              if (k3 || h3) {
                h3 = e3.window === e3 ? e3 : (h3 = e3.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
                if (k3) {
                  if (x2 = c2.relatedTarget || c2.toElement, k3 = d3, x2 = x2 ? wc(x2) : null, x2 !== null && (z2 = Zb(x2), x2 !== z2 || x2.tag !== 5 && x2.tag !== 6))
                    x2 = null;
                } else
                  k3 = null, x2 = d3;
                if (k3 !== x2) {
                  w2 = Bd;
                  v2 = "onMouseLeave";
                  u2 = "onMouseEnter";
                  t2 = "mouse";
                  if (a2 === "pointerout" || a2 === "pointerover")
                    w2 = Td, v2 = "onPointerLeave", u2 = "onPointerEnter", t2 = "pointer";
                  z2 = k3 == null ? h3 : ue(k3);
                  q2 = x2 == null ? h3 : ue(x2);
                  h3 = new w2(v2, t2 + "leave", k3, c2, e3);
                  h3.target = z2;
                  h3.relatedTarget = q2;
                  v2 = null;
                  wc(e3) === d3 && (w2 = new w2(u2, t2 + "enter", x2, c2, e3), w2.target = q2, w2.relatedTarget = z2, v2 = w2);
                  z2 = v2;
                  if (k3 && x2)
                    b: {
                      w2 = k3;
                      u2 = x2;
                      t2 = 0;
                      for (q2 = w2; q2; q2 = gf(q2))
                        t2++;
                      q2 = 0;
                      for (v2 = u2; v2; v2 = gf(v2))
                        q2++;
                      for (; 0 < t2 - q2; )
                        w2 = gf(w2), t2--;
                      for (; 0 < q2 - t2; )
                        u2 = gf(u2), q2--;
                      for (; t2--; ) {
                        if (w2 === u2 || u2 !== null && w2 === u2.alternate)
                          break b;
                        w2 = gf(w2);
                        u2 = gf(u2);
                      }
                      w2 = null;
                    }
                  else
                    w2 = null;
                  k3 !== null && hf(g3, h3, k3, w2, false);
                  x2 !== null && z2 !== null && hf(g3, z2, x2, w2, true);
                }
              }
            }
            a: {
              h3 = d3 ? ue(d3) : window;
              k3 = h3.nodeName && h3.nodeName.toLowerCase();
              if (k3 === "select" || k3 === "input" && h3.type === "file")
                var J2 = ve;
              else if (me(h3))
                if (we)
                  J2 = Fe;
                else {
                  J2 = De;
                  var K2 = Ce;
                }
              else
                (k3 = h3.nodeName) && k3.toLowerCase() === "input" && (h3.type === "checkbox" || h3.type === "radio") && (J2 = Ee);
              if (J2 && (J2 = J2(a2, d3))) {
                ne(g3, J2, c2, e3);
                break a;
              }
              K2 && K2(a2, h3, d3);
              a2 === "focusout" && (K2 = h3._wrapperState) && K2.controlled && h3.type === "number" && bb$1(h3, "number", h3.value);
            }
            K2 = d3 ? ue(d3) : window;
            switch (a2) {
              case "focusin":
                if (me(K2) || K2.contentEditable === "true")
                  Qe = K2, Re = d3, Se = null;
                break;
              case "focusout":
                Se = Re = Qe = null;
                break;
              case "mousedown":
                Te = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                Te = false;
                Ue(g3, c2, e3);
                break;
              case "selectionchange":
                if (Pe)
                  break;
              case "keydown":
              case "keyup":
                Ue(g3, c2, e3);
            }
            var Q2;
            if (ae)
              b: {
                switch (a2) {
                  case "compositionstart":
                    var L2 = "onCompositionStart";
                    break b;
                  case "compositionend":
                    L2 = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    L2 = "onCompositionUpdate";
                    break b;
                }
                L2 = void 0;
              }
            else
              ie ? ge(a2, c2) && (L2 = "onCompositionEnd") : a2 === "keydown" && c2.keyCode === 229 && (L2 = "onCompositionStart");
            L2 && (de && c2.locale !== "ko" && (ie || L2 !== "onCompositionStart" ? L2 === "onCompositionEnd" && ie && (Q2 = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), K2 = oe(d3, L2), 0 < K2.length && (L2 = new Ld(L2, a2, null, c2, e3), g3.push({ event: L2, listeners: K2 }), Q2 ? L2.data = Q2 : (Q2 = he(c2), Q2 !== null && (L2.data = Q2))));
            if (Q2 = ce ? je(a2, c2) : ke(a2, c2))
              d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld("onBeforeInput", "beforeinput", null, c2, e3), g3.push({ event: e3, listeners: d3 }), e3.data = Q2);
          }
          se(g3, b2);
        });
      }
      function ef(a2, b2, c2) {
        return { instance: a2, listener: b2, currentTarget: c2 };
      }
      function oe(a2, b2) {
        for (var c2 = b2 + "Capture", d2 = []; a2 !== null; ) {
          var e2 = a2, f2 = e2.stateNode;
          e2.tag === 5 && f2 !== null && (e2 = f2, f2 = Ob(a2, c2), f2 != null && d2.unshift(ef(a2, f2, e2)), f2 = Ob(a2, b2), f2 != null && d2.push(ef(a2, f2, e2)));
          a2 = a2.return;
        }
        return d2;
      }
      function gf(a2) {
        if (a2 === null)
          return null;
        do
          a2 = a2.return;
        while (a2 && a2.tag !== 5);
        return a2 ? a2 : null;
      }
      function hf(a2, b2, c2, d2, e2) {
        for (var f2 = b2._reactName, g2 = []; c2 !== null && c2 !== d2; ) {
          var h2 = c2, k2 = h2.alternate, l2 = h2.stateNode;
          if (k2 !== null && k2 === d2)
            break;
          h2.tag === 5 && l2 !== null && (h2 = l2, e2 ? (k2 = Ob(c2, f2), k2 != null && g2.unshift(ef(c2, k2, h2))) : e2 || (k2 = Ob(c2, f2), k2 != null && g2.push(ef(c2, k2, h2))));
          c2 = c2.return;
        }
        g2.length !== 0 && a2.push({ event: b2, listeners: g2 });
      }
      function jf() {
      }
      var kf = null, lf = null;
      function mf(a2, b2) {
        switch (a2) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!b2.autoFocus;
        }
        return false;
      }
      function nf(a2, b2) {
        return a2 === "textarea" || a2 === "option" || a2 === "noscript" || typeof b2.children === "string" || typeof b2.children === "number" || typeof b2.dangerouslySetInnerHTML === "object" && b2.dangerouslySetInnerHTML !== null && b2.dangerouslySetInnerHTML.__html != null;
      }
      var of = typeof setTimeout === "function" ? setTimeout : void 0, pf = typeof clearTimeout === "function" ? clearTimeout : void 0;
      function qf(a2) {
        a2.nodeType === 1 ? a2.textContent = "" : a2.nodeType === 9 && (a2 = a2.body, a2 != null && (a2.textContent = ""));
      }
      function rf(a2) {
        for (; a2 != null; a2 = a2.nextSibling) {
          var b2 = a2.nodeType;
          if (b2 === 1 || b2 === 3)
            break;
        }
        return a2;
      }
      function sf(a2) {
        a2 = a2.previousSibling;
        for (var b2 = 0; a2; ) {
          if (a2.nodeType === 8) {
            var c2 = a2.data;
            if (c2 === "$" || c2 === "$!" || c2 === "$?") {
              if (b2 === 0)
                return a2;
              b2--;
            } else
              c2 === "/$" && b2++;
          }
          a2 = a2.previousSibling;
        }
        return null;
      }
      var tf = 0;
      function uf(a2) {
        return { $$typeof: Ga$1, toString: a2, valueOf: a2 };
      }
      var vf = Math.random().toString(36).slice(2), wf = "__reactFiber$" + vf, xf = "__reactProps$" + vf, ff = "__reactContainer$" + vf, yf = "__reactEvents$" + vf;
      function wc(a2) {
        var b2 = a2[wf];
        if (b2)
          return b2;
        for (var c2 = a2.parentNode; c2; ) {
          if (b2 = c2[ff] || c2[wf]) {
            c2 = b2.alternate;
            if (b2.child !== null || c2 !== null && c2.child !== null)
              for (a2 = sf(a2); a2 !== null; ) {
                if (c2 = a2[wf])
                  return c2;
                a2 = sf(a2);
              }
            return b2;
          }
          a2 = c2;
          c2 = a2.parentNode;
        }
        return null;
      }
      function Cb(a2) {
        a2 = a2[wf] || a2[ff];
        return !a2 || a2.tag !== 5 && a2.tag !== 6 && a2.tag !== 13 && a2.tag !== 3 ? null : a2;
      }
      function ue(a2) {
        if (a2.tag === 5 || a2.tag === 6)
          return a2.stateNode;
        throw Error(y$1(33));
      }
      function Db(a2) {
        return a2[xf] || null;
      }
      function $e(a2) {
        var b2 = a2[yf];
        b2 === void 0 && (b2 = a2[yf] = /* @__PURE__ */ new Set());
        return b2;
      }
      var zf = [], Af = -1;
      function Bf(a2) {
        return { current: a2 };
      }
      function H$1(a2) {
        0 > Af || (a2.current = zf[Af], zf[Af] = null, Af--);
      }
      function I$2(a2, b2) {
        Af++;
        zf[Af] = a2.current;
        a2.current = b2;
      }
      var Cf = {}, M$2 = Bf(Cf), N$1 = Bf(false), Df = Cf;
      function Ef(a2, b2) {
        var c2 = a2.type.contextTypes;
        if (!c2)
          return Cf;
        var d2 = a2.stateNode;
        if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
          return d2.__reactInternalMemoizedMaskedChildContext;
        var e2 = {}, f2;
        for (f2 in c2)
          e2[f2] = b2[f2];
        d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = b2, a2.__reactInternalMemoizedMaskedChildContext = e2);
        return e2;
      }
      function Ff(a2) {
        a2 = a2.childContextTypes;
        return a2 !== null && a2 !== void 0;
      }
      function Gf() {
        H$1(N$1);
        H$1(M$2);
      }
      function Hf(a2, b2, c2) {
        if (M$2.current !== Cf)
          throw Error(y$1(168));
        I$2(M$2, b2);
        I$2(N$1, c2);
      }
      function If(a2, b2, c2) {
        var d2 = a2.stateNode;
        a2 = b2.childContextTypes;
        if (typeof d2.getChildContext !== "function")
          return c2;
        d2 = d2.getChildContext();
        for (var e2 in d2)
          if (!(e2 in a2))
            throw Error(y$1(108, Ra$1(b2) || "Unknown", e2));
        return m$2({}, c2, d2);
      }
      function Jf(a2) {
        a2 = (a2 = a2.stateNode) && a2.__reactInternalMemoizedMergedChildContext || Cf;
        Df = M$2.current;
        I$2(M$2, a2);
        I$2(N$1, N$1.current);
        return true;
      }
      function Kf(a2, b2, c2) {
        var d2 = a2.stateNode;
        if (!d2)
          throw Error(y$1(169));
        c2 ? (a2 = If(a2, b2, Df), d2.__reactInternalMemoizedMergedChildContext = a2, H$1(N$1), H$1(M$2), I$2(M$2, a2)) : H$1(N$1);
        I$2(N$1, c2);
      }
      var Lf = null, Mf = null, Nf = r$3.unstable_runWithPriority, Of = r$3.unstable_scheduleCallback, Pf = r$3.unstable_cancelCallback, Qf = r$3.unstable_shouldYield, Rf = r$3.unstable_requestPaint, Sf = r$3.unstable_now, Tf = r$3.unstable_getCurrentPriorityLevel, Uf = r$3.unstable_ImmediatePriority, Vf = r$3.unstable_UserBlockingPriority, Wf = r$3.unstable_NormalPriority, Xf = r$3.unstable_LowPriority, Yf = r$3.unstable_IdlePriority, Zf = {}, $f = Rf !== void 0 ? Rf : function() {
      }, ag = null, bg = null, cg = false, dg = Sf(), O$2 = 1e4 > dg ? Sf : function() {
        return Sf() - dg;
      };
      function eg() {
        switch (Tf()) {
          case Uf:
            return 99;
          case Vf:
            return 98;
          case Wf:
            return 97;
          case Xf:
            return 96;
          case Yf:
            return 95;
          default:
            throw Error(y$1(332));
        }
      }
      function fg(a2) {
        switch (a2) {
          case 99:
            return Uf;
          case 98:
            return Vf;
          case 97:
            return Wf;
          case 96:
            return Xf;
          case 95:
            return Yf;
          default:
            throw Error(y$1(332));
        }
      }
      function gg(a2, b2) {
        a2 = fg(a2);
        return Nf(a2, b2);
      }
      function hg(a2, b2, c2) {
        a2 = fg(a2);
        return Of(a2, b2, c2);
      }
      function ig() {
        if (bg !== null) {
          var a2 = bg;
          bg = null;
          Pf(a2);
        }
        jg();
      }
      function jg() {
        if (!cg && ag !== null) {
          cg = true;
          var a2 = 0;
          try {
            var b2 = ag;
            gg(99, function() {
              for (; a2 < b2.length; a2++) {
                var c2 = b2[a2];
                do
                  c2 = c2(true);
                while (c2 !== null);
              }
            });
            ag = null;
          } catch (c2) {
            throw ag !== null && (ag = ag.slice(a2 + 1)), Of(Uf, ig), c2;
          } finally {
            cg = false;
          }
        }
      }
      var kg = ra$1.ReactCurrentBatchConfig;
      function lg(a2, b2) {
        if (a2 && a2.defaultProps) {
          b2 = m$2({}, b2);
          a2 = a2.defaultProps;
          for (var c2 in a2)
            b2[c2] === void 0 && (b2[c2] = a2[c2]);
          return b2;
        }
        return b2;
      }
      var mg = Bf(null), ng = null, og = null, pg = null;
      function qg() {
        pg = og = ng = null;
      }
      function rg(a2) {
        var b2 = mg.current;
        H$1(mg);
        a2.type._context._currentValue = b2;
      }
      function sg(a2, b2) {
        for (; a2 !== null; ) {
          var c2 = a2.alternate;
          if ((a2.childLanes & b2) === b2)
            if (c2 === null || (c2.childLanes & b2) === b2)
              break;
            else
              c2.childLanes |= b2;
          else
            a2.childLanes |= b2, c2 !== null && (c2.childLanes |= b2);
          a2 = a2.return;
        }
      }
      function tg(a2, b2) {
        ng = a2;
        pg = og = null;
        a2 = a2.dependencies;
        a2 !== null && a2.firstContext !== null && ((a2.lanes & b2) !== 0 && (ug = true), a2.firstContext = null);
      }
      function vg(a2, b2) {
        if (pg !== a2 && b2 !== false && b2 !== 0) {
          if (typeof b2 !== "number" || b2 === 1073741823)
            pg = a2, b2 = 1073741823;
          b2 = { context: a2, observedBits: b2, next: null };
          if (og === null) {
            if (ng === null)
              throw Error(y$1(308));
            og = b2;
            ng.dependencies = { lanes: 0, firstContext: b2, responders: null };
          } else
            og = og.next = b2;
        }
        return a2._currentValue;
      }
      var wg = false;
      function xg(a2) {
        a2.updateQueue = { baseState: a2.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
      }
      function yg(a2, b2) {
        a2 = a2.updateQueue;
        b2.updateQueue === a2 && (b2.updateQueue = { baseState: a2.baseState, firstBaseUpdate: a2.firstBaseUpdate, lastBaseUpdate: a2.lastBaseUpdate, shared: a2.shared, effects: a2.effects });
      }
      function zg(a2, b2) {
        return { eventTime: a2, lane: b2, tag: 0, payload: null, callback: null, next: null };
      }
      function Ag(a2, b2) {
        a2 = a2.updateQueue;
        if (a2 !== null) {
          a2 = a2.shared;
          var c2 = a2.pending;
          c2 === null ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
          a2.pending = b2;
        }
      }
      function Bg(a2, b2) {
        var c2 = a2.updateQueue, d2 = a2.alternate;
        if (d2 !== null && (d2 = d2.updateQueue, c2 === d2)) {
          var e2 = null, f2 = null;
          c2 = c2.firstBaseUpdate;
          if (c2 !== null) {
            do {
              var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
              f2 === null ? e2 = f2 = g2 : f2 = f2.next = g2;
              c2 = c2.next;
            } while (c2 !== null);
            f2 === null ? e2 = f2 = b2 : f2 = f2.next = b2;
          } else
            e2 = f2 = b2;
          c2 = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
          a2.updateQueue = c2;
          return;
        }
        a2 = c2.lastBaseUpdate;
        a2 === null ? c2.firstBaseUpdate = b2 : a2.next = b2;
        c2.lastBaseUpdate = b2;
      }
      function Cg(a2, b2, c2, d2) {
        var e2 = a2.updateQueue;
        wg = false;
        var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h2 = e2.shared.pending;
        if (h2 !== null) {
          e2.shared.pending = null;
          var k2 = h2, l2 = k2.next;
          k2.next = null;
          g2 === null ? f2 = l2 : g2.next = l2;
          g2 = k2;
          var n2 = a2.alternate;
          if (n2 !== null) {
            n2 = n2.updateQueue;
            var A2 = n2.lastBaseUpdate;
            A2 !== g2 && (A2 === null ? n2.firstBaseUpdate = l2 : A2.next = l2, n2.lastBaseUpdate = k2);
          }
        }
        if (f2 !== null) {
          A2 = e2.baseState;
          g2 = 0;
          n2 = l2 = k2 = null;
          do {
            h2 = f2.lane;
            var p2 = f2.eventTime;
            if ((d2 & h2) === h2) {
              n2 !== null && (n2 = n2.next = {
                eventTime: p2,
                lane: 0,
                tag: f2.tag,
                payload: f2.payload,
                callback: f2.callback,
                next: null
              });
              a: {
                var C2 = a2, x2 = f2;
                h2 = b2;
                p2 = c2;
                switch (x2.tag) {
                  case 1:
                    C2 = x2.payload;
                    if (typeof C2 === "function") {
                      A2 = C2.call(p2, A2, h2);
                      break a;
                    }
                    A2 = C2;
                    break a;
                  case 3:
                    C2.flags = C2.flags & -4097 | 64;
                  case 0:
                    C2 = x2.payload;
                    h2 = typeof C2 === "function" ? C2.call(p2, A2, h2) : C2;
                    if (h2 === null || h2 === void 0)
                      break a;
                    A2 = m$2({}, A2, h2);
                    break a;
                  case 2:
                    wg = true;
                }
              }
              f2.callback !== null && (a2.flags |= 32, h2 = e2.effects, h2 === null ? e2.effects = [f2] : h2.push(f2));
            } else
              p2 = { eventTime: p2, lane: h2, tag: f2.tag, payload: f2.payload, callback: f2.callback, next: null }, n2 === null ? (l2 = n2 = p2, k2 = A2) : n2 = n2.next = p2, g2 |= h2;
            f2 = f2.next;
            if (f2 === null)
              if (h2 = e2.shared.pending, h2 === null)
                break;
              else
                f2 = h2.next, h2.next = null, e2.lastBaseUpdate = h2, e2.shared.pending = null;
          } while (1);
          n2 === null && (k2 = A2);
          e2.baseState = k2;
          e2.firstBaseUpdate = l2;
          e2.lastBaseUpdate = n2;
          Dg |= g2;
          a2.lanes = g2;
          a2.memoizedState = A2;
        }
      }
      function Eg(a2, b2, c2) {
        a2 = b2.effects;
        b2.effects = null;
        if (a2 !== null)
          for (b2 = 0; b2 < a2.length; b2++) {
            var d2 = a2[b2], e2 = d2.callback;
            if (e2 !== null) {
              d2.callback = null;
              d2 = c2;
              if (typeof e2 !== "function")
                throw Error(y$1(191, e2));
              e2.call(d2);
            }
          }
      }
      var Fg = new aa$1.Component().refs;
      function Gg(a2, b2, c2, d2) {
        b2 = a2.memoizedState;
        c2 = c2(d2, b2);
        c2 = c2 === null || c2 === void 0 ? b2 : m$2({}, b2, c2);
        a2.memoizedState = c2;
        a2.lanes === 0 && (a2.updateQueue.baseState = c2);
      }
      var Kg = { isMounted: function(a2) {
        return (a2 = a2._reactInternals) ? Zb(a2) === a2 : false;
      }, enqueueSetState: function(a2, b2, c2) {
        a2 = a2._reactInternals;
        var d2 = Hg(), e2 = Ig(a2), f2 = zg(d2, e2);
        f2.payload = b2;
        c2 !== void 0 && c2 !== null && (f2.callback = c2);
        Ag(a2, f2);
        Jg(a2, e2, d2);
      }, enqueueReplaceState: function(a2, b2, c2) {
        a2 = a2._reactInternals;
        var d2 = Hg(), e2 = Ig(a2), f2 = zg(d2, e2);
        f2.tag = 1;
        f2.payload = b2;
        c2 !== void 0 && c2 !== null && (f2.callback = c2);
        Ag(a2, f2);
        Jg(a2, e2, d2);
      }, enqueueForceUpdate: function(a2, b2) {
        a2 = a2._reactInternals;
        var c2 = Hg(), d2 = Ig(a2), e2 = zg(c2, d2);
        e2.tag = 2;
        b2 !== void 0 && b2 !== null && (e2.callback = b2);
        Ag(a2, e2);
        Jg(a2, d2, c2);
      } };
      function Lg(a2, b2, c2, d2, e2, f2, g2) {
        a2 = a2.stateNode;
        return typeof a2.shouldComponentUpdate === "function" ? a2.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Je(c2, d2) || !Je(e2, f2) : true;
      }
      function Mg(a2, b2, c2) {
        var d2 = false, e2 = Cf;
        var f2 = b2.contextType;
        typeof f2 === "object" && f2 !== null ? f2 = vg(f2) : (e2 = Ff(b2) ? Df : M$2.current, d2 = b2.contextTypes, f2 = (d2 = d2 !== null && d2 !== void 0) ? Ef(a2, e2) : Cf);
        b2 = new b2(c2, f2);
        a2.memoizedState = b2.state !== null && b2.state !== void 0 ? b2.state : null;
        b2.updater = Kg;
        a2.stateNode = b2;
        b2._reactInternals = a2;
        d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = e2, a2.__reactInternalMemoizedMaskedChildContext = f2);
        return b2;
      }
      function Ng(a2, b2, c2, d2) {
        a2 = b2.state;
        typeof b2.componentWillReceiveProps === "function" && b2.componentWillReceiveProps(c2, d2);
        typeof b2.UNSAFE_componentWillReceiveProps === "function" && b2.UNSAFE_componentWillReceiveProps(c2, d2);
        b2.state !== a2 && Kg.enqueueReplaceState(b2, b2.state, null);
      }
      function Og(a2, b2, c2, d2) {
        var e2 = a2.stateNode;
        e2.props = c2;
        e2.state = a2.memoizedState;
        e2.refs = Fg;
        xg(a2);
        var f2 = b2.contextType;
        typeof f2 === "object" && f2 !== null ? e2.context = vg(f2) : (f2 = Ff(b2) ? Df : M$2.current, e2.context = Ef(a2, f2));
        Cg(a2, c2, e2, d2);
        e2.state = a2.memoizedState;
        f2 = b2.getDerivedStateFromProps;
        typeof f2 === "function" && (Gg(a2, b2, f2, c2), e2.state = a2.memoizedState);
        typeof b2.getDerivedStateFromProps === "function" || typeof e2.getSnapshotBeforeUpdate === "function" || typeof e2.UNSAFE_componentWillMount !== "function" && typeof e2.componentWillMount !== "function" || (b2 = e2.state, typeof e2.componentWillMount === "function" && e2.componentWillMount(), typeof e2.UNSAFE_componentWillMount === "function" && e2.UNSAFE_componentWillMount(), b2 !== e2.state && Kg.enqueueReplaceState(e2, e2.state, null), Cg(a2, c2, e2, d2), e2.state = a2.memoizedState);
        typeof e2.componentDidMount === "function" && (a2.flags |= 4);
      }
      var Pg = Array.isArray;
      function Qg(a2, b2, c2) {
        a2 = c2.ref;
        if (a2 !== null && typeof a2 !== "function" && typeof a2 !== "object") {
          if (c2._owner) {
            c2 = c2._owner;
            if (c2) {
              if (c2.tag !== 1)
                throw Error(y$1(309));
              var d2 = c2.stateNode;
            }
            if (!d2)
              throw Error(y$1(147, a2));
            var e2 = "" + a2;
            if (b2 !== null && b2.ref !== null && typeof b2.ref === "function" && b2.ref._stringRef === e2)
              return b2.ref;
            b2 = function(a3) {
              var b3 = d2.refs;
              b3 === Fg && (b3 = d2.refs = {});
              a3 === null ? delete b3[e2] : b3[e2] = a3;
            };
            b2._stringRef = e2;
            return b2;
          }
          if (typeof a2 !== "string")
            throw Error(y$1(284));
          if (!c2._owner)
            throw Error(y$1(290, a2));
        }
        return a2;
      }
      function Rg(a2, b2) {
        if (a2.type !== "textarea")
          throw Error(y$1(31, Object.prototype.toString.call(b2) === "[object Object]" ? "object with keys {" + Object.keys(b2).join(", ") + "}" : b2));
      }
      function Sg(a2) {
        function b2(b3, c3) {
          if (a2) {
            var d3 = b3.lastEffect;
            d3 !== null ? (d3.nextEffect = c3, b3.lastEffect = c3) : b3.firstEffect = b3.lastEffect = c3;
            c3.nextEffect = null;
            c3.flags = 8;
          }
        }
        function c2(c3, d3) {
          if (!a2)
            return null;
          for (; d3 !== null; )
            b2(c3, d3), d3 = d3.sibling;
          return null;
        }
        function d2(a3, b3) {
          for (a3 = /* @__PURE__ */ new Map(); b3 !== null; )
            b3.key !== null ? a3.set(b3.key, b3) : a3.set(b3.index, b3), b3 = b3.sibling;
          return a3;
        }
        function e2(a3, b3) {
          a3 = Tg(a3, b3);
          a3.index = 0;
          a3.sibling = null;
          return a3;
        }
        function f2(b3, c3, d3) {
          b3.index = d3;
          if (!a2)
            return c3;
          d3 = b3.alternate;
          if (d3 !== null)
            return d3 = d3.index, d3 < c3 ? (b3.flags = 2, c3) : d3;
          b3.flags = 2;
          return c3;
        }
        function g2(b3) {
          a2 && b3.alternate === null && (b3.flags = 2);
          return b3;
        }
        function h2(a3, b3, c3, d3) {
          if (b3 === null || b3.tag !== 6)
            return b3 = Ug(c3, a3.mode, d3), b3.return = a3, b3;
          b3 = e2(b3, c3);
          b3.return = a3;
          return b3;
        }
        function k2(a3, b3, c3, d3) {
          if (b3 !== null && b3.elementType === c3.type)
            return d3 = e2(b3, c3.props), d3.ref = Qg(a3, b3, c3), d3.return = a3, d3;
          d3 = Vg(c3.type, c3.key, c3.props, null, a3.mode, d3);
          d3.ref = Qg(a3, b3, c3);
          d3.return = a3;
          return d3;
        }
        function l2(a3, b3, c3, d3) {
          if (b3 === null || b3.tag !== 4 || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
            return b3 = Wg(c3, a3.mode, d3), b3.return = a3, b3;
          b3 = e2(b3, c3.children || []);
          b3.return = a3;
          return b3;
        }
        function n2(a3, b3, c3, d3, f3) {
          if (b3 === null || b3.tag !== 7)
            return b3 = Xg(c3, a3.mode, d3, f3), b3.return = a3, b3;
          b3 = e2(b3, c3);
          b3.return = a3;
          return b3;
        }
        function A2(a3, b3, c3) {
          if (typeof b3 === "string" || typeof b3 === "number")
            return b3 = Ug("" + b3, a3.mode, c3), b3.return = a3, b3;
          if (typeof b3 === "object" && b3 !== null) {
            switch (b3.$$typeof) {
              case sa$1:
                return c3 = Vg(b3.type, b3.key, b3.props, null, a3.mode, c3), c3.ref = Qg(a3, null, b3), c3.return = a3, c3;
              case ta$1:
                return b3 = Wg(b3, a3.mode, c3), b3.return = a3, b3;
            }
            if (Pg(b3) || La$1(b3))
              return b3 = Xg(b3, a3.mode, c3, null), b3.return = a3, b3;
            Rg(a3, b3);
          }
          return null;
        }
        function p2(a3, b3, c3, d3) {
          var e3 = b3 !== null ? b3.key : null;
          if (typeof c3 === "string" || typeof c3 === "number")
            return e3 !== null ? null : h2(a3, b3, "" + c3, d3);
          if (typeof c3 === "object" && c3 !== null) {
            switch (c3.$$typeof) {
              case sa$1:
                return c3.key === e3 ? c3.type === ua$1 ? n2(a3, b3, c3.props.children, d3, e3) : k2(a3, b3, c3, d3) : null;
              case ta$1:
                return c3.key === e3 ? l2(a3, b3, c3, d3) : null;
            }
            if (Pg(c3) || La$1(c3))
              return e3 !== null ? null : n2(a3, b3, c3, d3, null);
            Rg(a3, c3);
          }
          return null;
        }
        function C2(a3, b3, c3, d3, e3) {
          if (typeof d3 === "string" || typeof d3 === "number")
            return a3 = a3.get(c3) || null, h2(b3, a3, "" + d3, e3);
          if (typeof d3 === "object" && d3 !== null) {
            switch (d3.$$typeof) {
              case sa$1:
                return a3 = a3.get(d3.key === null ? c3 : d3.key) || null, d3.type === ua$1 ? n2(b3, a3, d3.props.children, e3, d3.key) : k2(b3, a3, d3, e3);
              case ta$1:
                return a3 = a3.get(d3.key === null ? c3 : d3.key) || null, l2(b3, a3, d3, e3);
            }
            if (Pg(d3) || La$1(d3))
              return a3 = a3.get(c3) || null, n2(b3, a3, d3, e3, null);
            Rg(b3, d3);
          }
          return null;
        }
        function x2(e3, g3, h3, k3) {
          for (var l3 = null, t2 = null, u2 = g3, z2 = g3 = 0, q2 = null; u2 !== null && z2 < h3.length; z2++) {
            u2.index > z2 ? (q2 = u2, u2 = null) : q2 = u2.sibling;
            var n3 = p2(e3, u2, h3[z2], k3);
            if (n3 === null) {
              u2 === null && (u2 = q2);
              break;
            }
            a2 && u2 && n3.alternate === null && b2(e3, u2);
            g3 = f2(n3, g3, z2);
            t2 === null ? l3 = n3 : t2.sibling = n3;
            t2 = n3;
            u2 = q2;
          }
          if (z2 === h3.length)
            return c2(e3, u2), l3;
          if (u2 === null) {
            for (; z2 < h3.length; z2++)
              u2 = A2(e3, h3[z2], k3), u2 !== null && (g3 = f2(u2, g3, z2), t2 === null ? l3 = u2 : t2.sibling = u2, t2 = u2);
            return l3;
          }
          for (u2 = d2(e3, u2); z2 < h3.length; z2++)
            q2 = C2(u2, e3, z2, h3[z2], k3), q2 !== null && (a2 && q2.alternate !== null && u2.delete(q2.key === null ? z2 : q2.key), g3 = f2(q2, g3, z2), t2 === null ? l3 = q2 : t2.sibling = q2, t2 = q2);
          a2 && u2.forEach(function(a3) {
            return b2(e3, a3);
          });
          return l3;
        }
        function w2(e3, g3, h3, k3) {
          var l3 = La$1(h3);
          if (typeof l3 !== "function")
            throw Error(y$1(150));
          h3 = l3.call(h3);
          if (h3 == null)
            throw Error(y$1(151));
          for (var t2 = l3 = null, u2 = g3, z2 = g3 = 0, q2 = null, n3 = h3.next(); u2 !== null && !n3.done; z2++, n3 = h3.next()) {
            u2.index > z2 ? (q2 = u2, u2 = null) : q2 = u2.sibling;
            var w3 = p2(e3, u2, n3.value, k3);
            if (w3 === null) {
              u2 === null && (u2 = q2);
              break;
            }
            a2 && u2 && w3.alternate === null && b2(e3, u2);
            g3 = f2(w3, g3, z2);
            t2 === null ? l3 = w3 : t2.sibling = w3;
            t2 = w3;
            u2 = q2;
          }
          if (n3.done)
            return c2(e3, u2), l3;
          if (u2 === null) {
            for (; !n3.done; z2++, n3 = h3.next())
              n3 = A2(e3, n3.value, k3), n3 !== null && (g3 = f2(n3, g3, z2), t2 === null ? l3 = n3 : t2.sibling = n3, t2 = n3);
            return l3;
          }
          for (u2 = d2(e3, u2); !n3.done; z2++, n3 = h3.next())
            n3 = C2(u2, e3, z2, n3.value, k3), n3 !== null && (a2 && n3.alternate !== null && u2.delete(n3.key === null ? z2 : n3.key), g3 = f2(n3, g3, z2), t2 === null ? l3 = n3 : t2.sibling = n3, t2 = n3);
          a2 && u2.forEach(function(a3) {
            return b2(e3, a3);
          });
          return l3;
        }
        return function(a3, d3, f3, h3) {
          var k3 = typeof f3 === "object" && f3 !== null && f3.type === ua$1 && f3.key === null;
          k3 && (f3 = f3.props.children);
          var l3 = typeof f3 === "object" && f3 !== null;
          if (l3)
            switch (f3.$$typeof) {
              case sa$1:
                a: {
                  l3 = f3.key;
                  for (k3 = d3; k3 !== null; ) {
                    if (k3.key === l3) {
                      switch (k3.tag) {
                        case 7:
                          if (f3.type === ua$1) {
                            c2(a3, k3.sibling);
                            d3 = e2(k3, f3.props.children);
                            d3.return = a3;
                            a3 = d3;
                            break a;
                          }
                          break;
                        default:
                          if (k3.elementType === f3.type) {
                            c2(a3, k3.sibling);
                            d3 = e2(k3, f3.props);
                            d3.ref = Qg(a3, k3, f3);
                            d3.return = a3;
                            a3 = d3;
                            break a;
                          }
                      }
                      c2(a3, k3);
                      break;
                    } else
                      b2(a3, k3);
                    k3 = k3.sibling;
                  }
                  f3.type === ua$1 ? (d3 = Xg(f3.props.children, a3.mode, h3, f3.key), d3.return = a3, a3 = d3) : (h3 = Vg(f3.type, f3.key, f3.props, null, a3.mode, h3), h3.ref = Qg(a3, d3, f3), h3.return = a3, a3 = h3);
                }
                return g2(a3);
              case ta$1:
                a: {
                  for (k3 = f3.key; d3 !== null; ) {
                    if (d3.key === k3)
                      if (d3.tag === 4 && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                        c2(a3, d3.sibling);
                        d3 = e2(d3, f3.children || []);
                        d3.return = a3;
                        a3 = d3;
                        break a;
                      } else {
                        c2(a3, d3);
                        break;
                      }
                    else
                      b2(a3, d3);
                    d3 = d3.sibling;
                  }
                  d3 = Wg(f3, a3.mode, h3);
                  d3.return = a3;
                  a3 = d3;
                }
                return g2(a3);
            }
          if (typeof f3 === "string" || typeof f3 === "number")
            return f3 = "" + f3, d3 !== null && d3.tag === 6 ? (c2(a3, d3.sibling), d3 = e2(d3, f3), d3.return = a3, a3 = d3) : (c2(a3, d3), d3 = Ug(f3, a3.mode, h3), d3.return = a3, a3 = d3), g2(a3);
          if (Pg(f3))
            return x2(a3, d3, f3, h3);
          if (La$1(f3))
            return w2(a3, d3, f3, h3);
          l3 && Rg(a3, f3);
          if (typeof f3 === "undefined" && !k3)
            switch (a3.tag) {
              case 1:
              case 22:
              case 0:
              case 11:
              case 15:
                throw Error(y$1(152, Ra$1(a3.type) || "Component"));
            }
          return c2(a3, d3);
        };
      }
      var Yg = Sg(true), Zg = Sg(false), $g = {}, ah = Bf($g), bh = Bf($g), ch = Bf($g);
      function dh(a2) {
        if (a2 === $g)
          throw Error(y$1(174));
        return a2;
      }
      function eh(a2, b2) {
        I$2(ch, b2);
        I$2(bh, a2);
        I$2(ah, $g);
        a2 = b2.nodeType;
        switch (a2) {
          case 9:
          case 11:
            b2 = (b2 = b2.documentElement) ? b2.namespaceURI : mb(null, "");
            break;
          default:
            a2 = a2 === 8 ? b2.parentNode : b2, b2 = a2.namespaceURI || null, a2 = a2.tagName, b2 = mb(b2, a2);
        }
        H$1(ah);
        I$2(ah, b2);
      }
      function fh() {
        H$1(ah);
        H$1(bh);
        H$1(ch);
      }
      function gh(a2) {
        dh(ch.current);
        var b2 = dh(ah.current);
        var c2 = mb(b2, a2.type);
        b2 !== c2 && (I$2(bh, a2), I$2(ah, c2));
      }
      function hh(a2) {
        bh.current === a2 && (H$1(ah), H$1(bh));
      }
      var P$2 = Bf(0);
      function ih(a2) {
        for (var b2 = a2; b2 !== null; ) {
          if (b2.tag === 13) {
            var c2 = b2.memoizedState;
            if (c2 !== null && (c2 = c2.dehydrated, c2 === null || c2.data === "$?" || c2.data === "$!"))
              return b2;
          } else if (b2.tag === 19 && b2.memoizedProps.revealOrder !== void 0) {
            if ((b2.flags & 64) !== 0)
              return b2;
          } else if (b2.child !== null) {
            b2.child.return = b2;
            b2 = b2.child;
            continue;
          }
          if (b2 === a2)
            break;
          for (; b2.sibling === null; ) {
            if (b2.return === null || b2.return === a2)
              return null;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
        return null;
      }
      var jh = null, kh = null, lh = false;
      function mh(a2, b2) {
        var c2 = nh(5, null, null, 0);
        c2.elementType = "DELETED";
        c2.type = "DELETED";
        c2.stateNode = b2;
        c2.return = a2;
        c2.flags = 8;
        a2.lastEffect !== null ? (a2.lastEffect.nextEffect = c2, a2.lastEffect = c2) : a2.firstEffect = a2.lastEffect = c2;
      }
      function oh(a2, b2) {
        switch (a2.tag) {
          case 5:
            var c2 = a2.type;
            b2 = b2.nodeType !== 1 || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
            return b2 !== null ? (a2.stateNode = b2, true) : false;
          case 6:
            return b2 = a2.pendingProps === "" || b2.nodeType !== 3 ? null : b2, b2 !== null ? (a2.stateNode = b2, true) : false;
          case 13:
            return false;
          default:
            return false;
        }
      }
      function ph(a2) {
        if (lh) {
          var b2 = kh;
          if (b2) {
            var c2 = b2;
            if (!oh(a2, b2)) {
              b2 = rf(c2.nextSibling);
              if (!b2 || !oh(a2, b2)) {
                a2.flags = a2.flags & -1025 | 2;
                lh = false;
                jh = a2;
                return;
              }
              mh(jh, c2);
            }
            jh = a2;
            kh = rf(b2.firstChild);
          } else
            a2.flags = a2.flags & -1025 | 2, lh = false, jh = a2;
        }
      }
      function qh(a2) {
        for (a2 = a2.return; a2 !== null && a2.tag !== 5 && a2.tag !== 3 && a2.tag !== 13; )
          a2 = a2.return;
        jh = a2;
      }
      function rh(a2) {
        if (a2 !== jh)
          return false;
        if (!lh)
          return qh(a2), lh = true, false;
        var b2 = a2.type;
        if (a2.tag !== 5 || b2 !== "head" && b2 !== "body" && !nf(b2, a2.memoizedProps))
          for (b2 = kh; b2; )
            mh(a2, b2), b2 = rf(b2.nextSibling);
        qh(a2);
        if (a2.tag === 13) {
          a2 = a2.memoizedState;
          a2 = a2 !== null ? a2.dehydrated : null;
          if (!a2)
            throw Error(y$1(317));
          a: {
            a2 = a2.nextSibling;
            for (b2 = 0; a2; ) {
              if (a2.nodeType === 8) {
                var c2 = a2.data;
                if (c2 === "/$") {
                  if (b2 === 0) {
                    kh = rf(a2.nextSibling);
                    break a;
                  }
                  b2--;
                } else
                  c2 !== "$" && c2 !== "$!" && c2 !== "$?" || b2++;
              }
              a2 = a2.nextSibling;
            }
            kh = null;
          }
        } else
          kh = jh ? rf(a2.stateNode.nextSibling) : null;
        return true;
      }
      function sh() {
        kh = jh = null;
        lh = false;
      }
      var th = [];
      function uh() {
        for (var a2 = 0; a2 < th.length; a2++)
          th[a2]._workInProgressVersionPrimary = null;
        th.length = 0;
      }
      var vh = ra$1.ReactCurrentDispatcher, wh = ra$1.ReactCurrentBatchConfig, xh = 0, R$2 = null, S$2 = null, T$1 = null, yh = false, zh = false;
      function Ah() {
        throw Error(y$1(321));
      }
      function Bh(a2, b2) {
        if (b2 === null)
          return false;
        for (var c2 = 0; c2 < b2.length && c2 < a2.length; c2++)
          if (!He(a2[c2], b2[c2]))
            return false;
        return true;
      }
      function Ch(a2, b2, c2, d2, e2, f2) {
        xh = f2;
        R$2 = b2;
        b2.memoizedState = null;
        b2.updateQueue = null;
        b2.lanes = 0;
        vh.current = a2 === null || a2.memoizedState === null ? Dh : Eh;
        a2 = c2(d2, e2);
        if (zh) {
          f2 = 0;
          do {
            zh = false;
            if (!(25 > f2))
              throw Error(y$1(301));
            f2 += 1;
            T$1 = S$2 = null;
            b2.updateQueue = null;
            vh.current = Fh;
            a2 = c2(d2, e2);
          } while (zh);
        }
        vh.current = Gh;
        b2 = S$2 !== null && S$2.next !== null;
        xh = 0;
        T$1 = S$2 = R$2 = null;
        yh = false;
        if (b2)
          throw Error(y$1(300));
        return a2;
      }
      function Hh() {
        var a2 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        T$1 === null ? R$2.memoizedState = T$1 = a2 : T$1 = T$1.next = a2;
        return T$1;
      }
      function Ih() {
        if (S$2 === null) {
          var a2 = R$2.alternate;
          a2 = a2 !== null ? a2.memoizedState : null;
        } else
          a2 = S$2.next;
        var b2 = T$1 === null ? R$2.memoizedState : T$1.next;
        if (b2 !== null)
          T$1 = b2, S$2 = a2;
        else {
          if (a2 === null)
            throw Error(y$1(310));
          S$2 = a2;
          a2 = { memoizedState: S$2.memoizedState, baseState: S$2.baseState, baseQueue: S$2.baseQueue, queue: S$2.queue, next: null };
          T$1 === null ? R$2.memoizedState = T$1 = a2 : T$1 = T$1.next = a2;
        }
        return T$1;
      }
      function Jh(a2, b2) {
        return typeof b2 === "function" ? b2(a2) : b2;
      }
      function Kh(a2) {
        var b2 = Ih(), c2 = b2.queue;
        if (c2 === null)
          throw Error(y$1(311));
        c2.lastRenderedReducer = a2;
        var d2 = S$2, e2 = d2.baseQueue, f2 = c2.pending;
        if (f2 !== null) {
          if (e2 !== null) {
            var g2 = e2.next;
            e2.next = f2.next;
            f2.next = g2;
          }
          d2.baseQueue = e2 = f2;
          c2.pending = null;
        }
        if (e2 !== null) {
          e2 = e2.next;
          d2 = d2.baseState;
          var h2 = g2 = f2 = null, k2 = e2;
          do {
            var l2 = k2.lane;
            if ((xh & l2) === l2)
              h2 !== null && (h2 = h2.next = { lane: 0, action: k2.action, eagerReducer: k2.eagerReducer, eagerState: k2.eagerState, next: null }), d2 = k2.eagerReducer === a2 ? k2.eagerState : a2(d2, k2.action);
            else {
              var n2 = {
                lane: l2,
                action: k2.action,
                eagerReducer: k2.eagerReducer,
                eagerState: k2.eagerState,
                next: null
              };
              h2 === null ? (g2 = h2 = n2, f2 = d2) : h2 = h2.next = n2;
              R$2.lanes |= l2;
              Dg |= l2;
            }
            k2 = k2.next;
          } while (k2 !== null && k2 !== e2);
          h2 === null ? f2 = d2 : h2.next = g2;
          He(d2, b2.memoizedState) || (ug = true);
          b2.memoizedState = d2;
          b2.baseState = f2;
          b2.baseQueue = h2;
          c2.lastRenderedState = d2;
        }
        return [b2.memoizedState, c2.dispatch];
      }
      function Lh(a2) {
        var b2 = Ih(), c2 = b2.queue;
        if (c2 === null)
          throw Error(y$1(311));
        c2.lastRenderedReducer = a2;
        var d2 = c2.dispatch, e2 = c2.pending, f2 = b2.memoizedState;
        if (e2 !== null) {
          c2.pending = null;
          var g2 = e2 = e2.next;
          do
            f2 = a2(f2, g2.action), g2 = g2.next;
          while (g2 !== e2);
          He(f2, b2.memoizedState) || (ug = true);
          b2.memoizedState = f2;
          b2.baseQueue === null && (b2.baseState = f2);
          c2.lastRenderedState = f2;
        }
        return [f2, d2];
      }
      function Mh(a2, b2, c2) {
        var d2 = b2._getVersion;
        d2 = d2(b2._source);
        var e2 = b2._workInProgressVersionPrimary;
        if (e2 !== null)
          a2 = e2 === d2;
        else if (a2 = a2.mutableReadLanes, a2 = (xh & a2) === a2)
          b2._workInProgressVersionPrimary = d2, th.push(b2);
        if (a2)
          return c2(b2._source);
        th.push(b2);
        throw Error(y$1(350));
      }
      function Nh(a2, b2, c2, d2) {
        var e2 = U$2;
        if (e2 === null)
          throw Error(y$1(349));
        var f2 = b2._getVersion, g2 = f2(b2._source), h2 = vh.current, k2 = h2.useState(function() {
          return Mh(e2, b2, c2);
        }), l2 = k2[1], n2 = k2[0];
        k2 = T$1;
        var A2 = a2.memoizedState, p2 = A2.refs, C2 = p2.getSnapshot, x2 = A2.source;
        A2 = A2.subscribe;
        var w2 = R$2;
        a2.memoizedState = { refs: p2, source: b2, subscribe: d2 };
        h2.useEffect(function() {
          p2.getSnapshot = c2;
          p2.setSnapshot = l2;
          var a3 = f2(b2._source);
          if (!He(g2, a3)) {
            a3 = c2(b2._source);
            He(n2, a3) || (l2(a3), a3 = Ig(w2), e2.mutableReadLanes |= a3 & e2.pendingLanes);
            a3 = e2.mutableReadLanes;
            e2.entangledLanes |= a3;
            for (var d3 = e2.entanglements, h3 = a3; 0 < h3; ) {
              var k3 = 31 - Vc(h3), v2 = 1 << k3;
              d3[k3] |= a3;
              h3 &= ~v2;
            }
          }
        }, [c2, b2, d2]);
        h2.useEffect(function() {
          return d2(b2._source, function() {
            var a3 = p2.getSnapshot, c3 = p2.setSnapshot;
            try {
              c3(a3(b2._source));
              var d3 = Ig(w2);
              e2.mutableReadLanes |= d3 & e2.pendingLanes;
            } catch (q2) {
              c3(function() {
                throw q2;
              });
            }
          });
        }, [b2, d2]);
        He(C2, c2) && He(x2, b2) && He(A2, d2) || (a2 = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n2 }, a2.dispatch = l2 = Oh.bind(null, R$2, a2), k2.queue = a2, k2.baseQueue = null, n2 = Mh(e2, b2, c2), k2.memoizedState = k2.baseState = n2);
        return n2;
      }
      function Ph(a2, b2, c2) {
        var d2 = Ih();
        return Nh(d2, a2, b2, c2);
      }
      function Qh(a2) {
        var b2 = Hh();
        typeof a2 === "function" && (a2 = a2());
        b2.memoizedState = b2.baseState = a2;
        a2 = b2.queue = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a2 };
        a2 = a2.dispatch = Oh.bind(null, R$2, a2);
        return [b2.memoizedState, a2];
      }
      function Rh(a2, b2, c2, d2) {
        a2 = { tag: a2, create: b2, destroy: c2, deps: d2, next: null };
        b2 = R$2.updateQueue;
        b2 === null ? (b2 = { lastEffect: null }, R$2.updateQueue = b2, b2.lastEffect = a2.next = a2) : (c2 = b2.lastEffect, c2 === null ? b2.lastEffect = a2.next = a2 : (d2 = c2.next, c2.next = a2, a2.next = d2, b2.lastEffect = a2));
        return a2;
      }
      function Sh(a2) {
        var b2 = Hh();
        a2 = { current: a2 };
        return b2.memoizedState = a2;
      }
      function Th() {
        return Ih().memoizedState;
      }
      function Uh(a2, b2, c2, d2) {
        var e2 = Hh();
        R$2.flags |= a2;
        e2.memoizedState = Rh(1 | b2, c2, void 0, d2 === void 0 ? null : d2);
      }
      function Vh(a2, b2, c2, d2) {
        var e2 = Ih();
        d2 = d2 === void 0 ? null : d2;
        var f2 = void 0;
        if (S$2 !== null) {
          var g2 = S$2.memoizedState;
          f2 = g2.destroy;
          if (d2 !== null && Bh(d2, g2.deps)) {
            Rh(b2, c2, f2, d2);
            return;
          }
        }
        R$2.flags |= a2;
        e2.memoizedState = Rh(1 | b2, c2, f2, d2);
      }
      function Wh(a2, b2) {
        return Uh(516, 4, a2, b2);
      }
      function Xh(a2, b2) {
        return Vh(516, 4, a2, b2);
      }
      function Yh(a2, b2) {
        return Vh(4, 2, a2, b2);
      }
      function Zh(a2, b2) {
        if (typeof b2 === "function")
          return a2 = a2(), b2(a2), function() {
            b2(null);
          };
        if (b2 !== null && b2 !== void 0)
          return a2 = a2(), b2.current = a2, function() {
            b2.current = null;
          };
      }
      function $h(a2, b2, c2) {
        c2 = c2 !== null && c2 !== void 0 ? c2.concat([a2]) : null;
        return Vh(4, 2, Zh.bind(null, b2, a2), c2);
      }
      function ai() {
      }
      function bi(a2, b2) {
        var c2 = Ih();
        b2 = b2 === void 0 ? null : b2;
        var d2 = c2.memoizedState;
        if (d2 !== null && b2 !== null && Bh(b2, d2[1]))
          return d2[0];
        c2.memoizedState = [a2, b2];
        return a2;
      }
      function ci(a2, b2) {
        var c2 = Ih();
        b2 = b2 === void 0 ? null : b2;
        var d2 = c2.memoizedState;
        if (d2 !== null && b2 !== null && Bh(b2, d2[1]))
          return d2[0];
        a2 = a2();
        c2.memoizedState = [a2, b2];
        return a2;
      }
      function di(a2, b2) {
        var c2 = eg();
        gg(98 > c2 ? 98 : c2, function() {
          a2(true);
        });
        gg(97 < c2 ? 97 : c2, function() {
          var c3 = wh.transition;
          wh.transition = 1;
          try {
            a2(false), b2();
          } finally {
            wh.transition = c3;
          }
        });
      }
      function Oh(a2, b2, c2) {
        var d2 = Hg(), e2 = Ig(a2), f2 = { lane: e2, action: c2, eagerReducer: null, eagerState: null, next: null }, g2 = b2.pending;
        g2 === null ? f2.next = f2 : (f2.next = g2.next, g2.next = f2);
        b2.pending = f2;
        g2 = a2.alternate;
        if (a2 === R$2 || g2 !== null && g2 === R$2)
          zh = yh = true;
        else {
          if (a2.lanes === 0 && (g2 === null || g2.lanes === 0) && (g2 = b2.lastRenderedReducer, g2 !== null))
            try {
              var h2 = b2.lastRenderedState, k2 = g2(h2, c2);
              f2.eagerReducer = g2;
              f2.eagerState = k2;
              if (He(k2, h2))
                return;
            } catch (l2) {
            } finally {
            }
          Jg(a2, e2, d2);
        }
      }
      var Gh = { readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: false }, Dh = { readContext: vg, useCallback: function(a2, b2) {
        Hh().memoizedState = [a2, b2 === void 0 ? null : b2];
        return a2;
      }, useContext: vg, useEffect: Wh, useImperativeHandle: function(a2, b2, c2) {
        c2 = c2 !== null && c2 !== void 0 ? c2.concat([a2]) : null;
        return Uh(4, 2, Zh.bind(null, b2, a2), c2);
      }, useLayoutEffect: function(a2, b2) {
        return Uh(4, 2, a2, b2);
      }, useMemo: function(a2, b2) {
        var c2 = Hh();
        b2 = b2 === void 0 ? null : b2;
        a2 = a2();
        c2.memoizedState = [a2, b2];
        return a2;
      }, useReducer: function(a2, b2, c2) {
        var d2 = Hh();
        b2 = c2 !== void 0 ? c2(b2) : b2;
        d2.memoizedState = d2.baseState = b2;
        a2 = d2.queue = { pending: null, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b2 };
        a2 = a2.dispatch = Oh.bind(null, R$2, a2);
        return [d2.memoizedState, a2];
      }, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function(a2) {
        var b2 = Qh(a2), c2 = b2[0], d2 = b2[1];
        Wh(function() {
          var b3 = wh.transition;
          wh.transition = 1;
          try {
            d2(a2);
          } finally {
            wh.transition = b3;
          }
        }, [a2]);
        return c2;
      }, useTransition: function() {
        var a2 = Qh(false), b2 = a2[0];
        a2 = di.bind(null, a2[1]);
        Sh(a2);
        return [a2, b2];
      }, useMutableSource: function(a2, b2, c2) {
        var d2 = Hh();
        d2.memoizedState = { refs: { getSnapshot: b2, setSnapshot: null }, source: a2, subscribe: c2 };
        return Nh(d2, a2, b2, c2);
      }, useOpaqueIdentifier: function() {
        if (lh) {
          var a2 = false, b2 = uf(function() {
            a2 || (a2 = true, c2("r:" + (tf++).toString(36)));
            throw Error(y$1(355));
          }), c2 = Qh(b2)[1];
          (R$2.mode & 2) === 0 && (R$2.flags |= 516, Rh(5, function() {
            c2("r:" + (tf++).toString(36));
          }, void 0, null));
          return b2;
        }
        b2 = "r:" + (tf++).toString(36);
        Qh(b2);
        return b2;
      }, unstable_isNewReconciler: false }, Eh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function() {
        return Kh(Jh);
      }, useDebugValue: ai, useDeferredValue: function(a2) {
        var b2 = Kh(Jh), c2 = b2[0], d2 = b2[1];
        Xh(function() {
          var b3 = wh.transition;
          wh.transition = 1;
          try {
            d2(a2);
          } finally {
            wh.transition = b3;
          }
        }, [a2]);
        return c2;
      }, useTransition: function() {
        var a2 = Kh(Jh)[0];
        return [
          Th().current,
          a2
        ];
      }, useMutableSource: Ph, useOpaqueIdentifier: function() {
        return Kh(Jh)[0];
      }, unstable_isNewReconciler: false }, Fh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function() {
        return Lh(Jh);
      }, useDebugValue: ai, useDeferredValue: function(a2) {
        var b2 = Lh(Jh), c2 = b2[0], d2 = b2[1];
        Xh(function() {
          var b3 = wh.transition;
          wh.transition = 1;
          try {
            d2(a2);
          } finally {
            wh.transition = b3;
          }
        }, [a2]);
        return c2;
      }, useTransition: function() {
        var a2 = Lh(Jh)[0];
        return [
          Th().current,
          a2
        ];
      }, useMutableSource: Ph, useOpaqueIdentifier: function() {
        return Lh(Jh)[0];
      }, unstable_isNewReconciler: false }, ei = ra$1.ReactCurrentOwner, ug = false;
      function fi(a2, b2, c2, d2) {
        b2.child = a2 === null ? Zg(b2, null, c2, d2) : Yg(b2, a2.child, c2, d2);
      }
      function gi(a2, b2, c2, d2, e2) {
        c2 = c2.render;
        var f2 = b2.ref;
        tg(b2, e2);
        d2 = Ch(a2, b2, c2, d2, f2, e2);
        if (a2 !== null && !ug)
          return b2.updateQueue = a2.updateQueue, b2.flags &= -517, a2.lanes &= ~e2, hi(a2, b2, e2);
        b2.flags |= 1;
        fi(a2, b2, d2, e2);
        return b2.child;
      }
      function ii(a2, b2, c2, d2, e2, f2) {
        if (a2 === null) {
          var g2 = c2.type;
          if (typeof g2 === "function" && !ji(g2) && g2.defaultProps === void 0 && c2.compare === null && c2.defaultProps === void 0)
            return b2.tag = 15, b2.type = g2, ki(a2, b2, g2, d2, e2, f2);
          a2 = Vg(c2.type, null, d2, b2, b2.mode, f2);
          a2.ref = b2.ref;
          a2.return = b2;
          return b2.child = a2;
        }
        g2 = a2.child;
        if ((e2 & f2) === 0 && (e2 = g2.memoizedProps, c2 = c2.compare, c2 = c2 !== null ? c2 : Je, c2(e2, d2) && a2.ref === b2.ref))
          return hi(a2, b2, f2);
        b2.flags |= 1;
        a2 = Tg(g2, d2);
        a2.ref = b2.ref;
        a2.return = b2;
        return b2.child = a2;
      }
      function ki(a2, b2, c2, d2, e2, f2) {
        if (a2 !== null && Je(a2.memoizedProps, d2) && a2.ref === b2.ref)
          if (ug = false, (f2 & e2) !== 0)
            (a2.flags & 16384) !== 0 && (ug = true);
          else
            return b2.lanes = a2.lanes, hi(a2, b2, f2);
        return li(a2, b2, c2, d2, f2);
      }
      function mi(a2, b2, c2) {
        var d2 = b2.pendingProps, e2 = d2.children, f2 = a2 !== null ? a2.memoizedState : null;
        if (d2.mode === "hidden" || d2.mode === "unstable-defer-without-hiding")
          if ((b2.mode & 4) === 0)
            b2.memoizedState = { baseLanes: 0 }, ni(b2, c2);
          else if ((c2 & 1073741824) !== 0)
            b2.memoizedState = { baseLanes: 0 }, ni(b2, f2 !== null ? f2.baseLanes : c2);
          else
            return a2 = f2 !== null ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a2 }, ni(b2, a2), null;
        else
          f2 !== null ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, ni(b2, d2);
        fi(a2, b2, e2, c2);
        return b2.child;
      }
      function oi(a2, b2) {
        var c2 = b2.ref;
        if (a2 === null && c2 !== null || a2 !== null && a2.ref !== c2)
          b2.flags |= 128;
      }
      function li(a2, b2, c2, d2, e2) {
        var f2 = Ff(c2) ? Df : M$2.current;
        f2 = Ef(b2, f2);
        tg(b2, e2);
        c2 = Ch(a2, b2, c2, d2, f2, e2);
        if (a2 !== null && !ug)
          return b2.updateQueue = a2.updateQueue, b2.flags &= -517, a2.lanes &= ~e2, hi(a2, b2, e2);
        b2.flags |= 1;
        fi(a2, b2, c2, e2);
        return b2.child;
      }
      function pi(a2, b2, c2, d2, e2) {
        if (Ff(c2)) {
          var f2 = true;
          Jf(b2);
        } else
          f2 = false;
        tg(b2, e2);
        if (b2.stateNode === null)
          a2 !== null && (a2.alternate = null, b2.alternate = null, b2.flags |= 2), Mg(b2, c2, d2), Og(b2, c2, d2, e2), d2 = true;
        else if (a2 === null) {
          var g2 = b2.stateNode, h2 = b2.memoizedProps;
          g2.props = h2;
          var k2 = g2.context, l2 = c2.contextType;
          typeof l2 === "object" && l2 !== null ? l2 = vg(l2) : (l2 = Ff(c2) ? Df : M$2.current, l2 = Ef(b2, l2));
          var n2 = c2.getDerivedStateFromProps, A2 = typeof n2 === "function" || typeof g2.getSnapshotBeforeUpdate === "function";
          A2 || typeof g2.UNSAFE_componentWillReceiveProps !== "function" && typeof g2.componentWillReceiveProps !== "function" || (h2 !== d2 || k2 !== l2) && Ng(b2, g2, d2, l2);
          wg = false;
          var p2 = b2.memoizedState;
          g2.state = p2;
          Cg(b2, d2, g2, e2);
          k2 = b2.memoizedState;
          h2 !== d2 || p2 !== k2 || N$1.current || wg ? (typeof n2 === "function" && (Gg(b2, c2, n2, d2), k2 = b2.memoizedState), (h2 = wg || Lg(b2, c2, h2, d2, p2, k2, l2)) ? (A2 || typeof g2.UNSAFE_componentWillMount !== "function" && typeof g2.componentWillMount !== "function" || (typeof g2.componentWillMount === "function" && g2.componentWillMount(), typeof g2.UNSAFE_componentWillMount === "function" && g2.UNSAFE_componentWillMount()), typeof g2.componentDidMount === "function" && (b2.flags |= 4)) : (typeof g2.componentDidMount === "function" && (b2.flags |= 4), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : (typeof g2.componentDidMount === "function" && (b2.flags |= 4), d2 = false);
        } else {
          g2 = b2.stateNode;
          yg(a2, b2);
          h2 = b2.memoizedProps;
          l2 = b2.type === b2.elementType ? h2 : lg(b2.type, h2);
          g2.props = l2;
          A2 = b2.pendingProps;
          p2 = g2.context;
          k2 = c2.contextType;
          typeof k2 === "object" && k2 !== null ? k2 = vg(k2) : (k2 = Ff(c2) ? Df : M$2.current, k2 = Ef(b2, k2));
          var C2 = c2.getDerivedStateFromProps;
          (n2 = typeof C2 === "function" || typeof g2.getSnapshotBeforeUpdate === "function") || typeof g2.UNSAFE_componentWillReceiveProps !== "function" && typeof g2.componentWillReceiveProps !== "function" || (h2 !== A2 || p2 !== k2) && Ng(b2, g2, d2, k2);
          wg = false;
          p2 = b2.memoizedState;
          g2.state = p2;
          Cg(b2, d2, g2, e2);
          var x2 = b2.memoizedState;
          h2 !== A2 || p2 !== x2 || N$1.current || wg ? (typeof C2 === "function" && (Gg(b2, c2, C2, d2), x2 = b2.memoizedState), (l2 = wg || Lg(b2, c2, l2, d2, p2, x2, k2)) ? (n2 || typeof g2.UNSAFE_componentWillUpdate !== "function" && typeof g2.componentWillUpdate !== "function" || (typeof g2.componentWillUpdate === "function" && g2.componentWillUpdate(d2, x2, k2), typeof g2.UNSAFE_componentWillUpdate === "function" && g2.UNSAFE_componentWillUpdate(d2, x2, k2)), typeof g2.componentDidUpdate === "function" && (b2.flags |= 4), typeof g2.getSnapshotBeforeUpdate === "function" && (b2.flags |= 256)) : (typeof g2.componentDidUpdate !== "function" || h2 === a2.memoizedProps && p2 === a2.memoizedState || (b2.flags |= 4), typeof g2.getSnapshotBeforeUpdate !== "function" || h2 === a2.memoizedProps && p2 === a2.memoizedState || (b2.flags |= 256), b2.memoizedProps = d2, b2.memoizedState = x2), g2.props = d2, g2.state = x2, g2.context = k2, d2 = l2) : (typeof g2.componentDidUpdate !== "function" || h2 === a2.memoizedProps && p2 === a2.memoizedState || (b2.flags |= 4), typeof g2.getSnapshotBeforeUpdate !== "function" || h2 === a2.memoizedProps && p2 === a2.memoizedState || (b2.flags |= 256), d2 = false);
        }
        return qi(a2, b2, c2, d2, f2, e2);
      }
      function qi(a2, b2, c2, d2, e2, f2) {
        oi(a2, b2);
        var g2 = (b2.flags & 64) !== 0;
        if (!d2 && !g2)
          return e2 && Kf(b2, c2, false), hi(a2, b2, f2);
        d2 = b2.stateNode;
        ei.current = b2;
        var h2 = g2 && typeof c2.getDerivedStateFromError !== "function" ? null : d2.render();
        b2.flags |= 1;
        a2 !== null && g2 ? (b2.child = Yg(b2, a2.child, null, f2), b2.child = Yg(b2, null, h2, f2)) : fi(a2, b2, h2, f2);
        b2.memoizedState = d2.state;
        e2 && Kf(b2, c2, true);
        return b2.child;
      }
      function ri(a2) {
        var b2 = a2.stateNode;
        b2.pendingContext ? Hf(a2, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && Hf(a2, b2.context, false);
        eh(a2, b2.containerInfo);
      }
      var si = { dehydrated: null, retryLane: 0 };
      function ti(a2, b2, c2) {
        var d2 = b2.pendingProps, e2 = P$2.current, f2 = false, g2;
        (g2 = (b2.flags & 64) !== 0) || (g2 = a2 !== null && a2.memoizedState === null ? false : (e2 & 2) !== 0);
        g2 ? (f2 = true, b2.flags &= -65) : a2 !== null && a2.memoizedState === null || d2.fallback === void 0 || d2.unstable_avoidThisFallback === true || (e2 |= 1);
        I$2(P$2, e2 & 1);
        if (a2 === null) {
          d2.fallback !== void 0 && ph(b2);
          a2 = d2.children;
          e2 = d2.fallback;
          if (f2)
            return a2 = ui(b2, a2, e2, c2), b2.child.memoizedState = { baseLanes: c2 }, b2.memoizedState = si, a2;
          if (typeof d2.unstable_expectedLoadTime === "number")
            return a2 = ui(b2, a2, e2, c2), b2.child.memoizedState = { baseLanes: c2 }, b2.memoizedState = si, b2.lanes = 33554432, a2;
          c2 = vi({ mode: "visible", children: a2 }, b2.mode, c2, null);
          c2.return = b2;
          return b2.child = c2;
        }
        if (a2.memoizedState !== null) {
          if (f2)
            return d2 = wi(a2, b2, d2.children, d2.fallback, c2), f2 = b2.child, e2 = a2.child.memoizedState, f2.memoizedState = e2 === null ? { baseLanes: c2 } : { baseLanes: e2.baseLanes | c2 }, f2.childLanes = a2.childLanes & ~c2, b2.memoizedState = si, d2;
          c2 = xi(a2, b2, d2.children, c2);
          b2.memoizedState = null;
          return c2;
        }
        if (f2)
          return d2 = wi(a2, b2, d2.children, d2.fallback, c2), f2 = b2.child, e2 = a2.child.memoizedState, f2.memoizedState = e2 === null ? { baseLanes: c2 } : { baseLanes: e2.baseLanes | c2 }, f2.childLanes = a2.childLanes & ~c2, b2.memoizedState = si, d2;
        c2 = xi(a2, b2, d2.children, c2);
        b2.memoizedState = null;
        return c2;
      }
      function ui(a2, b2, c2, d2) {
        var e2 = a2.mode, f2 = a2.child;
        b2 = { mode: "hidden", children: b2 };
        (e2 & 2) === 0 && f2 !== null ? (f2.childLanes = 0, f2.pendingProps = b2) : f2 = vi(b2, e2, 0, null);
        c2 = Xg(c2, e2, d2, null);
        f2.return = a2;
        c2.return = a2;
        f2.sibling = c2;
        a2.child = f2;
        return c2;
      }
      function xi(a2, b2, c2, d2) {
        var e2 = a2.child;
        a2 = e2.sibling;
        c2 = Tg(e2, { mode: "visible", children: c2 });
        (b2.mode & 2) === 0 && (c2.lanes = d2);
        c2.return = b2;
        c2.sibling = null;
        a2 !== null && (a2.nextEffect = null, a2.flags = 8, b2.firstEffect = b2.lastEffect = a2);
        return b2.child = c2;
      }
      function wi(a2, b2, c2, d2, e2) {
        var f2 = b2.mode, g2 = a2.child;
        a2 = g2.sibling;
        var h2 = { mode: "hidden", children: c2 };
        (f2 & 2) === 0 && b2.child !== g2 ? (c2 = b2.child, c2.childLanes = 0, c2.pendingProps = h2, g2 = c2.lastEffect, g2 !== null ? (b2.firstEffect = c2.firstEffect, b2.lastEffect = g2, g2.nextEffect = null) : b2.firstEffect = b2.lastEffect = null) : c2 = Tg(g2, h2);
        a2 !== null ? d2 = Tg(a2, d2) : (d2 = Xg(d2, f2, e2, null), d2.flags |= 2);
        d2.return = b2;
        c2.return = b2;
        c2.sibling = d2;
        b2.child = c2;
        return d2;
      }
      function yi(a2, b2) {
        a2.lanes |= b2;
        var c2 = a2.alternate;
        c2 !== null && (c2.lanes |= b2);
        sg(a2.return, b2);
      }
      function zi(a2, b2, c2, d2, e2, f2) {
        var g2 = a2.memoizedState;
        g2 === null ? a2.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e2, lastEffect: f2 } : (g2.isBackwards = b2, g2.rendering = null, g2.renderingStartTime = 0, g2.last = d2, g2.tail = c2, g2.tailMode = e2, g2.lastEffect = f2);
      }
      function Ai(a2, b2, c2) {
        var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
        fi(a2, b2, d2.children, c2);
        d2 = P$2.current;
        if ((d2 & 2) !== 0)
          d2 = d2 & 1 | 2, b2.flags |= 64;
        else {
          if (a2 !== null && (a2.flags & 64) !== 0)
            a:
              for (a2 = b2.child; a2 !== null; ) {
                if (a2.tag === 13)
                  a2.memoizedState !== null && yi(a2, c2);
                else if (a2.tag === 19)
                  yi(a2, c2);
                else if (a2.child !== null) {
                  a2.child.return = a2;
                  a2 = a2.child;
                  continue;
                }
                if (a2 === b2)
                  break a;
                for (; a2.sibling === null; ) {
                  if (a2.return === null || a2.return === b2)
                    break a;
                  a2 = a2.return;
                }
                a2.sibling.return = a2.return;
                a2 = a2.sibling;
              }
          d2 &= 1;
        }
        I$2(P$2, d2);
        if ((b2.mode & 2) === 0)
          b2.memoizedState = null;
        else
          switch (e2) {
            case "forwards":
              c2 = b2.child;
              for (e2 = null; c2 !== null; )
                a2 = c2.alternate, a2 !== null && ih(a2) === null && (e2 = c2), c2 = c2.sibling;
              c2 = e2;
              c2 === null ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
              zi(b2, false, e2, c2, f2, b2.lastEffect);
              break;
            case "backwards":
              c2 = null;
              e2 = b2.child;
              for (b2.child = null; e2 !== null; ) {
                a2 = e2.alternate;
                if (a2 !== null && ih(a2) === null) {
                  b2.child = e2;
                  break;
                }
                a2 = e2.sibling;
                e2.sibling = c2;
                c2 = e2;
                e2 = a2;
              }
              zi(b2, true, c2, null, f2, b2.lastEffect);
              break;
            case "together":
              zi(b2, false, null, null, void 0, b2.lastEffect);
              break;
            default:
              b2.memoizedState = null;
          }
        return b2.child;
      }
      function hi(a2, b2, c2) {
        a2 !== null && (b2.dependencies = a2.dependencies);
        Dg |= b2.lanes;
        if ((c2 & b2.childLanes) !== 0) {
          if (a2 !== null && b2.child !== a2.child)
            throw Error(y$1(153));
          if (b2.child !== null) {
            a2 = b2.child;
            c2 = Tg(a2, a2.pendingProps);
            b2.child = c2;
            for (c2.return = b2; a2.sibling !== null; )
              a2 = a2.sibling, c2 = c2.sibling = Tg(a2, a2.pendingProps), c2.return = b2;
            c2.sibling = null;
          }
          return b2.child;
        }
        return null;
      }
      var Bi, Ci, Di, Ei;
      Bi = function(a2, b2) {
        for (var c2 = b2.child; c2 !== null; ) {
          if (c2.tag === 5 || c2.tag === 6)
            a2.appendChild(c2.stateNode);
          else if (c2.tag !== 4 && c2.child !== null) {
            c2.child.return = c2;
            c2 = c2.child;
            continue;
          }
          if (c2 === b2)
            break;
          for (; c2.sibling === null; ) {
            if (c2.return === null || c2.return === b2)
              return;
            c2 = c2.return;
          }
          c2.sibling.return = c2.return;
          c2 = c2.sibling;
        }
      };
      Ci = function() {
      };
      Di = function(a2, b2, c2, d2) {
        var e2 = a2.memoizedProps;
        if (e2 !== d2) {
          a2 = b2.stateNode;
          dh(ah.current);
          var f2 = null;
          switch (c2) {
            case "input":
              e2 = Ya$1(a2, e2);
              d2 = Ya$1(a2, d2);
              f2 = [];
              break;
            case "option":
              e2 = eb(a2, e2);
              d2 = eb(a2, d2);
              f2 = [];
              break;
            case "select":
              e2 = m$2({}, e2, { value: void 0 });
              d2 = m$2({}, d2, { value: void 0 });
              f2 = [];
              break;
            case "textarea":
              e2 = gb(a2, e2);
              d2 = gb(a2, d2);
              f2 = [];
              break;
            default:
              typeof e2.onClick !== "function" && typeof d2.onClick === "function" && (a2.onclick = jf);
          }
          vb(c2, d2);
          var g2;
          c2 = null;
          for (l2 in e2)
            if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && e2[l2] != null)
              if (l2 === "style") {
                var h2 = e2[l2];
                for (g2 in h2)
                  h2.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
              } else
                l2 !== "dangerouslySetInnerHTML" && l2 !== "children" && l2 !== "suppressContentEditableWarning" && l2 !== "suppressHydrationWarning" && l2 !== "autoFocus" && (ca$1.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
          for (l2 in d2) {
            var k2 = d2[l2];
            h2 = e2 != null ? e2[l2] : void 0;
            if (d2.hasOwnProperty(l2) && k2 !== h2 && (k2 != null || h2 != null))
              if (l2 === "style")
                if (h2) {
                  for (g2 in h2)
                    !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
                  for (g2 in k2)
                    k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
                } else
                  c2 || (f2 || (f2 = []), f2.push(l2, c2)), c2 = k2;
              else
                l2 === "dangerouslySetInnerHTML" ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, k2 != null && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : l2 === "children" ? typeof k2 !== "string" && typeof k2 !== "number" || (f2 = f2 || []).push(l2, "" + k2) : l2 !== "suppressContentEditableWarning" && l2 !== "suppressHydrationWarning" && (ca$1.hasOwnProperty(l2) ? (k2 != null && l2 === "onScroll" && G$1("scroll", a2), f2 || h2 === k2 || (f2 = [])) : typeof k2 === "object" && k2 !== null && k2.$$typeof === Ga$1 ? k2.toString() : (f2 = f2 || []).push(l2, k2));
          }
          c2 && (f2 = f2 || []).push("style", c2);
          var l2 = f2;
          if (b2.updateQueue = l2)
            b2.flags |= 4;
        }
      };
      Ei = function(a2, b2, c2, d2) {
        c2 !== d2 && (b2.flags |= 4);
      };
      function Fi(a2, b2) {
        if (!lh)
          switch (a2.tailMode) {
            case "hidden":
              b2 = a2.tail;
              for (var c2 = null; b2 !== null; )
                b2.alternate !== null && (c2 = b2), b2 = b2.sibling;
              c2 === null ? a2.tail = null : c2.sibling = null;
              break;
            case "collapsed":
              c2 = a2.tail;
              for (var d2 = null; c2 !== null; )
                c2.alternate !== null && (d2 = c2), c2 = c2.sibling;
              d2 === null ? b2 || a2.tail === null ? a2.tail = null : a2.tail.sibling = null : d2.sibling = null;
          }
      }
      function Gi(a2, b2, c2) {
        var d2 = b2.pendingProps;
        switch (b2.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return null;
          case 1:
            return Ff(b2.type) && Gf(), null;
          case 3:
            fh();
            H$1(N$1);
            H$1(M$2);
            uh();
            d2 = b2.stateNode;
            d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
            if (a2 === null || a2.child === null)
              rh(b2) ? b2.flags |= 4 : d2.hydrate || (b2.flags |= 256);
            Ci(b2);
            return null;
          case 5:
            hh(b2);
            var e2 = dh(ch.current);
            c2 = b2.type;
            if (a2 !== null && b2.stateNode != null)
              Di(a2, b2, c2, d2, e2), a2.ref !== b2.ref && (b2.flags |= 128);
            else {
              if (!d2) {
                if (b2.stateNode === null)
                  throw Error(y$1(166));
                return null;
              }
              a2 = dh(ah.current);
              if (rh(b2)) {
                d2 = b2.stateNode;
                c2 = b2.type;
                var f2 = b2.memoizedProps;
                d2[wf] = b2;
                d2[xf] = f2;
                switch (c2) {
                  case "dialog":
                    G$1("cancel", d2);
                    G$1("close", d2);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    G$1("load", d2);
                    break;
                  case "video":
                  case "audio":
                    for (a2 = 0; a2 < Xe.length; a2++)
                      G$1(Xe[a2], d2);
                    break;
                  case "source":
                    G$1("error", d2);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    G$1("error", d2);
                    G$1("load", d2);
                    break;
                  case "details":
                    G$1("toggle", d2);
                    break;
                  case "input":
                    Za$1(d2, f2);
                    G$1("invalid", d2);
                    break;
                  case "select":
                    d2._wrapperState = { wasMultiple: !!f2.multiple };
                    G$1("invalid", d2);
                    break;
                  case "textarea":
                    hb(d2, f2), G$1("invalid", d2);
                }
                vb(c2, f2);
                a2 = null;
                for (var g2 in f2)
                  f2.hasOwnProperty(g2) && (e2 = f2[g2], g2 === "children" ? typeof e2 === "string" ? d2.textContent !== e2 && (a2 = ["children", e2]) : typeof e2 === "number" && d2.textContent !== "" + e2 && (a2 = ["children", "" + e2]) : ca$1.hasOwnProperty(g2) && e2 != null && g2 === "onScroll" && G$1("scroll", d2));
                switch (c2) {
                  case "input":
                    Va$1(d2);
                    cb(d2, f2, true);
                    break;
                  case "textarea":
                    Va$1(d2);
                    jb(d2);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    typeof f2.onClick === "function" && (d2.onclick = jf);
                }
                d2 = a2;
                b2.updateQueue = d2;
                d2 !== null && (b2.flags |= 4);
              } else {
                g2 = e2.nodeType === 9 ? e2 : e2.ownerDocument;
                a2 === kb.html && (a2 = lb(c2));
                a2 === kb.html ? c2 === "script" ? (a2 = g2.createElement("div"), a2.innerHTML = "<script><\/script>", a2 = a2.removeChild(a2.firstChild)) : typeof d2.is === "string" ? a2 = g2.createElement(c2, { is: d2.is }) : (a2 = g2.createElement(c2), c2 === "select" && (g2 = a2, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a2 = g2.createElementNS(a2, c2);
                a2[wf] = b2;
                a2[xf] = d2;
                Bi(a2, b2, false, false);
                b2.stateNode = a2;
                g2 = wb(c2, d2);
                switch (c2) {
                  case "dialog":
                    G$1("cancel", a2);
                    G$1("close", a2);
                    e2 = d2;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    G$1("load", a2);
                    e2 = d2;
                    break;
                  case "video":
                  case "audio":
                    for (e2 = 0; e2 < Xe.length; e2++)
                      G$1(Xe[e2], a2);
                    e2 = d2;
                    break;
                  case "source":
                    G$1("error", a2);
                    e2 = d2;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    G$1("error", a2);
                    G$1("load", a2);
                    e2 = d2;
                    break;
                  case "details":
                    G$1("toggle", a2);
                    e2 = d2;
                    break;
                  case "input":
                    Za$1(a2, d2);
                    e2 = Ya$1(a2, d2);
                    G$1("invalid", a2);
                    break;
                  case "option":
                    e2 = eb(a2, d2);
                    break;
                  case "select":
                    a2._wrapperState = { wasMultiple: !!d2.multiple };
                    e2 = m$2({}, d2, { value: void 0 });
                    G$1("invalid", a2);
                    break;
                  case "textarea":
                    hb(a2, d2);
                    e2 = gb(a2, d2);
                    G$1("invalid", a2);
                    break;
                  default:
                    e2 = d2;
                }
                vb(c2, e2);
                var h2 = e2;
                for (f2 in h2)
                  if (h2.hasOwnProperty(f2)) {
                    var k2 = h2[f2];
                    f2 === "style" ? tb(a2, k2) : f2 === "dangerouslySetInnerHTML" ? (k2 = k2 ? k2.__html : void 0, k2 != null && ob(a2, k2)) : f2 === "children" ? typeof k2 === "string" ? (c2 !== "textarea" || k2 !== "") && pb(a2, k2) : typeof k2 === "number" && pb(a2, "" + k2) : f2 !== "suppressContentEditableWarning" && f2 !== "suppressHydrationWarning" && f2 !== "autoFocus" && (ca$1.hasOwnProperty(f2) ? k2 != null && f2 === "onScroll" && G$1("scroll", a2) : k2 != null && qa$1(a2, f2, k2, g2));
                  }
                switch (c2) {
                  case "input":
                    Va$1(a2);
                    cb(a2, d2, false);
                    break;
                  case "textarea":
                    Va$1(a2);
                    jb(a2);
                    break;
                  case "option":
                    d2.value != null && a2.setAttribute("value", "" + Sa$1(d2.value));
                    break;
                  case "select":
                    a2.multiple = !!d2.multiple;
                    f2 = d2.value;
                    f2 != null ? fb(a2, !!d2.multiple, f2, false) : d2.defaultValue != null && fb(a2, !!d2.multiple, d2.defaultValue, true);
                    break;
                  default:
                    typeof e2.onClick === "function" && (a2.onclick = jf);
                }
                mf(c2, d2) && (b2.flags |= 4);
              }
              b2.ref !== null && (b2.flags |= 128);
            }
            return null;
          case 6:
            if (a2 && b2.stateNode != null)
              Ei(a2, b2, a2.memoizedProps, d2);
            else {
              if (typeof d2 !== "string" && b2.stateNode === null)
                throw Error(y$1(166));
              c2 = dh(ch.current);
              dh(ah.current);
              rh(b2) ? (d2 = b2.stateNode, c2 = b2.memoizedProps, d2[wf] = b2, d2.nodeValue !== c2 && (b2.flags |= 4)) : (d2 = (c2.nodeType === 9 ? c2 : c2.ownerDocument).createTextNode(d2), d2[wf] = b2, b2.stateNode = d2);
            }
            return null;
          case 13:
            H$1(P$2);
            d2 = b2.memoizedState;
            if ((b2.flags & 64) !== 0)
              return b2.lanes = c2, b2;
            d2 = d2 !== null;
            c2 = false;
            a2 === null ? b2.memoizedProps.fallback !== void 0 && rh(b2) : c2 = a2.memoizedState !== null;
            if (d2 && !c2 && (b2.mode & 2) !== 0)
              if (a2 === null && b2.memoizedProps.unstable_avoidThisFallback !== true || (P$2.current & 1) !== 0)
                V$2 === 0 && (V$2 = 3);
              else {
                if (V$2 === 0 || V$2 === 3)
                  V$2 = 4;
                U$2 === null || (Dg & 134217727) === 0 && (Hi & 134217727) === 0 || Ii(U$2, W$2);
              }
            if (d2 || c2)
              b2.flags |= 4;
            return null;
          case 4:
            return fh(), Ci(b2), a2 === null && cf(b2.stateNode.containerInfo), null;
          case 10:
            return rg(b2), null;
          case 17:
            return Ff(b2.type) && Gf(), null;
          case 19:
            H$1(P$2);
            d2 = b2.memoizedState;
            if (d2 === null)
              return null;
            f2 = (b2.flags & 64) !== 0;
            g2 = d2.rendering;
            if (g2 === null)
              if (f2)
                Fi(d2, false);
              else {
                if (V$2 !== 0 || a2 !== null && (a2.flags & 64) !== 0)
                  for (a2 = b2.child; a2 !== null; ) {
                    g2 = ih(a2);
                    if (g2 !== null) {
                      b2.flags |= 64;
                      Fi(d2, false);
                      f2 = g2.updateQueue;
                      f2 !== null && (b2.updateQueue = f2, b2.flags |= 4);
                      d2.lastEffect === null && (b2.firstEffect = null);
                      b2.lastEffect = d2.lastEffect;
                      d2 = c2;
                      for (c2 = b2.child; c2 !== null; )
                        f2 = c2, a2 = d2, f2.flags &= 2, f2.nextEffect = null, f2.firstEffect = null, f2.lastEffect = null, g2 = f2.alternate, g2 === null ? (f2.childLanes = 0, f2.lanes = a2, f2.child = null, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a2 = g2.dependencies, f2.dependencies = a2 === null ? null : { lanes: a2.lanes, firstContext: a2.firstContext }), c2 = c2.sibling;
                      I$2(P$2, P$2.current & 1 | 2);
                      return b2.child;
                    }
                    a2 = a2.sibling;
                  }
                d2.tail !== null && O$2() > Ji && (b2.flags |= 64, f2 = true, Fi(d2, false), b2.lanes = 33554432);
              }
            else {
              if (!f2)
                if (a2 = ih(g2), a2 !== null) {
                  if (b2.flags |= 64, f2 = true, c2 = a2.updateQueue, c2 !== null && (b2.updateQueue = c2, b2.flags |= 4), Fi(d2, true), d2.tail === null && d2.tailMode === "hidden" && !g2.alternate && !lh)
                    return b2 = b2.lastEffect = d2.lastEffect, b2 !== null && (b2.nextEffect = null), null;
                } else
                  2 * O$2() - d2.renderingStartTime > Ji && c2 !== 1073741824 && (b2.flags |= 64, f2 = true, Fi(d2, false), b2.lanes = 33554432);
              d2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = d2.last, c2 !== null ? c2.sibling = g2 : b2.child = g2, d2.last = g2);
            }
            return d2.tail !== null ? (c2 = d2.tail, d2.rendering = c2, d2.tail = c2.sibling, d2.lastEffect = b2.lastEffect, d2.renderingStartTime = O$2(), c2.sibling = null, b2 = P$2.current, I$2(P$2, f2 ? b2 & 1 | 2 : b2 & 1), c2) : null;
          case 23:
          case 24:
            return Ki(), a2 !== null && a2.memoizedState !== null !== (b2.memoizedState !== null) && d2.mode !== "unstable-defer-without-hiding" && (b2.flags |= 4), null;
        }
        throw Error(y$1(156, b2.tag));
      }
      function Li(a2) {
        switch (a2.tag) {
          case 1:
            Ff(a2.type) && Gf();
            var b2 = a2.flags;
            return b2 & 4096 ? (a2.flags = b2 & -4097 | 64, a2) : null;
          case 3:
            fh();
            H$1(N$1);
            H$1(M$2);
            uh();
            b2 = a2.flags;
            if ((b2 & 64) !== 0)
              throw Error(y$1(285));
            a2.flags = b2 & -4097 | 64;
            return a2;
          case 5:
            return hh(a2), null;
          case 13:
            return H$1(P$2), b2 = a2.flags, b2 & 4096 ? (a2.flags = b2 & -4097 | 64, a2) : null;
          case 19:
            return H$1(P$2), null;
          case 4:
            return fh(), null;
          case 10:
            return rg(a2), null;
          case 23:
          case 24:
            return Ki(), null;
          default:
            return null;
        }
      }
      function Mi(a2, b2) {
        try {
          var c2 = "", d2 = b2;
          do
            c2 += Qa$1(d2), d2 = d2.return;
          while (d2);
          var e2 = c2;
        } catch (f2) {
          e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
        }
        return { value: a2, source: b2, stack: e2 };
      }
      function Ni(a2, b2) {
        try {
          console.error(b2.value);
        } catch (c2) {
          setTimeout(function() {
            throw c2;
          });
        }
      }
      var Oi = typeof WeakMap === "function" ? WeakMap : Map;
      function Pi(a2, b2, c2) {
        c2 = zg(-1, c2);
        c2.tag = 3;
        c2.payload = { element: null };
        var d2 = b2.value;
        c2.callback = function() {
          Qi || (Qi = true, Ri = d2);
          Ni(a2, b2);
        };
        return c2;
      }
      function Si(a2, b2, c2) {
        c2 = zg(-1, c2);
        c2.tag = 3;
        var d2 = a2.type.getDerivedStateFromError;
        if (typeof d2 === "function") {
          var e2 = b2.value;
          c2.payload = function() {
            Ni(a2, b2);
            return d2(e2);
          };
        }
        var f2 = a2.stateNode;
        f2 !== null && typeof f2.componentDidCatch === "function" && (c2.callback = function() {
          typeof d2 !== "function" && (Ti === null ? Ti = /* @__PURE__ */ new Set([this]) : Ti.add(this), Ni(a2, b2));
          var c3 = b2.stack;
          this.componentDidCatch(b2.value, { componentStack: c3 !== null ? c3 : "" });
        });
        return c2;
      }
      var Ui = typeof WeakSet === "function" ? WeakSet : Set;
      function Vi(a2) {
        var b2 = a2.ref;
        if (b2 !== null)
          if (typeof b2 === "function")
            try {
              b2(null);
            } catch (c2) {
              Wi(a2, c2);
            }
          else
            b2.current = null;
      }
      function Xi(a2, b2) {
        switch (b2.tag) {
          case 0:
          case 11:
          case 15:
          case 22:
            return;
          case 1:
            if (b2.flags & 256 && a2 !== null) {
              var c2 = a2.memoizedProps, d2 = a2.memoizedState;
              a2 = b2.stateNode;
              b2 = a2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? c2 : lg(b2.type, c2), d2);
              a2.__reactInternalSnapshotBeforeUpdate = b2;
            }
            return;
          case 3:
            b2.flags & 256 && qf(b2.stateNode.containerInfo);
            return;
          case 5:
          case 6:
          case 4:
          case 17:
            return;
        }
        throw Error(y$1(163));
      }
      function Yi(a2, b2, c2) {
        switch (c2.tag) {
          case 0:
          case 11:
          case 15:
          case 22:
            b2 = c2.updateQueue;
            b2 = b2 !== null ? b2.lastEffect : null;
            if (b2 !== null) {
              a2 = b2 = b2.next;
              do {
                if ((a2.tag & 3) === 3) {
                  var d2 = a2.create;
                  a2.destroy = d2();
                }
                a2 = a2.next;
              } while (a2 !== b2);
            }
            b2 = c2.updateQueue;
            b2 = b2 !== null ? b2.lastEffect : null;
            if (b2 !== null) {
              a2 = b2 = b2.next;
              do {
                var e2 = a2;
                d2 = e2.next;
                e2 = e2.tag;
                (e2 & 4) !== 0 && (e2 & 1) !== 0 && (Zi(c2, a2), $i(c2, a2));
                a2 = d2;
              } while (a2 !== b2);
            }
            return;
          case 1:
            a2 = c2.stateNode;
            c2.flags & 4 && (b2 === null ? a2.componentDidMount() : (d2 = c2.elementType === c2.type ? b2.memoizedProps : lg(c2.type, b2.memoizedProps), a2.componentDidUpdate(d2, b2.memoizedState, a2.__reactInternalSnapshotBeforeUpdate)));
            b2 = c2.updateQueue;
            b2 !== null && Eg(c2, b2, a2);
            return;
          case 3:
            b2 = c2.updateQueue;
            if (b2 !== null) {
              a2 = null;
              if (c2.child !== null)
                switch (c2.child.tag) {
                  case 5:
                    a2 = c2.child.stateNode;
                    break;
                  case 1:
                    a2 = c2.child.stateNode;
                }
              Eg(c2, b2, a2);
            }
            return;
          case 5:
            a2 = c2.stateNode;
            b2 === null && c2.flags & 4 && mf(c2.type, c2.memoizedProps) && a2.focus();
            return;
          case 6:
            return;
          case 4:
            return;
          case 12:
            return;
          case 13:
            c2.memoizedState === null && (c2 = c2.alternate, c2 !== null && (c2 = c2.memoizedState, c2 !== null && (c2 = c2.dehydrated, c2 !== null && Cc(c2))));
            return;
          case 19:
          case 17:
          case 20:
          case 21:
          case 23:
          case 24:
            return;
        }
        throw Error(y$1(163));
      }
      function aj(a2, b2) {
        for (var c2 = a2; ; ) {
          if (c2.tag === 5) {
            var d2 = c2.stateNode;
            if (b2)
              d2 = d2.style, typeof d2.setProperty === "function" ? d2.setProperty("display", "none", "important") : d2.display = "none";
            else {
              d2 = c2.stateNode;
              var e2 = c2.memoizedProps.style;
              e2 = e2 !== void 0 && e2 !== null && e2.hasOwnProperty("display") ? e2.display : null;
              d2.style.display = sb("display", e2);
            }
          } else if (c2.tag === 6)
            c2.stateNode.nodeValue = b2 ? "" : c2.memoizedProps;
          else if ((c2.tag !== 23 && c2.tag !== 24 || c2.memoizedState === null || c2 === a2) && c2.child !== null) {
            c2.child.return = c2;
            c2 = c2.child;
            continue;
          }
          if (c2 === a2)
            break;
          for (; c2.sibling === null; ) {
            if (c2.return === null || c2.return === a2)
              return;
            c2 = c2.return;
          }
          c2.sibling.return = c2.return;
          c2 = c2.sibling;
        }
      }
      function bj(a2, b2) {
        if (Mf && typeof Mf.onCommitFiberUnmount === "function")
          try {
            Mf.onCommitFiberUnmount(Lf, b2);
          } catch (f2) {
          }
        switch (b2.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
          case 22:
            a2 = b2.updateQueue;
            if (a2 !== null && (a2 = a2.lastEffect, a2 !== null)) {
              var c2 = a2 = a2.next;
              do {
                var d2 = c2, e2 = d2.destroy;
                d2 = d2.tag;
                if (e2 !== void 0)
                  if ((d2 & 4) !== 0)
                    Zi(b2, c2);
                  else {
                    d2 = b2;
                    try {
                      e2();
                    } catch (f2) {
                      Wi(d2, f2);
                    }
                  }
                c2 = c2.next;
              } while (c2 !== a2);
            }
            break;
          case 1:
            Vi(b2);
            a2 = b2.stateNode;
            if (typeof a2.componentWillUnmount === "function")
              try {
                a2.props = b2.memoizedProps, a2.state = b2.memoizedState, a2.componentWillUnmount();
              } catch (f2) {
                Wi(b2, f2);
              }
            break;
          case 5:
            Vi(b2);
            break;
          case 4:
            cj(a2, b2);
        }
      }
      function dj(a2) {
        a2.alternate = null;
        a2.child = null;
        a2.dependencies = null;
        a2.firstEffect = null;
        a2.lastEffect = null;
        a2.memoizedProps = null;
        a2.memoizedState = null;
        a2.pendingProps = null;
        a2.return = null;
        a2.updateQueue = null;
      }
      function ej(a2) {
        return a2.tag === 5 || a2.tag === 3 || a2.tag === 4;
      }
      function fj(a2) {
        a: {
          for (var b2 = a2.return; b2 !== null; ) {
            if (ej(b2))
              break a;
            b2 = b2.return;
          }
          throw Error(y$1(160));
        }
        var c2 = b2;
        b2 = c2.stateNode;
        switch (c2.tag) {
          case 5:
            var d2 = false;
            break;
          case 3:
            b2 = b2.containerInfo;
            d2 = true;
            break;
          case 4:
            b2 = b2.containerInfo;
            d2 = true;
            break;
          default:
            throw Error(y$1(161));
        }
        c2.flags & 16 && (pb(b2, ""), c2.flags &= -17);
        a:
          b:
            for (c2 = a2; ; ) {
              for (; c2.sibling === null; ) {
                if (c2.return === null || ej(c2.return)) {
                  c2 = null;
                  break a;
                }
                c2 = c2.return;
              }
              c2.sibling.return = c2.return;
              for (c2 = c2.sibling; c2.tag !== 5 && c2.tag !== 6 && c2.tag !== 18; ) {
                if (c2.flags & 2)
                  continue b;
                if (c2.child === null || c2.tag === 4)
                  continue b;
                else
                  c2.child.return = c2, c2 = c2.child;
              }
              if (!(c2.flags & 2)) {
                c2 = c2.stateNode;
                break a;
              }
            }
        d2 ? gj(a2, c2, b2) : hj(a2, c2, b2);
      }
      function gj(a2, b2, c2) {
        var d2 = a2.tag, e2 = d2 === 5 || d2 === 6;
        if (e2)
          a2 = e2 ? a2.stateNode : a2.stateNode.instance, b2 ? c2.nodeType === 8 ? c2.parentNode.insertBefore(a2, b2) : c2.insertBefore(a2, b2) : (c2.nodeType === 8 ? (b2 = c2.parentNode, b2.insertBefore(a2, c2)) : (b2 = c2, b2.appendChild(a2)), c2 = c2._reactRootContainer, c2 !== null && c2 !== void 0 || b2.onclick !== null || (b2.onclick = jf));
        else if (d2 !== 4 && (a2 = a2.child, a2 !== null))
          for (gj(a2, b2, c2), a2 = a2.sibling; a2 !== null; )
            gj(a2, b2, c2), a2 = a2.sibling;
      }
      function hj(a2, b2, c2) {
        var d2 = a2.tag, e2 = d2 === 5 || d2 === 6;
        if (e2)
          a2 = e2 ? a2.stateNode : a2.stateNode.instance, b2 ? c2.insertBefore(a2, b2) : c2.appendChild(a2);
        else if (d2 !== 4 && (a2 = a2.child, a2 !== null))
          for (hj(a2, b2, c2), a2 = a2.sibling; a2 !== null; )
            hj(a2, b2, c2), a2 = a2.sibling;
      }
      function cj(a2, b2) {
        for (var c2 = b2, d2 = false, e2, f2; ; ) {
          if (!d2) {
            d2 = c2.return;
            a:
              for (; ; ) {
                if (d2 === null)
                  throw Error(y$1(160));
                e2 = d2.stateNode;
                switch (d2.tag) {
                  case 5:
                    f2 = false;
                    break a;
                  case 3:
                    e2 = e2.containerInfo;
                    f2 = true;
                    break a;
                  case 4:
                    e2 = e2.containerInfo;
                    f2 = true;
                    break a;
                }
                d2 = d2.return;
              }
            d2 = true;
          }
          if (c2.tag === 5 || c2.tag === 6) {
            a:
              for (var g2 = a2, h2 = c2, k2 = h2; ; )
                if (bj(g2, k2), k2.child !== null && k2.tag !== 4)
                  k2.child.return = k2, k2 = k2.child;
                else {
                  if (k2 === h2)
                    break a;
                  for (; k2.sibling === null; ) {
                    if (k2.return === null || k2.return === h2)
                      break a;
                    k2 = k2.return;
                  }
                  k2.sibling.return = k2.return;
                  k2 = k2.sibling;
                }
            f2 ? (g2 = e2, h2 = c2.stateNode, g2.nodeType === 8 ? g2.parentNode.removeChild(h2) : g2.removeChild(h2)) : e2.removeChild(c2.stateNode);
          } else if (c2.tag === 4) {
            if (c2.child !== null) {
              e2 = c2.stateNode.containerInfo;
              f2 = true;
              c2.child.return = c2;
              c2 = c2.child;
              continue;
            }
          } else if (bj(a2, c2), c2.child !== null) {
            c2.child.return = c2;
            c2 = c2.child;
            continue;
          }
          if (c2 === b2)
            break;
          for (; c2.sibling === null; ) {
            if (c2.return === null || c2.return === b2)
              return;
            c2 = c2.return;
            c2.tag === 4 && (d2 = false);
          }
          c2.sibling.return = c2.return;
          c2 = c2.sibling;
        }
      }
      function ij(a2, b2) {
        switch (b2.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
          case 22:
            var c2 = b2.updateQueue;
            c2 = c2 !== null ? c2.lastEffect : null;
            if (c2 !== null) {
              var d2 = c2 = c2.next;
              do
                (d2.tag & 3) === 3 && (a2 = d2.destroy, d2.destroy = void 0, a2 !== void 0 && a2()), d2 = d2.next;
              while (d2 !== c2);
            }
            return;
          case 1:
            return;
          case 5:
            c2 = b2.stateNode;
            if (c2 != null) {
              d2 = b2.memoizedProps;
              var e2 = a2 !== null ? a2.memoizedProps : d2;
              a2 = b2.type;
              var f2 = b2.updateQueue;
              b2.updateQueue = null;
              if (f2 !== null) {
                c2[xf] = d2;
                a2 === "input" && d2.type === "radio" && d2.name != null && $a$1(c2, d2);
                wb(a2, e2);
                b2 = wb(a2, d2);
                for (e2 = 0; e2 < f2.length; e2 += 2) {
                  var g2 = f2[e2], h2 = f2[e2 + 1];
                  g2 === "style" ? tb(c2, h2) : g2 === "dangerouslySetInnerHTML" ? ob(c2, h2) : g2 === "children" ? pb(c2, h2) : qa$1(c2, g2, h2, b2);
                }
                switch (a2) {
                  case "input":
                    ab$1(c2, d2);
                    break;
                  case "textarea":
                    ib(c2, d2);
                    break;
                  case "select":
                    a2 = c2._wrapperState.wasMultiple, c2._wrapperState.wasMultiple = !!d2.multiple, f2 = d2.value, f2 != null ? fb(c2, !!d2.multiple, f2, false) : a2 !== !!d2.multiple && (d2.defaultValue != null ? fb(c2, !!d2.multiple, d2.defaultValue, true) : fb(c2, !!d2.multiple, d2.multiple ? [] : "", false));
                }
              }
            }
            return;
          case 6:
            if (b2.stateNode === null)
              throw Error(y$1(162));
            b2.stateNode.nodeValue = b2.memoizedProps;
            return;
          case 3:
            c2 = b2.stateNode;
            c2.hydrate && (c2.hydrate = false, Cc(c2.containerInfo));
            return;
          case 12:
            return;
          case 13:
            b2.memoizedState !== null && (jj = O$2(), aj(b2.child, true));
            kj(b2);
            return;
          case 19:
            kj(b2);
            return;
          case 17:
            return;
          case 23:
          case 24:
            aj(b2, b2.memoizedState !== null);
            return;
        }
        throw Error(y$1(163));
      }
      function kj(a2) {
        var b2 = a2.updateQueue;
        if (b2 !== null) {
          a2.updateQueue = null;
          var c2 = a2.stateNode;
          c2 === null && (c2 = a2.stateNode = new Ui());
          b2.forEach(function(b3) {
            var d2 = lj.bind(null, a2, b3);
            c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
          });
        }
      }
      function mj(a2, b2) {
        return a2 !== null && (a2 = a2.memoizedState, a2 === null || a2.dehydrated !== null) ? (b2 = b2.memoizedState, b2 !== null && b2.dehydrated === null) : false;
      }
      var nj = Math.ceil, oj = ra$1.ReactCurrentDispatcher, pj = ra$1.ReactCurrentOwner, X$2 = 0, U$2 = null, Y$1 = null, W$2 = 0, qj = 0, rj = Bf(0), V$2 = 0, sj = null, tj = 0, Dg = 0, Hi = 0, uj = 0, vj = null, jj = 0, Ji = Infinity;
      function wj() {
        Ji = O$2() + 500;
      }
      var Z$2 = null, Qi = false, Ri = null, Ti = null, xj = false, yj = null, zj = 90, Aj = [], Bj = [], Cj = null, Dj = 0, Ej = null, Fj = -1, Gj = 0, Hj = 0, Ij = null, Jj = false;
      function Hg() {
        return (X$2 & 48) !== 0 ? O$2() : Fj !== -1 ? Fj : Fj = O$2();
      }
      function Ig(a2) {
        a2 = a2.mode;
        if ((a2 & 2) === 0)
          return 1;
        if ((a2 & 4) === 0)
          return eg() === 99 ? 1 : 2;
        Gj === 0 && (Gj = tj);
        if (kg.transition !== 0) {
          Hj !== 0 && (Hj = vj !== null ? vj.pendingLanes : 0);
          a2 = Gj;
          var b2 = 4186112 & ~Hj;
          b2 &= -b2;
          b2 === 0 && (a2 = 4186112 & ~a2, b2 = a2 & -a2, b2 === 0 && (b2 = 8192));
          return b2;
        }
        a2 = eg();
        (X$2 & 4) !== 0 && a2 === 98 ? a2 = Xc(12, Gj) : (a2 = Sc(a2), a2 = Xc(a2, Gj));
        return a2;
      }
      function Jg(a2, b2, c2) {
        if (50 < Dj)
          throw Dj = 0, Ej = null, Error(y$1(185));
        a2 = Kj(a2, b2);
        if (a2 === null)
          return null;
        $c(a2, b2, c2);
        a2 === U$2 && (Hi |= b2, V$2 === 4 && Ii(a2, W$2));
        var d2 = eg();
        b2 === 1 ? (X$2 & 8) !== 0 && (X$2 & 48) === 0 ? Lj(a2) : (Mj(a2, c2), X$2 === 0 && (wj(), ig())) : ((X$2 & 4) === 0 || d2 !== 98 && d2 !== 99 || (Cj === null ? Cj = /* @__PURE__ */ new Set([a2]) : Cj.add(a2)), Mj(a2, c2));
        vj = a2;
      }
      function Kj(a2, b2) {
        a2.lanes |= b2;
        var c2 = a2.alternate;
        c2 !== null && (c2.lanes |= b2);
        c2 = a2;
        for (a2 = a2.return; a2 !== null; )
          a2.childLanes |= b2, c2 = a2.alternate, c2 !== null && (c2.childLanes |= b2), c2 = a2, a2 = a2.return;
        return c2.tag === 3 ? c2.stateNode : null;
      }
      function Mj(a2, b2) {
        for (var c2 = a2.callbackNode, d2 = a2.suspendedLanes, e2 = a2.pingedLanes, f2 = a2.expirationTimes, g2 = a2.pendingLanes; 0 < g2; ) {
          var h2 = 31 - Vc(g2), k2 = 1 << h2, l2 = f2[h2];
          if (l2 === -1) {
            if ((k2 & d2) === 0 || (k2 & e2) !== 0) {
              l2 = b2;
              Rc(k2);
              var n2 = F$2;
              f2[h2] = 10 <= n2 ? l2 + 250 : 6 <= n2 ? l2 + 5e3 : -1;
            }
          } else
            l2 <= b2 && (a2.expiredLanes |= k2);
          g2 &= ~k2;
        }
        d2 = Uc(a2, a2 === U$2 ? W$2 : 0);
        b2 = F$2;
        if (d2 === 0)
          c2 !== null && (c2 !== Zf && Pf(c2), a2.callbackNode = null, a2.callbackPriority = 0);
        else {
          if (c2 !== null) {
            if (a2.callbackPriority === b2)
              return;
            c2 !== Zf && Pf(c2);
          }
          b2 === 15 ? (c2 = Lj.bind(null, a2), ag === null ? (ag = [c2], bg = Of(Uf, jg)) : ag.push(c2), c2 = Zf) : b2 === 14 ? c2 = hg(99, Lj.bind(null, a2)) : (c2 = Tc(b2), c2 = hg(c2, Nj.bind(null, a2)));
          a2.callbackPriority = b2;
          a2.callbackNode = c2;
        }
      }
      function Nj(a2) {
        Fj = -1;
        Hj = Gj = 0;
        if ((X$2 & 48) !== 0)
          throw Error(y$1(327));
        var b2 = a2.callbackNode;
        if (Oj() && a2.callbackNode !== b2)
          return null;
        var c2 = Uc(a2, a2 === U$2 ? W$2 : 0);
        if (c2 === 0)
          return null;
        var d2 = c2;
        var e2 = X$2;
        X$2 |= 16;
        var f2 = Pj();
        if (U$2 !== a2 || W$2 !== d2)
          wj(), Qj(a2, d2);
        do
          try {
            Rj();
            break;
          } catch (h2) {
            Sj(a2, h2);
          }
        while (1);
        qg();
        oj.current = f2;
        X$2 = e2;
        Y$1 !== null ? d2 = 0 : (U$2 = null, W$2 = 0, d2 = V$2);
        if ((tj & Hi) !== 0)
          Qj(a2, 0);
        else if (d2 !== 0) {
          d2 === 2 && (X$2 |= 64, a2.hydrate && (a2.hydrate = false, qf(a2.containerInfo)), c2 = Wc(a2), c2 !== 0 && (d2 = Tj(a2, c2)));
          if (d2 === 1)
            throw b2 = sj, Qj(a2, 0), Ii(a2, c2), Mj(a2, O$2()), b2;
          a2.finishedWork = a2.current.alternate;
          a2.finishedLanes = c2;
          switch (d2) {
            case 0:
            case 1:
              throw Error(y$1(345));
            case 2:
              Uj(a2);
              break;
            case 3:
              Ii(a2, c2);
              if ((c2 & 62914560) === c2 && (d2 = jj + 500 - O$2(), 10 < d2)) {
                if (Uc(a2, 0) !== 0)
                  break;
                e2 = a2.suspendedLanes;
                if ((e2 & c2) !== c2) {
                  Hg();
                  a2.pingedLanes |= a2.suspendedLanes & e2;
                  break;
                }
                a2.timeoutHandle = of(Uj.bind(null, a2), d2);
                break;
              }
              Uj(a2);
              break;
            case 4:
              Ii(a2, c2);
              if ((c2 & 4186112) === c2)
                break;
              d2 = a2.eventTimes;
              for (e2 = -1; 0 < c2; ) {
                var g2 = 31 - Vc(c2);
                f2 = 1 << g2;
                g2 = d2[g2];
                g2 > e2 && (e2 = g2);
                c2 &= ~f2;
              }
              c2 = e2;
              c2 = O$2() - c2;
              c2 = (120 > c2 ? 120 : 480 > c2 ? 480 : 1080 > c2 ? 1080 : 1920 > c2 ? 1920 : 3e3 > c2 ? 3e3 : 4320 > c2 ? 4320 : 1960 * nj(c2 / 1960)) - c2;
              if (10 < c2) {
                a2.timeoutHandle = of(Uj.bind(null, a2), c2);
                break;
              }
              Uj(a2);
              break;
            case 5:
              Uj(a2);
              break;
            default:
              throw Error(y$1(329));
          }
        }
        Mj(a2, O$2());
        return a2.callbackNode === b2 ? Nj.bind(null, a2) : null;
      }
      function Ii(a2, b2) {
        b2 &= ~uj;
        b2 &= ~Hi;
        a2.suspendedLanes |= b2;
        a2.pingedLanes &= ~b2;
        for (a2 = a2.expirationTimes; 0 < b2; ) {
          var c2 = 31 - Vc(b2), d2 = 1 << c2;
          a2[c2] = -1;
          b2 &= ~d2;
        }
      }
      function Lj(a2) {
        if ((X$2 & 48) !== 0)
          throw Error(y$1(327));
        Oj();
        if (a2 === U$2 && (a2.expiredLanes & W$2) !== 0) {
          var b2 = W$2;
          var c2 = Tj(a2, b2);
          (tj & Hi) !== 0 && (b2 = Uc(a2, b2), c2 = Tj(a2, b2));
        } else
          b2 = Uc(a2, 0), c2 = Tj(a2, b2);
        a2.tag !== 0 && c2 === 2 && (X$2 |= 64, a2.hydrate && (a2.hydrate = false, qf(a2.containerInfo)), b2 = Wc(a2), b2 !== 0 && (c2 = Tj(a2, b2)));
        if (c2 === 1)
          throw c2 = sj, Qj(a2, 0), Ii(a2, b2), Mj(a2, O$2()), c2;
        a2.finishedWork = a2.current.alternate;
        a2.finishedLanes = b2;
        Uj(a2);
        Mj(a2, O$2());
        return null;
      }
      function Vj() {
        if (Cj !== null) {
          var a2 = Cj;
          Cj = null;
          a2.forEach(function(a3) {
            a3.expiredLanes |= 24 & a3.pendingLanes;
            Mj(a3, O$2());
          });
        }
        ig();
      }
      function Wj(a2, b2) {
        var c2 = X$2;
        X$2 |= 1;
        try {
          return a2(b2);
        } finally {
          X$2 = c2, X$2 === 0 && (wj(), ig());
        }
      }
      function Xj(a2, b2) {
        var c2 = X$2;
        X$2 &= -2;
        X$2 |= 8;
        try {
          return a2(b2);
        } finally {
          X$2 = c2, X$2 === 0 && (wj(), ig());
        }
      }
      function ni(a2, b2) {
        I$2(rj, qj);
        qj |= b2;
        tj |= b2;
      }
      function Ki() {
        qj = rj.current;
        H$1(rj);
      }
      function Qj(a2, b2) {
        a2.finishedWork = null;
        a2.finishedLanes = 0;
        var c2 = a2.timeoutHandle;
        c2 !== -1 && (a2.timeoutHandle = -1, pf(c2));
        if (Y$1 !== null)
          for (c2 = Y$1.return; c2 !== null; ) {
            var d2 = c2;
            switch (d2.tag) {
              case 1:
                d2 = d2.type.childContextTypes;
                d2 !== null && d2 !== void 0 && Gf();
                break;
              case 3:
                fh();
                H$1(N$1);
                H$1(M$2);
                uh();
                break;
              case 5:
                hh(d2);
                break;
              case 4:
                fh();
                break;
              case 13:
                H$1(P$2);
                break;
              case 19:
                H$1(P$2);
                break;
              case 10:
                rg(d2);
                break;
              case 23:
              case 24:
                Ki();
            }
            c2 = c2.return;
          }
        U$2 = a2;
        Y$1 = Tg(a2.current, null);
        W$2 = qj = tj = b2;
        V$2 = 0;
        sj = null;
        uj = Hi = Dg = 0;
      }
      function Sj(a2, b2) {
        do {
          var c2 = Y$1;
          try {
            qg();
            vh.current = Gh;
            if (yh) {
              for (var d2 = R$2.memoizedState; d2 !== null; ) {
                var e2 = d2.queue;
                e2 !== null && (e2.pending = null);
                d2 = d2.next;
              }
              yh = false;
            }
            xh = 0;
            T$1 = S$2 = R$2 = null;
            zh = false;
            pj.current = null;
            if (c2 === null || c2.return === null) {
              V$2 = 1;
              sj = b2;
              Y$1 = null;
              break;
            }
            a: {
              var f2 = a2, g2 = c2.return, h2 = c2, k2 = b2;
              b2 = W$2;
              h2.flags |= 2048;
              h2.firstEffect = h2.lastEffect = null;
              if (k2 !== null && typeof k2 === "object" && typeof k2.then === "function") {
                var l2 = k2;
                if ((h2.mode & 2) === 0) {
                  var n2 = h2.alternate;
                  n2 ? (h2.updateQueue = n2.updateQueue, h2.memoizedState = n2.memoizedState, h2.lanes = n2.lanes) : (h2.updateQueue = null, h2.memoizedState = null);
                }
                var A2 = (P$2.current & 1) !== 0, p2 = g2;
                do {
                  var C2;
                  if (C2 = p2.tag === 13) {
                    var x2 = p2.memoizedState;
                    if (x2 !== null)
                      C2 = x2.dehydrated !== null ? true : false;
                    else {
                      var w2 = p2.memoizedProps;
                      C2 = w2.fallback === void 0 ? false : w2.unstable_avoidThisFallback !== true ? true : A2 ? false : true;
                    }
                  }
                  if (C2) {
                    var z2 = p2.updateQueue;
                    if (z2 === null) {
                      var u2 = /* @__PURE__ */ new Set();
                      u2.add(l2);
                      p2.updateQueue = u2;
                    } else
                      z2.add(l2);
                    if ((p2.mode & 2) === 0) {
                      p2.flags |= 64;
                      h2.flags |= 16384;
                      h2.flags &= -2981;
                      if (h2.tag === 1)
                        if (h2.alternate === null)
                          h2.tag = 17;
                        else {
                          var t2 = zg(-1, 1);
                          t2.tag = 2;
                          Ag(h2, t2);
                        }
                      h2.lanes |= 1;
                      break a;
                    }
                    k2 = void 0;
                    h2 = b2;
                    var q2 = f2.pingCache;
                    q2 === null ? (q2 = f2.pingCache = new Oi(), k2 = /* @__PURE__ */ new Set(), q2.set(l2, k2)) : (k2 = q2.get(l2), k2 === void 0 && (k2 = /* @__PURE__ */ new Set(), q2.set(l2, k2)));
                    if (!k2.has(h2)) {
                      k2.add(h2);
                      var v2 = Yj.bind(null, f2, l2, h2);
                      l2.then(v2, v2);
                    }
                    p2.flags |= 4096;
                    p2.lanes = b2;
                    break a;
                  }
                  p2 = p2.return;
                } while (p2 !== null);
                k2 = Error((Ra$1(h2.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
              }
              V$2 !== 5 && (V$2 = 2);
              k2 = Mi(k2, h2);
              p2 = g2;
              do {
                switch (p2.tag) {
                  case 3:
                    f2 = k2;
                    p2.flags |= 4096;
                    b2 &= -b2;
                    p2.lanes |= b2;
                    var J2 = Pi(p2, f2, b2);
                    Bg(p2, J2);
                    break a;
                  case 1:
                    f2 = k2;
                    var K2 = p2.type, Q2 = p2.stateNode;
                    if ((p2.flags & 64) === 0 && (typeof K2.getDerivedStateFromError === "function" || Q2 !== null && typeof Q2.componentDidCatch === "function" && (Ti === null || !Ti.has(Q2)))) {
                      p2.flags |= 4096;
                      b2 &= -b2;
                      p2.lanes |= b2;
                      var L2 = Si(p2, f2, b2);
                      Bg(p2, L2);
                      break a;
                    }
                }
                p2 = p2.return;
              } while (p2 !== null);
            }
            Zj(c2);
          } catch (va2) {
            b2 = va2;
            Y$1 === c2 && c2 !== null && (Y$1 = c2 = c2.return);
            continue;
          }
          break;
        } while (1);
      }
      function Pj() {
        var a2 = oj.current;
        oj.current = Gh;
        return a2 === null ? Gh : a2;
      }
      function Tj(a2, b2) {
        var c2 = X$2;
        X$2 |= 16;
        var d2 = Pj();
        U$2 === a2 && W$2 === b2 || Qj(a2, b2);
        do
          try {
            ak();
            break;
          } catch (e2) {
            Sj(a2, e2);
          }
        while (1);
        qg();
        X$2 = c2;
        oj.current = d2;
        if (Y$1 !== null)
          throw Error(y$1(261));
        U$2 = null;
        W$2 = 0;
        return V$2;
      }
      function ak() {
        for (; Y$1 !== null; )
          bk(Y$1);
      }
      function Rj() {
        for (; Y$1 !== null && !Qf(); )
          bk(Y$1);
      }
      function bk(a2) {
        var b2 = ck(a2.alternate, a2, qj);
        a2.memoizedProps = a2.pendingProps;
        b2 === null ? Zj(a2) : Y$1 = b2;
        pj.current = null;
      }
      function Zj(a2) {
        var b2 = a2;
        do {
          var c2 = b2.alternate;
          a2 = b2.return;
          if ((b2.flags & 2048) === 0) {
            c2 = Gi(c2, b2, qj);
            if (c2 !== null) {
              Y$1 = c2;
              return;
            }
            c2 = b2;
            if (c2.tag !== 24 && c2.tag !== 23 || c2.memoizedState === null || (qj & 1073741824) !== 0 || (c2.mode & 4) === 0) {
              for (var d2 = 0, e2 = c2.child; e2 !== null; )
                d2 |= e2.lanes | e2.childLanes, e2 = e2.sibling;
              c2.childLanes = d2;
            }
            a2 !== null && (a2.flags & 2048) === 0 && (a2.firstEffect === null && (a2.firstEffect = b2.firstEffect), b2.lastEffect !== null && (a2.lastEffect !== null && (a2.lastEffect.nextEffect = b2.firstEffect), a2.lastEffect = b2.lastEffect), 1 < b2.flags && (a2.lastEffect !== null ? a2.lastEffect.nextEffect = b2 : a2.firstEffect = b2, a2.lastEffect = b2));
          } else {
            c2 = Li(b2);
            if (c2 !== null) {
              c2.flags &= 2047;
              Y$1 = c2;
              return;
            }
            a2 !== null && (a2.firstEffect = a2.lastEffect = null, a2.flags |= 2048);
          }
          b2 = b2.sibling;
          if (b2 !== null) {
            Y$1 = b2;
            return;
          }
          Y$1 = b2 = a2;
        } while (b2 !== null);
        V$2 === 0 && (V$2 = 5);
      }
      function Uj(a2) {
        var b2 = eg();
        gg(99, dk.bind(null, a2, b2));
        return null;
      }
      function dk(a2, b2) {
        do
          Oj();
        while (yj !== null);
        if ((X$2 & 48) !== 0)
          throw Error(y$1(327));
        var c2 = a2.finishedWork;
        if (c2 === null)
          return null;
        a2.finishedWork = null;
        a2.finishedLanes = 0;
        if (c2 === a2.current)
          throw Error(y$1(177));
        a2.callbackNode = null;
        var d2 = c2.lanes | c2.childLanes, e2 = d2, f2 = a2.pendingLanes & ~e2;
        a2.pendingLanes = e2;
        a2.suspendedLanes = 0;
        a2.pingedLanes = 0;
        a2.expiredLanes &= e2;
        a2.mutableReadLanes &= e2;
        a2.entangledLanes &= e2;
        e2 = a2.entanglements;
        for (var g2 = a2.eventTimes, h2 = a2.expirationTimes; 0 < f2; ) {
          var k2 = 31 - Vc(f2), l2 = 1 << k2;
          e2[k2] = 0;
          g2[k2] = -1;
          h2[k2] = -1;
          f2 &= ~l2;
        }
        Cj !== null && (d2 & 24) === 0 && Cj.has(a2) && Cj.delete(a2);
        a2 === U$2 && (Y$1 = U$2 = null, W$2 = 0);
        1 < c2.flags ? c2.lastEffect !== null ? (c2.lastEffect.nextEffect = c2, d2 = c2.firstEffect) : d2 = c2 : d2 = c2.firstEffect;
        if (d2 !== null) {
          e2 = X$2;
          X$2 |= 32;
          pj.current = null;
          kf = fd;
          g2 = Ne();
          if (Oe(g2)) {
            if ("selectionStart" in g2)
              h2 = { start: g2.selectionStart, end: g2.selectionEnd };
            else
              a:
                if (h2 = (h2 = g2.ownerDocument) && h2.defaultView || window, (l2 = h2.getSelection && h2.getSelection()) && l2.rangeCount !== 0) {
                  h2 = l2.anchorNode;
                  f2 = l2.anchorOffset;
                  k2 = l2.focusNode;
                  l2 = l2.focusOffset;
                  try {
                    h2.nodeType, k2.nodeType;
                  } catch (va2) {
                    h2 = null;
                    break a;
                  }
                  var n2 = 0, A2 = -1, p2 = -1, C2 = 0, x2 = 0, w2 = g2, z2 = null;
                  b:
                    for (; ; ) {
                      for (var u2; ; ) {
                        w2 !== h2 || f2 !== 0 && w2.nodeType !== 3 || (A2 = n2 + f2);
                        w2 !== k2 || l2 !== 0 && w2.nodeType !== 3 || (p2 = n2 + l2);
                        w2.nodeType === 3 && (n2 += w2.nodeValue.length);
                        if ((u2 = w2.firstChild) === null)
                          break;
                        z2 = w2;
                        w2 = u2;
                      }
                      for (; ; ) {
                        if (w2 === g2)
                          break b;
                        z2 === h2 && ++C2 === f2 && (A2 = n2);
                        z2 === k2 && ++x2 === l2 && (p2 = n2);
                        if ((u2 = w2.nextSibling) !== null)
                          break;
                        w2 = z2;
                        z2 = w2.parentNode;
                      }
                      w2 = u2;
                    }
                  h2 = A2 === -1 || p2 === -1 ? null : { start: A2, end: p2 };
                } else
                  h2 = null;
            h2 = h2 || { start: 0, end: 0 };
          } else
            h2 = null;
          lf = { focusedElem: g2, selectionRange: h2 };
          fd = false;
          Ij = null;
          Jj = false;
          Z$2 = d2;
          do
            try {
              ek();
            } catch (va2) {
              if (Z$2 === null)
                throw Error(y$1(330));
              Wi(Z$2, va2);
              Z$2 = Z$2.nextEffect;
            }
          while (Z$2 !== null);
          Ij = null;
          Z$2 = d2;
          do
            try {
              for (g2 = a2; Z$2 !== null; ) {
                var t2 = Z$2.flags;
                t2 & 16 && pb(Z$2.stateNode, "");
                if (t2 & 128) {
                  var q2 = Z$2.alternate;
                  if (q2 !== null) {
                    var v2 = q2.ref;
                    v2 !== null && (typeof v2 === "function" ? v2(null) : v2.current = null);
                  }
                }
                switch (t2 & 1038) {
                  case 2:
                    fj(Z$2);
                    Z$2.flags &= -3;
                    break;
                  case 6:
                    fj(Z$2);
                    Z$2.flags &= -3;
                    ij(Z$2.alternate, Z$2);
                    break;
                  case 1024:
                    Z$2.flags &= -1025;
                    break;
                  case 1028:
                    Z$2.flags &= -1025;
                    ij(Z$2.alternate, Z$2);
                    break;
                  case 4:
                    ij(Z$2.alternate, Z$2);
                    break;
                  case 8:
                    h2 = Z$2;
                    cj(g2, h2);
                    var J2 = h2.alternate;
                    dj(h2);
                    J2 !== null && dj(J2);
                }
                Z$2 = Z$2.nextEffect;
              }
            } catch (va2) {
              if (Z$2 === null)
                throw Error(y$1(330));
              Wi(Z$2, va2);
              Z$2 = Z$2.nextEffect;
            }
          while (Z$2 !== null);
          v2 = lf;
          q2 = Ne();
          t2 = v2.focusedElem;
          g2 = v2.selectionRange;
          if (q2 !== t2 && t2 && t2.ownerDocument && Me(t2.ownerDocument.documentElement, t2)) {
            g2 !== null && Oe(t2) && (q2 = g2.start, v2 = g2.end, v2 === void 0 && (v2 = q2), "selectionStart" in t2 ? (t2.selectionStart = q2, t2.selectionEnd = Math.min(v2, t2.value.length)) : (v2 = (q2 = t2.ownerDocument || document) && q2.defaultView || window, v2.getSelection && (v2 = v2.getSelection(), h2 = t2.textContent.length, J2 = Math.min(g2.start, h2), g2 = g2.end === void 0 ? J2 : Math.min(g2.end, h2), !v2.extend && J2 > g2 && (h2 = g2, g2 = J2, J2 = h2), h2 = Le(t2, J2), f2 = Le(t2, g2), h2 && f2 && (v2.rangeCount !== 1 || v2.anchorNode !== h2.node || v2.anchorOffset !== h2.offset || v2.focusNode !== f2.node || v2.focusOffset !== f2.offset) && (q2 = q2.createRange(), q2.setStart(h2.node, h2.offset), v2.removeAllRanges(), J2 > g2 ? (v2.addRange(q2), v2.extend(f2.node, f2.offset)) : (q2.setEnd(f2.node, f2.offset), v2.addRange(q2))))));
            q2 = [];
            for (v2 = t2; v2 = v2.parentNode; )
              v2.nodeType === 1 && q2.push({ element: v2, left: v2.scrollLeft, top: v2.scrollTop });
            typeof t2.focus === "function" && t2.focus();
            for (t2 = 0; t2 < q2.length; t2++)
              v2 = q2[t2], v2.element.scrollLeft = v2.left, v2.element.scrollTop = v2.top;
          }
          fd = !!kf;
          lf = kf = null;
          a2.current = c2;
          Z$2 = d2;
          do
            try {
              for (t2 = a2; Z$2 !== null; ) {
                var K2 = Z$2.flags;
                K2 & 36 && Yi(t2, Z$2.alternate, Z$2);
                if (K2 & 128) {
                  q2 = void 0;
                  var Q2 = Z$2.ref;
                  if (Q2 !== null) {
                    var L2 = Z$2.stateNode;
                    switch (Z$2.tag) {
                      case 5:
                        q2 = L2;
                        break;
                      default:
                        q2 = L2;
                    }
                    typeof Q2 === "function" ? Q2(q2) : Q2.current = q2;
                  }
                }
                Z$2 = Z$2.nextEffect;
              }
            } catch (va2) {
              if (Z$2 === null)
                throw Error(y$1(330));
              Wi(Z$2, va2);
              Z$2 = Z$2.nextEffect;
            }
          while (Z$2 !== null);
          Z$2 = null;
          $f();
          X$2 = e2;
        } else
          a2.current = c2;
        if (xj)
          xj = false, yj = a2, zj = b2;
        else
          for (Z$2 = d2; Z$2 !== null; )
            b2 = Z$2.nextEffect, Z$2.nextEffect = null, Z$2.flags & 8 && (K2 = Z$2, K2.sibling = null, K2.stateNode = null), Z$2 = b2;
        d2 = a2.pendingLanes;
        d2 === 0 && (Ti = null);
        d2 === 1 ? a2 === Ej ? Dj++ : (Dj = 0, Ej = a2) : Dj = 0;
        c2 = c2.stateNode;
        if (Mf && typeof Mf.onCommitFiberRoot === "function")
          try {
            Mf.onCommitFiberRoot(Lf, c2, void 0, (c2.current.flags & 64) === 64);
          } catch (va2) {
          }
        Mj(a2, O$2());
        if (Qi)
          throw Qi = false, a2 = Ri, Ri = null, a2;
        if ((X$2 & 8) !== 0)
          return null;
        ig();
        return null;
      }
      function ek() {
        for (; Z$2 !== null; ) {
          var a2 = Z$2.alternate;
          Jj || Ij === null || ((Z$2.flags & 8) !== 0 ? dc(Z$2, Ij) && (Jj = true) : Z$2.tag === 13 && mj(a2, Z$2) && dc(Z$2, Ij) && (Jj = true));
          var b2 = Z$2.flags;
          (b2 & 256) !== 0 && Xi(a2, Z$2);
          (b2 & 512) === 0 || xj || (xj = true, hg(97, function() {
            Oj();
            return null;
          }));
          Z$2 = Z$2.nextEffect;
        }
      }
      function Oj() {
        if (zj !== 90) {
          var a2 = 97 < zj ? 97 : zj;
          zj = 90;
          return gg(a2, fk);
        }
        return false;
      }
      function $i(a2, b2) {
        Aj.push(b2, a2);
        xj || (xj = true, hg(97, function() {
          Oj();
          return null;
        }));
      }
      function Zi(a2, b2) {
        Bj.push(b2, a2);
        xj || (xj = true, hg(97, function() {
          Oj();
          return null;
        }));
      }
      function fk() {
        if (yj === null)
          return false;
        var a2 = yj;
        yj = null;
        if ((X$2 & 48) !== 0)
          throw Error(y$1(331));
        var b2 = X$2;
        X$2 |= 32;
        var c2 = Bj;
        Bj = [];
        for (var d2 = 0; d2 < c2.length; d2 += 2) {
          var e2 = c2[d2], f2 = c2[d2 + 1], g2 = e2.destroy;
          e2.destroy = void 0;
          if (typeof g2 === "function")
            try {
              g2();
            } catch (k2) {
              if (f2 === null)
                throw Error(y$1(330));
              Wi(f2, k2);
            }
        }
        c2 = Aj;
        Aj = [];
        for (d2 = 0; d2 < c2.length; d2 += 2) {
          e2 = c2[d2];
          f2 = c2[d2 + 1];
          try {
            var h2 = e2.create;
            e2.destroy = h2();
          } catch (k2) {
            if (f2 === null)
              throw Error(y$1(330));
            Wi(f2, k2);
          }
        }
        for (h2 = a2.current.firstEffect; h2 !== null; )
          a2 = h2.nextEffect, h2.nextEffect = null, h2.flags & 8 && (h2.sibling = null, h2.stateNode = null), h2 = a2;
        X$2 = b2;
        ig();
        return true;
      }
      function gk(a2, b2, c2) {
        b2 = Mi(c2, b2);
        b2 = Pi(a2, b2, 1);
        Ag(a2, b2);
        b2 = Hg();
        a2 = Kj(a2, 1);
        a2 !== null && ($c(a2, 1, b2), Mj(a2, b2));
      }
      function Wi(a2, b2) {
        if (a2.tag === 3)
          gk(a2, a2, b2);
        else
          for (var c2 = a2.return; c2 !== null; ) {
            if (c2.tag === 3) {
              gk(c2, a2, b2);
              break;
            } else if (c2.tag === 1) {
              var d2 = c2.stateNode;
              if (typeof c2.type.getDerivedStateFromError === "function" || typeof d2.componentDidCatch === "function" && (Ti === null || !Ti.has(d2))) {
                a2 = Mi(b2, a2);
                var e2 = Si(c2, a2, 1);
                Ag(c2, e2);
                e2 = Hg();
                c2 = Kj(c2, 1);
                if (c2 !== null)
                  $c(c2, 1, e2), Mj(c2, e2);
                else if (typeof d2.componentDidCatch === "function" && (Ti === null || !Ti.has(d2)))
                  try {
                    d2.componentDidCatch(b2, a2);
                  } catch (f2) {
                  }
                break;
              }
            }
            c2 = c2.return;
          }
      }
      function Yj(a2, b2, c2) {
        var d2 = a2.pingCache;
        d2 !== null && d2.delete(b2);
        b2 = Hg();
        a2.pingedLanes |= a2.suspendedLanes & c2;
        U$2 === a2 && (W$2 & c2) === c2 && (V$2 === 4 || V$2 === 3 && (W$2 & 62914560) === W$2 && 500 > O$2() - jj ? Qj(a2, 0) : uj |= c2);
        Mj(a2, b2);
      }
      function lj(a2, b2) {
        var c2 = a2.stateNode;
        c2 !== null && c2.delete(b2);
        b2 = 0;
        b2 === 0 && (b2 = a2.mode, (b2 & 2) === 0 ? b2 = 1 : (b2 & 4) === 0 ? b2 = eg() === 99 ? 1 : 2 : (Gj === 0 && (Gj = tj), b2 = Yc(62914560 & ~Gj), b2 === 0 && (b2 = 4194304)));
        c2 = Hg();
        a2 = Kj(a2, b2);
        a2 !== null && ($c(a2, b2, c2), Mj(a2, c2));
      }
      var ck;
      ck = function(a2, b2, c2) {
        var d2 = b2.lanes;
        if (a2 !== null)
          if (a2.memoizedProps !== b2.pendingProps || N$1.current)
            ug = true;
          else if ((c2 & d2) !== 0)
            ug = (a2.flags & 16384) !== 0 ? true : false;
          else {
            ug = false;
            switch (b2.tag) {
              case 3:
                ri(b2);
                sh();
                break;
              case 5:
                gh(b2);
                break;
              case 1:
                Ff(b2.type) && Jf(b2);
                break;
              case 4:
                eh(b2, b2.stateNode.containerInfo);
                break;
              case 10:
                d2 = b2.memoizedProps.value;
                var e2 = b2.type._context;
                I$2(mg, e2._currentValue);
                e2._currentValue = d2;
                break;
              case 13:
                if (b2.memoizedState !== null) {
                  if ((c2 & b2.child.childLanes) !== 0)
                    return ti(a2, b2, c2);
                  I$2(P$2, P$2.current & 1);
                  b2 = hi(a2, b2, c2);
                  return b2 !== null ? b2.sibling : null;
                }
                I$2(P$2, P$2.current & 1);
                break;
              case 19:
                d2 = (c2 & b2.childLanes) !== 0;
                if ((a2.flags & 64) !== 0) {
                  if (d2)
                    return Ai(a2, b2, c2);
                  b2.flags |= 64;
                }
                e2 = b2.memoizedState;
                e2 !== null && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
                I$2(P$2, P$2.current);
                if (d2)
                  break;
                else
                  return null;
              case 23:
              case 24:
                return b2.lanes = 0, mi(a2, b2, c2);
            }
            return hi(a2, b2, c2);
          }
        else
          ug = false;
        b2.lanes = 0;
        switch (b2.tag) {
          case 2:
            d2 = b2.type;
            a2 !== null && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
            a2 = b2.pendingProps;
            e2 = Ef(b2, M$2.current);
            tg(b2, c2);
            e2 = Ch(null, b2, d2, a2, e2, c2);
            b2.flags |= 1;
            if (typeof e2 === "object" && e2 !== null && typeof e2.render === "function" && e2.$$typeof === void 0) {
              b2.tag = 1;
              b2.memoizedState = null;
              b2.updateQueue = null;
              if (Ff(d2)) {
                var f2 = true;
                Jf(b2);
              } else
                f2 = false;
              b2.memoizedState = e2.state !== null && e2.state !== void 0 ? e2.state : null;
              xg(b2);
              var g2 = d2.getDerivedStateFromProps;
              typeof g2 === "function" && Gg(b2, d2, g2, a2);
              e2.updater = Kg;
              b2.stateNode = e2;
              e2._reactInternals = b2;
              Og(b2, d2, a2, c2);
              b2 = qi(null, b2, d2, true, f2, c2);
            } else
              b2.tag = 0, fi(null, b2, e2, c2), b2 = b2.child;
            return b2;
          case 16:
            e2 = b2.elementType;
            a: {
              a2 !== null && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
              a2 = b2.pendingProps;
              f2 = e2._init;
              e2 = f2(e2._payload);
              b2.type = e2;
              f2 = b2.tag = hk(e2);
              a2 = lg(e2, a2);
              switch (f2) {
                case 0:
                  b2 = li(null, b2, e2, a2, c2);
                  break a;
                case 1:
                  b2 = pi(null, b2, e2, a2, c2);
                  break a;
                case 11:
                  b2 = gi(null, b2, e2, a2, c2);
                  break a;
                case 14:
                  b2 = ii(null, b2, e2, lg(e2.type, a2), d2, c2);
                  break a;
              }
              throw Error(y$1(306, e2, ""));
            }
            return b2;
          case 0:
            return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : lg(d2, e2), li(a2, b2, d2, e2, c2);
          case 1:
            return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : lg(d2, e2), pi(a2, b2, d2, e2, c2);
          case 3:
            ri(b2);
            d2 = b2.updateQueue;
            if (a2 === null || d2 === null)
              throw Error(y$1(282));
            d2 = b2.pendingProps;
            e2 = b2.memoizedState;
            e2 = e2 !== null ? e2.element : null;
            yg(a2, b2);
            Cg(b2, d2, null, c2);
            d2 = b2.memoizedState.element;
            if (d2 === e2)
              sh(), b2 = hi(a2, b2, c2);
            else {
              e2 = b2.stateNode;
              if (f2 = e2.hydrate)
                kh = rf(b2.stateNode.containerInfo.firstChild), jh = b2, f2 = lh = true;
              if (f2) {
                a2 = e2.mutableSourceEagerHydrationData;
                if (a2 != null)
                  for (e2 = 0; e2 < a2.length; e2 += 2)
                    f2 = a2[e2], f2._workInProgressVersionPrimary = a2[e2 + 1], th.push(f2);
                c2 = Zg(b2, null, d2, c2);
                for (b2.child = c2; c2; )
                  c2.flags = c2.flags & -3 | 1024, c2 = c2.sibling;
              } else
                fi(a2, b2, d2, c2), sh();
              b2 = b2.child;
            }
            return b2;
          case 5:
            return gh(b2), a2 === null && ph(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = a2 !== null ? a2.memoizedProps : null, g2 = e2.children, nf(d2, e2) ? g2 = null : f2 !== null && nf(d2, f2) && (b2.flags |= 16), oi(a2, b2), fi(a2, b2, g2, c2), b2.child;
          case 6:
            return a2 === null && ph(b2), null;
          case 13:
            return ti(a2, b2, c2);
          case 4:
            return eh(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, a2 === null ? b2.child = Yg(b2, null, d2, c2) : fi(a2, b2, d2, c2), b2.child;
          case 11:
            return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : lg(d2, e2), gi(a2, b2, d2, e2, c2);
          case 7:
            return fi(a2, b2, b2.pendingProps, c2), b2.child;
          case 8:
            return fi(a2, b2, b2.pendingProps.children, c2), b2.child;
          case 12:
            return fi(a2, b2, b2.pendingProps.children, c2), b2.child;
          case 10:
            a: {
              d2 = b2.type._context;
              e2 = b2.pendingProps;
              g2 = b2.memoizedProps;
              f2 = e2.value;
              var h2 = b2.type._context;
              I$2(mg, h2._currentValue);
              h2._currentValue = f2;
              if (g2 !== null)
                if (h2 = g2.value, f2 = He(h2, f2) ? 0 : (typeof d2._calculateChangedBits === "function" ? d2._calculateChangedBits(h2, f2) : 1073741823) | 0, f2 === 0) {
                  if (g2.children === e2.children && !N$1.current) {
                    b2 = hi(a2, b2, c2);
                    break a;
                  }
                } else
                  for (h2 = b2.child, h2 !== null && (h2.return = b2); h2 !== null; ) {
                    var k2 = h2.dependencies;
                    if (k2 !== null) {
                      g2 = h2.child;
                      for (var l2 = k2.firstContext; l2 !== null; ) {
                        if (l2.context === d2 && (l2.observedBits & f2) !== 0) {
                          h2.tag === 1 && (l2 = zg(-1, c2 & -c2), l2.tag = 2, Ag(h2, l2));
                          h2.lanes |= c2;
                          l2 = h2.alternate;
                          l2 !== null && (l2.lanes |= c2);
                          sg(h2.return, c2);
                          k2.lanes |= c2;
                          break;
                        }
                        l2 = l2.next;
                      }
                    } else
                      g2 = h2.tag === 10 ? h2.type === b2.type ? null : h2.child : h2.child;
                    if (g2 !== null)
                      g2.return = h2;
                    else
                      for (g2 = h2; g2 !== null; ) {
                        if (g2 === b2) {
                          g2 = null;
                          break;
                        }
                        h2 = g2.sibling;
                        if (h2 !== null) {
                          h2.return = g2.return;
                          g2 = h2;
                          break;
                        }
                        g2 = g2.return;
                      }
                    h2 = g2;
                  }
              fi(a2, b2, e2.children, c2);
              b2 = b2.child;
            }
            return b2;
          case 9:
            return e2 = b2.type, f2 = b2.pendingProps, d2 = f2.children, tg(b2, c2), e2 = vg(e2, f2.unstable_observedBits), d2 = d2(e2), b2.flags |= 1, fi(a2, b2, d2, c2), b2.child;
          case 14:
            return e2 = b2.type, f2 = lg(e2, b2.pendingProps), f2 = lg(e2.type, f2), ii(a2, b2, e2, f2, d2, c2);
          case 15:
            return ki(a2, b2, b2.type, b2.pendingProps, d2, c2);
          case 17:
            return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : lg(d2, e2), a2 !== null && (a2.alternate = null, b2.alternate = null, b2.flags |= 2), b2.tag = 1, Ff(d2) ? (a2 = true, Jf(b2)) : a2 = false, tg(b2, c2), Mg(b2, d2, e2), Og(b2, d2, e2, c2), qi(null, b2, d2, true, a2, c2);
          case 19:
            return Ai(a2, b2, c2);
          case 23:
            return mi(a2, b2, c2);
          case 24:
            return mi(a2, b2, c2);
        }
        throw Error(y$1(156, b2.tag));
      };
      function ik(a2, b2, c2, d2) {
        this.tag = a2;
        this.key = c2;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b2;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d2;
        this.flags = 0;
        this.lastEffect = this.firstEffect = this.nextEffect = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function nh(a2, b2, c2, d2) {
        return new ik(a2, b2, c2, d2);
      }
      function ji(a2) {
        a2 = a2.prototype;
        return !(!a2 || !a2.isReactComponent);
      }
      function hk(a2) {
        if (typeof a2 === "function")
          return ji(a2) ? 1 : 0;
        if (a2 !== void 0 && a2 !== null) {
          a2 = a2.$$typeof;
          if (a2 === Aa$1)
            return 11;
          if (a2 === Da$1)
            return 14;
        }
        return 2;
      }
      function Tg(a2, b2) {
        var c2 = a2.alternate;
        c2 === null ? (c2 = nh(a2.tag, b2, a2.key, a2.mode), c2.elementType = a2.elementType, c2.type = a2.type, c2.stateNode = a2.stateNode, c2.alternate = a2, a2.alternate = c2) : (c2.pendingProps = b2, c2.type = a2.type, c2.flags = 0, c2.nextEffect = null, c2.firstEffect = null, c2.lastEffect = null);
        c2.childLanes = a2.childLanes;
        c2.lanes = a2.lanes;
        c2.child = a2.child;
        c2.memoizedProps = a2.memoizedProps;
        c2.memoizedState = a2.memoizedState;
        c2.updateQueue = a2.updateQueue;
        b2 = a2.dependencies;
        c2.dependencies = b2 === null ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
        c2.sibling = a2.sibling;
        c2.index = a2.index;
        c2.ref = a2.ref;
        return c2;
      }
      function Vg(a2, b2, c2, d2, e2, f2) {
        var g2 = 2;
        d2 = a2;
        if (typeof a2 === "function")
          ji(a2) && (g2 = 1);
        else if (typeof a2 === "string")
          g2 = 5;
        else
          a:
            switch (a2) {
              case ua$1:
                return Xg(c2.children, e2, f2, b2);
              case Ha$1:
                g2 = 8;
                e2 |= 16;
                break;
              case wa$1:
                g2 = 8;
                e2 |= 1;
                break;
              case xa$1:
                return a2 = nh(12, c2, b2, e2 | 8), a2.elementType = xa$1, a2.type = xa$1, a2.lanes = f2, a2;
              case Ba$1:
                return a2 = nh(13, c2, b2, e2), a2.type = Ba$1, a2.elementType = Ba$1, a2.lanes = f2, a2;
              case Ca$1:
                return a2 = nh(19, c2, b2, e2), a2.elementType = Ca$1, a2.lanes = f2, a2;
              case Ia$1:
                return vi(c2, e2, f2, b2);
              case Ja$1:
                return a2 = nh(24, c2, b2, e2), a2.elementType = Ja$1, a2.lanes = f2, a2;
              default:
                if (typeof a2 === "object" && a2 !== null)
                  switch (a2.$$typeof) {
                    case ya$1:
                      g2 = 10;
                      break a;
                    case za$1:
                      g2 = 9;
                      break a;
                    case Aa$1:
                      g2 = 11;
                      break a;
                    case Da$1:
                      g2 = 14;
                      break a;
                    case Ea$1:
                      g2 = 16;
                      d2 = null;
                      break a;
                    case Fa$1:
                      g2 = 22;
                      break a;
                  }
                throw Error(y$1(130, a2 == null ? a2 : typeof a2, ""));
            }
        b2 = nh(g2, c2, b2, e2);
        b2.elementType = a2;
        b2.type = d2;
        b2.lanes = f2;
        return b2;
      }
      function Xg(a2, b2, c2, d2) {
        a2 = nh(7, a2, d2, b2);
        a2.lanes = c2;
        return a2;
      }
      function vi(a2, b2, c2, d2) {
        a2 = nh(23, a2, d2, b2);
        a2.elementType = Ia$1;
        a2.lanes = c2;
        return a2;
      }
      function Ug(a2, b2, c2) {
        a2 = nh(6, a2, null, b2);
        a2.lanes = c2;
        return a2;
      }
      function Wg(a2, b2, c2) {
        b2 = nh(4, a2.children !== null ? a2.children : [], a2.key, b2);
        b2.lanes = c2;
        b2.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation };
        return b2;
      }
      function jk(a2, b2, c2) {
        this.tag = b2;
        this.containerInfo = a2;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.pendingContext = this.context = null;
        this.hydrate = c2;
        this.callbackNode = null;
        this.callbackPriority = 0;
        this.eventTimes = Zc(0);
        this.expirationTimes = Zc(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = Zc(0);
        this.mutableSourceEagerHydrationData = null;
      }
      function kk(a2, b2, c2) {
        var d2 = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
        return { $$typeof: ta$1, key: d2 == null ? null : "" + d2, children: a2, containerInfo: b2, implementation: c2 };
      }
      function lk(a2, b2, c2, d2) {
        var e2 = b2.current, f2 = Hg(), g2 = Ig(e2);
        a:
          if (c2) {
            c2 = c2._reactInternals;
            b: {
              if (Zb(c2) !== c2 || c2.tag !== 1)
                throw Error(y$1(170));
              var h2 = c2;
              do {
                switch (h2.tag) {
                  case 3:
                    h2 = h2.stateNode.context;
                    break b;
                  case 1:
                    if (Ff(h2.type)) {
                      h2 = h2.stateNode.__reactInternalMemoizedMergedChildContext;
                      break b;
                    }
                }
                h2 = h2.return;
              } while (h2 !== null);
              throw Error(y$1(171));
            }
            if (c2.tag === 1) {
              var k2 = c2.type;
              if (Ff(k2)) {
                c2 = If(c2, k2, h2);
                break a;
              }
            }
            c2 = h2;
          } else
            c2 = Cf;
        b2.context === null ? b2.context = c2 : b2.pendingContext = c2;
        b2 = zg(f2, g2);
        b2.payload = { element: a2 };
        d2 = d2 === void 0 ? null : d2;
        d2 !== null && (b2.callback = d2);
        Ag(e2, b2);
        Jg(e2, g2, f2);
        return g2;
      }
      function mk(a2) {
        a2 = a2.current;
        if (!a2.child)
          return null;
        switch (a2.child.tag) {
          case 5:
            return a2.child.stateNode;
          default:
            return a2.child.stateNode;
        }
      }
      function nk(a2, b2) {
        a2 = a2.memoizedState;
        if (a2 !== null && a2.dehydrated !== null) {
          var c2 = a2.retryLane;
          a2.retryLane = c2 !== 0 && c2 < b2 ? c2 : b2;
        }
      }
      function ok(a2, b2) {
        nk(a2, b2);
        (a2 = a2.alternate) && nk(a2, b2);
      }
      function pk() {
        return null;
      }
      function qk(a2, b2, c2) {
        var d2 = c2 != null && c2.hydrationOptions != null && c2.hydrationOptions.mutableSources || null;
        c2 = new jk(a2, b2, c2 != null && c2.hydrate === true);
        b2 = nh(3, null, null, b2 === 2 ? 7 : b2 === 1 ? 3 : 0);
        c2.current = b2;
        b2.stateNode = c2;
        xg(b2);
        a2[ff] = c2.current;
        cf(a2.nodeType === 8 ? a2.parentNode : a2);
        if (d2)
          for (a2 = 0; a2 < d2.length; a2++) {
            b2 = d2[a2];
            var e2 = b2._getVersion;
            e2 = e2(b2._source);
            c2.mutableSourceEagerHydrationData == null ? c2.mutableSourceEagerHydrationData = [b2, e2] : c2.mutableSourceEagerHydrationData.push(b2, e2);
          }
        this._internalRoot = c2;
      }
      qk.prototype.render = function(a2) {
        lk(a2, this._internalRoot, null, null);
      };
      qk.prototype.unmount = function() {
        var a2 = this._internalRoot, b2 = a2.containerInfo;
        lk(null, a2, null, function() {
          b2[ff] = null;
        });
      };
      function rk(a2) {
        return !(!a2 || a2.nodeType !== 1 && a2.nodeType !== 9 && a2.nodeType !== 11 && (a2.nodeType !== 8 || a2.nodeValue !== " react-mount-point-unstable "));
      }
      function sk(a2, b2) {
        b2 || (b2 = a2 ? a2.nodeType === 9 ? a2.documentElement : a2.firstChild : null, b2 = !(!b2 || b2.nodeType !== 1 || !b2.hasAttribute("data-reactroot")));
        if (!b2)
          for (var c2; c2 = a2.lastChild; )
            a2.removeChild(c2);
        return new qk(a2, 0, b2 ? { hydrate: true } : void 0);
      }
      function tk(a2, b2, c2, d2, e2) {
        var f2 = c2._reactRootContainer;
        if (f2) {
          var g2 = f2._internalRoot;
          if (typeof e2 === "function") {
            var h2 = e2;
            e2 = function() {
              var a3 = mk(g2);
              h2.call(a3);
            };
          }
          lk(b2, g2, a2, e2);
        } else {
          f2 = c2._reactRootContainer = sk(c2, d2);
          g2 = f2._internalRoot;
          if (typeof e2 === "function") {
            var k2 = e2;
            e2 = function() {
              var a3 = mk(g2);
              k2.call(a3);
            };
          }
          Xj(function() {
            lk(b2, g2, a2, e2);
          });
        }
        return mk(g2);
      }
      ec = function(a2) {
        if (a2.tag === 13) {
          var b2 = Hg();
          Jg(a2, 4, b2);
          ok(a2, 4);
        }
      };
      fc = function(a2) {
        if (a2.tag === 13) {
          var b2 = Hg();
          Jg(a2, 67108864, b2);
          ok(a2, 67108864);
        }
      };
      gc = function(a2) {
        if (a2.tag === 13) {
          var b2 = Hg(), c2 = Ig(a2);
          Jg(a2, c2, b2);
          ok(a2, c2);
        }
      };
      hc = function(a2, b2) {
        return b2();
      };
      yb = function(a2, b2, c2) {
        switch (b2) {
          case "input":
            ab$1(a2, c2);
            b2 = c2.name;
            if (c2.type === "radio" && b2 != null) {
              for (c2 = a2; c2.parentNode; )
                c2 = c2.parentNode;
              c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
              for (b2 = 0; b2 < c2.length; b2++) {
                var d2 = c2[b2];
                if (d2 !== a2 && d2.form === a2.form) {
                  var e2 = Db(d2);
                  if (!e2)
                    throw Error(y$1(90));
                  Wa$1(d2);
                  ab$1(d2, e2);
                }
              }
            }
            break;
          case "textarea":
            ib(a2, c2);
            break;
          case "select":
            b2 = c2.value, b2 != null && fb(a2, !!c2.multiple, b2, false);
        }
      };
      Gb = Wj;
      Hb = function(a2, b2, c2, d2, e2) {
        var f2 = X$2;
        X$2 |= 4;
        try {
          return gg(98, a2.bind(null, b2, c2, d2, e2));
        } finally {
          X$2 = f2, X$2 === 0 && (wj(), ig());
        }
      };
      Ib = function() {
        (X$2 & 49) === 0 && (Vj(), Oj());
      };
      Jb = function(a2, b2) {
        var c2 = X$2;
        X$2 |= 2;
        try {
          return a2(b2);
        } finally {
          X$2 = c2, X$2 === 0 && (wj(), ig());
        }
      };
      function uk(a2, b2) {
        var c2 = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
        if (!rk(b2))
          throw Error(y$1(200));
        return kk(a2, b2, null, c2);
      }
      var vk = { Events: [Cb, ue, Db, Eb, Fb, Oj, { current: false }] }, wk = { findFiberByHostInstance: wc, bundleType: 0, version: "17.0.2", rendererPackageName: "react-dom" };
      var xk = { bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra$1.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
        a2 = cc(a2);
        return a2 === null ? null : a2.stateNode;
      }, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null };
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined") {
        var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!yk.isDisabled && yk.supportsFiber)
          try {
            Lf = yk.inject(xk), Mf = yk;
          } catch (a2) {
          }
      }
      reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
      reactDom_production_min.createPortal = uk;
      reactDom_production_min.findDOMNode = function(a2) {
        if (a2 == null)
          return null;
        if (a2.nodeType === 1)
          return a2;
        var b2 = a2._reactInternals;
        if (b2 === void 0) {
          if (typeof a2.render === "function")
            throw Error(y$1(188));
          throw Error(y$1(268, Object.keys(a2)));
        }
        a2 = cc(b2);
        a2 = a2 === null ? null : a2.stateNode;
        return a2;
      };
      reactDom_production_min.flushSync = function(a2, b2) {
        var c2 = X$2;
        if ((c2 & 48) !== 0)
          return a2(b2);
        X$2 |= 1;
        try {
          if (a2)
            return gg(99, a2.bind(null, b2));
        } finally {
          X$2 = c2, ig();
        }
      };
      reactDom_production_min.hydrate = function(a2, b2, c2) {
        if (!rk(b2))
          throw Error(y$1(200));
        return tk(null, a2, b2, true, c2);
      };
      reactDom_production_min.render = function(a2, b2, c2) {
        if (!rk(b2))
          throw Error(y$1(200));
        return tk(null, a2, b2, false, c2);
      };
      reactDom_production_min.unmountComponentAtNode = function(a2) {
        if (!rk(a2))
          throw Error(y$1(40));
        return a2._reactRootContainer ? (Xj(function() {
          tk(null, null, a2, false, function() {
            a2._reactRootContainer = null;
            a2[ff] = null;
          });
        }), true) : false;
      };
      reactDom_production_min.unstable_batchedUpdates = Wj;
      reactDom_production_min.unstable_createPortal = function(a2, b2) {
        return uk(a2, b2, 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null);
      };
      reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a2, b2, c2, d2) {
        if (!rk(c2))
          throw Error(y$1(200));
        if (a2 == null || a2._reactInternals === void 0)
          throw Error(y$1(38));
        return tk(a2, b2, c2, false, d2);
      };
      reactDom_production_min.version = "17.0.2";
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      {
        checkDCE();
        reactDom.exports = reactDom_production_min;
      }
      var ReactDOM = reactDom.exports;
      const SUSPENSE_PROMISE = Symbol();
      const isSuspensePromise = (promise) => !!promise[SUSPENSE_PROMISE];
      const isSuspensePromiseAlreadyCancelled = (suspensePromise) => !suspensePromise[SUSPENSE_PROMISE].c;
      const cancelSuspensePromise = (suspensePromise) => {
        var _a, _b;
        (_b = (_a = suspensePromise[SUSPENSE_PROMISE]).c) == null ? void 0 : _b.call(_a);
      };
      const isEqualSuspensePromise = (oldSuspensePromise, newSuspensePromise) => {
        const oldOriginalPromise = oldSuspensePromise[SUSPENSE_PROMISE].o;
        const newOriginalPromise = newSuspensePromise[SUSPENSE_PROMISE].o;
        return oldOriginalPromise === newOriginalPromise || oldSuspensePromise === newOriginalPromise || isSuspensePromise(oldOriginalPromise) && isEqualSuspensePromise(oldOriginalPromise, newSuspensePromise);
      };
      const createSuspensePromise = (promise) => {
        const objectToAttach = {
          o: promise,
          c: null
        };
        const suspensePromise = new Promise((resolve) => {
          objectToAttach.c = () => {
            objectToAttach.c = null;
            resolve();
          };
          promise.then(objectToAttach.c, objectToAttach.c);
        });
        suspensePromise[SUSPENSE_PROMISE] = objectToAttach;
        return suspensePromise;
      };
      const hasInitialValue = (atom2) => "init" in atom2;
      const READ_ATOM = "r";
      const WRITE_ATOM = "w";
      const COMMIT_ATOM = "c";
      const SUBSCRIBE_ATOM = "s";
      const RESTORE_ATOMS = "h";
      const DEV_SUBSCRIBE_STATE = "n";
      const DEV_GET_MOUNTED_ATOMS = "l";
      const DEV_GET_ATOM_STATE = "a";
      const DEV_GET_MOUNTED = "m";
      const createStore$3 = (initialValues) => {
        const committedAtomStateMap = /* @__PURE__ */ new WeakMap();
        const mountedMap = /* @__PURE__ */ new WeakMap();
        const pendingMap = /* @__PURE__ */ new Map();
        let stateListeners;
        let mountedAtoms;
        if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
          stateListeners = /* @__PURE__ */ new Set();
          mountedAtoms = /* @__PURE__ */ new Set();
        }
        if (initialValues) {
          for (const [atom2, value] of initialValues) {
            const atomState = { v: value, r: 0, d: /* @__PURE__ */ new Map() };
            if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
              Object.freeze(atomState);
              if (!hasInitialValue(atom2)) {
                console.warn("Found initial value for derived atom which can cause unexpected behavior", atom2);
              }
            }
            committedAtomStateMap.set(atom2, atomState);
          }
        }
        const suspensePromiseCacheMap = /* @__PURE__ */ new WeakMap();
        const addSuspensePromiseToCache = (version, atom2, suspensePromise) => {
          let cache = suspensePromiseCacheMap.get(atom2);
          if (!cache) {
            cache = /* @__PURE__ */ new Map();
            suspensePromiseCacheMap.set(atom2, cache);
          }
          suspensePromise.then(() => {
            if (cache.get(version) === suspensePromise) {
              cache.delete(version);
              if (!cache.size) {
                suspensePromiseCacheMap.delete(atom2);
              }
            }
          });
          cache.set(version, suspensePromise);
        };
        const cancelAllSuspensePromiseInCache = (atom2) => {
          const versionSet = /* @__PURE__ */ new Set();
          const cache = suspensePromiseCacheMap.get(atom2);
          if (cache) {
            suspensePromiseCacheMap.delete(atom2);
            cache.forEach((suspensePromise, version) => {
              cancelSuspensePromise(suspensePromise);
              versionSet.add(version);
            });
          }
          return versionSet;
        };
        const versionedAtomStateMapMap = /* @__PURE__ */ new WeakMap();
        const getVersionedAtomStateMap = (version) => {
          let versionedAtomStateMap = versionedAtomStateMapMap.get(version);
          if (!versionedAtomStateMap) {
            versionedAtomStateMap = /* @__PURE__ */ new Map();
            versionedAtomStateMapMap.set(version, versionedAtomStateMap);
          }
          return versionedAtomStateMap;
        };
        const getAtomState = (version, atom2) => {
          if (version) {
            const versionedAtomStateMap = getVersionedAtomStateMap(version);
            let atomState = versionedAtomStateMap.get(atom2);
            if (!atomState) {
              atomState = getAtomState(version.p, atom2);
              if (atomState) {
                versionedAtomStateMap.set(atom2, atomState);
              }
            }
            return atomState;
          }
          return committedAtomStateMap.get(atom2);
        };
        const setAtomState = (version, atom2, atomState) => {
          if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
            Object.freeze(atomState);
          }
          if (version) {
            const versionedAtomStateMap = getVersionedAtomStateMap(version);
            versionedAtomStateMap.set(atom2, atomState);
          } else {
            const prevAtomState = committedAtomStateMap.get(atom2);
            committedAtomStateMap.set(atom2, atomState);
            if (!pendingMap.has(atom2)) {
              pendingMap.set(atom2, prevAtomState);
            }
          }
        };
        const createReadDependencies = (version, prevReadDependencies = /* @__PURE__ */ new Map(), dependencies) => {
          if (!dependencies) {
            return prevReadDependencies;
          }
          const readDependencies = /* @__PURE__ */ new Map();
          let changed = false;
          dependencies.forEach((atom2) => {
            var _a;
            const revision = ((_a = getAtomState(version, atom2)) == null ? void 0 : _a.r) || 0;
            readDependencies.set(atom2, revision);
            if (prevReadDependencies.get(atom2) !== revision) {
              changed = true;
            }
          });
          if (prevReadDependencies.size === readDependencies.size && !changed) {
            return prevReadDependencies;
          }
          return readDependencies;
        };
        const setAtomValue = (version, atom2, value, dependencies, suspensePromise) => {
          const atomState = getAtomState(version, atom2);
          if (atomState) {
            if (suspensePromise && (!("p" in atomState) || !isEqualSuspensePromise(atomState.p, suspensePromise))) {
              return atomState;
            }
            if ("p" in atomState) {
              cancelSuspensePromise(atomState.p);
            }
          }
          const nextAtomState = {
            v: value,
            r: (atomState == null ? void 0 : atomState.r) || 0,
            d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
          };
          let changed = false;
          if (!atomState || !("v" in atomState) || !Object.is(atomState.v, value)) {
            changed = true;
            ++nextAtomState.r;
            if (nextAtomState.d.has(atom2)) {
              nextAtomState.d = new Map(nextAtomState.d).set(atom2, nextAtomState.r);
            }
          } else if ("i" in atomState || nextAtomState.d !== atomState.d && (nextAtomState.d.size !== atomState.d.size || !Array.from(nextAtomState.d.keys()).every((a2) => atomState.d.has(a2)))) {
            changed = true;
            Promise.resolve().then(() => {
              flushPending(version);
            });
          }
          if (atomState && !changed) {
            return atomState;
          }
          setAtomState(version, atom2, nextAtomState);
          return nextAtomState;
        };
        const setAtomReadError = (version, atom2, error, dependencies, suspensePromise) => {
          const atomState = getAtomState(version, atom2);
          if (atomState) {
            if (suspensePromise && (!("p" in atomState) || !isEqualSuspensePromise(atomState.p, suspensePromise))) {
              return atomState;
            }
            if ("p" in atomState) {
              cancelSuspensePromise(atomState.p);
            }
          }
          const nextAtomState = {
            e: error,
            r: (atomState == null ? void 0 : atomState.r) || 0,
            d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
          };
          setAtomState(version, atom2, nextAtomState);
          return nextAtomState;
        };
        const setAtomSuspensePromise = (version, atom2, suspensePromise, dependencies) => {
          const atomState = getAtomState(version, atom2);
          if (atomState && "p" in atomState) {
            if (isEqualSuspensePromise(atomState.p, suspensePromise)) {
              return atomState;
            }
            cancelSuspensePromise(atomState.p);
          }
          addSuspensePromiseToCache(version, atom2, suspensePromise);
          const nextAtomState = {
            p: suspensePromise,
            r: (atomState == null ? void 0 : atomState.r) || 0,
            d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
          };
          setAtomState(version, atom2, nextAtomState);
          return nextAtomState;
        };
        const setAtomPromiseOrValue = (version, atom2, promiseOrValue, dependencies) => {
          if (promiseOrValue instanceof Promise) {
            const suspensePromise = createSuspensePromise(promiseOrValue.then((value) => {
              setAtomValue(version, atom2, value, dependencies, suspensePromise);
            }).catch((e2) => {
              if (e2 instanceof Promise) {
                if (isSuspensePromise(e2)) {
                  return e2.then(() => {
                    readAtomState(version, atom2, true);
                  });
                }
                return e2;
              }
              setAtomReadError(version, atom2, e2, dependencies, suspensePromise);
            }));
            return setAtomSuspensePromise(version, atom2, suspensePromise, dependencies);
          }
          return setAtomValue(version, atom2, promiseOrValue, dependencies);
        };
        const setAtomInvalidated = (version, atom2) => {
          const atomState = getAtomState(version, atom2);
          if (atomState) {
            const nextAtomState = {
              ...atomState,
              i: atomState.r
            };
            setAtomState(version, atom2, nextAtomState);
          } else if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
            console.warn("[Bug] could not invalidate non existing atom", atom2);
          }
        };
        const readAtomState = (version, atom2, force) => {
          if (!force) {
            const atomState = getAtomState(version, atom2);
            if (atomState) {
              if (atomState.r !== atomState.i && "p" in atomState && !isSuspensePromiseAlreadyCancelled(atomState.p)) {
                return atomState;
              }
              atomState.d.forEach((_2, a2) => {
                if (a2 !== atom2) {
                  if (!mountedMap.has(a2)) {
                    readAtomState(version, a2);
                  } else {
                    const aState = getAtomState(version, a2);
                    if (aState && aState.r === aState.i) {
                      readAtomState(version, a2);
                    }
                  }
                }
              });
              if (Array.from(atomState.d).every(([a2, r2]) => {
                const aState = getAtomState(version, a2);
                return aState && "v" in aState && aState.r === r2;
              })) {
                return atomState;
              }
            }
          }
          const dependencies = /* @__PURE__ */ new Set();
          try {
            const promiseOrValue = atom2.read((a2) => {
              dependencies.add(a2);
              const aState = a2 === atom2 ? getAtomState(version, a2) : readAtomState(version, a2);
              if (aState) {
                if ("e" in aState) {
                  throw aState.e;
                }
                if ("p" in aState) {
                  throw aState.p;
                }
                return aState.v;
              }
              if (hasInitialValue(a2)) {
                return a2.init;
              }
              throw new Error("no atom init");
            });
            return setAtomPromiseOrValue(version, atom2, promiseOrValue, dependencies);
          } catch (errorOrPromise) {
            if (errorOrPromise instanceof Promise) {
              const suspensePromise = createSuspensePromise(errorOrPromise);
              return setAtomSuspensePromise(version, atom2, suspensePromise, dependencies);
            }
            return setAtomReadError(version, atom2, errorOrPromise, dependencies);
          }
        };
        const readAtom = (readingAtom, version) => {
          const atomState = readAtomState(version, readingAtom);
          return atomState;
        };
        const addAtom = (version, addingAtom) => {
          let mounted = mountedMap.get(addingAtom);
          if (!mounted) {
            mounted = mountAtom(version, addingAtom);
          }
          return mounted;
        };
        const canUnmountAtom = (atom2, mounted) => !mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom2));
        const delAtom = (version, deletingAtom) => {
          const mounted = mountedMap.get(deletingAtom);
          if (mounted && canUnmountAtom(deletingAtom, mounted)) {
            unmountAtom(version, deletingAtom);
          }
        };
        const invalidateDependents = (version, atom2) => {
          const mounted = mountedMap.get(atom2);
          mounted == null ? void 0 : mounted.t.forEach((dependent) => {
            if (dependent !== atom2) {
              setAtomInvalidated(version, dependent);
              invalidateDependents(version, dependent);
            }
          });
        };
        const writeAtomState = (version, atom2, update) => {
          let isSync = true;
          const writeGetter = (a2, options) => {
            const aState = readAtomState(version, a2);
            if ("e" in aState) {
              throw aState.e;
            }
            if ("p" in aState) {
              if (options == null ? void 0 : options.unstable_promise) {
                return aState.p.then(() => writeGetter(a2, options));
              }
              if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
                console.info("Reading pending atom state in write operation. We throw a promise for now.", a2);
              }
              throw aState.p;
            }
            if ("v" in aState) {
              return aState.v;
            }
            if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
              console.warn("[Bug] no value found while reading atom in write operation. This is probably a bug.", a2);
            }
            throw new Error("no value found");
          };
          const setter = (a2, v2) => {
            let promiseOrVoid2;
            if (a2 === atom2) {
              if (!hasInitialValue(a2)) {
                throw new Error("atom not writable");
              }
              const versionSet = cancelAllSuspensePromiseInCache(a2);
              versionSet.forEach((cancelledVersion) => {
                if (cancelledVersion !== version) {
                  setAtomPromiseOrValue(cancelledVersion, a2, v2);
                }
              });
              const prevAtomState = getAtomState(version, a2);
              const nextAtomState = setAtomPromiseOrValue(version, a2, v2);
              if (prevAtomState !== nextAtomState) {
                invalidateDependents(version, a2);
              }
            } else {
              promiseOrVoid2 = writeAtomState(version, a2, v2);
            }
            if (!isSync) {
              flushPending(version);
            }
            return promiseOrVoid2;
          };
          const promiseOrVoid = atom2.write(writeGetter, setter, update);
          isSync = false;
          return promiseOrVoid;
        };
        const writeAtom = (writingAtom, update, version) => {
          const promiseOrVoid = writeAtomState(version, writingAtom, update);
          flushPending(version);
          return promiseOrVoid;
        };
        const isActuallyWritableAtom = (atom2) => !!atom2.write;
        const mountAtom = (version, atom2, initialDependent) => {
          const mounted = {
            t: new Set(initialDependent && [initialDependent]),
            l: /* @__PURE__ */ new Set()
          };
          mountedMap.set(atom2, mounted);
          if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
            mountedAtoms.add(atom2);
          }
          const atomState = readAtomState(void 0, atom2);
          atomState.d.forEach((_2, a2) => {
            const aMounted = mountedMap.get(a2);
            if (aMounted) {
              aMounted.t.add(atom2);
            } else {
              if (a2 !== atom2) {
                mountAtom(version, a2, atom2);
              }
            }
          });
          if (isActuallyWritableAtom(atom2) && atom2.onMount) {
            const setAtom = (update) => writeAtom(atom2, update, version);
            const onUnmount = atom2.onMount(setAtom);
            version = void 0;
            if (onUnmount) {
              mounted.u = onUnmount;
            }
          }
          return mounted;
        };
        const unmountAtom = (version, atom2) => {
          var _a;
          const onUnmount = (_a = mountedMap.get(atom2)) == null ? void 0 : _a.u;
          if (onUnmount) {
            onUnmount();
          }
          mountedMap.delete(atom2);
          if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
            mountedAtoms.delete(atom2);
          }
          const atomState = getAtomState(version, atom2);
          if (atomState) {
            atomState.d.forEach((_2, a2) => {
              if (a2 !== atom2) {
                const mounted = mountedMap.get(a2);
                if (mounted) {
                  mounted.t.delete(atom2);
                  if (canUnmountAtom(a2, mounted)) {
                    unmountAtom(version, a2);
                  }
                }
              }
            });
          } else if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
            console.warn("[Bug] could not find atom state to unmount", atom2);
          }
        };
        const mountDependencies = (version, atom2, atomState, prevReadDependencies) => {
          const dependencies = new Set(atomState.d.keys());
          prevReadDependencies == null ? void 0 : prevReadDependencies.forEach((_2, a2) => {
            if (dependencies.has(a2)) {
              dependencies.delete(a2);
              return;
            }
            const mounted = mountedMap.get(a2);
            if (mounted) {
              mounted.t.delete(atom2);
              if (canUnmountAtom(a2, mounted)) {
                unmountAtom(version, a2);
              }
            }
          });
          dependencies.forEach((a2) => {
            const mounted = mountedMap.get(a2);
            if (mounted) {
              mounted.t.add(atom2);
            } else if (mountedMap.has(atom2)) {
              mountAtom(version, a2, atom2);
            }
          });
        };
        const flushPending = (version) => {
          if (version) {
            const versionedAtomStateMap = getVersionedAtomStateMap(version);
            versionedAtomStateMap.forEach((atomState, atom2) => {
              const committedAtomState = committedAtomStateMap.get(atom2);
              if (atomState !== committedAtomState) {
                const mounted = mountedMap.get(atom2);
                mounted == null ? void 0 : mounted.l.forEach((listener) => listener(version));
              }
            });
            return;
          }
          while (pendingMap.size) {
            const pending = Array.from(pendingMap);
            pendingMap.clear();
            pending.forEach(([atom2, prevAtomState]) => {
              const atomState = getAtomState(void 0, atom2);
              if (atomState && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
                mountDependencies(void 0, atom2, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
              }
              if (prevAtomState && "i" in prevAtomState && atomState && !("i" in atomState)) {
                return;
              }
              const mounted = mountedMap.get(atom2);
              mounted == null ? void 0 : mounted.l.forEach((listener) => listener());
            });
          }
          if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
            stateListeners.forEach((l2) => l2());
          }
        };
        const commitVersionedAtomStateMap = (version) => {
          const versionedAtomStateMap = getVersionedAtomStateMap(version);
          versionedAtomStateMap.forEach((atomState, atom2) => {
            const prevAtomState = committedAtomStateMap.get(atom2);
            if (!prevAtomState || atomState.r > prevAtomState.r || "v" in atomState && atomState.r === prevAtomState.r && atomState.d !== prevAtomState.d) {
              committedAtomStateMap.set(atom2, atomState);
              if (atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
                mountDependencies(version, atom2, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
              }
            }
          });
        };
        const commitAtom = (_atom, version) => {
          if (version) {
            commitVersionedAtomStateMap(version);
          }
          flushPending(void 0);
        };
        const subscribeAtom = (atom2, callback, version) => {
          const mounted = addAtom(version, atom2);
          const listeners = mounted.l;
          listeners.add(callback);
          return () => {
            listeners.delete(callback);
            delAtom(version, atom2);
          };
        };
        const restoreAtoms = (values2, version) => {
          for (const [atom2, value] of values2) {
            if (hasInitialValue(atom2)) {
              setAtomPromiseOrValue(version, atom2, value);
              invalidateDependents(version, atom2);
            }
          }
          flushPending(version);
        };
        if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production") {
          return {
            [READ_ATOM]: readAtom,
            [WRITE_ATOM]: writeAtom,
            [COMMIT_ATOM]: commitAtom,
            [SUBSCRIBE_ATOM]: subscribeAtom,
            [RESTORE_ATOMS]: restoreAtoms,
            [DEV_SUBSCRIBE_STATE]: (l2) => {
              stateListeners.add(l2);
              return () => {
                stateListeners.delete(l2);
              };
            },
            [DEV_GET_MOUNTED_ATOMS]: () => mountedAtoms.values(),
            [DEV_GET_ATOM_STATE]: (a2) => committedAtomStateMap.get(a2),
            [DEV_GET_MOUNTED]: (a2) => mountedMap.get(a2)
          };
        }
        return {
          [READ_ATOM]: readAtom,
          [WRITE_ATOM]: writeAtom,
          [COMMIT_ATOM]: commitAtom,
          [SUBSCRIBE_ATOM]: subscribeAtom,
          [RESTORE_ATOMS]: restoreAtoms
        };
      };
      const createScopeContainer = (initialValues, unstable_createStore) => {
        const store = unstable_createStore ? unstable_createStore(initialValues).SECRET_INTERNAL_store : createStore$3(initialValues);
        return { s: store };
      };
      const ScopeContextMap = /* @__PURE__ */ new Map();
      const getScopeContext = (scope) => {
        if (!ScopeContextMap.has(scope)) {
          ScopeContextMap.set(scope, react.exports.createContext(createScopeContainer()));
        }
        return ScopeContextMap.get(scope);
      };
      const Provider = ({
        children,
        initialValues,
        scope,
        unstable_createStore,
        unstable_enableVersionedWrite
      }) => {
        const [version, setVersion] = react.exports.useState({});
        react.exports.useEffect(() => {
          const scopeContainer = scopeContainerRef.current;
          if (scopeContainer.w) {
            scopeContainer.s[COMMIT_ATOM](null, version);
            delete version.p;
            scopeContainer.v = version;
          }
        }, [version]);
        const scopeContainerRef = react.exports.useRef();
        if (!scopeContainerRef.current) {
          const scopeContainer = createScopeContainer(initialValues, unstable_createStore);
          if (unstable_enableVersionedWrite) {
            scopeContainer.w = (write) => {
              setVersion((parentVersion) => {
                const nextVersion = { p: parentVersion };
                write(nextVersion);
                return nextVersion;
              });
            };
            scopeContainer.v = version;
          }
          scopeContainerRef.current = scopeContainer;
        }
        const ScopeContainerContext = getScopeContext(scope);
        return react.exports.createElement(ScopeContainerContext.Provider, {
          value: scopeContainerRef.current
        }, children);
      };
      let keyCount = 0;
      function atom(read, write) {
        const key = `atom${++keyCount}`;
        const config22 = {
          toString: () => key
        };
        if (typeof read === "function") {
          config22.read = read;
        } else {
          config22.init = read;
          config22.read = (get2) => get2(config22);
          config22.write = (get2, set2, update) => set2(config22, typeof update === "function" ? update(get2(config22)) : update);
        }
        if (write) {
          config22.write = write;
        }
        return config22;
      }
      function useAtomValue(atom2, scope) {
        const ScopeContext = getScopeContext(scope);
        const scopeContainer = react.exports.useContext(ScopeContext);
        const { s: store, v: versionFromProvider } = scopeContainer;
        const getAtomValue = (version2) => {
          const atomState = store[READ_ATOM](atom2, version2);
          if ("e" in atomState) {
            throw atomState.e;
          }
          if ("p" in atomState) {
            throw atomState.p;
          }
          if ("v" in atomState) {
            return atomState.v;
          }
          throw new Error("no atom value");
        };
        const [[version, valueFromReducer, atomFromReducer], rerenderIfChanged] = react.exports.useReducer((prev, nextVersion) => {
          const nextValue = getAtomValue(nextVersion);
          if (Object.is(prev[1], nextValue) && prev[2] === atom2) {
            return prev;
          }
          return [nextVersion, nextValue, atom2];
        }, versionFromProvider, (initialVersion) => {
          const initialValue = getAtomValue(initialVersion);
          return [initialVersion, initialValue, atom2];
        });
        let value = valueFromReducer;
        if (atomFromReducer !== atom2) {
          rerenderIfChanged(version);
          value = getAtomValue(version);
        }
        react.exports.useEffect(() => {
          const { v: versionFromProvider2 } = scopeContainer;
          if (versionFromProvider2) {
            store[COMMIT_ATOM](atom2, versionFromProvider2);
          }
          const unsubscribe = store[SUBSCRIBE_ATOM](atom2, rerenderIfChanged, versionFromProvider2);
          rerenderIfChanged(versionFromProvider2);
          return unsubscribe;
        }, [store, atom2, scopeContainer]);
        react.exports.useEffect(() => {
          store[COMMIT_ATOM](atom2, version);
        });
        react.exports.useDebugValue(value);
        return value;
      }
      function useSetAtom(atom2, scope) {
        const ScopeContext = getScopeContext(scope);
        const { s: store, w: versionedWrite } = react.exports.useContext(ScopeContext);
        const setAtom = react.exports.useCallback((update) => {
          if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production" && !("write" in atom2)) {
            throw new Error("not writable atom");
          }
          const write = (version) => store[WRITE_ATOM](atom2, update, version);
          return versionedWrite ? versionedWrite(write) : write();
        }, [store, versionedWrite, atom2]);
        return setAtom;
      }
      function useAtom(atom2, scope) {
        if ("scope" in atom2) {
          console.warn("atom.scope is deprecated. Please do useAtom(atom, scope) instead.");
          scope = atom2.scope;
        }
        return [
          useAtomValue(atom2, scope),
          useSetAtom(atom2, scope)
        ];
      }
      function isObject$g(o2) {
        return Object.prototype.toString.call(o2) === "[object Object]";
      }
      function isPlainObject$4(o2) {
        var ctor, prot;
        if (isObject$g(o2) === false)
          return false;
        ctor = o2.constructor;
        if (ctor === void 0)
          return true;
        prot = ctor.prototype;
        if (isObject$g(prot) === false)
          return false;
        if (prot.hasOwnProperty("isPrototypeOf") === false) {
          return false;
        }
        return true;
      }
      function n$2(n2) {
        for (var r2 = arguments.length, t2 = Array(r2 > 1 ? r2 - 1 : 0), e2 = 1; e2 < r2; e2++)
          t2[e2 - 1] = arguments[e2];
        throw Error("[Immer] minified error nr: " + n2 + (t2.length ? " " + t2.map(function(n3) {
          return "'" + n3 + "'";
        }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
      }
      function r$2(n2) {
        return !!n2 && !!n2[Q$1];
      }
      function t$1(n2) {
        return !!n2 && (function(n3) {
          if (!n3 || typeof n3 != "object")
            return false;
          var r2 = Object.getPrototypeOf(n3);
          if (r2 === null)
            return true;
          var t2 = Object.hasOwnProperty.call(r2, "constructor") && r2.constructor;
          return t2 === Object || typeof t2 == "function" && Function.toString.call(t2) === Z$1;
        }(n2) || Array.isArray(n2) || !!n2[L] || !!n2.constructor[L] || s$1(n2) || v(n2));
      }
      function i$1(n2, r2, t2) {
        t2 === void 0 && (t2 = false), o$1(n2) === 0 ? (t2 ? Object.keys : nn)(n2).forEach(function(e2) {
          t2 && typeof e2 == "symbol" || r2(e2, n2[e2], n2);
        }) : n2.forEach(function(t3, e2) {
          return r2(e2, t3, n2);
        });
      }
      function o$1(n2) {
        var r2 = n2[Q$1];
        return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(n2) ? 1 : s$1(n2) ? 2 : v(n2) ? 3 : 0;
      }
      function u$2(n2, r2) {
        return o$1(n2) === 2 ? n2.has(r2) : Object.prototype.hasOwnProperty.call(n2, r2);
      }
      function a$1(n2, r2) {
        return o$1(n2) === 2 ? n2.get(r2) : n2[r2];
      }
      function f$2(n2, r2, t2) {
        var e2 = o$1(n2);
        e2 === 2 ? n2.set(r2, t2) : e2 === 3 ? (n2.delete(r2), n2.add(t2)) : n2[r2] = t2;
      }
      function c$1(n2, r2) {
        return n2 === r2 ? n2 !== 0 || 1 / n2 == 1 / r2 : n2 != n2 && r2 != r2;
      }
      function s$1(n2) {
        return X$1 && n2 instanceof Map;
      }
      function v(n2) {
        return q$1 && n2 instanceof Set;
      }
      function p$2(n2) {
        return n2.o || n2.t;
      }
      function l$2(n2) {
        if (Array.isArray(n2))
          return Array.prototype.slice.call(n2);
        var r2 = rn(n2);
        delete r2[Q$1];
        for (var t2 = nn(r2), e2 = 0; e2 < t2.length; e2++) {
          var i2 = t2[e2], o2 = r2[i2];
          o2.writable === false && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (r2[i2] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i2] });
        }
        return Object.create(Object.getPrototypeOf(n2), r2);
      }
      function d(n2, e2) {
        return e2 === void 0 && (e2 = false), y(n2) || r$2(n2) || !t$1(n2) ? n2 : (o$1(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e2 && i$1(n2, function(n3, r2) {
          return d(r2, true);
        }, true), n2);
      }
      function h() {
        n$2(2);
      }
      function y(n2) {
        return n2 == null || typeof n2 != "object" || Object.isFrozen(n2);
      }
      function b(r2) {
        var t2 = tn[r2];
        return t2 || n$2(18, r2), t2;
      }
      function m$1(n2, r2) {
        tn[n2] || (tn[n2] = r2);
      }
      function _() {
        return U$1;
      }
      function j(n2, r2) {
        r2 && (b("Patches"), n2.u = [], n2.s = [], n2.v = r2);
      }
      function O$1(n2) {
        g$1(n2), n2.p.forEach(S$1), n2.p = null;
      }
      function g$1(n2) {
        n2 === U$1 && (U$1 = n2.l);
      }
      function w(n2) {
        return U$1 = { p: [], l: U$1, h: n2, m: true, _: 0 };
      }
      function S$1(n2) {
        var r2 = n2[Q$1];
        r2.i === 0 || r2.i === 1 ? r2.j() : r2.O = true;
      }
      function P$1(r2, e2) {
        e2._ = e2.p.length;
        var i2 = e2.p[0], o2 = r2 !== void 0 && r2 !== i2;
        return e2.h.g || b("ES5").S(e2, r2, o2), o2 ? (i2[Q$1].P && (O$1(e2), n$2(4)), t$1(r2) && (r2 = M$1(e2, r2), e2.l || x(e2, r2)), e2.u && b("Patches").M(i2[Q$1].t, r2, e2.u, e2.s)) : r2 = M$1(e2, i2, []), O$1(e2), e2.u && e2.v(e2.u, e2.s), r2 !== H ? r2 : void 0;
      }
      function M$1(n2, r2, t2) {
        if (y(r2))
          return r2;
        var e2 = r2[Q$1];
        if (!e2)
          return i$1(r2, function(i2, o3) {
            return A(n2, e2, r2, i2, o3, t2);
          }, true), r2;
        if (e2.A !== n2)
          return r2;
        if (!e2.P)
          return x(n2, e2.t, true), e2.t;
        if (!e2.I) {
          e2.I = true, e2.A._--;
          var o2 = e2.i === 4 || e2.i === 5 ? e2.o = l$2(e2.k) : e2.o;
          i$1(e2.i === 3 ? new Set(o2) : o2, function(r3, i2) {
            return A(n2, e2, o2, r3, i2, t2);
          }), x(n2, o2, false), t2 && n2.u && b("Patches").R(e2, t2, n2.u, n2.s);
        }
        return e2.o;
      }
      function A(e2, i2, o2, a2, c2, s2) {
        if (r$2(c2)) {
          var v2 = M$1(e2, c2, s2 && i2 && i2.i !== 3 && !u$2(i2.D, a2) ? s2.concat(a2) : void 0);
          if (f$2(o2, a2, v2), !r$2(v2))
            return;
          e2.m = false;
        }
        if (t$1(c2) && !y(c2)) {
          if (!e2.h.F && e2._ < 1)
            return;
          M$1(e2, c2), i2 && i2.A.l || x(e2, c2);
        }
      }
      function x(n2, r2, t2) {
        t2 === void 0 && (t2 = false), n2.h.F && n2.m && d(r2, t2);
      }
      function z$1(n2, r2) {
        var t2 = n2[Q$1];
        return (t2 ? p$2(t2) : n2)[r2];
      }
      function I$1(n2, r2) {
        if (r2 in n2)
          for (var t2 = Object.getPrototypeOf(n2); t2; ) {
            var e2 = Object.getOwnPropertyDescriptor(t2, r2);
            if (e2)
              return e2;
            t2 = Object.getPrototypeOf(t2);
          }
      }
      function k(n2) {
        n2.P || (n2.P = true, n2.l && k(n2.l));
      }
      function E$1(n2) {
        n2.o || (n2.o = l$2(n2.t));
      }
      function R$1(n2, r2, t2) {
        var e2 = s$1(r2) ? b("MapSet").N(r2, t2) : v(r2) ? b("MapSet").T(r2, t2) : n2.g ? function(n3, r3) {
          var t3 = Array.isArray(n3), e3 = { i: t3 ? 1 : 0, A: r3 ? r3.A : _(), P: false, I: false, D: {}, l: r3, t: n3, k: null, o: null, j: null, C: false }, i2 = e3, o2 = en;
          t3 && (i2 = [e3], o2 = on);
          var u2 = Proxy.revocable(i2, o2), a2 = u2.revoke, f2 = u2.proxy;
          return e3.k = f2, e3.j = a2, f2;
        }(r2, t2) : b("ES5").J(r2, t2);
        return (t2 ? t2.A : _()).p.push(e2), e2;
      }
      function D$1(e2) {
        return r$2(e2) || n$2(22, e2), function n2(r2) {
          if (!t$1(r2))
            return r2;
          var e3, u2 = r2[Q$1], c2 = o$1(r2);
          if (u2) {
            if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
              return u2.t;
            u2.I = true, e3 = F$1(r2, c2), u2.I = false;
          } else
            e3 = F$1(r2, c2);
          return i$1(e3, function(r3, t2) {
            u2 && a$1(u2.t, r3) === t2 || f$2(e3, r3, n2(t2));
          }), c2 === 3 ? new Set(e3) : e3;
        }(e2);
      }
      function F$1(n2, r2) {
        switch (r2) {
          case 2:
            return new Map(n2);
          case 3:
            return Array.from(n2);
        }
        return l$2(n2);
      }
      function C() {
        function r2(n2, r3) {
          function t2() {
            this.constructor = n2;
          }
          a2(n2, r3), n2.prototype = (t2.prototype = r3.prototype, new t2());
        }
        function e2(n2) {
          n2.o || (n2.D = /* @__PURE__ */ new Map(), n2.o = new Map(n2.t));
        }
        function o2(n2) {
          n2.o || (n2.o = /* @__PURE__ */ new Set(), n2.t.forEach(function(r3) {
            if (t$1(r3)) {
              var e3 = R$1(n2.A.h, r3, n2);
              n2.p.set(r3, e3), n2.o.add(e3);
            } else
              n2.o.add(r3);
          }));
        }
        function u2(r3) {
          r3.O && n$2(3, JSON.stringify(p$2(r3)));
        }
        var a2 = function(n2, r3) {
          return (a2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n3, r4) {
            n3.__proto__ = r4;
          } || function(n3, r4) {
            for (var t2 in r4)
              r4.hasOwnProperty(t2) && (n3[t2] = r4[t2]);
          })(n2, r3);
        }, f2 = function() {
          function n2(n3, r3) {
            return this[Q$1] = { i: 2, l: r3, A: r3 ? r3.A : _(), P: false, I: false, o: void 0, D: void 0, t: n3, k: this, C: false, O: false }, this;
          }
          r2(n2, Map);
          var o3 = n2.prototype;
          return Object.defineProperty(o3, "size", { get: function() {
            return p$2(this[Q$1]).size;
          } }), o3.has = function(n3) {
            return p$2(this[Q$1]).has(n3);
          }, o3.set = function(n3, r3) {
            var t2 = this[Q$1];
            return u2(t2), p$2(t2).has(n3) && p$2(t2).get(n3) === r3 || (e2(t2), k(t2), t2.D.set(n3, true), t2.o.set(n3, r3), t2.D.set(n3, true)), this;
          }, o3.delete = function(n3) {
            if (!this.has(n3))
              return false;
            var r3 = this[Q$1];
            return u2(r3), e2(r3), k(r3), r3.t.has(n3) ? r3.D.set(n3, false) : r3.D.delete(n3), r3.o.delete(n3), true;
          }, o3.clear = function() {
            var n3 = this[Q$1];
            u2(n3), p$2(n3).size && (e2(n3), k(n3), n3.D = /* @__PURE__ */ new Map(), i$1(n3.t, function(r3) {
              n3.D.set(r3, false);
            }), n3.o.clear());
          }, o3.forEach = function(n3, r3) {
            var t2 = this;
            p$2(this[Q$1]).forEach(function(e3, i2) {
              n3.call(r3, t2.get(i2), i2, t2);
            });
          }, o3.get = function(n3) {
            var r3 = this[Q$1];
            u2(r3);
            var i2 = p$2(r3).get(n3);
            if (r3.I || !t$1(i2))
              return i2;
            if (i2 !== r3.t.get(n3))
              return i2;
            var o4 = R$1(r3.A.h, i2, r3);
            return e2(r3), r3.o.set(n3, o4), o4;
          }, o3.keys = function() {
            return p$2(this[Q$1]).keys();
          }, o3.values = function() {
            var n3, r3 = this, t2 = this.keys();
            return (n3 = {})[V$1] = function() {
              return r3.values();
            }, n3.next = function() {
              var n4 = t2.next();
              return n4.done ? n4 : { done: false, value: r3.get(n4.value) };
            }, n3;
          }, o3.entries = function() {
            var n3, r3 = this, t2 = this.keys();
            return (n3 = {})[V$1] = function() {
              return r3.entries();
            }, n3.next = function() {
              var n4 = t2.next();
              if (n4.done)
                return n4;
              var e3 = r3.get(n4.value);
              return { done: false, value: [n4.value, e3] };
            }, n3;
          }, o3[V$1] = function() {
            return this.entries();
          }, n2;
        }(), c2 = function() {
          function n2(n3, r3) {
            return this[Q$1] = { i: 3, l: r3, A: r3 ? r3.A : _(), P: false, I: false, o: void 0, t: n3, k: this, p: /* @__PURE__ */ new Map(), O: false, C: false }, this;
          }
          r2(n2, Set);
          var t2 = n2.prototype;
          return Object.defineProperty(t2, "size", { get: function() {
            return p$2(this[Q$1]).size;
          } }), t2.has = function(n3) {
            var r3 = this[Q$1];
            return u2(r3), r3.o ? !!r3.o.has(n3) || !(!r3.p.has(n3) || !r3.o.has(r3.p.get(n3))) : r3.t.has(n3);
          }, t2.add = function(n3) {
            var r3 = this[Q$1];
            return u2(r3), this.has(n3) || (o2(r3), k(r3), r3.o.add(n3)), this;
          }, t2.delete = function(n3) {
            if (!this.has(n3))
              return false;
            var r3 = this[Q$1];
            return u2(r3), o2(r3), k(r3), r3.o.delete(n3) || !!r3.p.has(n3) && r3.o.delete(r3.p.get(n3));
          }, t2.clear = function() {
            var n3 = this[Q$1];
            u2(n3), p$2(n3).size && (o2(n3), k(n3), n3.o.clear());
          }, t2.values = function() {
            var n3 = this[Q$1];
            return u2(n3), o2(n3), n3.o.values();
          }, t2.entries = function() {
            var n3 = this[Q$1];
            return u2(n3), o2(n3), n3.o.entries();
          }, t2.keys = function() {
            return this.values();
          }, t2[V$1] = function() {
            return this.values();
          }, t2.forEach = function(n3, r3) {
            for (var t3 = this.values(), e3 = t3.next(); !e3.done; )
              n3.call(r3, e3.value, e3.value, this), e3 = t3.next();
          }, n2;
        }();
        m$1("MapSet", { N: function(n2, r3) {
          return new f2(n2, r3);
        }, T: function(n2, r3) {
          return new c2(n2, r3);
        } });
      }
      var G, U$1, W$1 = typeof Symbol != "undefined" && typeof Symbol("x") == "symbol", X$1 = typeof Map != "undefined", q$1 = typeof Set != "undefined", B$1 = typeof Proxy != "undefined" && Proxy.revocable !== void 0 && typeof Reflect != "undefined", H = W$1 ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G), L = W$1 ? Symbol.for("immer-draftable") : "__$immer_draftable", Q$1 = W$1 ? Symbol.for("immer-state") : "__$immer_state", V$1 = typeof Symbol != "undefined" && Symbol.iterator || "@@iterator", Z$1 = "" + Object.prototype.constructor, nn = typeof Reflect != "undefined" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(n2) {
        return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
      } : Object.getOwnPropertyNames, rn = Object.getOwnPropertyDescriptors || function(n2) {
        var r2 = {};
        return nn(n2).forEach(function(t2) {
          r2[t2] = Object.getOwnPropertyDescriptor(n2, t2);
        }), r2;
      }, tn = {}, en = { get: function(n2, r2) {
        if (r2 === Q$1)
          return n2;
        var e2 = p$2(n2);
        if (!u$2(e2, r2))
          return function(n3, r3, t2) {
            var e3, i3 = I$1(r3, t2);
            return i3 ? "value" in i3 ? i3.value : (e3 = i3.get) === null || e3 === void 0 ? void 0 : e3.call(n3.k) : void 0;
          }(n2, e2, r2);
        var i2 = e2[r2];
        return n2.I || !t$1(i2) ? i2 : i2 === z$1(n2.t, r2) ? (E$1(n2), n2.o[r2] = R$1(n2.A.h, i2, n2)) : i2;
      }, has: function(n2, r2) {
        return r2 in p$2(n2);
      }, ownKeys: function(n2) {
        return Reflect.ownKeys(p$2(n2));
      }, set: function(n2, r2, t2) {
        var e2 = I$1(p$2(n2), r2);
        if (e2 == null ? void 0 : e2.set)
          return e2.set.call(n2.k, t2), true;
        if (!n2.P) {
          var i2 = z$1(p$2(n2), r2), o2 = i2 == null ? void 0 : i2[Q$1];
          if (o2 && o2.t === t2)
            return n2.o[r2] = t2, n2.D[r2] = false, true;
          if (c$1(t2, i2) && (t2 !== void 0 || u$2(n2.t, r2)))
            return true;
          E$1(n2), k(n2);
        }
        return n2.o[r2] === t2 && typeof t2 != "number" && (t2 !== void 0 || r2 in n2.o) || (n2.o[r2] = t2, n2.D[r2] = true, true);
      }, deleteProperty: function(n2, r2) {
        return z$1(n2.t, r2) !== void 0 || r2 in n2.t ? (n2.D[r2] = false, E$1(n2), k(n2)) : delete n2.D[r2], n2.o && delete n2.o[r2], true;
      }, getOwnPropertyDescriptor: function(n2, r2) {
        var t2 = p$2(n2), e2 = Reflect.getOwnPropertyDescriptor(t2, r2);
        return e2 ? { writable: true, configurable: n2.i !== 1 || r2 !== "length", enumerable: e2.enumerable, value: t2[r2] } : e2;
      }, defineProperty: function() {
        n$2(11);
      }, getPrototypeOf: function(n2) {
        return Object.getPrototypeOf(n2.t);
      }, setPrototypeOf: function() {
        n$2(12);
      } }, on = {};
      i$1(en, function(n2, r2) {
        on[n2] = function() {
          return arguments[0] = arguments[0][0], r2.apply(this, arguments);
        };
      }), on.deleteProperty = function(r2, t2) {
        return on.set.call(this, r2, t2, void 0);
      }, on.set = function(r2, t2, e2) {
        return en.set.call(this, r2[0], t2, e2, r2[0]);
      };
      var un = function() {
        function e2(r2) {
          var e3 = this;
          this.g = B$1, this.F = true, this.produce = function(r3, i3, o2) {
            if (typeof r3 == "function" && typeof i3 != "function") {
              var u2 = i3;
              i3 = r3;
              var a2 = e3;
              return function(n2) {
                var r4 = this;
                n2 === void 0 && (n2 = u2);
                for (var t2 = arguments.length, e4 = Array(t2 > 1 ? t2 - 1 : 0), o3 = 1; o3 < t2; o3++)
                  e4[o3 - 1] = arguments[o3];
                return a2.produce(n2, function(n3) {
                  var t3;
                  return (t3 = i3).call.apply(t3, [r4, n3].concat(e4));
                });
              };
            }
            var f2;
            if (typeof i3 != "function" && n$2(6), o2 !== void 0 && typeof o2 != "function" && n$2(7), t$1(r3)) {
              var c2 = w(e3), s2 = R$1(e3, r3, void 0), v2 = true;
              try {
                f2 = i3(s2), v2 = false;
              } finally {
                v2 ? O$1(c2) : g$1(c2);
              }
              return typeof Promise != "undefined" && f2 instanceof Promise ? f2.then(function(n2) {
                return j(c2, o2), P$1(n2, c2);
              }, function(n2) {
                throw O$1(c2), n2;
              }) : (j(c2, o2), P$1(f2, c2));
            }
            if (!r3 || typeof r3 != "object") {
              if ((f2 = i3(r3)) === void 0 && (f2 = r3), f2 === H && (f2 = void 0), e3.F && d(f2, true), o2) {
                var p2 = [], l2 = [];
                b("Patches").M(r3, f2, p2, l2), o2(p2, l2);
              }
              return f2;
            }
            n$2(21, r3);
          }, this.produceWithPatches = function(n2, r3) {
            if (typeof n2 == "function")
              return function(r4) {
                for (var t3 = arguments.length, i4 = Array(t3 > 1 ? t3 - 1 : 0), o3 = 1; o3 < t3; o3++)
                  i4[o3 - 1] = arguments[o3];
                return e3.produceWithPatches(r4, function(r5) {
                  return n2.apply(void 0, [r5].concat(i4));
                });
              };
            var t2, i3, o2 = e3.produce(n2, r3, function(n3, r4) {
              t2 = n3, i3 = r4;
            });
            return typeof Promise != "undefined" && o2 instanceof Promise ? o2.then(function(n3) {
              return [n3, t2, i3];
            }) : [o2, t2, i3];
          }, typeof (r2 == null ? void 0 : r2.useProxies) == "boolean" && this.setUseProxies(r2.useProxies), typeof (r2 == null ? void 0 : r2.autoFreeze) == "boolean" && this.setAutoFreeze(r2.autoFreeze);
        }
        var i2 = e2.prototype;
        return i2.createDraft = function(e3) {
          t$1(e3) || n$2(8), r$2(e3) && (e3 = D$1(e3));
          var i3 = w(this), o2 = R$1(this, e3, void 0);
          return o2[Q$1].C = true, g$1(i3), o2;
        }, i2.finishDraft = function(r2, t2) {
          var e3 = r2 && r2[Q$1];
          var i3 = e3.A;
          return j(i3, t2), P$1(void 0, i3);
        }, i2.setAutoFreeze = function(n2) {
          this.F = n2;
        }, i2.setUseProxies = function(r2) {
          r2 && !B$1 && n$2(20), this.g = r2;
        }, i2.applyPatches = function(n2, t2) {
          var e3;
          for (e3 = t2.length - 1; e3 >= 0; e3--) {
            var i3 = t2[e3];
            if (i3.path.length === 0 && i3.op === "replace") {
              n2 = i3.value;
              break;
            }
          }
          e3 > -1 && (t2 = t2.slice(e3 + 1));
          var o2 = b("Patches").$;
          return r$2(n2) ? o2(n2, t2) : this.produce(n2, function(n3) {
            return o2(n3, t2);
          });
        }, e2;
      }(), an = new un(), fn = an.produce;
      an.produceWithPatches.bind(an);
      var sn = an.setAutoFreeze.bind(an);
      an.setUseProxies.bind(an);
      an.applyPatches.bind(an);
      var ln = an.createDraft.bind(an), dn = an.finishDraft.bind(an);
      function _defineProperty$8(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var DIRTY_PATHS = /* @__PURE__ */ new WeakMap();
      var DIRTY_PATH_KEYS = /* @__PURE__ */ new WeakMap();
      var FLUSHING = /* @__PURE__ */ new WeakMap();
      var NORMALIZING = /* @__PURE__ */ new WeakMap();
      var PATH_REFS = /* @__PURE__ */ new WeakMap();
      var POINT_REFS = /* @__PURE__ */ new WeakMap();
      var RANGE_REFS = /* @__PURE__ */ new WeakMap();
      function ownKeys$9(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$9(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$9(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$9(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var createEditor$1 = () => {
        var editor = {
          children: [],
          operations: [],
          selection: null,
          marks: null,
          isInline: () => false,
          isVoid: () => false,
          onChange: () => {
          },
          apply: (op) => {
            for (var ref of Editor$1.pathRefs(editor)) {
              PathRef.transform(ref, op);
            }
            for (var _ref of Editor$1.pointRefs(editor)) {
              PointRef.transform(_ref, op);
            }
            for (var _ref2 of Editor$1.rangeRefs(editor)) {
              RangeRef.transform(_ref2, op);
            }
            var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];
            var oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || /* @__PURE__ */ new Set();
            var dirtyPaths;
            var dirtyPathKeys;
            var add2 = (path2) => {
              if (path2) {
                var key = path2.join(",");
                if (!dirtyPathKeys.has(key)) {
                  dirtyPathKeys.add(key);
                  dirtyPaths.push(path2);
                }
              }
            };
            if (Path.operationCanTransformPath(op)) {
              dirtyPaths = [];
              dirtyPathKeys = /* @__PURE__ */ new Set();
              for (var path of oldDirtyPaths) {
                var newPath = Path.transform(path, op);
                add2(newPath);
              }
            } else {
              dirtyPaths = oldDirtyPaths;
              dirtyPathKeys = oldDirtyPathKeys;
            }
            var newDirtyPaths = getDirtyPaths(op);
            for (var _path of newDirtyPaths) {
              add2(_path);
            }
            DIRTY_PATHS.set(editor, dirtyPaths);
            DIRTY_PATH_KEYS.set(editor, dirtyPathKeys);
            Transforms.transform(editor, op);
            editor.operations.push(op);
            Editor$1.normalize(editor);
            if (op.type === "set_selection") {
              editor.marks = null;
            }
            if (!FLUSHING.get(editor)) {
              FLUSHING.set(editor, true);
              Promise.resolve().then(() => {
                FLUSHING.set(editor, false);
                editor.onChange();
                editor.operations = [];
              });
            }
          },
          addMark: (key, value) => {
            var {
              selection
            } = editor;
            if (selection) {
              if (Range.isExpanded(selection)) {
                Transforms.setNodes(editor, {
                  [key]: value
                }, {
                  match: Text.isText,
                  split: true
                });
              } else {
                var marks = _objectSpread$9(_objectSpread$9({}, Editor$1.marks(editor) || {}), {}, {
                  [key]: value
                });
                editor.marks = marks;
                if (!FLUSHING.get(editor)) {
                  editor.onChange();
                }
              }
            }
          },
          deleteBackward: (unit) => {
            var {
              selection
            } = editor;
            if (selection && Range.isCollapsed(selection)) {
              Transforms.delete(editor, {
                unit,
                reverse: true
              });
            }
          },
          deleteForward: (unit) => {
            var {
              selection
            } = editor;
            if (selection && Range.isCollapsed(selection)) {
              Transforms.delete(editor, {
                unit
              });
            }
          },
          deleteFragment: (direction) => {
            var {
              selection
            } = editor;
            if (selection && Range.isExpanded(selection)) {
              Transforms.delete(editor, {
                reverse: direction === "backward"
              });
            }
          },
          getFragment: () => {
            var {
              selection
            } = editor;
            if (selection) {
              return Node$1.fragment(editor, selection);
            }
            return [];
          },
          insertBreak: () => {
            Transforms.splitNodes(editor, {
              always: true
            });
          },
          insertSoftBreak: () => {
            Transforms.splitNodes(editor, {
              always: true
            });
          },
          insertFragment: (fragment) => {
            Transforms.insertFragment(editor, fragment);
          },
          insertNode: (node) => {
            Transforms.insertNodes(editor, node);
          },
          insertText: (text2) => {
            var {
              selection,
              marks
            } = editor;
            if (selection) {
              if (marks) {
                var node = _objectSpread$9({
                  text: text2
                }, marks);
                Transforms.insertNodes(editor, node);
              } else {
                Transforms.insertText(editor, text2);
              }
              editor.marks = null;
            }
          },
          normalizeNode: (entry) => {
            var [node, path] = entry;
            if (Text.isText(node)) {
              return;
            }
            if (Element$1.isElement(node) && node.children.length === 0) {
              var child = {
                text: ""
              };
              Transforms.insertNodes(editor, child, {
                at: path.concat(0),
                voids: true
              });
              return;
            }
            var shouldHaveInlines = Editor$1.isEditor(node) ? false : Element$1.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0]));
            var n2 = 0;
            for (var i2 = 0; i2 < node.children.length; i2++, n2++) {
              var currentNode = Node$1.get(editor, path);
              if (Text.isText(currentNode))
                continue;
              var _child = node.children[i2];
              var prev = currentNode.children[n2 - 1];
              var isLast = i2 === node.children.length - 1;
              var isInlineOrText = Text.isText(_child) || Element$1.isElement(_child) && editor.isInline(_child);
              if (isInlineOrText !== shouldHaveInlines) {
                Transforms.removeNodes(editor, {
                  at: path.concat(n2),
                  voids: true
                });
                n2--;
              } else if (Element$1.isElement(_child)) {
                if (editor.isInline(_child)) {
                  if (prev == null || !Text.isText(prev)) {
                    var newChild = {
                      text: ""
                    };
                    Transforms.insertNodes(editor, newChild, {
                      at: path.concat(n2),
                      voids: true
                    });
                    n2++;
                  } else if (isLast) {
                    var _newChild = {
                      text: ""
                    };
                    Transforms.insertNodes(editor, _newChild, {
                      at: path.concat(n2 + 1),
                      voids: true
                    });
                    n2++;
                  }
                }
              } else {
                if (prev != null && Text.isText(prev)) {
                  if (Text.equals(_child, prev, {
                    loose: true
                  })) {
                    Transforms.mergeNodes(editor, {
                      at: path.concat(n2),
                      voids: true
                    });
                    n2--;
                  } else if (prev.text === "") {
                    Transforms.removeNodes(editor, {
                      at: path.concat(n2 - 1),
                      voids: true
                    });
                    n2--;
                  } else if (_child.text === "") {
                    Transforms.removeNodes(editor, {
                      at: path.concat(n2),
                      voids: true
                    });
                    n2--;
                  }
                }
              }
            }
          },
          removeMark: (key) => {
            var {
              selection
            } = editor;
            if (selection) {
              if (Range.isExpanded(selection)) {
                Transforms.unsetNodes(editor, key, {
                  match: Text.isText,
                  split: true
                });
              } else {
                var marks = _objectSpread$9({}, Editor$1.marks(editor) || {});
                delete marks[key];
                editor.marks = marks;
                if (!FLUSHING.get(editor)) {
                  editor.onChange();
                }
              }
            }
          }
        };
        return editor;
      };
      var getDirtyPaths = (op) => {
        switch (op.type) {
          case "insert_text":
          case "remove_text":
          case "set_node": {
            var {
              path
            } = op;
            return Path.levels(path);
          }
          case "insert_node": {
            var {
              node,
              path: _path2
            } = op;
            var levels = Path.levels(_path2);
            var descendants = Text.isText(node) ? [] : Array.from(Node$1.nodes(node), (_ref3) => {
              var [, p3] = _ref3;
              return _path2.concat(p3);
            });
            return [...levels, ...descendants];
          }
          case "merge_node": {
            var {
              path: _path3
            } = op;
            var ancestors = Path.ancestors(_path3);
            var previousPath = Path.previous(_path3);
            return [...ancestors, previousPath];
          }
          case "move_node": {
            var {
              path: _path4,
              newPath
            } = op;
            if (Path.equals(_path4, newPath)) {
              return [];
            }
            var oldAncestors = [];
            var newAncestors = [];
            for (var ancestor of Path.ancestors(_path4)) {
              var p2 = Path.transform(ancestor, op);
              oldAncestors.push(p2);
            }
            for (var _ancestor of Path.ancestors(newPath)) {
              var _p = Path.transform(_ancestor, op);
              newAncestors.push(_p);
            }
            var newParent = newAncestors[newAncestors.length - 1];
            var newIndex = newPath[newPath.length - 1];
            var resultPath = newParent.concat(newIndex);
            return [...oldAncestors, ...newAncestors, resultPath];
          }
          case "remove_node": {
            var {
              path: _path5
            } = op;
            var _ancestors = Path.ancestors(_path5);
            return [..._ancestors];
          }
          case "split_node": {
            var {
              path: _path6
            } = op;
            var _levels = Path.levels(_path6);
            var nextPath = Path.next(_path6);
            return [..._levels, nextPath];
          }
          default: {
            return [];
          }
        }
      };
      function _objectWithoutPropertiesLoose$3(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i2;
        for (i2 = 0; i2 < sourceKeys.length; i2++) {
          key = sourceKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _objectWithoutProperties$4(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose$3(source, excluded);
        var key, i2;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
            key = sourceSymbolKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      var getCharacterDistance = function getCharacterDistance2(str) {
        var isRTL = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var isLTR = !isRTL;
        var codepoints = isRTL ? codepointsIteratorRTL(str) : str;
        var left = CodepointType.None;
        var right = CodepointType.None;
        var distance = 0;
        var gb11 = null;
        var gb12Or13 = null;
        for (var char of codepoints) {
          var code = char.codePointAt(0);
          if (!code)
            break;
          var type = getCodepointType(char, code);
          [left, right] = isLTR ? [right, type] : [type, left];
          if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {
            if (isLTR) {
              gb11 = endsWithEmojiZWJ(str.substring(0, distance));
            } else {
              gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));
            }
            if (!gb11)
              break;
          }
          if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {
            if (gb12Or13 !== null) {
              gb12Or13 = !gb12Or13;
            } else {
              if (isLTR) {
                gb12Or13 = true;
              } else {
                gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));
              }
            }
            if (!gb12Or13)
              break;
          }
          if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) {
            break;
          }
          distance += char.length;
        }
        return distance || 1;
      };
      var SPACE = /\s/;
      var PUNCTUATION = /[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
      var CHAMELEON = /['\u2018\u2019]/;
      var getWordDistance = function getWordDistance2(text2) {
        var isRTL = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var dist = 0;
        var started = false;
        while (text2.length > 0) {
          var charDist = getCharacterDistance(text2, isRTL);
          var [char, remaining] = splitByCharacterDistance(text2, charDist, isRTL);
          if (isWordCharacter(char, remaining, isRTL)) {
            started = true;
            dist += charDist;
          } else if (!started) {
            dist += charDist;
          } else {
            break;
          }
          text2 = remaining;
        }
        return dist;
      };
      var splitByCharacterDistance = (str, dist, isRTL) => {
        if (isRTL) {
          var at = str.length - dist;
          return [str.slice(at, str.length), str.slice(0, at)];
        }
        return [str.slice(0, dist), str.slice(dist)];
      };
      var isWordCharacter = function isWordCharacter2(char, remaining) {
        var isRTL = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        if (SPACE.test(char)) {
          return false;
        }
        if (CHAMELEON.test(char)) {
          var charDist = getCharacterDistance(remaining, isRTL);
          var [nextChar, nextRemaining] = splitByCharacterDistance(remaining, charDist, isRTL);
          if (isWordCharacter2(nextChar, nextRemaining, isRTL)) {
            return true;
          }
        }
        if (PUNCTUATION.test(char)) {
          return false;
        }
        return true;
      };
      var codepointsIteratorRTL = function* codepointsIteratorRTL2(str) {
        var end = str.length - 1;
        for (var i2 = 0; i2 < str.length; i2++) {
          var char1 = str.charAt(end - i2);
          if (isLowSurrogate(char1.charCodeAt(0))) {
            var char2 = str.charAt(end - i2 - 1);
            if (isHighSurrogate(char2.charCodeAt(0))) {
              yield char2 + char1;
              i2++;
              continue;
            }
          }
          yield char1;
        }
      };
      var isHighSurrogate = (charCode) => {
        return charCode >= 55296 && charCode <= 56319;
      };
      var isLowSurrogate = (charCode) => {
        return charCode >= 56320 && charCode <= 57343;
      };
      var CodepointType;
      (function(CodepointType2) {
        CodepointType2[CodepointType2["None"] = 0] = "None";
        CodepointType2[CodepointType2["Extend"] = 1] = "Extend";
        CodepointType2[CodepointType2["ZWJ"] = 2] = "ZWJ";
        CodepointType2[CodepointType2["RI"] = 4] = "RI";
        CodepointType2[CodepointType2["Prepend"] = 8] = "Prepend";
        CodepointType2[CodepointType2["SpacingMark"] = 16] = "SpacingMark";
        CodepointType2[CodepointType2["L"] = 32] = "L";
        CodepointType2[CodepointType2["V"] = 64] = "V";
        CodepointType2[CodepointType2["T"] = 128] = "T";
        CodepointType2[CodepointType2["LV"] = 256] = "LV";
        CodepointType2[CodepointType2["LVT"] = 512] = "LVT";
        CodepointType2[CodepointType2["ExtPict"] = 1024] = "ExtPict";
        CodepointType2[CodepointType2["Any"] = 2048] = "Any";
      })(CodepointType || (CodepointType = {}));
      var reExtend = /^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/;
      var rePrepend = /^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/;
      var reSpacingMark = /^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/;
      var reL = /^[\u1100-\u115F\uA960-\uA97C]$/;
      var reV = /^[\u1160-\u11A7\uD7B0-\uD7C6]$/;
      var reT = /^[\u11A8-\u11FF\uD7CB-\uD7FB]$/;
      var reLV = /^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/;
      var reLVT = /^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/;
      var reExtPict = /^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/;
      var getCodepointType = (char, code) => {
        var type = CodepointType.Any;
        if (char.search(reExtend) !== -1) {
          type |= CodepointType.Extend;
        }
        if (code === 8205) {
          type |= CodepointType.ZWJ;
        }
        if (code >= 127462 && code <= 127487) {
          type |= CodepointType.RI;
        }
        if (char.search(rePrepend) !== -1) {
          type |= CodepointType.Prepend;
        }
        if (char.search(reSpacingMark) !== -1) {
          type |= CodepointType.SpacingMark;
        }
        if (char.search(reL) !== -1) {
          type |= CodepointType.L;
        }
        if (char.search(reV) !== -1) {
          type |= CodepointType.V;
        }
        if (char.search(reT) !== -1) {
          type |= CodepointType.T;
        }
        if (char.search(reLV) !== -1) {
          type |= CodepointType.LV;
        }
        if (char.search(reLVT) !== -1) {
          type |= CodepointType.LVT;
        }
        if (char.search(reExtPict) !== -1) {
          type |= CodepointType.ExtPict;
        }
        return type;
      };
      function intersects(x2, y2) {
        return (x2 & y2) !== 0;
      }
      var NonBoundaryPairs = [
        [CodepointType.L, CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT],
        [CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T],
        [CodepointType.LVT | CodepointType.T, CodepointType.T],
        [CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ],
        [CodepointType.Any, CodepointType.SpacingMark],
        [CodepointType.Prepend, CodepointType.Any],
        [CodepointType.ZWJ, CodepointType.ExtPict],
        [CodepointType.RI, CodepointType.RI]
      ];
      function isBoundaryPair(left, right) {
        return NonBoundaryPairs.findIndex((r2) => intersects(left, r2[0]) && intersects(right, r2[1])) === -1;
      }
      var endingEmojiZWJ = /(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/;
      var endsWithEmojiZWJ = (str) => {
        return str.search(endingEmojiZWJ) !== -1;
      };
      var endingRIs = /(?:\uD83C[\uDDE6-\uDDFF])+$/g;
      var endsWithOddNumberOfRIs = (str) => {
        var match5 = str.match(endingRIs);
        if (match5 === null) {
          return false;
        } else {
          var numRIs = match5[0].length / 2;
          return numRIs % 2 === 1;
        }
      };
      var isElement$1 = (value) => {
        return isPlainObject$4(value) && Node$1.isNodeList(value.children) && !Editor$1.isEditor(value);
      };
      var Element$1 = {
        isAncestor(value) {
          return isPlainObject$4(value) && Node$1.isNodeList(value.children);
        },
        isElement: isElement$1,
        isElementList(value) {
          return Array.isArray(value) && value.every((val) => Element$1.isElement(val));
        },
        isElementProps(props) {
          return props.children !== void 0;
        },
        isElementType: function isElementType(value, elementVal) {
          var elementKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "type";
          return isElement$1(value) && value[elementKey] === elementVal;
        },
        matches(element, props) {
          for (var key in props) {
            if (key === "children") {
              continue;
            }
            if (element[key] !== props[key]) {
              return false;
            }
          }
          return true;
        }
      };
      var _excluded$4 = ["text"], _excluded2$3 = ["text"];
      function ownKeys$8(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$8(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$8(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$8(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var IS_EDITOR_CACHE = /* @__PURE__ */ new WeakMap();
      var Editor$1 = {
        above(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            voids = false,
            mode = "lowest",
            at = editor.selection,
            match: match5
          } = options;
          if (!at) {
            return;
          }
          var path = Editor$1.path(editor, at);
          var reverse = mode === "lowest";
          for (var [n2, p2] of Editor$1.levels(editor, {
            at: path,
            voids,
            match: match5,
            reverse
          })) {
            if (!Text.isText(n2) && !Path.equals(path, p2)) {
              return [n2, p2];
            }
          }
        },
        addMark(editor, key, value) {
          editor.addMark(key, value);
        },
        after(editor, at) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var anchor = Editor$1.point(editor, at, {
            edge: "end"
          });
          var focus = Editor$1.end(editor, []);
          var range = {
            anchor,
            focus
          };
          var {
            distance = 1
          } = options;
          var d2 = 0;
          var target;
          for (var p2 of Editor$1.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
            at: range
          }))) {
            if (d2 > distance) {
              break;
            }
            if (d2 !== 0) {
              target = p2;
            }
            d2++;
          }
          return target;
        },
        before(editor, at) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var anchor = Editor$1.start(editor, []);
          var focus = Editor$1.point(editor, at, {
            edge: "start"
          });
          var range = {
            anchor,
            focus
          };
          var {
            distance = 1
          } = options;
          var d2 = 0;
          var target;
          for (var p2 of Editor$1.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
            at: range,
            reverse: true
          }))) {
            if (d2 > distance) {
              break;
            }
            if (d2 !== 0) {
              target = p2;
            }
            d2++;
          }
          return target;
        },
        deleteBackward(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            unit = "character"
          } = options;
          editor.deleteBackward(unit);
        },
        deleteForward(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            unit = "character"
          } = options;
          editor.deleteForward(unit);
        },
        deleteFragment(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            direction = "forward"
          } = options;
          editor.deleteFragment(direction);
        },
        edges(editor, at) {
          return [Editor$1.start(editor, at), Editor$1.end(editor, at)];
        },
        end(editor, at) {
          return Editor$1.point(editor, at, {
            edge: "end"
          });
        },
        first(editor, at) {
          var path = Editor$1.path(editor, at, {
            edge: "start"
          });
          return Editor$1.node(editor, path);
        },
        fragment(editor, at) {
          var range = Editor$1.range(editor, at);
          var fragment = Node$1.fragment(editor, range);
          return fragment;
        },
        hasBlocks(editor, element) {
          return element.children.some((n2) => Editor$1.isBlock(editor, n2));
        },
        hasInlines(editor, element) {
          return element.children.some((n2) => Text.isText(n2) || Editor$1.isInline(editor, n2));
        },
        hasTexts(editor, element) {
          return element.children.every((n2) => Text.isText(n2));
        },
        insertBreak(editor) {
          editor.insertBreak();
        },
        insertSoftBreak(editor) {
          editor.insertSoftBreak();
        },
        insertFragment(editor, fragment) {
          editor.insertFragment(fragment);
        },
        insertNode(editor, node) {
          editor.insertNode(node);
        },
        insertText(editor, text2) {
          editor.insertText(text2);
        },
        isBlock(editor, value) {
          return Element$1.isElement(value) && !editor.isInline(value);
        },
        isEditor(value) {
          if (!isPlainObject$4(value))
            return false;
          var cachedIsEditor = IS_EDITOR_CACHE.get(value);
          if (cachedIsEditor !== void 0) {
            return cachedIsEditor;
          }
          var isEditor = typeof value.addMark === "function" && typeof value.apply === "function" && typeof value.deleteBackward === "function" && typeof value.deleteForward === "function" && typeof value.deleteFragment === "function" && typeof value.insertBreak === "function" && typeof value.insertSoftBreak === "function" && typeof value.insertFragment === "function" && typeof value.insertNode === "function" && typeof value.insertText === "function" && typeof value.isInline === "function" && typeof value.isVoid === "function" && typeof value.normalizeNode === "function" && typeof value.onChange === "function" && typeof value.removeMark === "function" && (value.marks === null || isPlainObject$4(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node$1.isNodeList(value.children) && Operation.isOperationList(value.operations);
          IS_EDITOR_CACHE.set(value, isEditor);
          return isEditor;
        },
        isEnd(editor, point2, at) {
          var end = Editor$1.end(editor, at);
          return Point.equals(point2, end);
        },
        isEdge(editor, point2, at) {
          return Editor$1.isStart(editor, point2, at) || Editor$1.isEnd(editor, point2, at);
        },
        isEmpty(editor, element) {
          var {
            children
          } = element;
          var [first] = children;
          return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === "" && !editor.isVoid(element);
        },
        isInline(editor, value) {
          return Element$1.isElement(value) && editor.isInline(value);
        },
        isNormalizing(editor) {
          var isNormalizing = NORMALIZING.get(editor);
          return isNormalizing === void 0 ? true : isNormalizing;
        },
        isStart(editor, point2, at) {
          if (point2.offset !== 0) {
            return false;
          }
          var start = Editor$1.start(editor, at);
          return Point.equals(point2, start);
        },
        isVoid(editor, value) {
          return Element$1.isElement(value) && editor.isVoid(value);
        },
        last(editor, at) {
          var path = Editor$1.path(editor, at, {
            edge: "end"
          });
          return Editor$1.node(editor, path);
        },
        leaf(editor, at) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var path = Editor$1.path(editor, at, options);
          var node = Node$1.leaf(editor, path);
          return [node, path];
        },
        *levels(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            at = editor.selection,
            reverse = false,
            voids = false
          } = options;
          var {
            match: match5
          } = options;
          if (match5 == null) {
            match5 = () => true;
          }
          if (!at) {
            return;
          }
          var levels = [];
          var path = Editor$1.path(editor, at);
          for (var [n2, p2] of Node$1.levels(editor, path)) {
            if (!match5(n2, p2)) {
              continue;
            }
            levels.push([n2, p2]);
            if (!voids && Editor$1.isVoid(editor, n2)) {
              break;
            }
          }
          if (reverse) {
            levels.reverse();
          }
          yield* levels;
        },
        marks(editor) {
          var {
            marks,
            selection
          } = editor;
          if (!selection) {
            return null;
          }
          if (marks) {
            return marks;
          }
          if (Range.isExpanded(selection)) {
            var [match5] = Editor$1.nodes(editor, {
              match: Text.isText
            });
            if (match5) {
              var [_node] = match5;
              var _rest = _objectWithoutProperties$4(_node, _excluded$4);
              return _rest;
            } else {
              return {};
            }
          }
          var {
            anchor
          } = selection;
          var {
            path
          } = anchor;
          var [node] = Editor$1.leaf(editor, path);
          if (anchor.offset === 0) {
            var prev = Editor$1.previous(editor, {
              at: path,
              match: Text.isText
            });
            var block = Editor$1.above(editor, {
              match: (n2) => Editor$1.isBlock(editor, n2)
            });
            if (prev && block) {
              var [prevNode, prevPath] = prev;
              var [, blockPath] = block;
              if (Path.isAncestor(blockPath, prevPath)) {
                node = prevNode;
              }
            }
          }
          var rest = _objectWithoutProperties$4(node, _excluded2$3);
          return rest;
        },
        next(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            mode = "lowest",
            voids = false
          } = options;
          var {
            match: match5,
            at = editor.selection
          } = options;
          if (!at) {
            return;
          }
          var pointAfterLocation = Editor$1.after(editor, at, {
            voids
          });
          if (!pointAfterLocation)
            return;
          var [, to2] = Editor$1.last(editor, []);
          var span = [pointAfterLocation.path, to2];
          if (Path.isPath(at) && at.length === 0) {
            throw new Error("Cannot get the next node from the root node!");
          }
          if (match5 == null) {
            if (Path.isPath(at)) {
              var [parent2] = Editor$1.parent(editor, at);
              match5 = (n2) => parent2.children.includes(n2);
            } else {
              match5 = () => true;
            }
          }
          var [next] = Editor$1.nodes(editor, {
            at: span,
            match: match5,
            mode,
            voids
          });
          return next;
        },
        node(editor, at) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var path = Editor$1.path(editor, at, options);
          var node = Node$1.get(editor, path);
          return [node, path];
        },
        *nodes(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            at = editor.selection,
            mode = "all",
            universal = false,
            reverse = false,
            voids = false
          } = options;
          var {
            match: match5
          } = options;
          if (!match5) {
            match5 = () => true;
          }
          if (!at) {
            return;
          }
          var from2;
          var to2;
          if (Span.isSpan(at)) {
            from2 = at[0];
            to2 = at[1];
          } else {
            var first = Editor$1.path(editor, at, {
              edge: "start"
            });
            var last2 = Editor$1.path(editor, at, {
              edge: "end"
            });
            from2 = reverse ? last2 : first;
            to2 = reverse ? first : last2;
          }
          var nodeEntries = Node$1.nodes(editor, {
            reverse,
            from: from2,
            to: to2,
            pass: (_ref) => {
              var [n2] = _ref;
              return voids ? false : Editor$1.isVoid(editor, n2);
            }
          });
          var matches = [];
          var hit;
          for (var [node, path] of nodeEntries) {
            var isLower = hit && Path.compare(path, hit[1]) === 0;
            if (mode === "highest" && isLower) {
              continue;
            }
            if (!match5(node, path)) {
              if (universal && !isLower && Text.isText(node)) {
                return;
              } else {
                continue;
              }
            }
            if (mode === "lowest" && isLower) {
              hit = [node, path];
              continue;
            }
            var emit = mode === "lowest" ? hit : [node, path];
            if (emit) {
              if (universal) {
                matches.push(emit);
              } else {
                yield emit;
              }
            }
            hit = [node, path];
          }
          if (mode === "lowest" && hit) {
            if (universal) {
              matches.push(hit);
            } else {
              yield hit;
            }
          }
          if (universal) {
            yield* matches;
          }
        },
        normalize(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            force = false
          } = options;
          var getDirtyPaths2 = (editor2) => {
            return DIRTY_PATHS.get(editor2) || [];
          };
          var getDirtyPathKeys = (editor2) => {
            return DIRTY_PATH_KEYS.get(editor2) || /* @__PURE__ */ new Set();
          };
          var popDirtyPath = (editor2) => {
            var path = getDirtyPaths2(editor2).pop();
            var key = path.join(",");
            getDirtyPathKeys(editor2).delete(key);
            return path;
          };
          if (!Editor$1.isNormalizing(editor)) {
            return;
          }
          if (force) {
            var allPaths = Array.from(Node$1.nodes(editor), (_ref2) => {
              var [, p2] = _ref2;
              return p2;
            });
            var allPathKeys = new Set(allPaths.map((p2) => p2.join(",")));
            DIRTY_PATHS.set(editor, allPaths);
            DIRTY_PATH_KEYS.set(editor, allPathKeys);
          }
          if (getDirtyPaths2(editor).length === 0) {
            return;
          }
          Editor$1.withoutNormalizing(editor, () => {
            for (var dirtyPath of getDirtyPaths2(editor)) {
              if (Node$1.has(editor, dirtyPath)) {
                var entry = Editor$1.node(editor, dirtyPath);
                var [node, _2] = entry;
                if (Element$1.isElement(node) && node.children.length === 0) {
                  editor.normalizeNode(entry);
                }
              }
            }
            var max2 = getDirtyPaths2(editor).length * 42;
            var m2 = 0;
            while (getDirtyPaths2(editor).length !== 0) {
              if (m2 > max2) {
                throw new Error("\n            Could not completely normalize the editor after ".concat(max2, " iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          "));
              }
              var _dirtyPath = popDirtyPath(editor);
              if (Node$1.has(editor, _dirtyPath)) {
                var _entry = Editor$1.node(editor, _dirtyPath);
                editor.normalizeNode(_entry);
              }
              m2++;
            }
          });
        },
        parent(editor, at) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var path = Editor$1.path(editor, at, options);
          var parentPath = Path.parent(path);
          var entry = Editor$1.node(editor, parentPath);
          return entry;
        },
        path(editor, at) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            depth,
            edge
          } = options;
          if (Path.isPath(at)) {
            if (edge === "start") {
              var [, firstPath] = Node$1.first(editor, at);
              at = firstPath;
            } else if (edge === "end") {
              var [, lastPath] = Node$1.last(editor, at);
              at = lastPath;
            }
          }
          if (Range.isRange(at)) {
            if (edge === "start") {
              at = Range.start(at);
            } else if (edge === "end") {
              at = Range.end(at);
            } else {
              at = Path.common(at.anchor.path, at.focus.path);
            }
          }
          if (Point.isPoint(at)) {
            at = at.path;
          }
          if (depth != null) {
            at = at.slice(0, depth);
          }
          return at;
        },
        hasPath(editor, path) {
          return Node$1.has(editor, path);
        },
        pathRef(editor, path) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            affinity = "forward"
          } = options;
          var ref = {
            current: path,
            affinity,
            unref() {
              var {
                current
              } = ref;
              var pathRefs = Editor$1.pathRefs(editor);
              pathRefs.delete(ref);
              ref.current = null;
              return current;
            }
          };
          var refs = Editor$1.pathRefs(editor);
          refs.add(ref);
          return ref;
        },
        pathRefs(editor) {
          var refs = PATH_REFS.get(editor);
          if (!refs) {
            refs = /* @__PURE__ */ new Set();
            PATH_REFS.set(editor, refs);
          }
          return refs;
        },
        point(editor, at) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            edge = "start"
          } = options;
          if (Path.isPath(at)) {
            var path;
            if (edge === "end") {
              var [, lastPath] = Node$1.last(editor, at);
              path = lastPath;
            } else {
              var [, firstPath] = Node$1.first(editor, at);
              path = firstPath;
            }
            var node = Node$1.get(editor, path);
            if (!Text.isText(node)) {
              throw new Error("Cannot get the ".concat(edge, " point in the node at path [").concat(at, "] because it has no ").concat(edge, " text node."));
            }
            return {
              path,
              offset: edge === "end" ? node.text.length : 0
            };
          }
          if (Range.isRange(at)) {
            var [start, end] = Range.edges(at);
            return edge === "start" ? start : end;
          }
          return at;
        },
        pointRef(editor, point2) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            affinity = "forward"
          } = options;
          var ref = {
            current: point2,
            affinity,
            unref() {
              var {
                current
              } = ref;
              var pointRefs = Editor$1.pointRefs(editor);
              pointRefs.delete(ref);
              ref.current = null;
              return current;
            }
          };
          var refs = Editor$1.pointRefs(editor);
          refs.add(ref);
          return ref;
        },
        pointRefs(editor) {
          var refs = POINT_REFS.get(editor);
          if (!refs) {
            refs = /* @__PURE__ */ new Set();
            POINT_REFS.set(editor, refs);
          }
          return refs;
        },
        *positions(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            at = editor.selection,
            unit = "offset",
            reverse = false,
            voids = false
          } = options;
          if (!at) {
            return;
          }
          var range = Editor$1.range(editor, at);
          var [start, end] = Range.edges(range);
          var first = reverse ? end : start;
          var isNewBlock = false;
          var blockText = "";
          var distance = 0;
          var leafTextRemaining = 0;
          var leafTextOffset = 0;
          for (var [node, path] of Editor$1.nodes(editor, {
            at,
            reverse,
            voids
          })) {
            if (Element$1.isElement(node)) {
              if (!voids && editor.isVoid(node)) {
                yield Editor$1.start(editor, path);
                continue;
              }
              if (editor.isInline(node))
                continue;
              if (Editor$1.hasInlines(editor, node)) {
                var e2 = Path.isAncestor(path, end.path) ? end : Editor$1.end(editor, path);
                var s2 = Path.isAncestor(path, start.path) ? start : Editor$1.start(editor, path);
                blockText = Editor$1.string(editor, {
                  anchor: s2,
                  focus: e2
                }, {
                  voids
                });
                isNewBlock = true;
              }
            }
            if (Text.isText(node)) {
              var isFirst = Path.equals(path, first.path);
              if (isFirst) {
                leafTextRemaining = reverse ? first.offset : node.text.length - first.offset;
                leafTextOffset = first.offset;
              } else {
                leafTextRemaining = node.text.length;
                leafTextOffset = reverse ? leafTextRemaining : 0;
              }
              if (isFirst || isNewBlock || unit === "offset") {
                yield {
                  path,
                  offset: leafTextOffset
                };
                isNewBlock = false;
              }
              while (true) {
                if (distance === 0) {
                  if (blockText === "")
                    break;
                  distance = calcDistance(blockText, unit, reverse);
                  blockText = splitByCharacterDistance(blockText, distance, reverse)[1];
                }
                leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;
                leafTextRemaining = leafTextRemaining - distance;
                if (leafTextRemaining < 0) {
                  distance = -leafTextRemaining;
                  break;
                }
                distance = 0;
                yield {
                  path,
                  offset: leafTextOffset
                };
              }
            }
          }
          function calcDistance(text2, unit2, reverse2) {
            if (unit2 === "character") {
              return getCharacterDistance(text2, reverse2);
            } else if (unit2 === "word") {
              return getWordDistance(text2, reverse2);
            } else if (unit2 === "line" || unit2 === "block") {
              return text2.length;
            }
            return 1;
          }
        },
        previous(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            mode = "lowest",
            voids = false
          } = options;
          var {
            match: match5,
            at = editor.selection
          } = options;
          if (!at) {
            return;
          }
          var pointBeforeLocation = Editor$1.before(editor, at, {
            voids
          });
          if (!pointBeforeLocation) {
            return;
          }
          var [, to2] = Editor$1.first(editor, []);
          var span = [pointBeforeLocation.path, to2];
          if (Path.isPath(at) && at.length === 0) {
            throw new Error("Cannot get the previous node from the root node!");
          }
          if (match5 == null) {
            if (Path.isPath(at)) {
              var [parent2] = Editor$1.parent(editor, at);
              match5 = (n2) => parent2.children.includes(n2);
            } else {
              match5 = () => true;
            }
          }
          var [previous2] = Editor$1.nodes(editor, {
            reverse: true,
            at: span,
            match: match5,
            mode,
            voids
          });
          return previous2;
        },
        range(editor, at, to2) {
          if (Range.isRange(at) && !to2) {
            return at;
          }
          var start = Editor$1.start(editor, at);
          var end = Editor$1.end(editor, to2 || at);
          return {
            anchor: start,
            focus: end
          };
        },
        rangeRef(editor, range) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            affinity = "forward"
          } = options;
          var ref = {
            current: range,
            affinity,
            unref() {
              var {
                current
              } = ref;
              var rangeRefs = Editor$1.rangeRefs(editor);
              rangeRefs.delete(ref);
              ref.current = null;
              return current;
            }
          };
          var refs = Editor$1.rangeRefs(editor);
          refs.add(ref);
          return ref;
        },
        rangeRefs(editor) {
          var refs = RANGE_REFS.get(editor);
          if (!refs) {
            refs = /* @__PURE__ */ new Set();
            RANGE_REFS.set(editor, refs);
          }
          return refs;
        },
        removeMark(editor, key) {
          editor.removeMark(key);
        },
        setNormalizing(editor, isNormalizing) {
          NORMALIZING.set(editor, isNormalizing);
        },
        start(editor, at) {
          return Editor$1.point(editor, at, {
            edge: "start"
          });
        },
        string(editor, at) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            voids = false
          } = options;
          var range = Editor$1.range(editor, at);
          var [start, end] = Range.edges(range);
          var text2 = "";
          for (var [node, path] of Editor$1.nodes(editor, {
            at: range,
            match: Text.isText,
            voids
          })) {
            var t2 = node.text;
            if (Path.equals(path, end.path)) {
              t2 = t2.slice(0, end.offset);
            }
            if (Path.equals(path, start.path)) {
              t2 = t2.slice(start.offset);
            }
            text2 += t2;
          }
          return text2;
        },
        unhangRange(editor, range) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            voids = false
          } = options;
          var [start, end] = Range.edges(range);
          if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {
            return range;
          }
          var endBlock = Editor$1.above(editor, {
            at: end,
            match: (n2) => Editor$1.isBlock(editor, n2)
          });
          var blockPath = endBlock ? endBlock[1] : [];
          var first = Editor$1.start(editor, start);
          var before = {
            anchor: first,
            focus: end
          };
          var skip = true;
          for (var [node, path] of Editor$1.nodes(editor, {
            at: before,
            match: Text.isText,
            reverse: true,
            voids
          })) {
            if (skip) {
              skip = false;
              continue;
            }
            if (node.text !== "" || Path.isBefore(path, blockPath)) {
              end = {
                path,
                offset: node.text.length
              };
              break;
            }
          }
          return {
            anchor: start,
            focus: end
          };
        },
        void(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          return Editor$1.above(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
            match: (n2) => Editor$1.isVoid(editor, n2)
          }));
        },
        withoutNormalizing(editor, fn2) {
          var value = Editor$1.isNormalizing(editor);
          Editor$1.setNormalizing(editor, false);
          try {
            fn2();
          } finally {
            Editor$1.setNormalizing(editor, value);
          }
          Editor$1.normalize(editor);
        }
      };
      var Span = {
        isSpan(value) {
          return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);
        }
      };
      var _excluded$3 = ["children"], _excluded2$2 = ["text"];
      var IS_NODE_LIST_CACHE = /* @__PURE__ */ new WeakMap();
      var Node$1 = {
        ancestor(root2, path) {
          var node = Node$1.get(root2, path);
          if (Text.isText(node)) {
            throw new Error("Cannot get the ancestor node at path [".concat(path, "] because it refers to a text node instead: ").concat(Scrubber.stringify(node)));
          }
          return node;
        },
        *ancestors(root2, path) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          for (var p2 of Path.ancestors(path, options)) {
            var n2 = Node$1.ancestor(root2, p2);
            var entry = [n2, p2];
            yield entry;
          }
        },
        child(root2, index2) {
          if (Text.isText(root2)) {
            throw new Error("Cannot get the child of a text node: ".concat(Scrubber.stringify(root2)));
          }
          var c2 = root2.children[index2];
          if (c2 == null) {
            throw new Error("Cannot get child at index `".concat(index2, "` in node: ").concat(Scrubber.stringify(root2)));
          }
          return c2;
        },
        *children(root2, path) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            reverse = false
          } = options;
          var ancestor = Node$1.ancestor(root2, path);
          var {
            children
          } = ancestor;
          var index2 = reverse ? children.length - 1 : 0;
          while (reverse ? index2 >= 0 : index2 < children.length) {
            var child = Node$1.child(ancestor, index2);
            var childPath = path.concat(index2);
            yield [child, childPath];
            index2 = reverse ? index2 - 1 : index2 + 1;
          }
        },
        common(root2, path, another) {
          var p2 = Path.common(path, another);
          var n2 = Node$1.get(root2, p2);
          return [n2, p2];
        },
        descendant(root2, path) {
          var node = Node$1.get(root2, path);
          if (Editor$1.isEditor(node)) {
            throw new Error("Cannot get the descendant node at path [".concat(path, "] because it refers to the root editor node instead: ").concat(Scrubber.stringify(node)));
          }
          return node;
        },
        *descendants(root2) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          for (var [node, path] of Node$1.nodes(root2, options)) {
            if (path.length !== 0) {
              yield [node, path];
            }
          }
        },
        *elements(root2) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          for (var [node, path] of Node$1.nodes(root2, options)) {
            if (Element$1.isElement(node)) {
              yield [node, path];
            }
          }
        },
        extractProps(node) {
          if (Element$1.isAncestor(node)) {
            var properties = _objectWithoutProperties$4(node, _excluded$3);
            return properties;
          } else {
            var properties = _objectWithoutProperties$4(node, _excluded2$2);
            return properties;
          }
        },
        first(root2, path) {
          var p2 = path.slice();
          var n2 = Node$1.get(root2, p2);
          while (n2) {
            if (Text.isText(n2) || n2.children.length === 0) {
              break;
            } else {
              n2 = n2.children[0];
              p2.push(0);
            }
          }
          return [n2, p2];
        },
        fragment(root2, range) {
          if (Text.isText(root2)) {
            throw new Error("Cannot get a fragment starting from a root text node: ".concat(Scrubber.stringify(root2)));
          }
          var newRoot = fn({
            children: root2.children
          }, (r2) => {
            var [start, end] = Range.edges(range);
            var nodeEntries = Node$1.nodes(r2, {
              reverse: true,
              pass: (_ref) => {
                var [, path2] = _ref;
                return !Range.includes(range, path2);
              }
            });
            for (var [, path] of nodeEntries) {
              if (!Range.includes(range, path)) {
                var parent2 = Node$1.parent(r2, path);
                var index2 = path[path.length - 1];
                parent2.children.splice(index2, 1);
              }
              if (Path.equals(path, end.path)) {
                var leaf = Node$1.leaf(r2, path);
                leaf.text = leaf.text.slice(0, end.offset);
              }
              if (Path.equals(path, start.path)) {
                var _leaf = Node$1.leaf(r2, path);
                _leaf.text = _leaf.text.slice(start.offset);
              }
            }
            if (Editor$1.isEditor(r2)) {
              r2.selection = null;
            }
          });
          return newRoot.children;
        },
        get(root2, path) {
          var node = root2;
          for (var i2 = 0; i2 < path.length; i2++) {
            var p2 = path[i2];
            if (Text.isText(node) || !node.children[p2]) {
              throw new Error("Cannot find a descendant at path [".concat(path, "] in node: ").concat(Scrubber.stringify(root2)));
            }
            node = node.children[p2];
          }
          return node;
        },
        has(root2, path) {
          var node = root2;
          for (var i2 = 0; i2 < path.length; i2++) {
            var p2 = path[i2];
            if (Text.isText(node) || !node.children[p2]) {
              return false;
            }
            node = node.children[p2];
          }
          return true;
        },
        isNode(value) {
          return Text.isText(value) || Element$1.isElement(value) || Editor$1.isEditor(value);
        },
        isNodeList(value) {
          if (!Array.isArray(value)) {
            return false;
          }
          var cachedResult = IS_NODE_LIST_CACHE.get(value);
          if (cachedResult !== void 0) {
            return cachedResult;
          }
          var isNodeList = value.every((val) => Node$1.isNode(val));
          IS_NODE_LIST_CACHE.set(value, isNodeList);
          return isNodeList;
        },
        last(root2, path) {
          var p2 = path.slice();
          var n2 = Node$1.get(root2, p2);
          while (n2) {
            if (Text.isText(n2) || n2.children.length === 0) {
              break;
            } else {
              var i2 = n2.children.length - 1;
              n2 = n2.children[i2];
              p2.push(i2);
            }
          }
          return [n2, p2];
        },
        leaf(root2, path) {
          var node = Node$1.get(root2, path);
          if (!Text.isText(node)) {
            throw new Error("Cannot get the leaf node at path [".concat(path, "] because it refers to a non-leaf node: ").concat(Scrubber.stringify(node)));
          }
          return node;
        },
        *levels(root2, path) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          for (var p2 of Path.levels(path, options)) {
            var n2 = Node$1.get(root2, p2);
            yield [n2, p2];
          }
        },
        matches(node, props) {
          return Element$1.isElement(node) && Element$1.isElementProps(props) && Element$1.matches(node, props) || Text.isText(node) && Text.isTextProps(props) && Text.matches(node, props);
        },
        *nodes(root2) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            pass,
            reverse = false
          } = options;
          var {
            from: from2 = [],
            to: to2
          } = options;
          var visited = /* @__PURE__ */ new Set();
          var p2 = [];
          var n2 = root2;
          while (true) {
            if (to2 && (reverse ? Path.isBefore(p2, to2) : Path.isAfter(p2, to2))) {
              break;
            }
            if (!visited.has(n2)) {
              yield [n2, p2];
            }
            if (!visited.has(n2) && !Text.isText(n2) && n2.children.length !== 0 && (pass == null || pass([n2, p2]) === false)) {
              visited.add(n2);
              var nextIndex = reverse ? n2.children.length - 1 : 0;
              if (Path.isAncestor(p2, from2)) {
                nextIndex = from2[p2.length];
              }
              p2 = p2.concat(nextIndex);
              n2 = Node$1.get(root2, p2);
              continue;
            }
            if (p2.length === 0) {
              break;
            }
            if (!reverse) {
              var newPath = Path.next(p2);
              if (Node$1.has(root2, newPath)) {
                p2 = newPath;
                n2 = Node$1.get(root2, p2);
                continue;
              }
            }
            if (reverse && p2[p2.length - 1] !== 0) {
              var _newPath = Path.previous(p2);
              p2 = _newPath;
              n2 = Node$1.get(root2, p2);
              continue;
            }
            p2 = Path.parent(p2);
            n2 = Node$1.get(root2, p2);
            visited.add(n2);
          }
        },
        parent(root2, path) {
          var parentPath = Path.parent(path);
          var p2 = Node$1.get(root2, parentPath);
          if (Text.isText(p2)) {
            throw new Error("Cannot get the parent of path [".concat(path, "] because it does not exist in the root."));
          }
          return p2;
        },
        string(node) {
          if (Text.isText(node)) {
            return node.text;
          } else {
            return node.children.map(Node$1.string).join("");
          }
        },
        *texts(root2) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          for (var [node, path] of Node$1.nodes(root2, options)) {
            if (Text.isText(node)) {
              yield [node, path];
            }
          }
        }
      };
      function ownKeys$7(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$7(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$7(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$7(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var Operation = {
        isNodeOperation(value) {
          return Operation.isOperation(value) && value.type.endsWith("_node");
        },
        isOperation(value) {
          if (!isPlainObject$4(value)) {
            return false;
          }
          switch (value.type) {
            case "insert_node":
              return Path.isPath(value.path) && Node$1.isNode(value.node);
            case "insert_text":
              return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
            case "merge_node":
              return typeof value.position === "number" && Path.isPath(value.path) && isPlainObject$4(value.properties);
            case "move_node":
              return Path.isPath(value.path) && Path.isPath(value.newPath);
            case "remove_node":
              return Path.isPath(value.path) && Node$1.isNode(value.node);
            case "remove_text":
              return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
            case "set_node":
              return Path.isPath(value.path) && isPlainObject$4(value.properties) && isPlainObject$4(value.newProperties);
            case "set_selection":
              return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || isPlainObject$4(value.properties) && isPlainObject$4(value.newProperties);
            case "split_node":
              return Path.isPath(value.path) && typeof value.position === "number" && isPlainObject$4(value.properties);
            default:
              return false;
          }
        },
        isOperationList(value) {
          return Array.isArray(value) && value.every((val) => Operation.isOperation(val));
        },
        isSelectionOperation(value) {
          return Operation.isOperation(value) && value.type.endsWith("_selection");
        },
        isTextOperation(value) {
          return Operation.isOperation(value) && value.type.endsWith("_text");
        },
        inverse(op) {
          switch (op.type) {
            case "insert_node": {
              return _objectSpread$7(_objectSpread$7({}, op), {}, {
                type: "remove_node"
              });
            }
            case "insert_text": {
              return _objectSpread$7(_objectSpread$7({}, op), {}, {
                type: "remove_text"
              });
            }
            case "merge_node": {
              return _objectSpread$7(_objectSpread$7({}, op), {}, {
                type: "split_node",
                path: Path.previous(op.path)
              });
            }
            case "move_node": {
              var {
                newPath,
                path
              } = op;
              if (Path.equals(newPath, path)) {
                return op;
              }
              if (Path.isSibling(path, newPath)) {
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                  path: newPath,
                  newPath: path
                });
              }
              var inversePath = Path.transform(path, op);
              var inverseNewPath = Path.transform(Path.next(path), op);
              return _objectSpread$7(_objectSpread$7({}, op), {}, {
                path: inversePath,
                newPath: inverseNewPath
              });
            }
            case "remove_node": {
              return _objectSpread$7(_objectSpread$7({}, op), {}, {
                type: "insert_node"
              });
            }
            case "remove_text": {
              return _objectSpread$7(_objectSpread$7({}, op), {}, {
                type: "insert_text"
              });
            }
            case "set_node": {
              var {
                properties,
                newProperties
              } = op;
              return _objectSpread$7(_objectSpread$7({}, op), {}, {
                properties: newProperties,
                newProperties: properties
              });
            }
            case "set_selection": {
              var {
                properties: _properties,
                newProperties: _newProperties
              } = op;
              if (_properties == null) {
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                  properties: _newProperties,
                  newProperties: null
                });
              } else if (_newProperties == null) {
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                  properties: null,
                  newProperties: _properties
                });
              } else {
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                  properties: _newProperties,
                  newProperties: _properties
                });
              }
            }
            case "split_node": {
              return _objectSpread$7(_objectSpread$7({}, op), {}, {
                type: "merge_node",
                path: Path.next(op.path)
              });
            }
          }
        }
      };
      var Path = {
        ancestors(path) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            reverse = false
          } = options;
          var paths = Path.levels(path, options);
          if (reverse) {
            paths = paths.slice(1);
          } else {
            paths = paths.slice(0, -1);
          }
          return paths;
        },
        common(path, another) {
          var common = [];
          for (var i2 = 0; i2 < path.length && i2 < another.length; i2++) {
            var av = path[i2];
            var bv = another[i2];
            if (av !== bv) {
              break;
            }
            common.push(av);
          }
          return common;
        },
        compare(path, another) {
          var min2 = Math.min(path.length, another.length);
          for (var i2 = 0; i2 < min2; i2++) {
            if (path[i2] < another[i2])
              return -1;
            if (path[i2] > another[i2])
              return 1;
          }
          return 0;
        },
        endsAfter(path, another) {
          var i2 = path.length - 1;
          var as2 = path.slice(0, i2);
          var bs = another.slice(0, i2);
          var av = path[i2];
          var bv = another[i2];
          return Path.equals(as2, bs) && av > bv;
        },
        endsAt(path, another) {
          var i2 = path.length;
          var as2 = path.slice(0, i2);
          var bs = another.slice(0, i2);
          return Path.equals(as2, bs);
        },
        endsBefore(path, another) {
          var i2 = path.length - 1;
          var as2 = path.slice(0, i2);
          var bs = another.slice(0, i2);
          var av = path[i2];
          var bv = another[i2];
          return Path.equals(as2, bs) && av < bv;
        },
        equals(path, another) {
          return path.length === another.length && path.every((n2, i2) => n2 === another[i2]);
        },
        hasPrevious(path) {
          return path[path.length - 1] > 0;
        },
        isAfter(path, another) {
          return Path.compare(path, another) === 1;
        },
        isAncestor(path, another) {
          return path.length < another.length && Path.compare(path, another) === 0;
        },
        isBefore(path, another) {
          return Path.compare(path, another) === -1;
        },
        isChild(path, another) {
          return path.length === another.length + 1 && Path.compare(path, another) === 0;
        },
        isCommon(path, another) {
          return path.length <= another.length && Path.compare(path, another) === 0;
        },
        isDescendant(path, another) {
          return path.length > another.length && Path.compare(path, another) === 0;
        },
        isParent(path, another) {
          return path.length + 1 === another.length && Path.compare(path, another) === 0;
        },
        isPath(value) {
          return Array.isArray(value) && (value.length === 0 || typeof value[0] === "number");
        },
        isSibling(path, another) {
          if (path.length !== another.length) {
            return false;
          }
          var as2 = path.slice(0, -1);
          var bs = another.slice(0, -1);
          var al = path[path.length - 1];
          var bl = another[another.length - 1];
          return al !== bl && Path.equals(as2, bs);
        },
        levels(path) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            reverse = false
          } = options;
          var list2 = [];
          for (var i2 = 0; i2 <= path.length; i2++) {
            list2.push(path.slice(0, i2));
          }
          if (reverse) {
            list2.reverse();
          }
          return list2;
        },
        next(path) {
          if (path.length === 0) {
            throw new Error("Cannot get the next path of a root path [".concat(path, "], because it has no next index."));
          }
          var last2 = path[path.length - 1];
          return path.slice(0, -1).concat(last2 + 1);
        },
        operationCanTransformPath(operation) {
          switch (operation.type) {
            case "insert_node":
            case "remove_node":
            case "merge_node":
            case "split_node":
            case "move_node":
              return true;
            default:
              return false;
          }
        },
        parent(path) {
          if (path.length === 0) {
            throw new Error("Cannot get the parent path of the root path [".concat(path, "]."));
          }
          return path.slice(0, -1);
        },
        previous(path) {
          if (path.length === 0) {
            throw new Error("Cannot get the previous path of a root path [".concat(path, "], because it has no previous index."));
          }
          var last2 = path[path.length - 1];
          if (last2 <= 0) {
            throw new Error("Cannot get the previous path of a first child path [".concat(path, "] because it would result in a negative index."));
          }
          return path.slice(0, -1).concat(last2 - 1);
        },
        relative(path, ancestor) {
          if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {
            throw new Error("Cannot get the relative path of [".concat(path, "] inside ancestor [").concat(ancestor, "], because it is not above or equal to the path."));
          }
          return path.slice(ancestor.length);
        },
        transform(path, operation) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return fn(path, (p2) => {
            var {
              affinity = "forward"
            } = options;
            if (!path || (path === null || path === void 0 ? void 0 : path.length) === 0) {
              return;
            }
            if (p2 === null) {
              return null;
            }
            switch (operation.type) {
              case "insert_node": {
                var {
                  path: op
                } = operation;
                if (Path.equals(op, p2) || Path.endsBefore(op, p2) || Path.isAncestor(op, p2)) {
                  p2[op.length - 1] += 1;
                }
                break;
              }
              case "remove_node": {
                var {
                  path: _op
                } = operation;
                if (Path.equals(_op, p2) || Path.isAncestor(_op, p2)) {
                  return null;
                } else if (Path.endsBefore(_op, p2)) {
                  p2[_op.length - 1] -= 1;
                }
                break;
              }
              case "merge_node": {
                var {
                  path: _op2,
                  position: position2
                } = operation;
                if (Path.equals(_op2, p2) || Path.endsBefore(_op2, p2)) {
                  p2[_op2.length - 1] -= 1;
                } else if (Path.isAncestor(_op2, p2)) {
                  p2[_op2.length - 1] -= 1;
                  p2[_op2.length] += position2;
                }
                break;
              }
              case "split_node": {
                var {
                  path: _op3,
                  position: _position
                } = operation;
                if (Path.equals(_op3, p2)) {
                  if (affinity === "forward") {
                    p2[p2.length - 1] += 1;
                  } else if (affinity === "backward")
                    ;
                  else {
                    return null;
                  }
                } else if (Path.endsBefore(_op3, p2)) {
                  p2[_op3.length - 1] += 1;
                } else if (Path.isAncestor(_op3, p2) && path[_op3.length] >= _position) {
                  p2[_op3.length - 1] += 1;
                  p2[_op3.length] -= _position;
                }
                break;
              }
              case "move_node": {
                var {
                  path: _op4,
                  newPath: onp
                } = operation;
                if (Path.equals(_op4, onp)) {
                  return;
                }
                if (Path.isAncestor(_op4, p2) || Path.equals(_op4, p2)) {
                  var copy = onp.slice();
                  if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {
                    copy[_op4.length - 1] -= 1;
                  }
                  return copy.concat(p2.slice(_op4.length));
                } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p2) || Path.equals(onp, p2))) {
                  if (Path.endsBefore(_op4, p2)) {
                    p2[_op4.length - 1] -= 1;
                  } else {
                    p2[_op4.length - 1] += 1;
                  }
                } else if (Path.endsBefore(onp, p2) || Path.equals(onp, p2) || Path.isAncestor(onp, p2)) {
                  if (Path.endsBefore(_op4, p2)) {
                    p2[_op4.length - 1] -= 1;
                  }
                  p2[onp.length - 1] += 1;
                } else if (Path.endsBefore(_op4, p2)) {
                  if (Path.equals(onp, p2)) {
                    p2[onp.length - 1] += 1;
                  }
                  p2[_op4.length - 1] -= 1;
                }
                break;
              }
            }
          });
        }
      };
      var PathRef = {
        transform(ref, op) {
          var {
            current,
            affinity
          } = ref;
          if (current == null) {
            return;
          }
          var path = Path.transform(current, op, {
            affinity
          });
          ref.current = path;
          if (path == null) {
            ref.unref();
          }
        }
      };
      function ownKeys$6(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$6(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$6(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$6(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var Point = {
        compare(point2, another) {
          var result = Path.compare(point2.path, another.path);
          if (result === 0) {
            if (point2.offset < another.offset)
              return -1;
            if (point2.offset > another.offset)
              return 1;
            return 0;
          }
          return result;
        },
        isAfter(point2, another) {
          return Point.compare(point2, another) === 1;
        },
        isBefore(point2, another) {
          return Point.compare(point2, another) === -1;
        },
        equals(point2, another) {
          return point2.offset === another.offset && Path.equals(point2.path, another.path);
        },
        isPoint(value) {
          return isPlainObject$4(value) && typeof value.offset === "number" && Path.isPath(value.path);
        },
        transform(point2, op) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return fn(point2, (p2) => {
            if (p2 === null) {
              return null;
            }
            var {
              affinity = "forward"
            } = options;
            var {
              path,
              offset: offset2
            } = p2;
            switch (op.type) {
              case "insert_node":
              case "move_node": {
                p2.path = Path.transform(path, op, options);
                break;
              }
              case "insert_text": {
                if (Path.equals(op.path, path) && (op.offset < offset2 || op.offset === offset2 && affinity === "forward")) {
                  p2.offset += op.text.length;
                }
                break;
              }
              case "merge_node": {
                if (Path.equals(op.path, path)) {
                  p2.offset += op.position;
                }
                p2.path = Path.transform(path, op, options);
                break;
              }
              case "remove_text": {
                if (Path.equals(op.path, path) && op.offset <= offset2) {
                  p2.offset -= Math.min(offset2 - op.offset, op.text.length);
                }
                break;
              }
              case "remove_node": {
                if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {
                  return null;
                }
                p2.path = Path.transform(path, op, options);
                break;
              }
              case "split_node": {
                if (Path.equals(op.path, path)) {
                  if (op.position === offset2 && affinity == null) {
                    return null;
                  } else if (op.position < offset2 || op.position === offset2 && affinity === "forward") {
                    p2.offset -= op.position;
                    p2.path = Path.transform(path, op, _objectSpread$6(_objectSpread$6({}, options), {}, {
                      affinity: "forward"
                    }));
                  }
                } else {
                  p2.path = Path.transform(path, op, options);
                }
                break;
              }
            }
          });
        }
      };
      var PointRef = {
        transform(ref, op) {
          var {
            current,
            affinity
          } = ref;
          if (current == null) {
            return;
          }
          var point2 = Point.transform(current, op, {
            affinity
          });
          ref.current = point2;
          if (point2 == null) {
            ref.unref();
          }
        }
      };
      var _excluded$2 = ["anchor", "focus"];
      function ownKeys$5(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$5(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$5(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$5(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var Range = {
        edges(range) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            reverse = false
          } = options;
          var {
            anchor,
            focus
          } = range;
          return Range.isBackward(range) === reverse ? [anchor, focus] : [focus, anchor];
        },
        end(range) {
          var [, end] = Range.edges(range);
          return end;
        },
        equals(range, another) {
          return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);
        },
        includes(range, target) {
          if (Range.isRange(target)) {
            if (Range.includes(range, target.anchor) || Range.includes(range, target.focus)) {
              return true;
            }
            var [rs, re2] = Range.edges(range);
            var [ts, te2] = Range.edges(target);
            return Point.isBefore(rs, ts) && Point.isAfter(re2, te2);
          }
          var [start, end] = Range.edges(range);
          var isAfterStart = false;
          var isBeforeEnd = false;
          if (Point.isPoint(target)) {
            isAfterStart = Point.compare(target, start) >= 0;
            isBeforeEnd = Point.compare(target, end) <= 0;
          } else {
            isAfterStart = Path.compare(target, start.path) >= 0;
            isBeforeEnd = Path.compare(target, end.path) <= 0;
          }
          return isAfterStart && isBeforeEnd;
        },
        intersection(range, another) {
          var rest = _objectWithoutProperties$4(range, _excluded$2);
          var [s1, e1] = Range.edges(range);
          var [s2, e2] = Range.edges(another);
          var start = Point.isBefore(s1, s2) ? s2 : s1;
          var end = Point.isBefore(e1, e2) ? e1 : e2;
          if (Point.isBefore(end, start)) {
            return null;
          } else {
            return _objectSpread$5({
              anchor: start,
              focus: end
            }, rest);
          }
        },
        isBackward(range) {
          var {
            anchor,
            focus
          } = range;
          return Point.isAfter(anchor, focus);
        },
        isCollapsed(range) {
          var {
            anchor,
            focus
          } = range;
          return Point.equals(anchor, focus);
        },
        isExpanded(range) {
          return !Range.isCollapsed(range);
        },
        isForward(range) {
          return !Range.isBackward(range);
        },
        isRange(value) {
          return isPlainObject$4(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);
        },
        *points(range) {
          yield [range.anchor, "anchor"];
          yield [range.focus, "focus"];
        },
        start(range) {
          var [start] = Range.edges(range);
          return start;
        },
        transform(range, op) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return fn(range, (r2) => {
            if (r2 === null) {
              return null;
            }
            var {
              affinity = "inward"
            } = options;
            var affinityAnchor;
            var affinityFocus;
            if (affinity === "inward") {
              var isCollapsed2 = Range.isCollapsed(r2);
              if (Range.isForward(r2)) {
                affinityAnchor = "forward";
                affinityFocus = isCollapsed2 ? affinityAnchor : "backward";
              } else {
                affinityAnchor = "backward";
                affinityFocus = isCollapsed2 ? affinityAnchor : "forward";
              }
            } else if (affinity === "outward") {
              if (Range.isForward(r2)) {
                affinityAnchor = "backward";
                affinityFocus = "forward";
              } else {
                affinityAnchor = "forward";
                affinityFocus = "backward";
              }
            } else {
              affinityAnchor = affinity;
              affinityFocus = affinity;
            }
            var anchor = Point.transform(r2.anchor, op, {
              affinity: affinityAnchor
            });
            var focus = Point.transform(r2.focus, op, {
              affinity: affinityFocus
            });
            if (!anchor || !focus) {
              return null;
            }
            r2.anchor = anchor;
            r2.focus = focus;
          });
        }
      };
      var RangeRef = {
        transform(ref, op) {
          var {
            current,
            affinity
          } = ref;
          if (current == null) {
            return;
          }
          var path = Range.transform(current, op, {
            affinity
          });
          ref.current = path;
          if (path == null) {
            ref.unref();
          }
        }
      };
      var _scrubber = void 0;
      var Scrubber = {
        setScrubber(scrubber) {
          _scrubber = scrubber;
        },
        stringify(value) {
          return JSON.stringify(value, _scrubber);
        }
      };
      var isDeepEqual = (node, another) => {
        for (var key in node) {
          var a2 = node[key];
          var b2 = another[key];
          if (isPlainObject$4(a2) && isPlainObject$4(b2)) {
            if (!isDeepEqual(a2, b2))
              return false;
          } else if (Array.isArray(a2) && Array.isArray(b2)) {
            if (a2.length !== b2.length)
              return false;
            for (var i2 = 0; i2 < a2.length; i2++) {
              if (a2[i2] !== b2[i2])
                return false;
            }
          } else if (a2 !== b2) {
            return false;
          }
        }
        for (var _key in another) {
          if (node[_key] === void 0 && another[_key] !== void 0) {
            return false;
          }
        }
        return true;
      };
      var _excluded$1 = ["text"], _excluded2$1 = ["anchor", "focus"];
      function ownKeys$4$1(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$4(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$4$1(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$4$1(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var Text = {
        equals(text2, another) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            loose = false
          } = options;
          function omitText(obj) {
            var rest = _objectWithoutProperties$4(obj, _excluded$1);
            return rest;
          }
          return isDeepEqual(loose ? omitText(text2) : text2, loose ? omitText(another) : another);
        },
        isText(value) {
          return isPlainObject$4(value) && typeof value.text === "string";
        },
        isTextList(value) {
          return Array.isArray(value) && value.every((val) => Text.isText(val));
        },
        isTextProps(props) {
          return props.text !== void 0;
        },
        matches(text2, props) {
          for (var key in props) {
            if (key === "text") {
              continue;
            }
            if (!text2.hasOwnProperty(key) || text2[key] !== props[key]) {
              return false;
            }
          }
          return true;
        },
        decorations(node, decorations) {
          var leaves = [_objectSpread$4({}, node)];
          for (var dec of decorations) {
            var rest = _objectWithoutProperties$4(dec, _excluded2$1);
            var [start, end] = Range.edges(dec);
            var next = [];
            var o2 = 0;
            for (var leaf of leaves) {
              var {
                length
              } = leaf.text;
              var offset2 = o2;
              o2 += length;
              if (start.offset <= offset2 && end.offset >= o2) {
                Object.assign(leaf, rest);
                next.push(leaf);
                continue;
              }
              if (start.offset !== end.offset && (start.offset === o2 || end.offset === offset2) || start.offset > o2 || end.offset < offset2 || end.offset === offset2 && offset2 !== 0) {
                next.push(leaf);
                continue;
              }
              var middle = leaf;
              var before = void 0;
              var after = void 0;
              if (end.offset < o2) {
                var off = end.offset - offset2;
                after = _objectSpread$4(_objectSpread$4({}, middle), {}, {
                  text: middle.text.slice(off)
                });
                middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {
                  text: middle.text.slice(0, off)
                });
              }
              if (start.offset > offset2) {
                var _off = start.offset - offset2;
                before = _objectSpread$4(_objectSpread$4({}, middle), {}, {
                  text: middle.text.slice(0, _off)
                });
                middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {
                  text: middle.text.slice(_off)
                });
              }
              Object.assign(middle, rest);
              if (before) {
                next.push(before);
              }
              next.push(middle);
              if (after) {
                next.push(after);
              }
            }
            leaves = next;
          }
          return leaves;
        }
      };
      function ownKeys$3$1(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$3(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$3$1(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$3$1(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var applyToDraft = (editor, selection, op) => {
        switch (op.type) {
          case "insert_node": {
            var {
              path,
              node
            } = op;
            var parent2 = Node$1.parent(editor, path);
            var index2 = path[path.length - 1];
            if (index2 > parent2.children.length) {
              throw new Error('Cannot apply an "insert_node" operation at path ['.concat(path, "] because the destination is past the end of the node."));
            }
            parent2.children.splice(index2, 0, node);
            if (selection) {
              for (var [point2, key] of Range.points(selection)) {
                selection[key] = Point.transform(point2, op);
              }
            }
            break;
          }
          case "insert_text": {
            var {
              path: _path,
              offset: offset2,
              text: text2
            } = op;
            if (text2.length === 0)
              break;
            var _node = Node$1.leaf(editor, _path);
            var before = _node.text.slice(0, offset2);
            var after = _node.text.slice(offset2);
            _node.text = before + text2 + after;
            if (selection) {
              for (var [_point, _key] of Range.points(selection)) {
                selection[_key] = Point.transform(_point, op);
              }
            }
            break;
          }
          case "merge_node": {
            var {
              path: _path2
            } = op;
            var _node2 = Node$1.get(editor, _path2);
            var prevPath = Path.previous(_path2);
            var prev = Node$1.get(editor, prevPath);
            var _parent2 = Node$1.parent(editor, _path2);
            var _index = _path2[_path2.length - 1];
            if (Text.isText(_node2) && Text.isText(prev)) {
              prev.text += _node2.text;
            } else if (!Text.isText(_node2) && !Text.isText(prev)) {
              prev.children.push(..._node2.children);
            } else {
              throw new Error('Cannot apply a "merge_node" operation at path ['.concat(_path2, "] to nodes of different interfaces: ").concat(Scrubber.stringify(_node2), " ").concat(Scrubber.stringify(prev)));
            }
            _parent2.children.splice(_index, 1);
            if (selection) {
              for (var [_point2, _key2] of Range.points(selection)) {
                selection[_key2] = Point.transform(_point2, op);
              }
            }
            break;
          }
          case "move_node": {
            var {
              path: _path3,
              newPath
            } = op;
            if (Path.isAncestor(_path3, newPath)) {
              throw new Error("Cannot move a path [".concat(_path3, "] to new path [").concat(newPath, "] because the destination is inside itself."));
            }
            var _node3 = Node$1.get(editor, _path3);
            var _parent22 = Node$1.parent(editor, _path3);
            var _index2 = _path3[_path3.length - 1];
            _parent22.children.splice(_index2, 1);
            var truePath = Path.transform(_path3, op);
            var newParent = Node$1.get(editor, Path.parent(truePath));
            var newIndex = truePath[truePath.length - 1];
            newParent.children.splice(newIndex, 0, _node3);
            if (selection) {
              for (var [_point3, _key3] of Range.points(selection)) {
                selection[_key3] = Point.transform(_point3, op);
              }
            }
            break;
          }
          case "remove_node": {
            var {
              path: _path4
            } = op;
            var _index3 = _path4[_path4.length - 1];
            var _parent3 = Node$1.parent(editor, _path4);
            _parent3.children.splice(_index3, 1);
            if (selection) {
              for (var [_point4, _key4] of Range.points(selection)) {
                var result = Point.transform(_point4, op);
                if (selection != null && result != null) {
                  selection[_key4] = result;
                } else {
                  var _prev = void 0;
                  var next = void 0;
                  for (var [n2, p2] of Node$1.texts(editor)) {
                    if (Path.compare(p2, _path4) === -1) {
                      _prev = [n2, p2];
                    } else {
                      next = [n2, p2];
                      break;
                    }
                  }
                  var preferNext = false;
                  if (_prev && next) {
                    if (Path.equals(next[1], _path4)) {
                      preferNext = !Path.hasPrevious(next[1]);
                    } else {
                      preferNext = Path.common(_prev[1], _path4).length < Path.common(next[1], _path4).length;
                    }
                  }
                  if (_prev && !preferNext) {
                    _point4.path = _prev[1];
                    _point4.offset = _prev[0].text.length;
                  } else if (next) {
                    _point4.path = next[1];
                    _point4.offset = 0;
                  } else {
                    selection = null;
                  }
                }
              }
            }
            break;
          }
          case "remove_text": {
            var {
              path: _path5,
              offset: _offset,
              text: _text
            } = op;
            if (_text.length === 0)
              break;
            var _node4 = Node$1.leaf(editor, _path5);
            var _before = _node4.text.slice(0, _offset);
            var _after = _node4.text.slice(_offset + _text.length);
            _node4.text = _before + _after;
            if (selection) {
              for (var [_point5, _key5] of Range.points(selection)) {
                selection[_key5] = Point.transform(_point5, op);
              }
            }
            break;
          }
          case "set_node": {
            var {
              path: _path6,
              properties,
              newProperties
            } = op;
            if (_path6.length === 0) {
              throw new Error("Cannot set properties on the root node!");
            }
            var _node5 = Node$1.get(editor, _path6);
            for (var _key6 in newProperties) {
              if (_key6 === "children" || _key6 === "text") {
                throw new Error('Cannot set the "'.concat(_key6, '" property of nodes!'));
              }
              var value = newProperties[_key6];
              if (value == null) {
                delete _node5[_key6];
              } else {
                _node5[_key6] = value;
              }
            }
            for (var _key7 in properties) {
              if (!newProperties.hasOwnProperty(_key7)) {
                delete _node5[_key7];
              }
            }
            break;
          }
          case "set_selection": {
            var {
              newProperties: _newProperties
            } = op;
            if (_newProperties == null) {
              selection = _newProperties;
            } else {
              if (selection == null) {
                if (!Range.isRange(_newProperties)) {
                  throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(Scrubber.stringify(_newProperties), " when there is no current selection."));
                }
                selection = _objectSpread$3({}, _newProperties);
              }
              for (var _key8 in _newProperties) {
                var _value = _newProperties[_key8];
                if (_value == null) {
                  if (_key8 === "anchor" || _key8 === "focus") {
                    throw new Error('Cannot remove the "'.concat(_key8, '" selection property'));
                  }
                  delete selection[_key8];
                } else {
                  selection[_key8] = _value;
                }
              }
            }
            break;
          }
          case "split_node": {
            var {
              path: _path7,
              position: position2,
              properties: _properties
            } = op;
            if (_path7.length === 0) {
              throw new Error('Cannot apply a "split_node" operation at path ['.concat(_path7, "] because the root node cannot be split."));
            }
            var _node6 = Node$1.get(editor, _path7);
            var _parent4 = Node$1.parent(editor, _path7);
            var _index4 = _path7[_path7.length - 1];
            var newNode;
            if (Text.isText(_node6)) {
              var _before2 = _node6.text.slice(0, position2);
              var _after2 = _node6.text.slice(position2);
              _node6.text = _before2;
              newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {
                text: _after2
              });
            } else {
              var _before3 = _node6.children.slice(0, position2);
              var _after3 = _node6.children.slice(position2);
              _node6.children = _before3;
              newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {
                children: _after3
              });
            }
            _parent4.children.splice(_index4 + 1, 0, newNode);
            if (selection) {
              for (var [_point6, _key9] of Range.points(selection)) {
                selection[_key9] = Point.transform(_point6, op);
              }
            }
            break;
          }
        }
        return selection;
      };
      var GeneralTransforms = {
        transform(editor, op) {
          editor.children = ln(editor.children);
          var selection = editor.selection && ln(editor.selection);
          try {
            selection = applyToDraft(editor, selection, op);
          } finally {
            editor.children = dn(editor.children);
            if (selection) {
              editor.selection = r$2(selection) ? dn(selection) : selection;
            } else {
              editor.selection = null;
            }
          }
        }
      };
      var _excluded$5 = ["text"], _excluded2$4 = ["children"];
      function ownKeys$2$1(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$2$1(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$2$1(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$2$1(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var NodeTransforms = {
        insertNodes(editor, nodes) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              hanging = false,
              voids = false,
              mode = "lowest"
            } = options;
            var {
              at,
              match: match5,
              select: select2
            } = options;
            if (Node$1.isNode(nodes)) {
              nodes = [nodes];
            }
            if (nodes.length === 0) {
              return;
            }
            var [node] = nodes;
            if (!at) {
              if (editor.selection) {
                at = editor.selection;
              } else if (editor.children.length > 0) {
                at = Editor$1.end(editor, []);
              } else {
                at = [0];
              }
              select2 = true;
            }
            if (select2 == null) {
              select2 = false;
            }
            if (Range.isRange(at)) {
              if (!hanging) {
                at = Editor$1.unhangRange(editor, at);
              }
              if (Range.isCollapsed(at)) {
                at = at.anchor;
              } else {
                var [, end] = Range.edges(at);
                var pointRef = Editor$1.pointRef(editor, end);
                Transforms.delete(editor, {
                  at
                });
                at = pointRef.unref();
              }
            }
            if (Point.isPoint(at)) {
              if (match5 == null) {
                if (Text.isText(node)) {
                  match5 = (n2) => Text.isText(n2);
                } else if (editor.isInline(node)) {
                  match5 = (n2) => Text.isText(n2) || Editor$1.isInline(editor, n2);
                } else {
                  match5 = (n2) => Editor$1.isBlock(editor, n2);
                }
              }
              var [entry] = Editor$1.nodes(editor, {
                at: at.path,
                match: match5,
                mode,
                voids
              });
              if (entry) {
                var [, _matchPath] = entry;
                var pathRef = Editor$1.pathRef(editor, _matchPath);
                var isAtEnd = Editor$1.isEnd(editor, at, _matchPath);
                Transforms.splitNodes(editor, {
                  at,
                  match: match5,
                  mode,
                  voids
                });
                var path = pathRef.unref();
                at = isAtEnd ? Path.next(path) : path;
              } else {
                return;
              }
            }
            var parentPath = Path.parent(at);
            var index2 = at[at.length - 1];
            if (!voids && Editor$1.void(editor, {
              at: parentPath
            })) {
              return;
            }
            for (var _node of nodes) {
              var _path = parentPath.concat(index2);
              index2++;
              editor.apply({
                type: "insert_node",
                path: _path,
                node: _node
              });
              at = Path.next(at);
            }
            at = Path.previous(at);
            if (select2) {
              var point2 = Editor$1.end(editor, at);
              if (point2) {
                Transforms.select(editor, point2);
              }
            }
          });
        },
        liftNodes(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              at = editor.selection,
              mode = "lowest",
              voids = false
            } = options;
            var {
              match: match5
            } = options;
            if (match5 == null) {
              match5 = Path.isPath(at) ? matchPath(editor, at) : (n2) => Editor$1.isBlock(editor, n2);
            }
            if (!at) {
              return;
            }
            var matches = Editor$1.nodes(editor, {
              at,
              match: match5,
              mode,
              voids
            });
            var pathRefs = Array.from(matches, (_ref) => {
              var [, p2] = _ref;
              return Editor$1.pathRef(editor, p2);
            });
            for (var pathRef of pathRefs) {
              var path = pathRef.unref();
              if (path.length < 2) {
                throw new Error("Cannot lift node at a path [".concat(path, "] because it has a depth of less than `2`."));
              }
              var parentNodeEntry = Editor$1.node(editor, Path.parent(path));
              var [parent2, parentPath] = parentNodeEntry;
              var index2 = path[path.length - 1];
              var {
                length
              } = parent2.children;
              if (length === 1) {
                var toPath = Path.next(parentPath);
                Transforms.moveNodes(editor, {
                  at: path,
                  to: toPath,
                  voids
                });
                Transforms.removeNodes(editor, {
                  at: parentPath,
                  voids
                });
              } else if (index2 === 0) {
                Transforms.moveNodes(editor, {
                  at: path,
                  to: parentPath,
                  voids
                });
              } else if (index2 === length - 1) {
                var _toPath = Path.next(parentPath);
                Transforms.moveNodes(editor, {
                  at: path,
                  to: _toPath,
                  voids
                });
              } else {
                var splitPath = Path.next(path);
                var _toPath2 = Path.next(parentPath);
                Transforms.splitNodes(editor, {
                  at: splitPath,
                  voids
                });
                Transforms.moveNodes(editor, {
                  at: path,
                  to: _toPath2,
                  voids
                });
              }
            }
          });
        },
        mergeNodes(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              match: match5,
              at = editor.selection
            } = options;
            var {
              hanging = false,
              voids = false,
              mode = "lowest"
            } = options;
            if (!at) {
              return;
            }
            if (match5 == null) {
              if (Path.isPath(at)) {
                var [parent2] = Editor$1.parent(editor, at);
                match5 = (n2) => parent2.children.includes(n2);
              } else {
                match5 = (n2) => Editor$1.isBlock(editor, n2);
              }
            }
            if (!hanging && Range.isRange(at)) {
              at = Editor$1.unhangRange(editor, at);
            }
            if (Range.isRange(at)) {
              if (Range.isCollapsed(at)) {
                at = at.anchor;
              } else {
                var [, end] = Range.edges(at);
                var pointRef = Editor$1.pointRef(editor, end);
                Transforms.delete(editor, {
                  at
                });
                at = pointRef.unref();
                if (options.at == null) {
                  Transforms.select(editor, at);
                }
              }
            }
            var [current] = Editor$1.nodes(editor, {
              at,
              match: match5,
              voids,
              mode
            });
            var prev = Editor$1.previous(editor, {
              at,
              match: match5,
              voids,
              mode
            });
            if (!current || !prev) {
              return;
            }
            var [node, path] = current;
            var [prevNode, prevPath] = prev;
            if (path.length === 0 || prevPath.length === 0) {
              return;
            }
            var newPath = Path.next(prevPath);
            var commonPath = Path.common(path, prevPath);
            var isPreviousSibling = Path.isSibling(path, prevPath);
            var levels = Array.from(Editor$1.levels(editor, {
              at: path
            }), (_ref2) => {
              var [n2] = _ref2;
              return n2;
            }).slice(commonPath.length).slice(0, -1);
            var emptyAncestor = Editor$1.above(editor, {
              at: path,
              mode: "highest",
              match: (n2) => levels.includes(n2) && hasSingleChildNest(editor, n2)
            });
            var emptyRef = emptyAncestor && Editor$1.pathRef(editor, emptyAncestor[1]);
            var properties;
            var position2;
            if (Text.isText(node) && Text.isText(prevNode)) {
              var rest = _objectWithoutProperties$4(node, _excluded$5);
              position2 = prevNode.text.length;
              properties = rest;
            } else if (Element$1.isElement(node) && Element$1.isElement(prevNode)) {
              var rest = _objectWithoutProperties$4(node, _excluded2$4);
              position2 = prevNode.children.length;
              properties = rest;
            } else {
              throw new Error("Cannot merge the node at path [".concat(path, "] with the previous sibling because it is not the same kind: ").concat(Scrubber.stringify(node), " ").concat(Scrubber.stringify(prevNode)));
            }
            if (!isPreviousSibling) {
              Transforms.moveNodes(editor, {
                at: path,
                to: newPath,
                voids
              });
            }
            if (emptyRef) {
              Transforms.removeNodes(editor, {
                at: emptyRef.current,
                voids
              });
            }
            if (Element$1.isElement(prevNode) && Editor$1.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === "" && prevPath[prevPath.length - 1] !== 0) {
              Transforms.removeNodes(editor, {
                at: prevPath,
                voids
              });
            } else {
              editor.apply({
                type: "merge_node",
                path: newPath,
                position: position2,
                properties
              });
            }
            if (emptyRef) {
              emptyRef.unref();
            }
          });
        },
        moveNodes(editor, options) {
          Editor$1.withoutNormalizing(editor, () => {
            var {
              to: to2,
              at = editor.selection,
              mode = "lowest",
              voids = false
            } = options;
            var {
              match: match5
            } = options;
            if (!at) {
              return;
            }
            if (match5 == null) {
              match5 = Path.isPath(at) ? matchPath(editor, at) : (n2) => Editor$1.isBlock(editor, n2);
            }
            var toRef = Editor$1.pathRef(editor, to2);
            var targets = Editor$1.nodes(editor, {
              at,
              match: match5,
              mode,
              voids
            });
            var pathRefs = Array.from(targets, (_ref3) => {
              var [, p2] = _ref3;
              return Editor$1.pathRef(editor, p2);
            });
            for (var pathRef of pathRefs) {
              var path = pathRef.unref();
              var newPath = toRef.current;
              if (path.length !== 0) {
                editor.apply({
                  type: "move_node",
                  path,
                  newPath
                });
              }
              if (toRef.current && Path.isSibling(newPath, path) && Path.isAfter(newPath, path)) {
                toRef.current = Path.next(toRef.current);
              }
            }
            toRef.unref();
          });
        },
        removeNodes(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              hanging = false,
              voids = false,
              mode = "lowest"
            } = options;
            var {
              at = editor.selection,
              match: match5
            } = options;
            if (!at) {
              return;
            }
            if (match5 == null) {
              match5 = Path.isPath(at) ? matchPath(editor, at) : (n2) => Editor$1.isBlock(editor, n2);
            }
            if (!hanging && Range.isRange(at)) {
              at = Editor$1.unhangRange(editor, at);
            }
            var depths = Editor$1.nodes(editor, {
              at,
              match: match5,
              mode,
              voids
            });
            var pathRefs = Array.from(depths, (_ref4) => {
              var [, p2] = _ref4;
              return Editor$1.pathRef(editor, p2);
            });
            for (var pathRef of pathRefs) {
              var path = pathRef.unref();
              if (path) {
                var [node] = Editor$1.node(editor, path);
                editor.apply({
                  type: "remove_node",
                  path,
                  node
                });
              }
            }
          });
        },
        setNodes(editor, props) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              match: match5,
              at = editor.selection,
              compare,
              merge: merge2
            } = options;
            var {
              hanging = false,
              mode = "lowest",
              split = false,
              voids = false
            } = options;
            if (!at) {
              return;
            }
            if (match5 == null) {
              match5 = Path.isPath(at) ? matchPath(editor, at) : (n2) => Editor$1.isBlock(editor, n2);
            }
            if (!hanging && Range.isRange(at)) {
              at = Editor$1.unhangRange(editor, at);
            }
            if (split && Range.isRange(at)) {
              if (Range.isCollapsed(at) && Editor$1.leaf(editor, at.anchor)[0].text.length > 0) {
                return;
              }
              var rangeRef = Editor$1.rangeRef(editor, at, {
                affinity: "inward"
              });
              var [start, end] = Range.edges(at);
              var splitMode = mode === "lowest" ? "lowest" : "highest";
              var endAtEndOfNode = Editor$1.isEnd(editor, end, end.path);
              Transforms.splitNodes(editor, {
                at: end,
                match: match5,
                mode: splitMode,
                voids,
                always: !endAtEndOfNode
              });
              var startAtStartOfNode = Editor$1.isStart(editor, start, start.path);
              Transforms.splitNodes(editor, {
                at: start,
                match: match5,
                mode: splitMode,
                voids,
                always: !startAtStartOfNode
              });
              at = rangeRef.unref();
              if (options.at == null) {
                Transforms.select(editor, at);
              }
            }
            if (!compare) {
              compare = (prop, nodeProp) => prop !== nodeProp;
            }
            for (var [node, path] of Editor$1.nodes(editor, {
              at,
              match: match5,
              mode,
              voids
            })) {
              var properties = {};
              var newProperties = {};
              if (path.length === 0) {
                continue;
              }
              var hasChanges = false;
              for (var k2 in props) {
                if (k2 === "children" || k2 === "text") {
                  continue;
                }
                if (compare(props[k2], node[k2])) {
                  hasChanges = true;
                  if (node.hasOwnProperty(k2))
                    properties[k2] = node[k2];
                  if (merge2) {
                    if (props[k2] != null)
                      newProperties[k2] = merge2(node[k2], props[k2]);
                  } else {
                    if (props[k2] != null)
                      newProperties[k2] = props[k2];
                  }
                }
              }
              if (hasChanges) {
                editor.apply({
                  type: "set_node",
                  path,
                  properties,
                  newProperties
                });
              }
            }
          });
        },
        splitNodes(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              mode = "lowest",
              voids = false
            } = options;
            var {
              match: match5,
              at = editor.selection,
              height = 0,
              always = false
            } = options;
            if (match5 == null) {
              match5 = (n2) => Editor$1.isBlock(editor, n2);
            }
            if (Range.isRange(at)) {
              at = deleteRange(editor, at);
            }
            if (Path.isPath(at)) {
              var path = at;
              var point2 = Editor$1.point(editor, path);
              var [parent2] = Editor$1.parent(editor, path);
              match5 = (n2) => n2 === parent2;
              height = point2.path.length - path.length + 1;
              at = point2;
              always = true;
            }
            if (!at) {
              return;
            }
            var beforeRef = Editor$1.pointRef(editor, at, {
              affinity: "backward"
            });
            var afterRef;
            try {
              var [highest] = Editor$1.nodes(editor, {
                at,
                match: match5,
                mode,
                voids
              });
              if (!highest) {
                return;
              }
              var voidMatch = Editor$1.void(editor, {
                at,
                mode: "highest"
              });
              var nudge = 0;
              if (!voids && voidMatch) {
                var [voidNode, voidPath] = voidMatch;
                if (Element$1.isElement(voidNode) && editor.isInline(voidNode)) {
                  var after = Editor$1.after(editor, voidPath);
                  if (!after) {
                    var text2 = {
                      text: ""
                    };
                    var afterPath = Path.next(voidPath);
                    Transforms.insertNodes(editor, text2, {
                      at: afterPath,
                      voids
                    });
                    after = Editor$1.point(editor, afterPath);
                  }
                  at = after;
                  always = true;
                }
                var siblingHeight = at.path.length - voidPath.length;
                height = siblingHeight + 1;
                always = true;
              }
              afterRef = Editor$1.pointRef(editor, at);
              var depth = at.path.length - height;
              var [, highestPath] = highest;
              var lowestPath = at.path.slice(0, depth);
              var position2 = height === 0 ? at.offset : at.path[depth] + nudge;
              for (var [node, _path2] of Editor$1.levels(editor, {
                at: lowestPath,
                reverse: true,
                voids
              })) {
                var split = false;
                if (_path2.length < highestPath.length || _path2.length === 0 || !voids && Editor$1.isVoid(editor, node)) {
                  break;
                }
                var _point = beforeRef.current;
                var isEnd = Editor$1.isEnd(editor, _point, _path2);
                if (always || !beforeRef || !Editor$1.isEdge(editor, _point, _path2)) {
                  split = true;
                  var properties = Node$1.extractProps(node);
                  editor.apply({
                    type: "split_node",
                    path: _path2,
                    position: position2,
                    properties
                  });
                }
                position2 = _path2[_path2.length - 1] + (split || isEnd ? 1 : 0);
              }
              if (options.at == null) {
                var _point2 = afterRef.current || Editor$1.end(editor, []);
                Transforms.select(editor, _point2);
              }
            } finally {
              var _afterRef;
              beforeRef.unref();
              (_afterRef = afterRef) === null || _afterRef === void 0 ? void 0 : _afterRef.unref();
            }
          });
        },
        unsetNodes(editor, props) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!Array.isArray(props)) {
            props = [props];
          }
          var obj = {};
          for (var key of props) {
            obj[key] = null;
          }
          Transforms.setNodes(editor, obj, options);
        },
        unwrapNodes(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              mode = "lowest",
              split = false,
              voids = false
            } = options;
            var {
              at = editor.selection,
              match: match5
            } = options;
            if (!at) {
              return;
            }
            if (match5 == null) {
              match5 = Path.isPath(at) ? matchPath(editor, at) : (n2) => Editor$1.isBlock(editor, n2);
            }
            if (Path.isPath(at)) {
              at = Editor$1.range(editor, at);
            }
            var rangeRef = Range.isRange(at) ? Editor$1.rangeRef(editor, at) : null;
            var matches = Editor$1.nodes(editor, {
              at,
              match: match5,
              mode,
              voids
            });
            var pathRefs = Array.from(matches, (_ref5) => {
              var [, p2] = _ref5;
              return Editor$1.pathRef(editor, p2);
            }).reverse();
            var _loop = function _loop4(pathRef2) {
              var path = pathRef2.unref();
              var [node] = Editor$1.node(editor, path);
              var range = Editor$1.range(editor, path);
              if (split && rangeRef) {
                range = Range.intersection(rangeRef.current, range);
              }
              Transforms.liftNodes(editor, {
                at: range,
                match: (n2) => Element$1.isAncestor(node) && node.children.includes(n2),
                voids
              });
            };
            for (var pathRef of pathRefs) {
              _loop(pathRef);
            }
            if (rangeRef) {
              rangeRef.unref();
            }
          });
        },
        wrapNodes(editor, element) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              mode = "lowest",
              split = false,
              voids = false
            } = options;
            var {
              match: match5,
              at = editor.selection
            } = options;
            if (!at) {
              return;
            }
            if (match5 == null) {
              if (Path.isPath(at)) {
                match5 = matchPath(editor, at);
              } else if (editor.isInline(element)) {
                match5 = (n2) => Editor$1.isInline(editor, n2) || Text.isText(n2);
              } else {
                match5 = (n2) => Editor$1.isBlock(editor, n2);
              }
            }
            if (split && Range.isRange(at)) {
              var [start, end] = Range.edges(at);
              var rangeRef = Editor$1.rangeRef(editor, at, {
                affinity: "inward"
              });
              Transforms.splitNodes(editor, {
                at: end,
                match: match5,
                voids
              });
              Transforms.splitNodes(editor, {
                at: start,
                match: match5,
                voids
              });
              at = rangeRef.unref();
              if (options.at == null) {
                Transforms.select(editor, at);
              }
            }
            var roots = Array.from(Editor$1.nodes(editor, {
              at,
              match: editor.isInline(element) ? (n2) => Editor$1.isBlock(editor, n2) : (n2) => Editor$1.isEditor(n2),
              mode: "lowest",
              voids
            }));
            for (var [, rootPath] of roots) {
              var a2 = Range.isRange(at) ? Range.intersection(at, Editor$1.range(editor, rootPath)) : at;
              if (!a2) {
                continue;
              }
              var matches = Array.from(Editor$1.nodes(editor, {
                at: a2,
                match: match5,
                mode,
                voids
              }));
              if (matches.length > 0) {
                var _ret = function() {
                  var [first] = matches;
                  var last2 = matches[matches.length - 1];
                  var [, firstPath] = first;
                  var [, lastPath] = last2;
                  if (firstPath.length === 0 && lastPath.length === 0) {
                    return "continue";
                  }
                  var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);
                  var range = Editor$1.range(editor, firstPath, lastPath);
                  var commonNodeEntry = Editor$1.node(editor, commonPath);
                  var [commonNode] = commonNodeEntry;
                  var depth = commonPath.length + 1;
                  var wrapperPath = Path.next(lastPath.slice(0, depth));
                  var wrapper = _objectSpread$2$1(_objectSpread$2$1({}, element), {}, {
                    children: []
                  });
                  Transforms.insertNodes(editor, wrapper, {
                    at: wrapperPath,
                    voids
                  });
                  Transforms.moveNodes(editor, {
                    at: range,
                    match: (n2) => Element$1.isAncestor(commonNode) && commonNode.children.includes(n2),
                    to: wrapperPath.concat(0),
                    voids
                  });
                }();
                if (_ret === "continue")
                  continue;
              }
            }
          });
        }
      };
      var hasSingleChildNest = (editor, node) => {
        if (Element$1.isElement(node)) {
          var element = node;
          if (Editor$1.isVoid(editor, node)) {
            return true;
          } else if (element.children.length === 1) {
            return hasSingleChildNest(editor, element.children[0]);
          } else {
            return false;
          }
        } else if (Editor$1.isEditor(node)) {
          return false;
        } else {
          return true;
        }
      };
      var deleteRange = (editor, range) => {
        if (Range.isCollapsed(range)) {
          return range.anchor;
        } else {
          var [, end] = Range.edges(range);
          var pointRef = Editor$1.pointRef(editor, end);
          Transforms.delete(editor, {
            at: range
          });
          return pointRef.unref();
        }
      };
      var matchPath = (editor, path) => {
        var [node] = Editor$1.node(editor, path);
        return (n2) => n2 === node;
      };
      function ownKeys$1$2(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$1$2(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$1$2(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$1$2(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var SelectionTransforms = {
        collapse(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            edge = "anchor"
          } = options;
          var {
            selection
          } = editor;
          if (!selection) {
            return;
          } else if (edge === "anchor") {
            Transforms.select(editor, selection.anchor);
          } else if (edge === "focus") {
            Transforms.select(editor, selection.focus);
          } else if (edge === "start") {
            var [start] = Range.edges(selection);
            Transforms.select(editor, start);
          } else if (edge === "end") {
            var [, end] = Range.edges(selection);
            Transforms.select(editor, end);
          }
        },
        deselect(editor) {
          var {
            selection
          } = editor;
          if (selection) {
            editor.apply({
              type: "set_selection",
              properties: selection,
              newProperties: null
            });
          }
        },
        move(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var {
            selection
          } = editor;
          var {
            distance = 1,
            unit = "character",
            reverse = false
          } = options;
          var {
            edge = null
          } = options;
          if (!selection) {
            return;
          }
          if (edge === "start") {
            edge = Range.isBackward(selection) ? "focus" : "anchor";
          }
          if (edge === "end") {
            edge = Range.isBackward(selection) ? "anchor" : "focus";
          }
          var {
            anchor,
            focus
          } = selection;
          var opts = {
            distance,
            unit
          };
          var props = {};
          if (edge == null || edge === "anchor") {
            var point2 = reverse ? Editor$1.before(editor, anchor, opts) : Editor$1.after(editor, anchor, opts);
            if (point2) {
              props.anchor = point2;
            }
          }
          if (edge == null || edge === "focus") {
            var _point = reverse ? Editor$1.before(editor, focus, opts) : Editor$1.after(editor, focus, opts);
            if (_point) {
              props.focus = _point;
            }
          }
          Transforms.setSelection(editor, props);
        },
        select(editor, target) {
          var {
            selection
          } = editor;
          target = Editor$1.range(editor, target);
          if (selection) {
            Transforms.setSelection(editor, target);
            return;
          }
          if (!Range.isRange(target)) {
            throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(Scrubber.stringify(target)));
          }
          editor.apply({
            type: "set_selection",
            properties: selection,
            newProperties: target
          });
        },
        setPoint(editor, props) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            selection
          } = editor;
          var {
            edge = "both"
          } = options;
          if (!selection) {
            return;
          }
          if (edge === "start") {
            edge = Range.isBackward(selection) ? "focus" : "anchor";
          }
          if (edge === "end") {
            edge = Range.isBackward(selection) ? "anchor" : "focus";
          }
          var {
            anchor,
            focus
          } = selection;
          var point2 = edge === "anchor" ? anchor : focus;
          Transforms.setSelection(editor, {
            [edge === "anchor" ? "anchor" : "focus"]: _objectSpread$1$2(_objectSpread$1$2({}, point2), props)
          });
        },
        setSelection(editor, props) {
          var {
            selection
          } = editor;
          var oldProps = {};
          var newProps = {};
          if (!selection) {
            return;
          }
          for (var k2 in props) {
            if (k2 === "anchor" && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k2 === "focus" && props.focus != null && !Point.equals(props.focus, selection.focus) || k2 !== "anchor" && k2 !== "focus" && props[k2] !== selection[k2]) {
              oldProps[k2] = selection[k2];
              newProps[k2] = props[k2];
            }
          }
          if (Object.keys(oldProps).length > 0) {
            editor.apply({
              type: "set_selection",
              properties: oldProps,
              newProperties: newProps
            });
          }
        }
      };
      var TextTransforms = {
        delete(editor) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              reverse = false,
              unit = "character",
              distance = 1,
              voids = false
            } = options;
            var {
              at = editor.selection,
              hanging = false
            } = options;
            if (!at) {
              return;
            }
            var isCollapsed2 = false;
            if (Range.isRange(at) && Range.isCollapsed(at)) {
              isCollapsed2 = true;
              at = at.anchor;
            }
            if (Point.isPoint(at)) {
              var furthestVoid = Editor$1.void(editor, {
                at,
                mode: "highest"
              });
              if (!voids && furthestVoid) {
                var [, voidPath] = furthestVoid;
                at = voidPath;
              } else {
                var opts = {
                  unit,
                  distance
                };
                var target = reverse ? Editor$1.before(editor, at, opts) || Editor$1.start(editor, []) : Editor$1.after(editor, at, opts) || Editor$1.end(editor, []);
                at = {
                  anchor: at,
                  focus: target
                };
                hanging = true;
              }
            }
            if (Path.isPath(at)) {
              Transforms.removeNodes(editor, {
                at,
                voids
              });
              return;
            }
            if (Range.isCollapsed(at)) {
              return;
            }
            if (!hanging) {
              var [, _end] = Range.edges(at);
              var endOfDoc = Editor$1.end(editor, []);
              if (!Point.equals(_end, endOfDoc)) {
                at = Editor$1.unhangRange(editor, at, {
                  voids
                });
              }
            }
            var [start, end] = Range.edges(at);
            var startBlock = Editor$1.above(editor, {
              match: (n2) => Editor$1.isBlock(editor, n2),
              at: start,
              voids
            });
            var endBlock = Editor$1.above(editor, {
              match: (n2) => Editor$1.isBlock(editor, n2),
              at: end,
              voids
            });
            var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);
            var isSingleText = Path.equals(start.path, end.path);
            var startVoid = voids ? null : Editor$1.void(editor, {
              at: start,
              mode: "highest"
            });
            var endVoid = voids ? null : Editor$1.void(editor, {
              at: end,
              mode: "highest"
            });
            if (startVoid) {
              var before = Editor$1.before(editor, start);
              if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {
                start = before;
              }
            }
            if (endVoid) {
              var after = Editor$1.after(editor, end);
              if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {
                end = after;
              }
            }
            var matches = [];
            var lastPath;
            for (var entry of Editor$1.nodes(editor, {
              at,
              voids
            })) {
              var [node, path] = entry;
              if (lastPath && Path.compare(path, lastPath) === 0) {
                continue;
              }
              if (!voids && Editor$1.isVoid(editor, node) || !Path.isCommon(path, start.path) && !Path.isCommon(path, end.path)) {
                matches.push(entry);
                lastPath = path;
              }
            }
            var pathRefs = Array.from(matches, (_ref) => {
              var [, p2] = _ref;
              return Editor$1.pathRef(editor, p2);
            });
            var startRef = Editor$1.pointRef(editor, start);
            var endRef = Editor$1.pointRef(editor, end);
            var removedText = "";
            if (!isSingleText && !startVoid) {
              var _point = startRef.current;
              var [_node] = Editor$1.leaf(editor, _point);
              var {
                path: _path
              } = _point;
              var {
                offset: offset2
              } = start;
              var text2 = _node.text.slice(offset2);
              if (text2.length > 0) {
                editor.apply({
                  type: "remove_text",
                  path: _path,
                  offset: offset2,
                  text: text2
                });
                removedText = text2;
              }
            }
            for (var pathRef of pathRefs) {
              var _path2 = pathRef.unref();
              Transforms.removeNodes(editor, {
                at: _path2,
                voids
              });
            }
            if (!endVoid) {
              var _point2 = endRef.current;
              var [_node2] = Editor$1.leaf(editor, _point2);
              var {
                path: _path3
              } = _point2;
              var _offset = isSingleText ? start.offset : 0;
              var _text = _node2.text.slice(_offset, end.offset);
              if (_text.length > 0) {
                editor.apply({
                  type: "remove_text",
                  path: _path3,
                  offset: _offset,
                  text: _text
                });
                removedText = _text;
              }
            }
            if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {
              Transforms.mergeNodes(editor, {
                at: endRef.current,
                hanging: true,
                voids
              });
            }
            if (isCollapsed2 && reverse && unit === "character" && removedText.length > 1 && removedText.match(/[\u0E00-\u0E7F]+/)) {
              Transforms.insertText(editor, removedText.slice(0, removedText.length - distance));
            }
            var startUnref = startRef.unref();
            var endUnref = endRef.unref();
            var point2 = reverse ? startUnref || endUnref : endUnref || startUnref;
            if (options.at == null && point2) {
              Transforms.select(editor, point2);
            }
          });
        },
        insertFragment(editor, fragment) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              hanging = false,
              voids = false
            } = options;
            var {
              at = editor.selection
            } = options;
            if (!fragment.length) {
              return;
            }
            if (!at) {
              return;
            } else if (Range.isRange(at)) {
              if (!hanging) {
                at = Editor$1.unhangRange(editor, at);
              }
              if (Range.isCollapsed(at)) {
                at = at.anchor;
              } else {
                var [, end] = Range.edges(at);
                if (!voids && Editor$1.void(editor, {
                  at: end
                })) {
                  return;
                }
                var pointRef = Editor$1.pointRef(editor, end);
                Transforms.delete(editor, {
                  at
                });
                at = pointRef.unref();
              }
            } else if (Path.isPath(at)) {
              at = Editor$1.start(editor, at);
            }
            if (!voids && Editor$1.void(editor, {
              at
            })) {
              return;
            }
            var inlineElementMatch = Editor$1.above(editor, {
              at,
              match: (n2) => Editor$1.isInline(editor, n2),
              mode: "highest",
              voids
            });
            if (inlineElementMatch) {
              var [, _inlinePath] = inlineElementMatch;
              if (Editor$1.isEnd(editor, at, _inlinePath)) {
                var after = Editor$1.after(editor, _inlinePath);
                at = after;
              } else if (Editor$1.isStart(editor, at, _inlinePath)) {
                var before = Editor$1.before(editor, _inlinePath);
                at = before;
              }
            }
            var blockMatch = Editor$1.above(editor, {
              match: (n2) => Editor$1.isBlock(editor, n2),
              at,
              voids
            });
            var [, blockPath] = blockMatch;
            var isBlockStart = Editor$1.isStart(editor, at, blockPath);
            var isBlockEnd = Editor$1.isEnd(editor, at, blockPath);
            var isBlockEmpty = isBlockStart && isBlockEnd;
            var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;
            var mergeEnd = !isBlockEnd;
            var [, firstPath] = Node$1.first({
              children: fragment
            }, []);
            var [, lastPath] = Node$1.last({
              children: fragment
            }, []);
            var matches = [];
            var matcher = (_ref2) => {
              var [n2, p2] = _ref2;
              var isRoot = p2.length === 0;
              if (isRoot) {
                return false;
              }
              if (isBlockEmpty) {
                return true;
              }
              if (mergeStart && Path.isAncestor(p2, firstPath) && Element$1.isElement(n2) && !editor.isVoid(n2) && !editor.isInline(n2)) {
                return false;
              }
              if (mergeEnd && Path.isAncestor(p2, lastPath) && Element$1.isElement(n2) && !editor.isVoid(n2) && !editor.isInline(n2)) {
                return false;
              }
              return true;
            };
            for (var entry of Node$1.nodes({
              children: fragment
            }, {
              pass: matcher
            })) {
              if (matcher(entry)) {
                matches.push(entry);
              }
            }
            var starts = [];
            var middles = [];
            var ends = [];
            var starting = true;
            var hasBlocks = false;
            for (var [node] of matches) {
              if (Element$1.isElement(node) && !editor.isInline(node)) {
                starting = false;
                hasBlocks = true;
                middles.push(node);
              } else if (starting) {
                starts.push(node);
              } else {
                ends.push(node);
              }
            }
            var [inlineMatch] = Editor$1.nodes(editor, {
              at,
              match: (n2) => Text.isText(n2) || Editor$1.isInline(editor, n2),
              mode: "highest",
              voids
            });
            var [, inlinePath] = inlineMatch;
            var isInlineStart = Editor$1.isStart(editor, at, inlinePath);
            var isInlineEnd = Editor$1.isEnd(editor, at, inlinePath);
            var middleRef = Editor$1.pathRef(editor, isBlockEnd ? Path.next(blockPath) : blockPath);
            var endRef = Editor$1.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);
            var blockPathRef = Editor$1.pathRef(editor, blockPath);
            Transforms.splitNodes(editor, {
              at,
              match: (n2) => hasBlocks ? Editor$1.isBlock(editor, n2) : Text.isText(n2) || Editor$1.isInline(editor, n2),
              mode: hasBlocks ? "lowest" : "highest",
              voids
            });
            var startRef = Editor$1.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);
            Transforms.insertNodes(editor, starts, {
              at: startRef.current,
              match: (n2) => Text.isText(n2) || Editor$1.isInline(editor, n2),
              mode: "highest",
              voids
            });
            if (isBlockEmpty && middles.length) {
              Transforms.delete(editor, {
                at: blockPathRef.unref(),
                voids
              });
            }
            Transforms.insertNodes(editor, middles, {
              at: middleRef.current,
              match: (n2) => Editor$1.isBlock(editor, n2),
              mode: "lowest",
              voids
            });
            Transforms.insertNodes(editor, ends, {
              at: endRef.current,
              match: (n2) => Text.isText(n2) || Editor$1.isInline(editor, n2),
              mode: "highest",
              voids
            });
            if (!options.at) {
              var path;
              if (ends.length > 0) {
                path = Path.previous(endRef.current);
              } else if (middles.length > 0) {
                path = Path.previous(middleRef.current);
              } else {
                path = Path.previous(startRef.current);
              }
              var _end2 = Editor$1.end(editor, path);
              Transforms.select(editor, _end2);
            }
            startRef.unref();
            middleRef.unref();
            endRef.unref();
          });
        },
        insertText(editor, text2) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          Editor$1.withoutNormalizing(editor, () => {
            var {
              voids = false
            } = options;
            var {
              at = editor.selection
            } = options;
            if (!at) {
              return;
            }
            if (Path.isPath(at)) {
              at = Editor$1.range(editor, at);
            }
            if (Range.isRange(at)) {
              if (Range.isCollapsed(at)) {
                at = at.anchor;
              } else {
                var end = Range.end(at);
                if (!voids && Editor$1.void(editor, {
                  at: end
                })) {
                  return;
                }
                var start = Range.start(at);
                var startRef = Editor$1.pointRef(editor, start);
                var endRef = Editor$1.pointRef(editor, end);
                Transforms.delete(editor, {
                  at,
                  voids
                });
                var startPoint = startRef.unref();
                var endPoint = endRef.unref();
                at = startPoint || endPoint;
                Transforms.setSelection(editor, {
                  anchor: at,
                  focus: at
                });
              }
            }
            if (!voids && Editor$1.void(editor, {
              at
            })) {
              return;
            }
            var {
              path,
              offset: offset2
            } = at;
            if (text2.length > 0)
              editor.apply({
                type: "insert_text",
                path,
                offset: offset2,
                text: text2
              });
          });
        }
      };
      function ownKeys$a(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$a(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$a(Object(source), true).forEach(function(key) {
              _defineProperty$8(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$a(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var Transforms = _objectSpread$a(_objectSpread$a(_objectSpread$a(_objectSpread$a({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);
      function isObject$f(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      var isObject_1$4 = isObject$f;
      var freeGlobal$7 = typeof commonjsGlobal$4 == "object" && commonjsGlobal$4 && commonjsGlobal$4.Object === Object && commonjsGlobal$4;
      var _freeGlobal$4 = freeGlobal$7;
      var freeGlobal$6 = _freeGlobal$4;
      var freeSelf$5 = typeof self == "object" && self && self.Object === Object && self;
      var root$e = freeGlobal$6 || freeSelf$5 || Function("return this")();
      var _root$4 = root$e;
      var root$d = _root$4;
      var Symbol$a = root$d.Symbol;
      var _Symbol$4 = Symbol$a;
      var Symbol$9 = _Symbol$4;
      var objectProto$w = Object.prototype;
      var hasOwnProperty$s = objectProto$w.hasOwnProperty;
      var nativeObjectToString$7 = objectProto$w.toString;
      var symToStringTag$7 = Symbol$9 ? Symbol$9.toStringTag : void 0;
      function getRawTag$6(value) {
        var isOwn = hasOwnProperty$s.call(value, symToStringTag$7), tag = value[symToStringTag$7];
        try {
          value[symToStringTag$7] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString$7.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag$7] = tag;
          } else {
            delete value[symToStringTag$7];
          }
        }
        return result;
      }
      var _getRawTag$4 = getRawTag$6;
      var objectProto$v = Object.prototype;
      var nativeObjectToString$6 = objectProto$v.toString;
      function objectToString$6(value) {
        return nativeObjectToString$6.call(value);
      }
      var _objectToString$4 = objectToString$6;
      var Symbol$8 = _Symbol$4, getRawTag$5 = _getRawTag$4, objectToString$5 = _objectToString$4;
      var nullTag$5 = "[object Null]", undefinedTag$5 = "[object Undefined]";
      var symToStringTag$6 = Symbol$8 ? Symbol$8.toStringTag : void 0;
      function baseGetTag$c(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag$5 : nullTag$5;
        }
        return symToStringTag$6 && symToStringTag$6 in Object(value) ? getRawTag$5(value) : objectToString$5(value);
      }
      var _baseGetTag$4 = baseGetTag$c;
      function isObjectLike$e(value) {
        return value != null && typeof value == "object";
      }
      var isObjectLike_1$4 = isObjectLike$e;
      var baseGetTag$b = _baseGetTag$4, isObjectLike$d = isObjectLike_1$4;
      var symbolTag$7 = "[object Symbol]";
      function isSymbol$5(value) {
        return typeof value == "symbol" || isObjectLike$d(value) && baseGetTag$b(value) == symbolTag$7;
      }
      var isSymbol_1$1 = isSymbol$5;
      var lib$f = {};
      Object.defineProperty(lib$f, "__esModule", {
        value: true
      });
      var IS_MAC$1 = typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
      var MODIFIERS$1 = {
        alt: "altKey",
        control: "ctrlKey",
        meta: "metaKey",
        shift: "shiftKey"
      };
      var ALIASES$1 = {
        add: "+",
        break: "pause",
        cmd: "meta",
        command: "meta",
        ctl: "control",
        ctrl: "control",
        del: "delete",
        down: "arrowdown",
        esc: "escape",
        ins: "insert",
        left: "arrowleft",
        mod: IS_MAC$1 ? "meta" : "control",
        opt: "alt",
        option: "alt",
        return: "enter",
        right: "arrowright",
        space: " ",
        spacebar: " ",
        up: "arrowup",
        win: "meta",
        windows: "meta"
      };
      var CODES$1 = {
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        control: 17,
        alt: 18,
        pause: 19,
        capslock: 20,
        escape: 27,
        " ": 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        arrowleft: 37,
        arrowup: 38,
        arrowright: 39,
        arrowdown: 40,
        insert: 45,
        delete: 46,
        meta: 91,
        numlock: 144,
        scrolllock: 145,
        ";": 186,
        "=": 187,
        ",": 188,
        "-": 189,
        ".": 190,
        "/": 191,
        "`": 192,
        "[": 219,
        "\\": 220,
        "]": 221,
        "'": 222
      };
      for (var f$1 = 1; f$1 < 20; f$1++) {
        CODES$1["f" + f$1] = 111 + f$1;
      }
      function isHotkey$7(hotkey, options, event) {
        if (options && !("byKey" in options)) {
          event = options;
          options = null;
        }
        if (!Array.isArray(hotkey)) {
          hotkey = [hotkey];
        }
        var array = hotkey.map(function(string2) {
          return parseHotkey$1(string2, options);
        });
        var check = function check2(e2) {
          return array.some(function(object) {
            return compareHotkey$1(object, e2);
          });
        };
        var ret = event == null ? check : check(event);
        return ret;
      }
      function isCodeHotkey$1(hotkey, event) {
        return isHotkey$7(hotkey, event);
      }
      function isKeyHotkey$1(hotkey, event) {
        return isHotkey$7(hotkey, { byKey: true }, event);
      }
      function parseHotkey$1(hotkey, options) {
        var byKey = options && options.byKey;
        var ret = {};
        hotkey = hotkey.replace("++", "+add");
        var values2 = hotkey.split("+");
        var length = values2.length;
        for (var k2 in MODIFIERS$1) {
          ret[MODIFIERS$1[k2]] = false;
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var value = _step.value;
            var optional = value.endsWith("?") && value.length > 1;
            if (optional) {
              value = value.slice(0, -1);
            }
            var name2 = toKeyName$1(value);
            var modifier = MODIFIERS$1[name2];
            if (length === 1 || !modifier) {
              if (byKey) {
                ret.key = name2;
              } else {
                ret.which = toKeyCode$1(value);
              }
            }
            if (modifier) {
              ret[modifier] = optional ? null : true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        return ret;
      }
      function compareHotkey$1(object, event) {
        for (var key in object) {
          var expected = object[key];
          var actual = void 0;
          if (expected == null) {
            continue;
          }
          if (key === "key" && event.key != null) {
            actual = event.key.toLowerCase();
          } else if (key === "which") {
            actual = expected === 91 && event.which === 93 ? 91 : event.which;
          } else {
            actual = event[key];
          }
          if (actual == null && expected === false) {
            continue;
          }
          if (actual !== expected) {
            return false;
          }
        }
        return true;
      }
      function toKeyCode$1(name2) {
        name2 = toKeyName$1(name2);
        var code = CODES$1[name2] || name2.toUpperCase().charCodeAt(0);
        return code;
      }
      function toKeyName$1(name2) {
        name2 = name2.toLowerCase();
        name2 = ALIASES$1[name2] || name2;
        return name2;
      }
      lib$f.default = isHotkey$7;
      lib$f.isHotkey = isHotkey$7;
      lib$f.isCodeHotkey = isCodeHotkey$1;
      var isKeyHotkey_1 = lib$f.isKeyHotkey = isKeyHotkey$1;
      lib$f.parseHotkey = parseHotkey$1;
      lib$f.compareHotkey = compareHotkey$1;
      lib$f.toKeyCode = toKeyCode$1;
      lib$f.toKeyName = toKeyName$1;
      parseInt(React__default.version.split(".")[0], 10) >= 17;
      typeof navigator !== "undefined" && typeof window !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
      var IS_APPLE$1 = typeof navigator !== "undefined" && /Mac OS X/.test(navigator.userAgent);
      typeof navigator !== "undefined" && /Android/.test(navigator.userAgent);
      var IS_FIREFOX = typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);
      typeof navigator !== "undefined" && /Version\/[\d\.]+.*Safari/.test(navigator.userAgent);
      typeof navigator !== "undefined" && /Edge?\/(?:[0-6][0-9]|[0-7][0-8])(?:\.)/i.test(navigator.userAgent);
      var IS_CHROME = typeof navigator !== "undefined" && /Chrome/i.test(navigator.userAgent);
      typeof navigator !== "undefined" && /Chrome?\/(?:[0-7][0-5]|[0-6][0-9])(?:\.)/i.test(navigator.userAgent);
      typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox\/(?:[0-7][0-9]|[0-8][0-6])(?:\.)).*/i.test(navigator.userAgent);
      typeof navigator !== "undefined" && /.*QQBrowser/.test(navigator.userAgent);
      typeof navigator !== "undefined" && /.*UCBrowser/.test(navigator.userAgent);
      typeof navigator !== "undefined" && /.*Wechat/.test(navigator.userAgent);
      var NODE_TO_INDEX = /* @__PURE__ */ new WeakMap();
      var NODE_TO_PARENT = /* @__PURE__ */ new WeakMap();
      var EDITOR_TO_WINDOW = /* @__PURE__ */ new WeakMap();
      var EDITOR_TO_ELEMENT = /* @__PURE__ */ new WeakMap();
      var ELEMENT_TO_NODE = /* @__PURE__ */ new WeakMap();
      var NODE_TO_KEY = /* @__PURE__ */ new WeakMap();
      var EDITOR_TO_KEY_TO_ELEMENT = /* @__PURE__ */ new WeakMap();
      var IS_READ_ONLY = /* @__PURE__ */ new WeakMap();
      var IS_FOCUSED = /* @__PURE__ */ new WeakMap();
      var IS_COMPOSING = /* @__PURE__ */ new WeakMap();
      var EDITOR_TO_USER_SELECTION = /* @__PURE__ */ new WeakMap();
      var EDITOR_TO_ON_CHANGE = /* @__PURE__ */ new WeakMap();
      var HOTKEYS$1 = {
        bold: "mod+b",
        compose: ["down", "left", "right", "up", "backspace", "enter"],
        moveBackward: "left",
        moveForward: "right",
        moveWordBackward: "ctrl+left",
        moveWordForward: "ctrl+right",
        deleteBackward: "shift?+backspace",
        deleteForward: "shift?+delete",
        extendBackward: "shift+left",
        extendForward: "shift+right",
        italic: "mod+i",
        insertSoftBreak: "shift+enter",
        splitBlock: "enter",
        undo: "mod+z"
      };
      var APPLE_HOTKEYS$1 = {
        moveLineBackward: "opt+up",
        moveLineForward: "opt+down",
        moveWordBackward: "opt+left",
        moveWordForward: "opt+right",
        deleteBackward: ["ctrl+backspace", "ctrl+h"],
        deleteForward: ["ctrl+delete", "ctrl+d"],
        deleteLineBackward: "cmd+shift?+backspace",
        deleteLineForward: ["cmd+shift?+delete", "ctrl+k"],
        deleteWordBackward: "opt+shift?+backspace",
        deleteWordForward: "opt+shift?+delete",
        extendLineBackward: "opt+shift+up",
        extendLineForward: "opt+shift+down",
        redo: "cmd+shift+z",
        transposeCharacter: "ctrl+t"
      };
      var WINDOWS_HOTKEYS$1 = {
        deleteWordBackward: "ctrl+shift?+backspace",
        deleteWordForward: "ctrl+shift?+delete",
        redo: ["ctrl+y", "ctrl+shift+z"]
      };
      var create$3 = (key) => {
        var generic = HOTKEYS$1[key];
        var apple = APPLE_HOTKEYS$1[key];
        var windows = WINDOWS_HOTKEYS$1[key];
        var isGeneric = generic && isKeyHotkey_1(generic);
        var isApple = apple && isKeyHotkey_1(apple);
        var isWindows = windows && isKeyHotkey_1(windows);
        return (event) => {
          if (isGeneric && isGeneric(event))
            return true;
          if (IS_APPLE$1 && isApple && isApple(event))
            return true;
          if (!IS_APPLE$1 && isWindows && isWindows(event))
            return true;
          return false;
        };
      };
      ({
        isBold: create$3("bold"),
        isCompose: create$3("compose"),
        isMoveBackward: create$3("moveBackward"),
        isMoveForward: create$3("moveForward"),
        isDeleteBackward: create$3("deleteBackward"),
        isDeleteForward: create$3("deleteForward"),
        isDeleteLineBackward: create$3("deleteLineBackward"),
        isDeleteLineForward: create$3("deleteLineForward"),
        isDeleteWordBackward: create$3("deleteWordBackward"),
        isDeleteWordForward: create$3("deleteWordForward"),
        isExtendBackward: create$3("extendBackward"),
        isExtendForward: create$3("extendForward"),
        isExtendLineBackward: create$3("extendLineBackward"),
        isExtendLineForward: create$3("extendLineForward"),
        isItalic: create$3("italic"),
        isMoveLineBackward: create$3("moveLineBackward"),
        isMoveLineForward: create$3("moveLineForward"),
        isMoveWordBackward: create$3("moveWordBackward"),
        isMoveWordForward: create$3("moveWordForward"),
        isRedo: create$3("redo"),
        isSoftBreak: create$3("insertSoftBreak"),
        isSplitBlock: create$3("splitBlock"),
        isTransposeCharacter: create$3("transposeCharacter"),
        isUndo: create$3("undo")
      });
      var getDefaultView = (value) => {
        return value && value.ownerDocument && value.ownerDocument.defaultView || null;
      };
      var isDOMComment = (value) => {
        return isDOMNode(value) && value.nodeType === 8;
      };
      var isDOMElement = (value) => {
        return isDOMNode(value) && value.nodeType === 1;
      };
      var isDOMNode = (value) => {
        var window2 = getDefaultView(value);
        return !!window2 && value instanceof window2.Node;
      };
      var isDOMSelection = (value) => {
        var window2 = value && value.anchorNode && getDefaultView(value.anchorNode);
        return !!window2 && value instanceof window2.Selection;
      };
      var isDOMText = (value) => {
        return isDOMNode(value) && value.nodeType === 3;
      };
      var normalizeDOMPoint = (domPoint) => {
        var [node, offset2] = domPoint;
        if (isDOMElement(node) && node.childNodes.length) {
          var isLast = offset2 === node.childNodes.length;
          var index2 = isLast ? offset2 - 1 : offset2;
          [node, index2] = getEditableChildAndIndex(node, index2, isLast ? "backward" : "forward");
          isLast = index2 < offset2;
          while (isDOMElement(node) && node.childNodes.length) {
            var i2 = isLast ? node.childNodes.length - 1 : 0;
            node = getEditableChild(node, i2, isLast ? "backward" : "forward");
          }
          offset2 = isLast && node.textContent != null ? node.textContent.length : 0;
        }
        return [node, offset2];
      };
      var hasShadowRoot = () => {
        return !!(window.document.activeElement && window.document.activeElement.shadowRoot);
      };
      var getEditableChildAndIndex = (parent2, index2, direction) => {
        var {
          childNodes
        } = parent2;
        var child = childNodes[index2];
        var i2 = index2;
        var triedForward = false;
        var triedBackward = false;
        while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute("contenteditable") === "false") {
          if (triedForward && triedBackward) {
            break;
          }
          if (i2 >= childNodes.length) {
            triedForward = true;
            i2 = index2 - 1;
            direction = "backward";
            continue;
          }
          if (i2 < 0) {
            triedBackward = true;
            i2 = index2 + 1;
            direction = "forward";
            continue;
          }
          child = childNodes[i2];
          index2 = i2;
          i2 += direction === "forward" ? 1 : -1;
        }
        return [child, index2];
      };
      var getEditableChild = (parent2, index2, direction) => {
        var [child] = getEditableChildAndIndex(parent2, index2, direction);
        return child;
      };
      var getPlainText = (domNode) => {
        var text2 = "";
        if (isDOMText(domNode) && domNode.nodeValue) {
          return domNode.nodeValue;
        }
        if (isDOMElement(domNode)) {
          for (var childNode of Array.from(domNode.childNodes)) {
            text2 += getPlainText(childNode);
          }
          var display = getComputedStyle(domNode).getPropertyValue("display");
          if (display === "block" || display === "list" || domNode.tagName === "BR") {
            text2 += "\n";
          }
        }
        return text2;
      };
      var catchSlateFragment = /data-slate-fragment="(.+?)"/m;
      var getSlateFragmentAttribute = (dataTransfer) => {
        var htmlData = dataTransfer.getData("text/html");
        var [, fragment] = htmlData.match(catchSlateFragment) || [];
        return fragment;
      };
      var n$1 = 0;
      class Key {
        constructor() {
          this.id = "".concat(n$1++);
        }
      }
      var ReactEditor = {
        isComposing(editor) {
          return !!IS_COMPOSING.get(editor);
        },
        getWindow(editor) {
          var window2 = EDITOR_TO_WINDOW.get(editor);
          if (!window2) {
            throw new Error("Unable to find a host window element for this editor");
          }
          return window2;
        },
        findKey(editor, node) {
          var key = NODE_TO_KEY.get(node);
          if (!key) {
            key = new Key();
            NODE_TO_KEY.set(node, key);
          }
          return key;
        },
        findPath(editor, node) {
          var path = [];
          var child = node;
          while (true) {
            var parent2 = NODE_TO_PARENT.get(child);
            if (parent2 == null) {
              if (Editor$1.isEditor(child)) {
                return path;
              } else {
                break;
              }
            }
            var i2 = NODE_TO_INDEX.get(child);
            if (i2 == null) {
              break;
            }
            path.unshift(i2);
            child = parent2;
          }
          throw new Error("Unable to find the path for Slate node: ".concat(Scrubber.stringify(node)));
        },
        findDocumentOrShadowRoot(editor) {
          var el2 = ReactEditor.toDOMNode(editor, editor);
          var root2 = el2.getRootNode();
          if ((root2 instanceof Document || root2 instanceof ShadowRoot) && root2.getSelection != null) {
            return root2;
          }
          return el2.ownerDocument;
        },
        isFocused(editor) {
          return !!IS_FOCUSED.get(editor);
        },
        isReadOnly(editor) {
          return !!IS_READ_ONLY.get(editor);
        },
        blur(editor) {
          var el2 = ReactEditor.toDOMNode(editor, editor);
          var root2 = ReactEditor.findDocumentOrShadowRoot(editor);
          IS_FOCUSED.set(editor, false);
          if (root2.activeElement === el2) {
            el2.blur();
          }
        },
        focus(editor) {
          var el2 = ReactEditor.toDOMNode(editor, editor);
          var root2 = ReactEditor.findDocumentOrShadowRoot(editor);
          IS_FOCUSED.set(editor, true);
          if (root2.activeElement !== el2) {
            el2.focus({
              preventScroll: true
            });
          }
        },
        deselect(editor) {
          ReactEditor.toDOMNode(editor, editor);
          var {
            selection
          } = editor;
          var root2 = ReactEditor.findDocumentOrShadowRoot(editor);
          var domSelection = root2.getSelection();
          if (domSelection && domSelection.rangeCount > 0) {
            domSelection.removeAllRanges();
          }
          if (selection) {
            Transforms.deselect(editor);
          }
        },
        hasDOMNode(editor, target) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var {
            editable = false
          } = options;
          var editorEl = ReactEditor.toDOMNode(editor, editor);
          var targetEl;
          try {
            targetEl = isDOMElement(target) ? target : target.parentElement;
          } catch (err) {
            if (!err.message.includes('Permission denied to access property "nodeType"')) {
              throw err;
            }
          }
          if (!targetEl) {
            return false;
          }
          return targetEl.closest("[data-slate-editor]") === editorEl && (!editable || targetEl.isContentEditable ? true : typeof targetEl.isContentEditable === "boolean" && targetEl.closest('[contenteditable="false"]') === editorEl || !!targetEl.getAttribute("data-slate-zero-width"));
        },
        insertData(editor, data) {
          editor.insertData(data);
        },
        insertFragmentData(editor, data) {
          return editor.insertFragmentData(data);
        },
        insertTextData(editor, data) {
          return editor.insertTextData(data);
        },
        setFragmentData(editor, data, originEvent) {
          editor.setFragmentData(data, originEvent);
        },
        toDOMNode(editor, node) {
          var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
          var domNode = Editor$1.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));
          if (!domNode) {
            throw new Error("Cannot resolve a DOM node from Slate node: ".concat(Scrubber.stringify(node)));
          }
          return domNode;
        },
        toDOMPoint(editor, point2) {
          var [node] = Editor$1.node(editor, point2.path);
          var el2 = ReactEditor.toDOMNode(editor, node);
          var domPoint;
          if (Editor$1.void(editor, {
            at: point2
          })) {
            point2 = {
              path: point2.path,
              offset: 0
            };
          }
          var selector = "[data-slate-string], [data-slate-zero-width]";
          var texts = Array.from(el2.querySelectorAll(selector));
          var start = 0;
          for (var text2 of texts) {
            var domNode = text2.childNodes[0];
            if (domNode == null || domNode.textContent == null) {
              continue;
            }
            var {
              length
            } = domNode.textContent;
            var attr = text2.getAttribute("data-slate-length");
            var trueLength = attr == null ? length : parseInt(attr, 10);
            var end = start + trueLength;
            if (point2.offset <= end) {
              var offset2 = Math.min(length, Math.max(0, point2.offset - start));
              domPoint = [domNode, offset2];
              break;
            }
            start = end;
          }
          if (!domPoint) {
            throw new Error("Cannot resolve a DOM point from Slate point: ".concat(Scrubber.stringify(point2)));
          }
          return domPoint;
        },
        toDOMRange(editor, range) {
          var {
            anchor,
            focus
          } = range;
          var isBackward = Range.isBackward(range);
          var domAnchor = ReactEditor.toDOMPoint(editor, anchor);
          var domFocus = Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);
          var window2 = ReactEditor.getWindow(editor);
          var domRange = window2.document.createRange();
          var [startNode, startOffset] = isBackward ? domFocus : domAnchor;
          var [endNode, endOffset] = isBackward ? domAnchor : domFocus;
          var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;
          var isStartAtZeroWidth = !!startEl.getAttribute("data-slate-zero-width");
          var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;
          var isEndAtZeroWidth = !!endEl.getAttribute("data-slate-zero-width");
          domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);
          domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);
          return domRange;
        },
        toSlateNode(editor, domNode) {
          var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;
          if (domEl && !domEl.hasAttribute("data-slate-node")) {
            domEl = domEl.closest("[data-slate-node]");
          }
          var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;
          if (!node) {
            throw new Error("Cannot resolve a Slate node from DOM node: ".concat(domEl));
          }
          return node;
        },
        findEventRange(editor, event) {
          if ("nativeEvent" in event) {
            event = event.nativeEvent;
          }
          var {
            clientX: x2,
            clientY: y2,
            target
          } = event;
          if (x2 == null || y2 == null) {
            throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
          }
          var node = ReactEditor.toSlateNode(editor, event.target);
          var path = ReactEditor.findPath(editor, node);
          if (Editor$1.isVoid(editor, node)) {
            var rect = target.getBoundingClientRect();
            var isPrev = editor.isInline(node) ? x2 - rect.left < rect.left + rect.width - x2 : y2 - rect.top < rect.top + rect.height - y2;
            var edge = Editor$1.point(editor, path, {
              edge: isPrev ? "start" : "end"
            });
            var point2 = isPrev ? Editor$1.before(editor, edge) : Editor$1.after(editor, edge);
            if (point2) {
              var _range = Editor$1.range(editor, point2);
              return _range;
            }
          }
          var domRange;
          var {
            document: document2
          } = ReactEditor.getWindow(editor);
          if (document2.caretRangeFromPoint) {
            domRange = document2.caretRangeFromPoint(x2, y2);
          } else {
            var position2 = document2.caretPositionFromPoint(x2, y2);
            if (position2) {
              domRange = document2.createRange();
              domRange.setStart(position2.offsetNode, position2.offset);
              domRange.setEnd(position2.offsetNode, position2.offset);
            }
          }
          if (!domRange) {
            throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
          }
          var range = ReactEditor.toSlateRange(editor, domRange, {
            exactMatch: false,
            suppressThrow: false
          });
          return range;
        },
        toSlatePoint(editor, domPoint, options) {
          var {
            exactMatch,
            suppressThrow
          } = options;
          var [nearestNode, nearestOffset] = exactMatch ? domPoint : normalizeDOMPoint(domPoint);
          var parentNode = nearestNode.parentNode;
          var textNode = null;
          var offset2 = 0;
          if (parentNode) {
            var _domNode$textContent;
            var editorEl = ReactEditor.toDOMNode(editor, editor);
            var potentialVoidNode = parentNode.closest('[data-slate-void="true"]');
            var voidNode = potentialVoidNode && editorEl.contains(potentialVoidNode) ? potentialVoidNode : null;
            var leafNode = parentNode.closest("[data-slate-leaf]");
            var domNode = null;
            if (leafNode) {
              textNode = leafNode.closest('[data-slate-node="text"]');
              if (textNode) {
                var window2 = ReactEditor.getWindow(editor);
                var range = window2.document.createRange();
                range.setStart(textNode, 0);
                range.setEnd(nearestNode, nearestOffset);
                var contents = range.cloneContents();
                var removals = [...Array.prototype.slice.call(contents.querySelectorAll("[data-slate-zero-width]")), ...Array.prototype.slice.call(contents.querySelectorAll("[contenteditable=false]"))];
                removals.forEach((el2) => {
                  el2.parentNode.removeChild(el2);
                });
                offset2 = contents.textContent.length;
                domNode = textNode;
              }
            } else if (voidNode) {
              leafNode = voidNode.querySelector("[data-slate-leaf]");
              if (!leafNode) {
                offset2 = 1;
              } else {
                textNode = leafNode.closest('[data-slate-node="text"]');
                domNode = leafNode;
                offset2 = domNode.textContent.length;
                domNode.querySelectorAll("[data-slate-zero-width]").forEach((el2) => {
                  offset2 -= el2.textContent.length;
                });
              }
            }
            if (domNode && offset2 === domNode.textContent.length && (parentNode.hasAttribute("data-slate-zero-width") || IS_FIREFOX && (_domNode$textContent = domNode.textContent) !== null && _domNode$textContent !== void 0 && _domNode$textContent.endsWith("\n\n"))) {
              offset2--;
            }
          }
          if (!textNode) {
            if (suppressThrow) {
              return null;
            }
            throw new Error("Cannot resolve a Slate point from DOM point: ".concat(domPoint));
          }
          var slateNode = ReactEditor.toSlateNode(editor, textNode);
          var path = ReactEditor.findPath(editor, slateNode);
          return {
            path,
            offset: offset2
          };
        },
        toSlateRange(editor, domRange, options) {
          var {
            exactMatch,
            suppressThrow
          } = options;
          var el2 = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;
          var anchorNode;
          var anchorOffset;
          var focusNode;
          var focusOffset;
          var isCollapsed2;
          if (el2) {
            if (isDOMSelection(domRange)) {
              anchorNode = domRange.anchorNode;
              anchorOffset = domRange.anchorOffset;
              focusNode = domRange.focusNode;
              focusOffset = domRange.focusOffset;
              if (IS_CHROME && hasShadowRoot()) {
                isCollapsed2 = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;
              } else {
                isCollapsed2 = domRange.isCollapsed;
              }
            } else {
              anchorNode = domRange.startContainer;
              anchorOffset = domRange.startOffset;
              focusNode = domRange.endContainer;
              focusOffset = domRange.endOffset;
              isCollapsed2 = domRange.collapsed;
            }
          }
          if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {
            throw new Error("Cannot resolve a Slate range from DOM range: ".concat(domRange));
          }
          var anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset], {
            exactMatch,
            suppressThrow
          });
          if (!anchor) {
            return null;
          }
          var focus = isCollapsed2 ? anchor : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], {
            exactMatch,
            suppressThrow
          });
          if (!focus) {
            return null;
          }
          var range = {
            anchor,
            focus
          };
          if (Range.isExpanded(range) && Range.isForward(range) && isDOMElement(focusNode) && Editor$1.void(editor, {
            at: range.focus,
            mode: "highest"
          })) {
            range = Editor$1.unhangRange(editor, range, {
              voids: true
            });
          }
          return range;
        },
        hasRange(editor, range) {
          var {
            anchor,
            focus
          } = range;
          return Editor$1.hasPath(editor, anchor.path) && Editor$1.hasPath(editor, focus.path);
        }
      };
      var doRectsIntersect = (rect, compareRect) => {
        var middle = (compareRect.top + compareRect.bottom) / 2;
        return rect.top <= middle && rect.bottom >= middle;
      };
      var areRangesSameLine = (editor, range1, range2) => {
        var rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect();
        var rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect();
        return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);
      };
      var findCurrentLineRange = (editor, parentRange) => {
        var parentRangeBoundary = Editor$1.range(editor, Range.end(parentRange));
        var positions = Array.from(Editor$1.positions(editor, {
          at: parentRange
        }));
        var left = 0;
        var right = positions.length;
        var middle = Math.floor(right / 2);
        if (areRangesSameLine(editor, Editor$1.range(editor, positions[left]), parentRangeBoundary)) {
          return Editor$1.range(editor, positions[left], parentRangeBoundary);
        }
        if (positions.length < 2) {
          return Editor$1.range(editor, positions[positions.length - 1], parentRangeBoundary);
        }
        while (middle !== positions.length && middle !== left) {
          if (areRangesSameLine(editor, Editor$1.range(editor, positions[middle]), parentRangeBoundary)) {
            right = middle;
          } else {
            left = middle;
          }
          middle = Math.floor((left + right) / 2);
        }
        return Editor$1.range(editor, positions[right], parentRangeBoundary);
      };
      var withReact = (editor) => {
        var e2 = editor;
        var {
          apply: apply2,
          onChange,
          deleteBackward: deleteBackward2
        } = e2;
        EDITOR_TO_KEY_TO_ELEMENT.set(e2, /* @__PURE__ */ new WeakMap());
        e2.deleteBackward = (unit) => {
          if (unit !== "line") {
            return deleteBackward2(unit);
          }
          if (editor.selection && Range.isCollapsed(editor.selection)) {
            var parentBlockEntry = Editor$1.above(editor, {
              match: (n2) => Editor$1.isBlock(editor, n2),
              at: editor.selection
            });
            if (parentBlockEntry) {
              var [, parentBlockPath] = parentBlockEntry;
              var parentElementRange = Editor$1.range(editor, parentBlockPath, editor.selection.anchor);
              var currentLineRange = findCurrentLineRange(e2, parentElementRange);
              if (!Range.isCollapsed(currentLineRange)) {
                Transforms.delete(editor, {
                  at: currentLineRange
                });
              }
            }
          }
        };
        e2.apply = (op) => {
          var matches = [];
          switch (op.type) {
            case "insert_text":
            case "remove_text":
            case "set_node":
            case "split_node": {
              matches.push(...getMatches(e2, op.path));
              break;
            }
            case "set_selection": {
              var _EDITOR_TO_USER_SELEC;
              (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();
              EDITOR_TO_USER_SELECTION.delete(editor);
              break;
            }
            case "insert_node":
            case "remove_node": {
              matches.push(...getMatches(e2, Path.parent(op.path)));
              break;
            }
            case "merge_node": {
              var prevPath = Path.previous(op.path);
              matches.push(...getMatches(e2, prevPath));
              break;
            }
            case "move_node": {
              var commonPath = Path.common(Path.parent(op.path), Path.parent(op.newPath));
              matches.push(...getMatches(e2, commonPath));
              break;
            }
          }
          apply2(op);
          for (var [path, key] of matches) {
            var [node] = Editor$1.node(e2, path);
            NODE_TO_KEY.set(node, key);
          }
        };
        e2.setFragmentData = (data) => {
          var {
            selection
          } = e2;
          if (!selection) {
            return;
          }
          var [start, end] = Range.edges(selection);
          var startVoid = Editor$1.void(e2, {
            at: start.path
          });
          var endVoid = Editor$1.void(e2, {
            at: end.path
          });
          if (Range.isCollapsed(selection) && !startVoid) {
            return;
          }
          var domRange = ReactEditor.toDOMRange(e2, selection);
          var contents = domRange.cloneContents();
          var attach = contents.childNodes[0];
          contents.childNodes.forEach((node) => {
            if (node.textContent && node.textContent.trim() !== "") {
              attach = node;
            }
          });
          if (endVoid) {
            var [voidNode] = endVoid;
            var r2 = domRange.cloneRange();
            var domNode = ReactEditor.toDOMNode(e2, voidNode);
            r2.setEndAfter(domNode);
            contents = r2.cloneContents();
          }
          if (startVoid) {
            attach = contents.querySelector("[data-slate-spacer]");
          }
          Array.from(contents.querySelectorAll("[data-slate-zero-width]")).forEach((zw) => {
            var isNewline = zw.getAttribute("data-slate-zero-width") === "n";
            zw.textContent = isNewline ? "\n" : "";
          });
          if (isDOMText(attach)) {
            var span = attach.ownerDocument.createElement("span");
            span.style.whiteSpace = "pre";
            span.appendChild(attach);
            contents.appendChild(span);
            attach = span;
          }
          var fragment = e2.getFragment();
          var string2 = JSON.stringify(fragment);
          var encoded = window.btoa(encodeURIComponent(string2));
          attach.setAttribute("data-slate-fragment", encoded);
          data.setData("application/x-slate-fragment", encoded);
          var div = contents.ownerDocument.createElement("div");
          div.appendChild(contents);
          div.setAttribute("hidden", "true");
          contents.ownerDocument.body.appendChild(div);
          data.setData("text/html", div.innerHTML);
          data.setData("text/plain", getPlainText(div));
          contents.ownerDocument.body.removeChild(div);
          return data;
        };
        e2.insertData = (data) => {
          if (!e2.insertFragmentData(data)) {
            e2.insertTextData(data);
          }
        };
        e2.insertFragmentData = (data) => {
          var fragment = data.getData("application/x-slate-fragment") || getSlateFragmentAttribute(data);
          if (fragment) {
            var decoded = decodeURIComponent(window.atob(fragment));
            var parsed = JSON.parse(decoded);
            e2.insertFragment(parsed);
            return true;
          }
          return false;
        };
        e2.insertTextData = (data) => {
          var text2 = data.getData("text/plain");
          if (text2) {
            var lines = text2.split(/\r\n|\r|\n/);
            var split = false;
            for (var line of lines) {
              if (split) {
                Transforms.splitNodes(e2, {
                  always: true
                });
              }
              e2.insertText(line);
              split = true;
            }
            return true;
          }
          return false;
        };
        e2.onChange = () => {
          ReactDOM.unstable_batchedUpdates(() => {
            var onContextChange = EDITOR_TO_ON_CHANGE.get(e2);
            if (onContextChange) {
              onContextChange();
            }
            onChange();
          });
        };
        return e2;
      };
      var getMatches = (e2, path) => {
        var matches = [];
        for (var [n2, p2] of Editor$1.levels(e2, {
          at: path
        })) {
          var key = ReactEditor.findKey(e2, n2);
          matches.push([p2, key]);
        }
        return matches;
      };
      const e = Symbol(), t = Symbol(), r$1 = Symbol(), n = Object.getPrototypeOf, o = /* @__PURE__ */ new WeakMap(), s = (e2) => e2 && (o.has(e2) ? o.get(e2) : n(e2) === Object.prototype || n(e2) === Array.prototype), c = (e2) => typeof e2 == "object" && e2 !== null, i = (n2, o2) => {
        let s2 = false;
        const c2 = (t2, r2, o3) => {
          if (!s2) {
            let s3 = t2.a.get(n2);
            s3 || (s3 = /* @__PURE__ */ new Set(), t2.a.set(n2, s3)), o3 && s3.has(e) || s3.add(r2);
          }
        }, i2 = { f: o2, get(e2, t2) {
          return t2 === r$1 ? n2 : (c2(this, t2), a(e2[t2], this.a, this.c));
        }, has(e2, r2) {
          return r2 === t ? (s2 = true, this.a.delete(n2), true) : (c2(this, r2), r2 in e2);
        }, getOwnPropertyDescriptor(e2, t2) {
          return c2(this, t2, true), Object.getOwnPropertyDescriptor(e2, t2);
        }, ownKeys(t2) {
          return c2(this, e), Reflect.ownKeys(t2);
        } };
        return o2 && (i2.set = i2.deleteProperty = () => false), i2;
      }, a = (e2, t2, o2) => {
        if (!s(e2))
          return e2;
        const c2 = e2[r$1] || e2, a2 = ((e3) => Object.isFrozen(e3) || Object.values(Object.getOwnPropertyDescriptors(e3)).some((e4) => !e4.writable))(c2);
        let l2 = o2 && o2.get(c2);
        return l2 && l2.f === a2 || (l2 = i(c2, a2), l2.p = new Proxy(a2 ? ((e3) => {
          if (Array.isArray(e3))
            return Array.from(e3);
          const t3 = Object.getOwnPropertyDescriptors(e3);
          return Object.values(t3).forEach((e4) => {
            e4.configurable = true;
          }), Object.create(n(e3), t3);
        })(c2) : c2, l2), o2 && o2.set(c2, l2)), l2.a = t2, l2.c = o2, l2.p;
      }, l$1 = (e2, t2) => {
        const r2 = Reflect.ownKeys(e2), n2 = Reflect.ownKeys(t2);
        return r2.length !== n2.length || r2.some((e3, t3) => e3 !== n2[t3]);
      }, u$1 = (t2, r2, n2, o2) => {
        if (Object.is(t2, r2))
          return false;
        if (!c(t2) || !c(r2))
          return true;
        const s2 = n2.get(t2);
        if (!s2)
          return true;
        if (o2) {
          const e2 = o2.get(t2);
          if (e2 && e2.n === r2)
            return e2.g;
          o2.set(t2, { n: r2, g: false });
        }
        let i2 = null;
        for (const c2 of s2) {
          const s3 = c2 === e ? l$1(t2, r2) : u$1(t2[c2], r2[c2], n2, o2);
          if (s3 !== true && s3 !== false || (i2 = s3), i2)
            break;
        }
        return i2 === null && (i2 = true), o2 && o2.set(t2, { n: r2, g: i2 }), i2;
      }, g = (e2, t2) => {
        const r2 = [], n2 = /* @__PURE__ */ new WeakSet(), o2 = (e3, s2) => {
          if (n2.has(e3))
            return;
          c(e3) && n2.add(e3);
          const i2 = t2.get(e3);
          i2 ? i2.forEach((t3) => {
            o2(e3[t3], s2 ? [...s2, t3] : [t3]);
          }) : s2 && r2.push(s2);
        };
        return o2(e2), r2;
      };
      const useAffectedDebugValue = (state, affected) => {
        const pathList = react.exports.useRef();
        react.exports.useEffect(() => {
          pathList.current = g(state, affected);
        });
        react.exports.useDebugValue(state);
      };
      const createTrackedSelector = (useSelector) => {
        const useTrackedSelector = () => {
          const [, forceUpdate] = react.exports.useReducer((c2) => c2 + 1, 0);
          const affected = /* @__PURE__ */ new WeakMap();
          const lastAffected = react.exports.useRef();
          const prevState = react.exports.useRef();
          const lastState = react.exports.useRef();
          react.exports.useEffect(() => {
            lastAffected.current = affected;
            if (prevState.current !== lastState.current && u$1(prevState.current, lastState.current, affected, /* @__PURE__ */ new WeakMap())) {
              prevState.current = lastState.current;
              forceUpdate();
            }
          });
          const selector = react.exports.useCallback((nextState) => {
            lastState.current = nextState;
            if (prevState.current && prevState.current !== nextState && lastAffected.current && !u$1(prevState.current, nextState, lastAffected.current, /* @__PURE__ */ new WeakMap())) {
              return prevState.current;
            }
            prevState.current = nextState;
            return nextState;
          }, []);
          const state = useSelector(selector);
          if (typeof process === "object" && false) {
            useAffectedDebugValue(state, affected);
          }
          const proxyCache = react.exports.useMemo(() => /* @__PURE__ */ new WeakMap(), []);
          return a(state, affected, proxyCache);
        };
        return useTrackedSelector;
      };
      function createStore$2(createState) {
        let state;
        const listeners = /* @__PURE__ */ new Set();
        const setState2 = (partial, replace) => {
          const nextState = typeof partial === "function" ? partial(state) : partial;
          if (nextState !== state) {
            const previousState = state;
            state = replace ? nextState : Object.assign({}, state, nextState);
            listeners.forEach((listener) => listener(state, previousState));
          }
        };
        const getState2 = () => state;
        const subscribeWithSelector = (listener, selector = getState2, equalityFn = Object.is) => {
          console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
          let currentSlice = selector(state);
          function listenerToAdd() {
            const nextSlice = selector(state);
            if (!equalityFn(currentSlice, nextSlice)) {
              const previousSlice = currentSlice;
              listener(currentSlice = nextSlice, previousSlice);
            }
          }
          listeners.add(listenerToAdd);
          return () => listeners.delete(listenerToAdd);
        };
        const subscribe = (listener, selector, equalityFn) => {
          if (selector || equalityFn) {
            return subscribeWithSelector(listener, selector, equalityFn);
          }
          listeners.add(listener);
          return () => listeners.delete(listener);
        };
        const destroy = () => listeners.clear();
        const api = { setState: setState2, getState: getState2, subscribe, destroy };
        state = createState(setState2, getState2, api);
        return api;
      }
      const isSSR$1 = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
      const useIsomorphicLayoutEffect = isSSR$1 ? react.exports.useEffect : react.exports.useLayoutEffect;
      function create$2(createState) {
        const api = typeof createState === "function" ? createStore$2(createState) : createState;
        const useStore = (selector = api.getState, equalityFn = Object.is) => {
          const [, forceUpdate] = react.exports.useReducer((c2) => c2 + 1, 0);
          const state = api.getState();
          const stateRef = react.exports.useRef(state);
          const selectorRef = react.exports.useRef(selector);
          const equalityFnRef = react.exports.useRef(equalityFn);
          const erroredRef = react.exports.useRef(false);
          const currentSliceRef = react.exports.useRef();
          if (currentSliceRef.current === void 0) {
            currentSliceRef.current = selector(state);
          }
          let newStateSlice;
          let hasNewStateSlice = false;
          if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
            newStateSlice = selector(state);
            hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
          }
          useIsomorphicLayoutEffect(() => {
            if (hasNewStateSlice) {
              currentSliceRef.current = newStateSlice;
            }
            stateRef.current = state;
            selectorRef.current = selector;
            equalityFnRef.current = equalityFn;
            erroredRef.current = false;
          });
          const stateBeforeSubscriptionRef = react.exports.useRef(state);
          useIsomorphicLayoutEffect(() => {
            const listener = () => {
              try {
                const nextState = api.getState();
                const nextStateSlice = selectorRef.current(nextState);
                if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
                  stateRef.current = nextState;
                  currentSliceRef.current = nextStateSlice;
                  forceUpdate();
                }
              } catch (error) {
                erroredRef.current = true;
                forceUpdate();
              }
            };
            const unsubscribe = api.subscribe(listener);
            if (api.getState() !== stateBeforeSubscriptionRef.current) {
              listener();
            }
            return unsubscribe;
          }, []);
          const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
          react.exports.useDebugValue(sliceToReturn);
          return sliceToReturn;
        };
        Object.assign(useStore, api);
        useStore[Symbol.iterator] = function() {
          console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
          const items = [useStore, api];
          return {
            next() {
              const done = items.length <= 0;
              return { value: items.shift(), done };
            }
          };
        };
        return useStore;
      }
      function devtools(fn2, options) {
        return (set2, get2, api) => {
          var _a;
          let didWarnAboutNameDeprecation = false;
          if (typeof options === "string" && !didWarnAboutNameDeprecation) {
            console.warn("[zustand devtools middleware]: passing `name` as directly will be not allowed in next majorpass the `name` in an object `{ name: ... }` instead");
            didWarnAboutNameDeprecation = true;
          }
          const devtoolsOptions = options === void 0 ? { name: void 0, anonymousActionType: void 0 } : typeof options === "string" ? { name: options } : options;
          if (typeof ((_a = devtoolsOptions == null ? void 0 : devtoolsOptions.serialize) == null ? void 0 : _a.options) !== "undefined") {
            console.warn("[zustand devtools middleware]: `serialize.options` is deprecated, just use `serialize`");
          }
          let extensionConnector;
          try {
            extensionConnector = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;
          } catch {
          }
          if (!extensionConnector) {
            if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true } && "production") !== "production" && typeof window !== "undefined") {
              console.warn("[zustand devtools middleware] Please install/enable Redux devtools extension");
            }
            return fn2(set2, get2, api);
          }
          let extension = Object.create(extensionConnector.connect(devtoolsOptions));
          let didWarnAboutDevtools = false;
          Object.defineProperty(api, "devtools", {
            get: () => {
              if (!didWarnAboutDevtools) {
                console.warn("[zustand devtools middleware] `devtools` property on the store is deprecated it will be removed in the next major.\nYou shouldn't interact with the extension directly. But in case you still want to you can patch `window.__REDUX_DEVTOOLS_EXTENSION__` directly");
                didWarnAboutDevtools = true;
              }
              return extension;
            },
            set: (value) => {
              if (!didWarnAboutDevtools) {
                console.warn("[zustand devtools middleware] `api.devtools` is deprecated, it will be removed in the next major.\nYou shouldn't interact with the extension directly. But in case you still want to you can patch `window.__REDUX_DEVTOOLS_EXTENSION__` directly");
                didWarnAboutDevtools = true;
              }
              extension = value;
            }
          });
          let didWarnAboutPrefix = false;
          Object.defineProperty(extension, "prefix", {
            get: () => {
              if (!didWarnAboutPrefix) {
                console.warn("[zustand devtools middleware] along with `api.devtools`, `api.devtools.prefix` is deprecated.\nWe no longer prefix the actions/names" + devtoolsOptions.name === void 0 ? ", pass the `name` option to create a separate instance of devtools for each store." : ", because the `name` option already creates a separate instance of devtools for each store.");
                didWarnAboutPrefix = true;
              }
              return "";
            },
            set: () => {
              if (!didWarnAboutPrefix) {
                console.warn("[zustand devtools middleware] along with `api.devtools`, `api.devtools.prefix` is deprecated.\nWe no longer prefix the actions/names" + devtoolsOptions.name === void 0 ? ", pass the `name` option to create a separate instance of devtools for each store." : ", because the `name` option already creates a separate instance of devtools for each store.");
                didWarnAboutPrefix = true;
              }
            }
          });
          let isRecording = true;
          api.setState = (state, replace, nameOrAction) => {
            set2(state, replace);
            if (!isRecording)
              return;
            extension.send(nameOrAction === void 0 ? { type: devtoolsOptions.anonymousActionType || "anonymous" } : typeof nameOrAction === "string" ? { type: nameOrAction } : nameOrAction, get2());
          };
          const setStateFromDevtools = (...a2) => {
            const originalIsRecording = isRecording;
            isRecording = false;
            set2(...a2);
            isRecording = originalIsRecording;
          };
          const initialState2 = fn2(api.setState, get2, api);
          extension.init(initialState2);
          if (api.dispatchFromDevtools && typeof api.dispatch === "function") {
            let didWarnAboutReservedActionType = false;
            const originalDispatch = api.dispatch;
            api.dispatch = (...a2) => {
              if (a2[0].type === "__setState" && !didWarnAboutReservedActionType) {
                console.warn('[zustand devtools middleware] "__setState" action type is reserved to set state from the devtools. Avoid using it.');
                didWarnAboutReservedActionType = true;
              }
              originalDispatch(...a2);
            };
          }
          extension.subscribe((message2) => {
            var _a2;
            switch (message2.type) {
              case "ACTION":
                if (typeof message2.payload !== "string") {
                  console.error("[zustand devtools middleware] Unsupported action format");
                  return;
                }
                return parseJsonThen(message2.payload, (action) => {
                  if (action.type === "__setState") {
                    setStateFromDevtools(action.state);
                    return;
                  }
                  if (!api.dispatchFromDevtools)
                    return;
                  if (typeof api.dispatch !== "function")
                    return;
                  api.dispatch(action);
                });
              case "DISPATCH":
                switch (message2.payload.type) {
                  case "RESET":
                    setStateFromDevtools(initialState2);
                    return extension.init(api.getState());
                  case "COMMIT":
                    return extension.init(api.getState());
                  case "ROLLBACK":
                    return parseJsonThen(message2.state, (state) => {
                      setStateFromDevtools(state);
                      extension.init(api.getState());
                    });
                  case "JUMP_TO_STATE":
                  case "JUMP_TO_ACTION":
                    return parseJsonThen(message2.state, (state) => {
                      setStateFromDevtools(state);
                    });
                  case "IMPORT_STATE": {
                    const { nextLiftedState } = message2.payload;
                    const lastComputedState = (_a2 = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a2.state;
                    if (!lastComputedState)
                      return;
                    setStateFromDevtools(lastComputedState);
                    extension.send(null, nextLiftedState);
                    return;
                  }
                  case "PAUSE_RECORDING":
                    return isRecording = !isRecording;
                }
                return;
            }
          });
          return initialState2;
        };
      }
      const parseJsonThen = (stringified, f2) => {
        let parsed;
        try {
          parsed = JSON.parse(stringified);
        } catch (e2) {
          console.error("[zustand devtools middleware] Could not parse the received json", e2);
        }
        if (parsed !== void 0)
          f2(parsed);
      };
      var __defProp$1 = Object.defineProperty;
      var __getOwnPropSymbols = Object.getOwnPropertySymbols;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __propIsEnum = Object.prototype.propertyIsEnumerable;
      var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
      var __spreadValues = (a2, b2) => {
        for (var prop in b2 || (b2 = {}))
          if (__hasOwnProp2.call(b2, prop))
            __defNormalProp$1(a2, prop, b2[prop]);
        if (__getOwnPropSymbols)
          for (var prop of __getOwnPropSymbols(b2)) {
            if (__propIsEnum.call(b2, prop))
              __defNormalProp$1(a2, prop, b2[prop]);
          }
        return a2;
      };
      const toThenable = (fn2) => (input) => {
        try {
          const result = fn2(input);
          if (result instanceof Promise) {
            return result;
          }
          return {
            then(onFulfilled) {
              return toThenable(onFulfilled)(result);
            },
            catch(_onRejected) {
              return this;
            }
          };
        } catch (e2) {
          return {
            then(_onFulfilled) {
              return this;
            },
            catch(onRejected) {
              return toThenable(onRejected)(e2);
            }
          };
        }
      };
      const persist = (config22, baseOptions) => (set2, get2, api) => {
        let options = __spreadValues({
          getStorage: () => localStorage,
          serialize: JSON.stringify,
          deserialize: JSON.parse,
          partialize: (state) => state,
          version: 0,
          merge: (persistedState, currentState) => __spreadValues(__spreadValues({}, currentState), persistedState)
        }, baseOptions);
        if (options.blacklist || options.whitelist) {
          console.warn(`The ${options.blacklist ? "blacklist" : "whitelist"} option is deprecated and will be removed in the next version. Please use the 'partialize' option instead.`);
        }
        let hasHydrated = false;
        const hydrationListeners = /* @__PURE__ */ new Set();
        const finishHydrationListeners = /* @__PURE__ */ new Set();
        let storage;
        try {
          storage = options.getStorage();
        } catch (e2) {
        }
        if (!storage) {
          return config22((...args) => {
            console.warn(`[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`);
            set2(...args);
          }, get2, api);
        } else if (!storage.removeItem) {
          console.warn(`[zustand persist middleware] The given storage for item '${options.name}' does not contain a 'removeItem' method, which will be required in v4.`);
        }
        const thenableSerialize = toThenable(options.serialize);
        const setItem = () => {
          const state = options.partialize(__spreadValues({}, get2()));
          if (options.whitelist) {
            Object.keys(state).forEach((key) => {
              var _a;
              !((_a = options.whitelist) == null ? void 0 : _a.includes(key)) && delete state[key];
            });
          }
          if (options.blacklist) {
            options.blacklist.forEach((key) => delete state[key]);
          }
          let errorInSync;
          const thenable = thenableSerialize({ state, version: options.version }).then((serializedValue) => storage.setItem(options.name, serializedValue)).catch((e2) => {
            errorInSync = e2;
          });
          if (errorInSync) {
            throw errorInSync;
          }
          return thenable;
        };
        const savedSetState = api.setState;
        api.setState = (state, replace) => {
          savedSetState(state, replace);
          void setItem();
        };
        const configResult = config22((...args) => {
          set2(...args);
          void setItem();
        }, get2, api);
        let stateFromStorage;
        const hydrate = () => {
          var _a;
          if (!storage)
            return;
          hasHydrated = false;
          hydrationListeners.forEach((cb2) => cb2(get2()));
          const postRehydrationCallback = ((_a = options.onRehydrateStorage) == null ? void 0 : _a.call(options, get2())) || void 0;
          return toThenable(storage.getItem.bind(storage))(options.name).then((storageValue) => {
            if (storageValue) {
              return options.deserialize(storageValue);
            }
          }).then((deserializedStorageValue) => {
            if (deserializedStorageValue) {
              if (typeof deserializedStorageValue.version === "number" && deserializedStorageValue.version !== options.version) {
                if (options.migrate) {
                  return options.migrate(deserializedStorageValue.state, deserializedStorageValue.version);
                }
                console.error(`State loaded from storage couldn't be migrated since no migrate function was provided`);
              } else {
                return deserializedStorageValue.state;
              }
            }
          }).then((migratedState) => {
            var _a2;
            stateFromStorage = options.merge(migratedState, (_a2 = get2()) != null ? _a2 : configResult);
            set2(stateFromStorage, true);
            return setItem();
          }).then(() => {
            postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);
            hasHydrated = true;
            finishHydrationListeners.forEach((cb2) => cb2(stateFromStorage));
          }).catch((e2) => {
            postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e2);
          });
        };
        api.persist = {
          setOptions: (newOptions) => {
            options = __spreadValues(__spreadValues({}, options), newOptions);
            if (newOptions.getStorage) {
              storage = newOptions.getStorage();
            }
          },
          clearStorage: () => {
            var _a;
            (_a = storage == null ? void 0 : storage.removeItem) == null ? void 0 : _a.call(storage, options.name);
          },
          rehydrate: () => hydrate(),
          hasHydrated: () => hasHydrated,
          onHydrate: (cb2) => {
            hydrationListeners.add(cb2);
            return () => {
              hydrationListeners.delete(cb2);
            };
          },
          onFinishHydration: (cb2) => {
            finishHydrationListeners.add(cb2);
            return () => {
              finishHydrationListeners.delete(cb2);
            };
          }
        };
        hydrate();
        return stateFromStorage || configResult;
      };
      function createStore$1(createState) {
        let state;
        const listeners = /* @__PURE__ */ new Set();
        const setState2 = (partial, replace) => {
          const nextState = typeof partial === "function" ? partial(state) : partial;
          if (nextState !== state) {
            const previousState = state;
            state = replace ? nextState : Object.assign({}, state, nextState);
            listeners.forEach((listener) => listener(state, previousState));
          }
        };
        const getState2 = () => state;
        const subscribeWithSelector = (listener, selector = getState2, equalityFn = Object.is) => {
          console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
          let currentSlice = selector(state);
          function listenerToAdd() {
            const nextSlice = selector(state);
            if (!equalityFn(currentSlice, nextSlice)) {
              const previousSlice = currentSlice;
              listener(currentSlice = nextSlice, previousSlice);
            }
          }
          listeners.add(listenerToAdd);
          return () => listeners.delete(listenerToAdd);
        };
        const subscribe = (listener, selector, equalityFn) => {
          if (selector || equalityFn) {
            return subscribeWithSelector(listener, selector, equalityFn);
          }
          listeners.add(listener);
          return () => listeners.delete(listener);
        };
        const destroy = () => listeners.clear();
        const api = { setState: setState2, getState: getState2, subscribe, destroy };
        state = createState(setState2, getState2, api);
        return api;
      }
      const generateStateActions = (store, storeName) => {
        const actions = {};
        Object.keys(store.getState()).forEach((key) => {
          actions[key] = (value) => {
            const prevValue = store.getState()[key];
            if (prevValue === value)
              return;
            const actionKey = key.replace(/^\S/, (s2) => s2.toUpperCase());
            store.setState((draft) => {
              draft[key] = value;
            }, `@@${storeName}/set${actionKey}`);
          };
        });
        return actions;
      };
      const extendActions = (builder, api) => {
        const actions = builder(api.set, api.get, api);
        return {
          ...api,
          set: {
            ...api.set,
            ...actions
          }
        };
      };
      const extendSelectors = (builder, api) => {
        const use = {
          ...api.use
        };
        const useTracked = {
          ...api.useTracked
        };
        const get2 = {
          ...api.get
        };
        Object.keys(builder(api.store.getState(), api.get, api)).forEach((key) => {
          use[key] = (...args) => api.useStore((state) => {
            const selectors = builder(state, api.get, api);
            const selector = selectors[key];
            return selector(...args);
          });
          useTracked[key] = (...args) => {
            const trackedState = api.useTrackedStore();
            const selectors = builder(trackedState, api.get, api);
            const selector = selectors[key];
            return selector(...args);
          };
          get2[key] = (...args) => {
            const selectors = builder(api.store.getState(), api.get, api);
            const selector = selectors[key];
            return selector(...args);
          };
        });
        return {
          ...api,
          get: get2,
          use,
          useTracked
        };
      };
      const storeFactory = (api) => {
        return {
          ...api,
          extendSelectors: (builder) => storeFactory(extendSelectors(builder, api)),
          extendActions: (builder) => storeFactory(extendActions(builder, api))
        };
      };
      const generateStateGetSelectors = (store) => {
        const selectors = {};
        Object.keys(store.getState()).forEach((key) => {
          selectors[key] = () => store.getState()[key];
        });
        return selectors;
      };
      const generateStateHookSelectors = (store) => {
        const selectors = {};
        Object.keys(store.getState()).forEach((key) => {
          selectors[key] = (equalityFn) => {
            return store((state) => state[key], equalityFn);
          };
        });
        return selectors;
      };
      const generateStateTrackedHooksSelectors = (store, trackedStore) => {
        const selectors = {};
        Object.keys(store.getState()).forEach((key) => {
          selectors[key] = () => {
            return trackedStore()[key];
          };
        });
        return selectors;
      };
      const immerMiddleware = (config22) => (set2, get2, api) => {
        const setState2 = (fn$1, actionName) => set2(fn(fn$1), true, actionName);
        api.setState = setState2;
        return config22(setState2, get2, api);
      };
      function pipe(x2, ...fns) {
        return fns.reduce((y2, fn2) => fn2(y2), x2);
      }
      const createStore = (name2) => (initialState2, options = {}) => {
        var _immer$enabledAutoFre;
        const {
          middlewares: _middlewares = [],
          devtools: devtools$1,
          persist: persist$1,
          immer
        } = options;
        sn((_immer$enabledAutoFre = immer === null || immer === void 0 ? void 0 : immer.enabledAutoFreeze) !== null && _immer$enabledAutoFre !== void 0 ? _immer$enabledAutoFre : false);
        if (immer !== null && immer !== void 0 && immer.enableMapSet) {
          C();
        }
        const middlewares = [immerMiddleware, ..._middlewares];
        if (persist$1 !== null && persist$1 !== void 0 && persist$1.enabled) {
          middlewares.push((config22) => persist(config22, {
            ...persist$1,
            name: name2
          }));
        }
        if (devtools$1 !== null && devtools$1 !== void 0 && devtools$1.enabled) {
          middlewares.push((config22) => devtools(config22, {
            ...devtools$1,
            name: name2
          }));
        }
        middlewares.push(createStore$1);
        const createStore2 = (createState) => pipe(createState, ...middlewares);
        const store = createStore2(() => initialState2);
        const useStore = create$2(store);
        const stateActions = generateStateActions(useStore, name2);
        const mergeState = (state, actionName) => {
          store.setState((draft) => {
            Object.assign(draft, state);
          }, actionName || `@@${name2}/mergeState`);
        };
        const setState2 = (fn2, actionName) => {
          store.setState(fn2, actionName || `@@${name2}/setState`);
        };
        const hookSelectors = generateStateHookSelectors(useStore);
        const getterSelectors = generateStateGetSelectors(useStore);
        const useTrackedStore = createTrackedSelector(useStore);
        const trackedHooksSelectors = generateStateTrackedHooksSelectors(useStore, useTrackedStore);
        const api = {
          get: {
            state: store.getState,
            ...getterSelectors
          },
          name: name2,
          set: {
            state: setState2,
            mergeState,
            ...stateActions
          },
          store,
          use: hookSelectors,
          useTracked: trackedHooksSelectors,
          useStore,
          useTrackedStore,
          extendSelectors: () => api,
          extendActions: () => api
        };
        return storeFactory(api);
      };
      var commonjsGlobal$3 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function createCommonjsModule$e(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var freeGlobal$5 = typeof commonjsGlobal$3 == "object" && commonjsGlobal$3 && commonjsGlobal$3.Object === Object && commonjsGlobal$3;
      var _freeGlobal$3 = freeGlobal$5;
      var freeSelf$4 = typeof self == "object" && self && self.Object === Object && self;
      var root$c = _freeGlobal$3 || freeSelf$4 || Function("return this")();
      var _root$3 = root$c;
      var Symbol$7 = _root$3.Symbol;
      var _Symbol$3 = Symbol$7;
      var objectProto$b$4 = Object.prototype;
      var hasOwnProperty$8$4 = objectProto$b$4.hasOwnProperty;
      var nativeObjectToString$1$4 = objectProto$b$4.toString;
      var symToStringTag$1$4 = _Symbol$3 ? _Symbol$3.toStringTag : void 0;
      function getRawTag$4(value) {
        var isOwn = hasOwnProperty$8$4.call(value, symToStringTag$1$4), tag = value[symToStringTag$1$4];
        try {
          value[symToStringTag$1$4] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString$1$4.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag$1$4] = tag;
          } else {
            delete value[symToStringTag$1$4];
          }
        }
        return result;
      }
      var _getRawTag$3 = getRawTag$4;
      var objectProto$a$4 = Object.prototype;
      var nativeObjectToString$5 = objectProto$a$4.toString;
      function objectToString$4(value) {
        return nativeObjectToString$5.call(value);
      }
      var _objectToString$3 = objectToString$4;
      var nullTag$4 = "[object Null]", undefinedTag$4 = "[object Undefined]";
      var symToStringTag$5 = _Symbol$3 ? _Symbol$3.toStringTag : void 0;
      function baseGetTag$a(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag$4 : nullTag$4;
        }
        return symToStringTag$5 && symToStringTag$5 in Object(value) ? _getRawTag$3(value) : _objectToString$3(value);
      }
      var _baseGetTag$3 = baseGetTag$a;
      function isObject$e(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      var isObject_1$3 = isObject$e;
      var asyncTag$5 = "[object AsyncFunction]", funcTag$1$3 = "[object Function]", genTag$5 = "[object GeneratorFunction]", proxyTag$5 = "[object Proxy]";
      function isFunction$9(value) {
        if (!isObject_1$3(value)) {
          return false;
        }
        var tag = _baseGetTag$3(value);
        return tag == funcTag$1$3 || tag == genTag$5 || tag == asyncTag$5 || tag == proxyTag$5;
      }
      var isFunction_1$4 = isFunction$9;
      var coreJsData$7 = _root$3["__core-js_shared__"];
      var _coreJsData$4 = coreJsData$7;
      var maskSrcKey$5 = function() {
        var uid2 = /[^.]+$/.exec(_coreJsData$4 && _coreJsData$4.keys && _coreJsData$4.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      function isMasked$6(func) {
        return !!maskSrcKey$5 && maskSrcKey$5 in func;
      }
      var _isMasked$4 = isMasked$6;
      var funcProto$1$4 = Function.prototype;
      var funcToString$1$4 = funcProto$1$4.toString;
      function toSource$7(func) {
        if (func != null) {
          try {
            return funcToString$1$4.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      var _toSource$4 = toSource$7;
      var reRegExpChar$5 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor$5 = /^\[object .+?Constructor\]$/;
      var funcProto$9 = Function.prototype, objectProto$9$3 = Object.prototype;
      var funcToString$9 = funcProto$9.toString;
      var hasOwnProperty$7$3 = objectProto$9$3.hasOwnProperty;
      var reIsNative$5 = RegExp("^" + funcToString$9.call(hasOwnProperty$7$3).replace(reRegExpChar$5, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative$6(value) {
        if (!isObject_1$3(value) || _isMasked$4(value)) {
          return false;
        }
        var pattern = isFunction_1$4(value) ? reIsNative$5 : reIsHostCtor$5;
        return pattern.test(_toSource$4(value));
      }
      var _baseIsNative$4 = baseIsNative$6;
      function getValue$6(object, key) {
        return object == null ? void 0 : object[key];
      }
      var _getValue$4 = getValue$6;
      function getNative$c(object, key) {
        var value = _getValue$4(object, key);
        return _baseIsNative$4(value) ? value : void 0;
      }
      var _getNative$4 = getNative$c;
      (function() {
        try {
          var func = _getNative$4(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      })();
      function isObjectLike$c(value) {
        return value != null && typeof value == "object";
      }
      var isObjectLike_1$3 = isObjectLike$c;
      var argsTag$2$4 = "[object Arguments]";
      function baseIsArguments$6(value) {
        return isObjectLike_1$3(value) && _baseGetTag$3(value) == argsTag$2$4;
      }
      var _baseIsArguments$4 = baseIsArguments$6;
      var objectProto$8$3 = Object.prototype;
      var hasOwnProperty$6$3 = objectProto$8$3.hasOwnProperty;
      var propertyIsEnumerable$1$4 = objectProto$8$3.propertyIsEnumerable;
      _baseIsArguments$4(function() {
        return arguments;
      }()) ? _baseIsArguments$4 : function(value) {
        return isObjectLike_1$3(value) && hasOwnProperty$6$3.call(value, "callee") && !propertyIsEnumerable$1$4.call(value, "callee");
      };
      function stubFalse$5() {
        return false;
      }
      var stubFalse_1$4 = stubFalse$5;
      createCommonjsModule$e(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? _root$3.Buffer : void 0;
        var nativeIsBuffer2 = Buffer22 ? Buffer22.isBuffer : void 0;
        var isBuffer2 = nativeIsBuffer2 || stubFalse_1$4;
        module2.exports = isBuffer2;
      });
      var _nodeUtil$4 = createCommonjsModule$e(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var freeProcess2 = moduleExports2 && _freeGlobal$3.process;
        var nodeUtil2 = function() {
          try {
            var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
          } catch (e2) {
          }
        }();
        module2.exports = nodeUtil2;
      });
      _nodeUtil$4 && _nodeUtil$4.isTypedArray;
      function listCacheClear$5() {
        this.__data__ = [];
        this.size = 0;
      }
      var _listCacheClear$3 = listCacheClear$5;
      function eq$7(value, other) {
        return value === other || value !== value && other !== other;
      }
      var eq_1$3 = eq$7;
      function assocIndexOf$8(array, key) {
        var length = array.length;
        while (length--) {
          if (eq_1$3(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      var _assocIndexOf$3 = assocIndexOf$8;
      var arrayProto$4 = Array.prototype;
      var splice$6 = arrayProto$4.splice;
      function listCacheDelete$5(key) {
        var data = this.__data__, index2 = _assocIndexOf$3(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice$6.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      var _listCacheDelete$3 = listCacheDelete$5;
      function listCacheGet$5(key) {
        var data = this.__data__, index2 = _assocIndexOf$3(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      var _listCacheGet$3 = listCacheGet$5;
      function listCacheHas$5(key) {
        return _assocIndexOf$3(this.__data__, key) > -1;
      }
      var _listCacheHas$3 = listCacheHas$5;
      function listCacheSet$5(key, value) {
        var data = this.__data__, index2 = _assocIndexOf$3(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      var _listCacheSet$3 = listCacheSet$5;
      function ListCache$8(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache$8.prototype.clear = _listCacheClear$3;
      ListCache$8.prototype["delete"] = _listCacheDelete$3;
      ListCache$8.prototype.get = _listCacheGet$3;
      ListCache$8.prototype.has = _listCacheHas$3;
      ListCache$8.prototype.set = _listCacheSet$3;
      var _ListCache$3 = ListCache$8;
      var Map$a = _getNative$4(_root$3, "Map");
      var _Map$4 = Map$a;
      var nativeCreate$9 = _getNative$4(Object, "create");
      var _nativeCreate$3 = nativeCreate$9;
      function hashClear$5() {
        this.__data__ = _nativeCreate$3 ? _nativeCreate$3(null) : {};
        this.size = 0;
      }
      var _hashClear$3 = hashClear$5;
      function hashDelete$5(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      var _hashDelete$3 = hashDelete$5;
      var HASH_UNDEFINED$2$2 = "__lodash_hash_undefined__";
      var objectProto$4$3 = Object.prototype;
      var hasOwnProperty$3$3 = objectProto$4$3.hasOwnProperty;
      function hashGet$5(key) {
        var data = this.__data__;
        if (_nativeCreate$3) {
          var result = data[key];
          return result === HASH_UNDEFINED$2$2 ? void 0 : result;
        }
        return hasOwnProperty$3$3.call(data, key) ? data[key] : void 0;
      }
      var _hashGet$3 = hashGet$5;
      var objectProto$3$3 = Object.prototype;
      var hasOwnProperty$2$3 = objectProto$3$3.hasOwnProperty;
      function hashHas$5(key) {
        var data = this.__data__;
        return _nativeCreate$3 ? data[key] !== void 0 : hasOwnProperty$2$3.call(data, key);
      }
      var _hashHas$3 = hashHas$5;
      var HASH_UNDEFINED$1$3 = "__lodash_hash_undefined__";
      function hashSet$5(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = _nativeCreate$3 && value === void 0 ? HASH_UNDEFINED$1$3 : value;
        return this;
      }
      var _hashSet$3 = hashSet$5;
      function Hash$5(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash$5.prototype.clear = _hashClear$3;
      Hash$5.prototype["delete"] = _hashDelete$3;
      Hash$5.prototype.get = _hashGet$3;
      Hash$5.prototype.has = _hashHas$3;
      Hash$5.prototype.set = _hashSet$3;
      var _Hash$3 = Hash$5;
      function mapCacheClear$5() {
        this.size = 0;
        this.__data__ = {
          "hash": new _Hash$3(),
          "map": new (_Map$4 || _ListCache$3)(),
          "string": new _Hash$3()
        };
      }
      var _mapCacheClear$3 = mapCacheClear$5;
      function isKeyable$5(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      var _isKeyable$3 = isKeyable$5;
      function getMapData$8(map2, key) {
        var data = map2.__data__;
        return _isKeyable$3(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      var _getMapData$3 = getMapData$8;
      function mapCacheDelete$5(key) {
        var result = _getMapData$3(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      var _mapCacheDelete$3 = mapCacheDelete$5;
      function mapCacheGet$5(key) {
        return _getMapData$3(this, key).get(key);
      }
      var _mapCacheGet$3 = mapCacheGet$5;
      function mapCacheHas$5(key) {
        return _getMapData$3(this, key).has(key);
      }
      var _mapCacheHas$3 = mapCacheHas$5;
      function mapCacheSet$5(key, value) {
        var data = _getMapData$3(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      var _mapCacheSet$3 = mapCacheSet$5;
      function MapCache$7(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache$7.prototype.clear = _mapCacheClear$3;
      MapCache$7.prototype["delete"] = _mapCacheDelete$3;
      MapCache$7.prototype.get = _mapCacheGet$3;
      MapCache$7.prototype.has = _mapCacheHas$3;
      MapCache$7.prototype.set = _mapCacheSet$3;
      var _MapCache$3 = MapCache$7;
      _root$3.Uint8Array;
      var symbolProto$1$2 = _Symbol$3 ? _Symbol$3.prototype : void 0;
      symbolProto$1$2 ? symbolProto$1$2.valueOf : void 0;
      var DataView$7 = _getNative$4(_root$3, "DataView");
      var _DataView$4 = DataView$7;
      var Promise$1$4 = _getNative$4(_root$3, "Promise");
      var _Promise$4 = Promise$1$4;
      var Set$8 = _getNative$4(_root$3, "Set");
      var _Set$4 = Set$8;
      var WeakMap$7 = _getNative$4(_root$3, "WeakMap");
      var _WeakMap$4 = WeakMap$7;
      var mapTag$b = "[object Map]", objectTag$1$4 = "[object Object]", promiseTag$5 = "[object Promise]", setTag$b = "[object Set]", weakMapTag$7 = "[object WeakMap]";
      var dataViewTag$a = "[object DataView]";
      var dataViewCtorString$5 = _toSource$4(_DataView$4), mapCtorString$5 = _toSource$4(_Map$4), promiseCtorString$5 = _toSource$4(_Promise$4), setCtorString$5 = _toSource$4(_Set$4), weakMapCtorString$5 = _toSource$4(_WeakMap$4);
      var getTag$a = _baseGetTag$3;
      if (_DataView$4 && getTag$a(new _DataView$4(new ArrayBuffer(1))) != dataViewTag$a || _Map$4 && getTag$a(new _Map$4()) != mapTag$b || _Promise$4 && getTag$a(_Promise$4.resolve()) != promiseTag$5 || _Set$4 && getTag$a(new _Set$4()) != setTag$b || _WeakMap$4 && getTag$a(new _WeakMap$4()) != weakMapTag$7) {
        getTag$a = function(value) {
          var result = _baseGetTag$3(value), Ctor = result == objectTag$1$4 ? value.constructor : void 0, ctorString = Ctor ? _toSource$4(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString$5:
                return dataViewTag$a;
              case mapCtorString$5:
                return mapTag$b;
              case promiseCtorString$5:
                return promiseTag$5;
              case setCtorString$5:
                return setTag$b;
              case weakMapCtorString$5:
                return weakMapTag$7;
            }
          }
          return result;
        };
      }
      var FUNC_ERROR_TEXT$5 = "Expected a function";
      function memoize$4(func, resolver2) {
        if (typeof func != "function" || resolver2 != null && typeof resolver2 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT$5);
        }
        var memoized = function() {
          var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize$4.Cache || _MapCache$3)();
        return memoized;
      }
      memoize$4.Cache = _MapCache$3;
      var memoize_1$2 = memoize$4;
      var MAX_MEMOIZE_SIZE$3 = 500;
      function memoizeCapped$4(func) {
        var result = memoize_1$2(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE$3) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      var _memoizeCapped$2 = memoizeCapped$4;
      var rePropName$3 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar$3 = /\\(\\)?/g;
      _memoizeCapped$2(function(string2) {
        var result = [];
        if (string2.charCodeAt(0) === 46) {
          result.push("");
        }
        string2.replace(rePropName$3, function(match5, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar$3, "$1") : number || match5);
        });
        return result;
      });
      var symbolProto$8 = _Symbol$3 ? _Symbol$3.prototype : void 0;
      symbolProto$8 ? symbolProto$8.toString : void 0;
      var History = {
        isHistory(value) {
          return isPlainObject$4(value) && Array.isArray(value.redos) && Array.isArray(value.undos) && (value.redos.length === 0 || Operation.isOperationList(value.redos[0])) && (value.undos.length === 0 || Operation.isOperationList(value.undos[0]));
        }
      };
      var SAVING = /* @__PURE__ */ new WeakMap();
      var MERGING = /* @__PURE__ */ new WeakMap();
      var HistoryEditor = {
        isHistoryEditor(value) {
          return History.isHistory(value.history) && Editor$1.isEditor(value);
        },
        isMerging(editor) {
          return MERGING.get(editor);
        },
        isSaving(editor) {
          return SAVING.get(editor);
        },
        redo(editor) {
          editor.redo();
        },
        undo(editor) {
          editor.undo();
        },
        withoutMerging(editor, fn2) {
          var prev = HistoryEditor.isMerging(editor);
          MERGING.set(editor, false);
          fn2();
          MERGING.set(editor, prev);
        },
        withoutSaving(editor, fn2) {
          var prev = HistoryEditor.isSaving(editor);
          SAVING.set(editor, false);
          fn2();
          SAVING.set(editor, prev);
        }
      };
      var withHistory = (editor) => {
        var e2 = editor;
        var {
          apply: apply2
        } = e2;
        e2.history = {
          undos: [],
          redos: []
        };
        e2.redo = () => {
          var {
            history
          } = e2;
          var {
            redos
          } = history;
          if (redos.length > 0) {
            var batch = redos[redos.length - 1];
            HistoryEditor.withoutSaving(e2, () => {
              Editor$1.withoutNormalizing(e2, () => {
                for (var op of batch) {
                  e2.apply(op);
                }
              });
            });
            history.redos.pop();
            history.undos.push(batch);
          }
        };
        e2.undo = () => {
          var {
            history
          } = e2;
          var {
            undos
          } = history;
          if (undos.length > 0) {
            var batch = undos[undos.length - 1];
            HistoryEditor.withoutSaving(e2, () => {
              Editor$1.withoutNormalizing(e2, () => {
                var inverseOps = batch.map(Operation.inverse).reverse();
                for (var op of inverseOps) {
                  e2.apply(op);
                }
              });
            });
            history.redos.push(batch);
            history.undos.pop();
          }
        };
        e2.apply = (op) => {
          var {
            operations,
            history
          } = e2;
          var {
            undos
          } = history;
          var lastBatch = undos[undos.length - 1];
          var lastOp = lastBatch && lastBatch[lastBatch.length - 1];
          var overwrite = shouldOverwrite(op, lastOp);
          var save = HistoryEditor.isSaving(e2);
          var merge2 = HistoryEditor.isMerging(e2);
          if (save == null) {
            save = shouldSave(op);
          }
          if (save) {
            if (merge2 == null) {
              if (lastBatch == null) {
                merge2 = false;
              } else if (operations.length !== 0) {
                merge2 = true;
              } else {
                merge2 = shouldMerge(op, lastOp) || overwrite;
              }
            }
            if (lastBatch && merge2) {
              if (overwrite) {
                lastBatch.pop();
              }
              lastBatch.push(op);
            } else {
              var batch = [op];
              undos.push(batch);
            }
            while (undos.length > 100) {
              undos.shift();
            }
            if (shouldClear(op)) {
              history.redos = [];
            }
          }
          apply2(op);
        };
        return e2;
      };
      var shouldMerge = (op, prev) => {
        if (op.type === "set_selection") {
          return true;
        }
        if (prev && op.type === "insert_text" && prev.type === "insert_text" && op.offset === prev.offset + prev.text.length && Path.equals(op.path, prev.path)) {
          return true;
        }
        if (prev && op.type === "remove_text" && prev.type === "remove_text" && op.offset + op.text.length === prev.offset && Path.equals(op.path, prev.path)) {
          return true;
        }
        return false;
      };
      var shouldSave = (op, prev) => {
        if (op.type === "set_selection" && (op.properties == null || op.newProperties == null)) {
          return false;
        }
        return true;
      };
      var shouldOverwrite = (op, prev) => {
        if (prev && op.type === "set_selection" && prev.type === "set_selection") {
          return true;
        }
        return false;
      };
      var shouldClear = (op) => {
        if (op.type === "set_selection") {
          return false;
        }
        return true;
      };
      const capitalizeFirstLetter = (str = "") => str.length ? str[0].toUpperCase() + str.slice(1) : "";
      const getStoreIndex = (name2 = "") => name2.length ? `${name2}Store` : "store";
      const getUseStoreIndex = (name2 = "") => `use${capitalizeFirstLetter(name2)}Store`;
      const createAtomStore = (initialState2, {
        scope: storeScope,
        initialStore,
        name: name2 = ""
      } = {}) => {
        const useInitialStoreIndex = getUseStoreIndex(initialStore === null || initialStore === void 0 ? void 0 : initialStore.name);
        const initialStoreIndex = getStoreIndex(initialStore === null || initialStore === void 0 ? void 0 : initialStore.name);
        const useStoreIndex = getUseStoreIndex(name2);
        const storeIndex = getStoreIndex(name2);
        const getAtoms = initialStore ? initialStore[useInitialStoreIndex]().get : {};
        const setAtoms = initialStore ? initialStore[useInitialStoreIndex]().set : {};
        const useAtoms = initialStore ? initialStore[useInitialStoreIndex]().use : {};
        const atoms = initialStore ? initialStore[initialStoreIndex].atom : {};
        Object.keys(initialState2).forEach((key) => {
          const atomConfig = atom(initialState2[key]);
          atoms[key] = atomConfig;
          getAtoms[key] = (scope) => {
            return useAtomValue(atomConfig, scope !== null && scope !== void 0 ? scope : storeScope);
          };
          setAtoms[key] = (scope) => {
            return useSetAtom(atomConfig, scope !== null && scope !== void 0 ? scope : storeScope);
          };
          useAtoms[key] = (scope) => {
            return useAtom(atomConfig, scope !== null && scope !== void 0 ? scope : storeScope);
          };
        });
        const api = {
          [useStoreIndex]: () => ({
            get: getAtoms,
            set: setAtoms,
            use: useAtoms
          }),
          [storeIndex]: {
            atom: atoms
          },
          name: name2
        };
        return {
          ...api,
          [storeIndex]: {
            ...api[storeIndex],
            extend: (extendedState, options) => createAtomStore(extendedState, {
              scope: storeScope,
              initialStore: api,
              ...options
            })
          }
        };
      };
      const IS_APPLE = typeof navigator !== "undefined" && /Mac OS X/.test(navigator.userAgent);
      const findHtmlParentElement = (el2, nodeName) => {
        if (!el2 || el2.nodeName === nodeName) {
          return el2;
        }
        return findHtmlParentElement(el2.parentElement, nodeName);
      };
      var commonjsGlobal$2 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function unwrapExports$c(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$d(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$e = createCommonjsModule$d(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      var isHotkey$6 = unwrapExports$c(lib$e);
      lib$e.isHotkey;
      lib$e.isCodeHotkey;
      var lib_3 = lib$e.isKeyHotkey;
      lib$e.parseHotkey;
      lib$e.compareHotkey;
      lib$e.toKeyCode;
      lib$e.toKeyName;
      const isComposing = (editor) => ReactEditor.isComposing(editor);
      const HOTKEYS = {
        bold: "mod+b",
        compose: ["down", "left", "right", "up", "backspace", "enter"],
        deleteBackward: "shift?+backspace",
        deleteForward: "shift?+delete",
        extendBackward: "shift+left",
        extendForward: "shift+right",
        insertSoftBreak: "shift+enter",
        italic: "mod+i",
        moveBackward: "left",
        moveForward: "right",
        moveWordBackward: "ctrl+left",
        moveWordForward: "ctrl+right",
        splitBlock: "enter",
        tab: "tab",
        untab: "shift+tab",
        undo: "mod+z"
      };
      const APPLE_HOTKEYS = {
        deleteBackward: ["ctrl+backspace", "ctrl+h"],
        deleteForward: ["ctrl+delete", "ctrl+d"],
        deleteLineBackward: "cmd+shift?+backspace",
        deleteLineForward: ["cmd+shift?+delete", "ctrl+k"],
        deleteWordBackward: "opt+shift?+backspace",
        deleteWordForward: "opt+shift?+delete",
        extendLineBackward: "opt+shift+up",
        extendLineForward: "opt+shift+down",
        moveLineBackward: "opt+up",
        moveLineForward: "opt+down",
        moveWordBackward: "opt+left",
        moveWordForward: "opt+right",
        redo: "cmd+shift+z",
        transposeCharacter: "ctrl+t"
      };
      const WINDOWS_HOTKEYS = {
        deleteWordBackward: "ctrl+shift?+backspace",
        deleteWordForward: "ctrl+shift?+delete",
        redo: ["ctrl+y", "ctrl+shift+z"]
      };
      const create$1 = (key) => {
        const generic = HOTKEYS[key];
        const apple = APPLE_HOTKEYS[key];
        const windows = WINDOWS_HOTKEYS[key];
        const isGeneric = generic && lib_3(generic);
        const isApple = apple && lib_3(apple);
        const isWindows = windows && lib_3(windows);
        return (event) => {
          if (isGeneric && isGeneric(event))
            return true;
          if (IS_APPLE && isApple && isApple(event))
            return true;
          if (!IS_APPLE && isWindows && isWindows(event))
            return true;
          return false;
        };
      };
      const createComposing = (key) => (editor, event, {
        composing
      } = {}) => {
        if (!create$1(key)(event))
          return false;
        if (!!composing !== isComposing(editor))
          return false;
        return true;
      };
      const Hotkeys = {
        isBold: create$1("bold"),
        isCompose: create$1("compose"),
        isMoveBackward: create$1("moveBackward"),
        isMoveForward: create$1("moveForward"),
        isDeleteBackward: create$1("deleteBackward"),
        isDeleteForward: create$1("deleteForward"),
        isDeleteLineBackward: create$1("deleteLineBackward"),
        isDeleteLineForward: create$1("deleteLineForward"),
        isDeleteWordBackward: create$1("deleteWordBackward"),
        isDeleteWordForward: create$1("deleteWordForward"),
        isExtendBackward: create$1("extendBackward"),
        isExtendForward: create$1("extendForward"),
        isExtendLineBackward: create$1("extendLineBackward"),
        isExtendLineForward: create$1("extendLineForward"),
        isItalic: create$1("italic"),
        isMoveLineBackward: create$1("moveLineBackward"),
        isMoveLineForward: create$1("moveLineForward"),
        isMoveWordBackward: create$1("moveWordBackward"),
        isMoveWordForward: create$1("moveWordForward"),
        isRedo: create$1("redo"),
        isSoftBreak: create$1("insertSoftBreak"),
        isSplitBlock: create$1("splitBlock"),
        isTab: createComposing("tab"),
        isTransposeCharacter: create$1("transposeCharacter"),
        isUndo: create$1("undo"),
        isUntab: createComposing("untab")
      };
      Provider;
      const isUndefined$3 = (obj) => typeof obj === "undefined";
      const isNull = (obj) => obj === null;
      const isUndefinedOrNull = (obj) => isUndefined$3(obj) || isNull(obj);
      const isDefined$1 = (arg) => !isUndefinedOrNull(arg);
      function apply$1(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      var _apply = apply$1;
      function identity$4(value) {
        return value;
      }
      var identity_1$1 = identity$4;
      var nativeMax$2 = Math.max;
      function overRest$1(func, start, transform) {
        start = nativeMax$2(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index2 = -1, length = nativeMax$2(args.length - start, 0), array = Array(length);
          while (++index2 < length) {
            array[index2] = args[start + index2];
          }
          index2 = -1;
          var otherArgs = Array(start + 1);
          while (++index2 < start) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start] = transform(array);
          return _apply(func, this, otherArgs);
        };
      }
      var _overRest = overRest$1;
      function constant$1(value) {
        return function() {
          return value;
        };
      }
      var constant_1 = constant$1;
      var freeGlobal$4 = typeof commonjsGlobal$2 == "object" && commonjsGlobal$2 && commonjsGlobal$2.Object === Object && commonjsGlobal$2;
      var _freeGlobal$2 = freeGlobal$4;
      var freeSelf$3 = typeof self == "object" && self && self.Object === Object && self;
      var root$b = _freeGlobal$2 || freeSelf$3 || Function("return this")();
      var _root$2 = root$b;
      var Symbol$1$2 = _root$2.Symbol;
      var _Symbol$2 = Symbol$1$2;
      var objectProto$g$1 = Object.prototype;
      var hasOwnProperty$d$1 = objectProto$g$1.hasOwnProperty;
      var nativeObjectToString$1$3 = objectProto$g$1.toString;
      var symToStringTag$1$3 = _Symbol$2 ? _Symbol$2.toStringTag : void 0;
      function getRawTag$3(value) {
        var isOwn = hasOwnProperty$d$1.call(value, symToStringTag$1$3), tag = value[symToStringTag$1$3];
        try {
          value[symToStringTag$1$3] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString$1$3.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag$1$3] = tag;
          } else {
            delete value[symToStringTag$1$3];
          }
        }
        return result;
      }
      var _getRawTag$2 = getRawTag$3;
      var objectProto$f$1 = Object.prototype;
      var nativeObjectToString$4 = objectProto$f$1.toString;
      function objectToString$3(value) {
        return nativeObjectToString$4.call(value);
      }
      var _objectToString$2 = objectToString$3;
      var nullTag$3 = "[object Null]", undefinedTag$3 = "[object Undefined]";
      var symToStringTag$4 = _Symbol$2 ? _Symbol$2.toStringTag : void 0;
      function baseGetTag$9(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag$3 : nullTag$3;
        }
        return symToStringTag$4 && symToStringTag$4 in Object(value) ? _getRawTag$2(value) : _objectToString$2(value);
      }
      var _baseGetTag$2 = baseGetTag$9;
      function isObject$1$1(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      var isObject_1$2 = isObject$1$1;
      var asyncTag$4 = "[object AsyncFunction]", funcTag$2$3 = "[object Function]", genTag$1$3 = "[object GeneratorFunction]", proxyTag$4 = "[object Proxy]";
      function isFunction$8(value) {
        if (!isObject_1$2(value)) {
          return false;
        }
        var tag = _baseGetTag$2(value);
        return tag == funcTag$2$3 || tag == genTag$1$3 || tag == asyncTag$4 || tag == proxyTag$4;
      }
      var isFunction_1$3 = isFunction$8;
      var coreJsData$6 = _root$2["__core-js_shared__"];
      var _coreJsData$3 = coreJsData$6;
      var maskSrcKey$4 = function() {
        var uid2 = /[^.]+$/.exec(_coreJsData$3 && _coreJsData$3.keys && _coreJsData$3.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      function isMasked$5(func) {
        return !!maskSrcKey$4 && maskSrcKey$4 in func;
      }
      var _isMasked$3 = isMasked$5;
      var funcProto$2$1 = Function.prototype;
      var funcToString$2$1 = funcProto$2$1.toString;
      function toSource$6(func) {
        if (func != null) {
          try {
            return funcToString$2$1.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      var _toSource$3 = toSource$6;
      var reRegExpChar$4 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor$4 = /^\[object .+?Constructor\]$/;
      var funcProto$1$3 = Function.prototype, objectProto$e$1 = Object.prototype;
      var funcToString$1$3 = funcProto$1$3.toString;
      var hasOwnProperty$c$1 = objectProto$e$1.hasOwnProperty;
      var reIsNative$4 = RegExp("^" + funcToString$1$3.call(hasOwnProperty$c$1).replace(reRegExpChar$4, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative$5(value) {
        if (!isObject_1$2(value) || _isMasked$3(value)) {
          return false;
        }
        var pattern = isFunction_1$3(value) ? reIsNative$4 : reIsHostCtor$4;
        return pattern.test(_toSource$3(value));
      }
      var _baseIsNative$3 = baseIsNative$5;
      function getValue$5(object, key) {
        return object == null ? void 0 : object[key];
      }
      var _getValue$3 = getValue$5;
      function getNative$b(object, key) {
        var value = _getValue$3(object, key);
        return _baseIsNative$3(value) ? value : void 0;
      }
      var _getNative$3 = getNative$b;
      var defineProperty$6 = function() {
        try {
          var func = _getNative$3(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      }();
      var _defineProperty$1$1 = defineProperty$6;
      var baseSetToString$2 = !_defineProperty$1$1 ? identity_1$1 : function(func, string2) {
        return _defineProperty$1$1(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant_1(string2),
          "writable": true
        });
      };
      var _baseSetToString = baseSetToString$2;
      var HOT_COUNT$1 = 800, HOT_SPAN$1 = 16;
      var nativeNow$1 = Date.now;
      function shortOut$1(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow$1(), remaining = HOT_SPAN$1 - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT$1) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      var _shortOut = shortOut$1;
      var setToString$2 = _shortOut(_baseSetToString);
      var _setToString = setToString$2;
      function baseRest$1(func, start) {
        return _setToString(_overRest(func, start, identity_1$1), func + "");
      }
      var _baseRest = baseRest$1;
      function listCacheClear$4() {
        this.__data__ = [];
        this.size = 0;
      }
      var _listCacheClear$2 = listCacheClear$4;
      function eq$6(value, other) {
        return value === other || value !== value && other !== other;
      }
      var eq_1$2 = eq$6;
      function assocIndexOf$7(array, key) {
        var length = array.length;
        while (length--) {
          if (eq_1$2(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      var _assocIndexOf$2 = assocIndexOf$7;
      var arrayProto$3 = Array.prototype;
      var splice$5 = arrayProto$3.splice;
      function listCacheDelete$4(key) {
        var data = this.__data__, index2 = _assocIndexOf$2(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice$5.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      var _listCacheDelete$2 = listCacheDelete$4;
      function listCacheGet$4(key) {
        var data = this.__data__, index2 = _assocIndexOf$2(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      var _listCacheGet$2 = listCacheGet$4;
      function listCacheHas$4(key) {
        return _assocIndexOf$2(this.__data__, key) > -1;
      }
      var _listCacheHas$2 = listCacheHas$4;
      function listCacheSet$4(key, value) {
        var data = this.__data__, index2 = _assocIndexOf$2(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      var _listCacheSet$2 = listCacheSet$4;
      function ListCache$7(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache$7.prototype.clear = _listCacheClear$2;
      ListCache$7.prototype["delete"] = _listCacheDelete$2;
      ListCache$7.prototype.get = _listCacheGet$2;
      ListCache$7.prototype.has = _listCacheHas$2;
      ListCache$7.prototype.set = _listCacheSet$2;
      var _ListCache$2 = ListCache$7;
      function stackClear$4() {
        this.__data__ = new _ListCache$2();
        this.size = 0;
      }
      var _stackClear$2 = stackClear$4;
      function stackDelete$4(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      var _stackDelete$2 = stackDelete$4;
      function stackGet$4(key) {
        return this.__data__.get(key);
      }
      var _stackGet$2 = stackGet$4;
      function stackHas$4(key) {
        return this.__data__.has(key);
      }
      var _stackHas$2 = stackHas$4;
      var Map$9 = _getNative$3(_root$2, "Map");
      var _Map$3 = Map$9;
      var nativeCreate$8 = _getNative$3(Object, "create");
      var _nativeCreate$2 = nativeCreate$8;
      function hashClear$4() {
        this.__data__ = _nativeCreate$2 ? _nativeCreate$2(null) : {};
        this.size = 0;
      }
      var _hashClear$2 = hashClear$4;
      function hashDelete$4(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      var _hashDelete$2 = hashDelete$4;
      var HASH_UNDEFINED$2$1 = "__lodash_hash_undefined__";
      var objectProto$d$1 = Object.prototype;
      var hasOwnProperty$b$1 = objectProto$d$1.hasOwnProperty;
      function hashGet$4(key) {
        var data = this.__data__;
        if (_nativeCreate$2) {
          var result = data[key];
          return result === HASH_UNDEFINED$2$1 ? void 0 : result;
        }
        return hasOwnProperty$b$1.call(data, key) ? data[key] : void 0;
      }
      var _hashGet$2 = hashGet$4;
      var objectProto$c$3 = Object.prototype;
      var hasOwnProperty$a$1 = objectProto$c$3.hasOwnProperty;
      function hashHas$4(key) {
        var data = this.__data__;
        return _nativeCreate$2 ? data[key] !== void 0 : hasOwnProperty$a$1.call(data, key);
      }
      var _hashHas$2 = hashHas$4;
      var HASH_UNDEFINED$1$2 = "__lodash_hash_undefined__";
      function hashSet$4(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = _nativeCreate$2 && value === void 0 ? HASH_UNDEFINED$1$2 : value;
        return this;
      }
      var _hashSet$2 = hashSet$4;
      function Hash$4(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash$4.prototype.clear = _hashClear$2;
      Hash$4.prototype["delete"] = _hashDelete$2;
      Hash$4.prototype.get = _hashGet$2;
      Hash$4.prototype.has = _hashHas$2;
      Hash$4.prototype.set = _hashSet$2;
      var _Hash$2 = Hash$4;
      function mapCacheClear$4() {
        this.size = 0;
        this.__data__ = {
          "hash": new _Hash$2(),
          "map": new (_Map$3 || _ListCache$2)(),
          "string": new _Hash$2()
        };
      }
      var _mapCacheClear$2 = mapCacheClear$4;
      function isKeyable$4(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      var _isKeyable$2 = isKeyable$4;
      function getMapData$7(map2, key) {
        var data = map2.__data__;
        return _isKeyable$2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      var _getMapData$2 = getMapData$7;
      function mapCacheDelete$4(key) {
        var result = _getMapData$2(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      var _mapCacheDelete$2 = mapCacheDelete$4;
      function mapCacheGet$4(key) {
        return _getMapData$2(this, key).get(key);
      }
      var _mapCacheGet$2 = mapCacheGet$4;
      function mapCacheHas$4(key) {
        return _getMapData$2(this, key).has(key);
      }
      var _mapCacheHas$2 = mapCacheHas$4;
      function mapCacheSet$4(key, value) {
        var data = _getMapData$2(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      var _mapCacheSet$2 = mapCacheSet$4;
      function MapCache$6(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache$6.prototype.clear = _mapCacheClear$2;
      MapCache$6.prototype["delete"] = _mapCacheDelete$2;
      MapCache$6.prototype.get = _mapCacheGet$2;
      MapCache$6.prototype.has = _mapCacheHas$2;
      MapCache$6.prototype.set = _mapCacheSet$2;
      var _MapCache$2 = MapCache$6;
      var LARGE_ARRAY_SIZE$3 = 200;
      function stackSet$4(key, value) {
        var data = this.__data__;
        if (data instanceof _ListCache$2) {
          var pairs = data.__data__;
          if (!_Map$3 || pairs.length < LARGE_ARRAY_SIZE$3 - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new _MapCache$2(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      var _stackSet$2 = stackSet$4;
      function Stack$6(entries) {
        var data = this.__data__ = new _ListCache$2(entries);
        this.size = data.size;
      }
      Stack$6.prototype.clear = _stackClear$2;
      Stack$6.prototype["delete"] = _stackDelete$2;
      Stack$6.prototype.get = _stackGet$2;
      Stack$6.prototype.has = _stackHas$2;
      Stack$6.prototype.set = _stackSet$2;
      var _Stack$2 = Stack$6;
      function baseAssignValue$5(object, key, value) {
        if (key == "__proto__" && _defineProperty$1$1) {
          _defineProperty$1$1(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      var _baseAssignValue$2 = baseAssignValue$5;
      function assignMergeValue$1(object, key, value) {
        if (value !== void 0 && !eq_1$2(object[key], value) || value === void 0 && !(key in object)) {
          _baseAssignValue$2(object, key, value);
        }
      }
      var _assignMergeValue = assignMergeValue$1;
      function createBaseFor$3(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      var _createBaseFor$1 = createBaseFor$3;
      var baseFor$4 = _createBaseFor$1();
      var _baseFor$1 = baseFor$4;
      var _cloneBuffer$2 = createCommonjsModule$d(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? _root$2.Buffer : void 0, allocUnsafe2 = Buffer22 ? Buffer22.allocUnsafe : void 0;
        function cloneBuffer2(buffer2, isDeep) {
          if (isDeep) {
            return buffer2.slice();
          }
          var length = buffer2.length, result = allocUnsafe2 ? allocUnsafe2(length) : new buffer2.constructor(length);
          buffer2.copy(result);
          return result;
        }
        module2.exports = cloneBuffer2;
      });
      var Uint8Array$6 = _root$2.Uint8Array;
      var _Uint8Array$2 = Uint8Array$6;
      function cloneArrayBuffer$6(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new _Uint8Array$2(result).set(new _Uint8Array$2(arrayBuffer));
        return result;
      }
      var _cloneArrayBuffer$2 = cloneArrayBuffer$6;
      function cloneTypedArray$4(typedArray, isDeep) {
        var buffer2 = isDeep ? _cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
      }
      var _cloneTypedArray$2 = cloneTypedArray$4;
      function copyArray$4(source, array) {
        var index2 = -1, length = source.length;
        array || (array = Array(length));
        while (++index2 < length) {
          array[index2] = source[index2];
        }
        return array;
      }
      var _copyArray$2 = copyArray$4;
      var objectCreate$3 = Object.create;
      var baseCreate$5 = function() {
        function object() {
        }
        return function(proto2) {
          if (!isObject_1$2(proto2)) {
            return {};
          }
          if (objectCreate$3) {
            return objectCreate$3(proto2);
          }
          object.prototype = proto2;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      var _baseCreate$2 = baseCreate$5;
      function overArg$5(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      var _overArg$2 = overArg$5;
      var getPrototype$7 = _overArg$2(Object.getPrototypeOf, Object);
      var _getPrototype$2 = getPrototype$7;
      var objectProto$b$3 = Object.prototype;
      function isPrototype$6(value) {
        var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$b$3;
        return value === proto2;
      }
      var _isPrototype$2 = isPrototype$6;
      function initCloneObject$4(object) {
        return typeof object.constructor == "function" && !_isPrototype$2(object) ? _baseCreate$2(_getPrototype$2(object)) : {};
      }
      var _initCloneObject$2 = initCloneObject$4;
      function isObjectLike$b(value) {
        return value != null && typeof value == "object";
      }
      var isObjectLike_1$2 = isObjectLike$b;
      var argsTag$3$1 = "[object Arguments]";
      function baseIsArguments$5(value) {
        return isObjectLike_1$2(value) && _baseGetTag$2(value) == argsTag$3$1;
      }
      var _baseIsArguments$3 = baseIsArguments$5;
      var objectProto$a$3 = Object.prototype;
      var hasOwnProperty$9$3 = objectProto$a$3.hasOwnProperty;
      var propertyIsEnumerable$1$3 = objectProto$a$3.propertyIsEnumerable;
      var isArguments$6 = _baseIsArguments$3(function() {
        return arguments;
      }()) ? _baseIsArguments$3 : function(value) {
        return isObjectLike_1$2(value) && hasOwnProperty$9$3.call(value, "callee") && !propertyIsEnumerable$1$3.call(value, "callee");
      };
      var isArguments_1$2 = isArguments$6;
      var isArray$j = Array.isArray;
      var isArray_1$4 = isArray$j;
      var MAX_SAFE_INTEGER$1$2 = 9007199254740991;
      function isLength$6(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1$2;
      }
      var isLength_1$2 = isLength$6;
      function isArrayLike$7(value) {
        return value != null && isLength_1$2(value.length) && !isFunction_1$3(value);
      }
      var isArrayLike_1$2 = isArrayLike$7;
      function isArrayLikeObject$1(value) {
        return isObjectLike_1$2(value) && isArrayLike_1$2(value);
      }
      var isArrayLikeObject_1 = isArrayLikeObject$1;
      function stubFalse$4() {
        return false;
      }
      var stubFalse_1$3 = stubFalse$4;
      var isBuffer_1$1 = createCommonjsModule$d(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? _root$2.Buffer : void 0;
        var nativeIsBuffer2 = Buffer22 ? Buffer22.isBuffer : void 0;
        var isBuffer2 = nativeIsBuffer2 || stubFalse_1$3;
        module2.exports = isBuffer2;
      });
      var objectTag$4$1 = "[object Object]";
      var funcProto$8 = Function.prototype, objectProto$9$2 = Object.prototype;
      var funcToString$8 = funcProto$8.toString;
      var hasOwnProperty$8$3 = objectProto$9$2.hasOwnProperty;
      var objectCtorString$2 = funcToString$8.call(Object);
      function isPlainObject$1$1(value) {
        if (!isObjectLike_1$2(value) || _baseGetTag$2(value) != objectTag$4$1) {
          return false;
        }
        var proto2 = _getPrototype$2(value);
        if (proto2 === null) {
          return true;
        }
        var Ctor = hasOwnProperty$8$3.call(proto2, "constructor") && proto2.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString$8.call(Ctor) == objectCtorString$2;
      }
      var isPlainObject_1$1 = isPlainObject$1$1;
      var argsTag$2$3 = "[object Arguments]", arrayTag$2$1 = "[object Array]", boolTag$3$1 = "[object Boolean]", dateTag$3$1 = "[object Date]", errorTag$2$1 = "[object Error]", funcTag$1$2 = "[object Function]", mapTag$5$1 = "[object Map]", numberTag$3$1 = "[object Number]", objectTag$3$1 = "[object Object]", regexpTag$3$1 = "[object RegExp]", setTag$5$1 = "[object Set]", stringTag$3$1 = "[object String]", weakMapTag$2$2 = "[object WeakMap]";
      var arrayBufferTag$3$1 = "[object ArrayBuffer]", dataViewTag$4$1 = "[object DataView]", float32Tag$2$2 = "[object Float32Array]", float64Tag$2$2 = "[object Float64Array]", int8Tag$2$2 = "[object Int8Array]", int16Tag$2$2 = "[object Int16Array]", int32Tag$2$2 = "[object Int32Array]", uint8Tag$2$2 = "[object Uint8Array]", uint8ClampedTag$2$2 = "[object Uint8ClampedArray]", uint16Tag$2$2 = "[object Uint16Array]", uint32Tag$2$2 = "[object Uint32Array]";
      var typedArrayTags$3 = {};
      typedArrayTags$3[float32Tag$2$2] = typedArrayTags$3[float64Tag$2$2] = typedArrayTags$3[int8Tag$2$2] = typedArrayTags$3[int16Tag$2$2] = typedArrayTags$3[int32Tag$2$2] = typedArrayTags$3[uint8Tag$2$2] = typedArrayTags$3[uint8ClampedTag$2$2] = typedArrayTags$3[uint16Tag$2$2] = typedArrayTags$3[uint32Tag$2$2] = true;
      typedArrayTags$3[argsTag$2$3] = typedArrayTags$3[arrayTag$2$1] = typedArrayTags$3[arrayBufferTag$3$1] = typedArrayTags$3[boolTag$3$1] = typedArrayTags$3[dataViewTag$4$1] = typedArrayTags$3[dateTag$3$1] = typedArrayTags$3[errorTag$2$1] = typedArrayTags$3[funcTag$1$2] = typedArrayTags$3[mapTag$5$1] = typedArrayTags$3[numberTag$3$1] = typedArrayTags$3[objectTag$3$1] = typedArrayTags$3[regexpTag$3$1] = typedArrayTags$3[setTag$5$1] = typedArrayTags$3[stringTag$3$1] = typedArrayTags$3[weakMapTag$2$2] = false;
      function baseIsTypedArray$4(value) {
        return isObjectLike_1$2(value) && isLength_1$2(value.length) && !!typedArrayTags$3[_baseGetTag$2(value)];
      }
      var _baseIsTypedArray$2 = baseIsTypedArray$4;
      function baseUnary$6(func) {
        return function(value) {
          return func(value);
        };
      }
      var _baseUnary$2 = baseUnary$6;
      var _nodeUtil$3 = createCommonjsModule$d(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var freeProcess2 = moduleExports2 && _freeGlobal$2.process;
        var nodeUtil2 = function() {
          try {
            var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
          } catch (e2) {
          }
        }();
        module2.exports = nodeUtil2;
      });
      var nodeIsTypedArray$3 = _nodeUtil$3 && _nodeUtil$3.isTypedArray;
      var isTypedArray$6 = nodeIsTypedArray$3 ? _baseUnary$2(nodeIsTypedArray$3) : _baseIsTypedArray$2;
      var isTypedArray_1$2 = isTypedArray$6;
      function safeGet$1(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var _safeGet = safeGet$1;
      var objectProto$8$2 = Object.prototype;
      var hasOwnProperty$7$2 = objectProto$8$2.hasOwnProperty;
      function assignValue$5(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty$7$2.call(object, key) && eq_1$2(objValue, value)) || value === void 0 && !(key in object)) {
          _baseAssignValue$2(object, key, value);
        }
      }
      var _assignValue$2 = assignValue$5;
      function copyObject$7(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index2 = -1, length = props.length;
        while (++index2 < length) {
          var key = props[index2];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            _baseAssignValue$2(object, key, newValue);
          } else {
            _assignValue$2(object, key, newValue);
          }
        }
        return object;
      }
      var _copyObject$2 = copyObject$7;
      function baseTimes$4(n2, iteratee) {
        var index2 = -1, result = Array(n2);
        while (++index2 < n2) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      var _baseTimes$2 = baseTimes$4;
      var MAX_SAFE_INTEGER$5 = 9007199254740991;
      var reIsUint$3 = /^(?:0|[1-9]\d*)$/;
      function isIndex$5(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER$5 : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint$3.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      var _isIndex$2 = isIndex$5;
      var objectProto$7$2 = Object.prototype;
      var hasOwnProperty$6$2 = objectProto$7$2.hasOwnProperty;
      function arrayLikeKeys$5(value, inherited) {
        var isArr = isArray_1$4(value), isArg = !isArr && isArguments_1$2(value), isBuff = !isArr && !isArg && isBuffer_1$1(value), isType2 = !isArr && !isArg && !isBuff && isTypedArray_1$2(value), skipIndexes = isArr || isArg || isBuff || isType2, result = skipIndexes ? _baseTimes$2(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty$6$2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || _isIndex$2(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      var _arrayLikeKeys$2 = arrayLikeKeys$5;
      function nativeKeysIn$4(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      var _nativeKeysIn$2 = nativeKeysIn$4;
      var objectProto$6$3 = Object.prototype;
      var hasOwnProperty$5$2 = objectProto$6$3.hasOwnProperty;
      function baseKeysIn$4(object) {
        if (!isObject_1$2(object)) {
          return _nativeKeysIn$2(object);
        }
        var isProto = _isPrototype$2(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty$5$2.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      var _baseKeysIn$2 = baseKeysIn$4;
      function keysIn$6(object) {
        return isArrayLike_1$2(object) ? _arrayLikeKeys$2(object, true) : _baseKeysIn$2(object);
      }
      var keysIn_1$2 = keysIn$6;
      function toPlainObject$1(value) {
        return _copyObject$2(value, keysIn_1$2(value));
      }
      var toPlainObject_1 = toPlainObject$1;
      function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = _safeGet(object, key), srcValue = _safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          _assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray_1$4(srcValue), isBuff = !isArr && isBuffer_1$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray_1$2(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray_1$4(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject_1(objValue)) {
              newValue = _copyArray$2(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = _cloneBuffer$2(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = _cloneTypedArray$2(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject_1$1(srcValue) || isArguments_1$2(srcValue)) {
            newValue = objValue;
            if (isArguments_1$2(objValue)) {
              newValue = toPlainObject_1(objValue);
            } else if (!isObject_1$2(objValue) || isFunction_1$3(objValue)) {
              newValue = _initCloneObject$2(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        _assignMergeValue(object, key, newValue);
      }
      var _baseMergeDeep = baseMergeDeep$1;
      function baseMerge$1(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        _baseFor$1(source, function(srcValue, key) {
          stack || (stack = new _Stack$2());
          if (isObject_1$2(srcValue)) {
            _baseMergeDeep(object, source, key, srcIndex, baseMerge$1, customizer, stack);
          } else {
            var newValue = customizer ? customizer(_safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            _assignMergeValue(object, key, newValue);
          }
        }, keysIn_1$2);
      }
      var _baseMerge = baseMerge$1;
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject_1$2(objValue) && isObject_1$2(srcValue)) {
          stack.set(srcValue, objValue);
          _baseMerge(objValue, srcValue, void 0, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      var _customDefaultsMerge = customDefaultsMerge;
      function isIterateeCall$1(value, index2, object) {
        if (!isObject_1$2(object)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike_1$2(object) && _isIndex$2(index2, object.length) : type == "string" && index2 in object) {
          return eq_1$2(object[index2], value);
        }
        return false;
      }
      var _isIterateeCall = isIterateeCall$1;
      function createAssigner$1(assigner) {
        return _baseRest(function(object, sources) {
          var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index2 < length) {
            var source = sources[index2];
            if (source) {
              assigner(object, source, index2, customizer);
            }
          }
          return object;
        });
      }
      var _createAssigner = createAssigner$1;
      var mergeWith = _createAssigner(function(object, source, srcIndex, customizer) {
        _baseMerge(object, source, srcIndex, customizer);
      });
      var mergeWith_1 = mergeWith;
      var defaultsDeep = _baseRest(function(args) {
        args.push(void 0, _customDefaultsMerge);
        return _apply(mergeWith_1, void 0, args);
      });
      var defaultsDeep_1 = defaultsDeep;
      const overridePluginsByKey = (plugin, overrideByKey = {}, nested) => {
        var _overrideByKey$plugin;
        if (overrideByKey[plugin.key]) {
          const {
            plugins: pluginOverridesPlugins,
            then: pluginOverridesThen,
            ...pluginOverrides
          } = overrideByKey[plugin.key];
          plugin = defaultsDeep_1(pluginOverrides, plugin);
          if (!nested) {
            pluginOverridesPlugins === null || pluginOverridesPlugins === void 0 ? void 0 : pluginOverridesPlugins.forEach((pOverrides) => {
              if (!plugin.plugins)
                plugin.plugins = [];
              const found = plugin.plugins.find((p2) => p2.key === pOverrides.key);
              if (!found)
                plugin.plugins.push(pOverrides);
            });
          }
        }
        if (plugin.plugins) {
          plugin.plugins = plugin.plugins.map((p2) => overridePluginsByKey(p2, overrideByKey, true));
        }
        const {
          then
        } = plugin;
        if (then) {
          plugin.then = (editor, p2) => {
            const pluginThen = {
              key: plugin.key,
              ...then(editor, p2)
            };
            return defaultsDeep_1(overridePluginsByKey(pluginThen, overrideByKey), pluginThen);
          };
        } else if ((_overrideByKey$plugin = overrideByKey[plugin.key]) !== null && _overrideByKey$plugin !== void 0 && _overrideByKey$plugin.then) {
          plugin.then = overrideByKey[plugin.key].then;
        }
        return plugin;
      };
      const createPluginFactory = (defaultPlugin) => (override, overrideByKey = {}) => {
        overrideByKey[defaultPlugin.key] = override;
        return overridePluginsByKey({
          ...defaultPlugin
        }, overrideByKey);
      };
      const KEY_DESERIALIZE_AST = "deserializeAst";
      const createDeserializeAstPlugin = createPluginFactory({
        key: KEY_DESERIALIZE_AST,
        editor: {
          insertData: {
            format: "application/x-slate-fragment",
            getFragment: ({
              data
            }) => {
              const decoded = decodeURIComponent(window.atob(data));
              return JSON.parse(decoded);
            }
          }
        }
      });
      const eventEditorStore = createStore("event-editor")({
        blur: null,
        focus: null,
        last: null
      });
      const eventEditorActions = eventEditorStore.set;
      const eventEditorSelectors = eventEditorStore.get;
      eventEditorStore.use;
      const KEY_EVENT_EDITOR = "event-editor";
      const createEventEditorPlugin = createPluginFactory({
        key: KEY_EVENT_EDITOR,
        handlers: {
          onFocus: (editor) => () => {
            eventEditorActions.focus(editor.id);
          },
          onBlur: (editor) => () => {
            const focus = eventEditorSelectors.focus();
            if (focus === editor.id) {
              eventEditorActions.focus(null);
            }
            eventEditorActions.blur(editor.id);
          }
        }
      });
      const withTHistory = (editor) => withHistory(editor);
      const createHistoryPlugin = createPluginFactory({
        key: "history",
        withOverrides: withTHistory
      });
      const KEY_INLINE_VOID = "inline-void";
      const withInlineVoid = (editor) => {
        const {
          isInline: isInline2
        } = editor;
        const {
          isVoid: isVoid2
        } = editor;
        const inlineTypes = [];
        const voidTypes = [];
        editor.plugins.forEach((plugin) => {
          if (plugin.isInline) {
            inlineTypes.push(plugin.type);
          }
          if (plugin.isVoid) {
            voidTypes.push(plugin.type);
          }
        });
        editor.isInline = (element) => {
          return inlineTypes.includes(element.type) ? true : isInline2(element);
        };
        editor.isVoid = (element) => voidTypes.includes(element.type) ? true : isVoid2(element);
        return editor;
      };
      const createInlineVoidPlugin = createPluginFactory({
        key: KEY_INLINE_VOID,
        withOverrides: withInlineVoid
      });
      const getInjectedPlugins = (editor, plugin) => {
        const injectedPlugins = [];
        [...editor.plugins].reverse().forEach((p2) => {
          var _p$inject$pluginsByKe;
          const injectedPlugin = (_p$inject$pluginsByKe = p2.inject.pluginsByKey) === null || _p$inject$pluginsByKe === void 0 ? void 0 : _p$inject$pluginsByKe[plugin.key];
          if (injectedPlugin)
            injectedPlugins.push(injectedPlugin);
        });
        return [plugin, ...injectedPlugins];
      };
      const pipeInsertDataQuery = (plugins, {
        data,
        dataTransfer
      }) => plugins.every((p2) => {
        var _p$editor, _p$editor$insertData;
        const query = (_p$editor = p2.editor) === null || _p$editor === void 0 ? void 0 : (_p$editor$insertData = _p$editor.insertData) === null || _p$editor$insertData === void 0 ? void 0 : _p$editor$insertData.query;
        return !query || query({
          data,
          dataTransfer
        });
      });
      const withoutNormalizing = (editor, fn2) => {
        let normalized = false;
        Editor$1.withoutNormalizing(editor, () => {
          normalized = !!fn2();
        });
        return normalized;
      };
      const pipeInsertFragment = (editor, injectedPlugins, {
        fragment,
        ...options
      }) => {
        withoutNormalizing(editor, () => {
          injectedPlugins.some((p2) => {
            var _p$editor, _p$editor$insertData, _p$editor$insertData$;
            return ((_p$editor = p2.editor) === null || _p$editor === void 0 ? void 0 : (_p$editor$insertData = _p$editor.insertData) === null || _p$editor$insertData === void 0 ? void 0 : (_p$editor$insertData$ = _p$editor$insertData.preInsert) === null || _p$editor$insertData$ === void 0 ? void 0 : _p$editor$insertData$.call(_p$editor$insertData, fragment, options)) === true;
          });
          editor.insertFragment(fragment);
        });
      };
      const pipeTransformData = (plugins, {
        data,
        dataTransfer
      }) => {
        plugins.forEach((p2) => {
          var _p$editor, _p$editor$insertData;
          const transformData = (_p$editor = p2.editor) === null || _p$editor === void 0 ? void 0 : (_p$editor$insertData = _p$editor.insertData) === null || _p$editor$insertData === void 0 ? void 0 : _p$editor$insertData.transformData;
          if (!transformData)
            return;
          data = transformData(data, {
            dataTransfer
          });
        });
        return data;
      };
      const pipeTransformFragment = (plugins, {
        fragment,
        ...options
      }) => {
        plugins.forEach((p2) => {
          var _p$editor, _p$editor$insertData;
          const transformFragment = (_p$editor = p2.editor) === null || _p$editor === void 0 ? void 0 : (_p$editor$insertData = _p$editor.insertData) === null || _p$editor$insertData === void 0 ? void 0 : _p$editor$insertData.transformFragment;
          if (!transformFragment)
            return;
          fragment = transformFragment(fragment, options);
        });
        return fragment;
      };
      const withInsertData = (editor) => {
        const {
          insertData
        } = editor;
        editor.insertData = (dataTransfer) => {
          const inserted = [...editor.plugins].reverse().some((plugin) => {
            var _fragment;
            const insertDataOptions = plugin.editor.insertData;
            if (!insertDataOptions)
              return false;
            const injectedPlugins = getInjectedPlugins(editor, plugin);
            const {
              format: format2,
              getFragment
            } = insertDataOptions;
            if (!format2)
              return false;
            let data = dataTransfer.getData(format2);
            if (!data)
              return;
            if (!pipeInsertDataQuery(injectedPlugins, {
              data,
              dataTransfer
            })) {
              return false;
            }
            data = pipeTransformData(injectedPlugins, {
              data,
              dataTransfer
            });
            let fragment = getFragment === null || getFragment === void 0 ? void 0 : getFragment({
              data,
              dataTransfer
            });
            if (!((_fragment = fragment) !== null && _fragment !== void 0 && _fragment.length))
              return false;
            fragment = pipeTransformFragment(injectedPlugins, {
              fragment,
              data,
              dataTransfer
            });
            if (!fragment.length)
              return false;
            pipeInsertFragment(editor, injectedPlugins, {
              fragment,
              data,
              dataTransfer
            });
            return true;
          });
          if (inserted)
            return;
          insertData(dataTransfer);
        };
        return editor;
      };
      const KEY_INSERT_DATA = "insertData";
      const createInsertDataPlugin = createPluginFactory({
        key: KEY_INSERT_DATA,
        withOverrides: withInsertData
      });
      const withTReact = (editor) => withReact(editor);
      const createReactPlugin = createPluginFactory({
        key: "react",
        withOverrides: withTReact
      });
      const isElement = (value) => Element$1.isElement(value);
      const isText = (value) => Text.isText(value);
      const ELEMENT_DEFAULT = "p";
      const createTEditor = () => createEditor$1();
      const createPlateStore = (state = {}) => createStore(`plate-${state.id}`)({
        id: "main",
        value: [{
          type: ELEMENT_DEFAULT,
          children: [{
            text: ""
          }]
        }],
        editor: null,
        isReady: false,
        isRendered: false,
        keyEditor: 1,
        keyPlugins: 1,
        keySelection: 1,
        keyDecorate: 1,
        decorate: null,
        enabled: true,
        editableProps: null,
        onChange: null,
        plugins: [],
        renderElement: null,
        renderLeaf: null,
        ...state
      }).extendActions((_set, _get) => ({
        resetEditor: () => {
          var _get$editor;
          _set.editor(withPlate(createTEditor(), {
            id: state.id,
            plugins: (_get$editor = _get.editor()) === null || _get$editor === void 0 ? void 0 : _get$editor.plugins
          }));
        },
        incrementKey: (key) => {
          var _get$key;
          const prev = (_get$key = _get[key]()) !== null && _get$key !== void 0 ? _get$key : 1;
          _set[key](prev + 1);
        }
      })).extendActions((_set) => ({
        redecorate: () => {
          _set.incrementKey("keyDecorate");
        }
      }));
      const getPluginsByKey = (editor) => {
        var _ref;
        return (_ref = editor === null || editor === void 0 ? void 0 : editor.pluginsByKey) !== null && _ref !== void 0 ? _ref : {};
      };
      const getPlugin = (editor, key) => {
        var _getPluginsByKey$key;
        return (_getPluginsByKey$key = getPluginsByKey(editor)[key]) !== null && _getPluginsByKey$key !== void 0 ? _getPluginsByKey$key : {
          key
        };
      };
      const getPluginType = (editor, key) => {
        var _ref, _getPlugin$type;
        return (_ref = (_getPlugin$type = getPlugin(editor, key).type) !== null && _getPlugin$type !== void 0 ? _getPlugin$type : key) !== null && _ref !== void 0 ? _ref : "";
      };
      const isInlineNode = (editor) => (node) => isText(node) || isElement(node) && editor.isInline(node);
      const makeBlockLazy = (type) => () => ({
        type,
        children: []
      });
      const hasDifferentChildNodes = (descendants, isInline2) => {
        return descendants.some((descendant, index2, arr) => {
          const prevDescendant = arr[index2 - 1];
          if (index2 !== 0) {
            return isInline2(descendant) !== isInline2(prevDescendant);
          }
          return false;
        });
      };
      const normalizeDifferentNodeTypes = (descendants, isInline2, makeDefaultBlock) => {
        const hasDifferentNodes = hasDifferentChildNodes(descendants, isInline2);
        const {
          fragment
        } = descendants.reduce((memo, node) => {
          if (hasDifferentNodes && isInline2(node)) {
            let block = memo.precedingBlock;
            if (!block) {
              block = makeDefaultBlock();
              memo.precedingBlock = block;
              memo.fragment.push(block);
            }
            block.children.push(node);
          } else {
            memo.fragment.push(node);
            memo.precedingBlock = null;
          }
          return memo;
        }, {
          fragment: [],
          precedingBlock: null
        });
        return fragment;
      };
      const normalizeEmptyChildren = (descendants) => {
        if (!descendants.length) {
          return [{
            text: ""
          }];
        }
        return descendants;
      };
      const normalize$1 = (descendants, isInline2, makeDefaultBlock) => {
        descendants = normalizeEmptyChildren(descendants);
        descendants = normalizeDifferentNodeTypes(descendants, isInline2, makeDefaultBlock);
        descendants = descendants.map((node) => {
          if (isElement(node)) {
            return {
              ...node,
              children: normalize$1(node.children, isInline2, makeDefaultBlock)
            };
          }
          return node;
        });
        return descendants;
      };
      const normalizeDescendantsToDocumentFragment = (editor, {
        descendants
      }) => {
        const isInline2 = isInlineNode(editor);
        const defaultType = getPluginType(editor, ELEMENT_DEFAULT);
        const makeDefaultBlock = makeBlockLazy(defaultType);
        return normalize$1(descendants, isInline2, makeDefaultBlock);
      };
      function isObject$d(o2) {
        return Object.prototype.toString.call(o2) === "[object Object]";
      }
      function isPlainObject$3(o2) {
        var ctor, prot;
        if (isObject$d(o2) === false)
          return false;
        ctor = o2.constructor;
        if (ctor === void 0)
          return true;
        prot = ctor.prototype;
        if (isObject$d(prot) === false)
          return false;
        if (prot.hasOwnProperty("isPrototypeOf") === false) {
          return false;
        }
        return true;
      }
      function _defineProperty$7(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var ANCHOR = /* @__PURE__ */ new WeakMap();
      var FOCUS = /* @__PURE__ */ new WeakMap();
      class Token {
      }
      class AnchorToken extends Token {
        constructor() {
          var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          super();
          var {
            offset: offset2,
            path
          } = props;
          this.offset = offset2;
          this.path = path;
        }
      }
      class FocusToken extends Token {
        constructor() {
          var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          super();
          var {
            offset: offset2,
            path
          } = props;
          this.offset = offset2;
          this.path = path;
        }
      }
      var addAnchorToken = (text2, token2) => {
        var offset2 = text2.text.length;
        ANCHOR.set(text2, [offset2, token2]);
      };
      var getAnchorOffset = (text2) => {
        return ANCHOR.get(text2);
      };
      var addFocusToken = (text2, token2) => {
        var offset2 = text2.text.length;
        FOCUS.set(text2, [offset2, token2]);
      };
      var getFocusOffset = (text2) => {
        return FOCUS.get(text2);
      };
      function ownKeys$1$1(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$1$1(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$1$1(Object(source), true).forEach(function(key) {
              _defineProperty$7(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$1$1(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var STRINGS = /* @__PURE__ */ new WeakSet();
      var resolveDescendants = (children) => {
        var nodes = [];
        var addChild = (child2) => {
          if (child2 == null) {
            return;
          }
          var prev = nodes[nodes.length - 1];
          if (typeof child2 === "string") {
            var text2 = {
              text: child2
            };
            STRINGS.add(text2);
            child2 = text2;
          }
          if (Text.isText(child2)) {
            var c2 = child2;
            if (Text.isText(prev) && STRINGS.has(prev) && STRINGS.has(c2) && Text.equals(prev, c2, {
              loose: true
            })) {
              prev.text += c2.text;
            } else {
              nodes.push(c2);
            }
          } else if (Element$1.isElement(child2)) {
            nodes.push(child2);
          } else if (child2 instanceof Token) {
            var n2 = nodes[nodes.length - 1];
            if (!Text.isText(n2)) {
              addChild("");
              n2 = nodes[nodes.length - 1];
            }
            if (child2 instanceof AnchorToken) {
              addAnchorToken(n2, child2);
            } else if (child2 instanceof FocusToken) {
              addFocusToken(n2, child2);
            }
          } else {
            throw new Error("Unexpected hyperscript child object: ".concat(child2));
          }
        };
        for (var child of children.flat(Infinity)) {
          addChild(child);
        }
        return nodes;
      };
      function createAnchor(tagName, attributes, children) {
        return new AnchorToken(attributes);
      }
      function createCursor(tagName, attributes, children) {
        return [new AnchorToken(attributes), new FocusToken(attributes)];
      }
      function createElement231(tagName, attributes, children) {
        return _objectSpread$1$1(_objectSpread$1$1({}, attributes), {}, {
          children: resolveDescendants(children)
        });
      }
      function createFocus(tagName, attributes, children) {
        return new FocusToken(attributes);
      }
      function createFragment(tagName, attributes, children) {
        return resolveDescendants(children);
      }
      function createSelection(tagName, attributes, children) {
        var anchor = children.find((c2) => c2 instanceof AnchorToken);
        var focus = children.find((c2) => c2 instanceof FocusToken);
        if (!anchor || anchor.offset == null || anchor.path == null) {
          throw new Error("The <selection> hyperscript tag must have an <anchor> tag as a child with `path` and `offset` attributes defined.");
        }
        if (!focus || focus.offset == null || focus.path == null) {
          throw new Error("The <selection> hyperscript tag must have a <focus> tag as a child with `path` and `offset` attributes defined.");
        }
        return _objectSpread$1$1({
          anchor: {
            offset: anchor.offset,
            path: anchor.path
          },
          focus: {
            offset: focus.offset,
            path: focus.path
          }
        }, attributes);
      }
      function createText(tagName, attributes, children) {
        var nodes = resolveDescendants(children);
        if (nodes.length > 1) {
          throw new Error("The <text> hyperscript tag must only contain a single node's worth of children.");
        }
        var [node] = nodes;
        if (node == null) {
          node = {
            text: ""
          };
        }
        if (!Text.isText(node)) {
          throw new Error("\n    The <text> hyperscript tag can only contain text content as children.");
        }
        STRINGS.delete(node);
        Object.assign(node, attributes);
        return node;
      }
      var createEditor = (makeEditor) => (tagName, attributes, children) => {
        var otherChildren = [];
        var selectionChild;
        for (var child of children) {
          if (Range.isRange(child)) {
            selectionChild = child;
          } else {
            otherChildren.push(child);
          }
        }
        var descendants = resolveDescendants(otherChildren);
        var selection = {};
        var editor = makeEditor();
        Object.assign(editor, attributes);
        editor.children = descendants;
        for (var [node, path] of Node$1.texts(editor)) {
          var anchor = getAnchorOffset(node);
          var focus = getFocusOffset(node);
          if (anchor != null) {
            var [offset2] = anchor;
            selection.anchor = {
              path,
              offset: offset2
            };
          }
          if (focus != null) {
            var [_offset] = focus;
            selection.focus = {
              path,
              offset: _offset
            };
          }
        }
        if (selection.anchor && !selection.focus) {
          throw new Error("Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<anchor />`. For collapsed selections, use `<cursor />` instead.");
        }
        if (!selection.anchor && selection.focus) {
          throw new Error("Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<focus />`. For collapsed selections, use `<cursor />` instead.");
        }
        if (selectionChild != null) {
          editor.selection = selectionChild;
        } else if (Range.isRange(selection)) {
          editor.selection = selection;
        }
        return editor;
      };
      function ownKeys$4(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$2(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$4(Object(source), true).forEach(function(key) {
              _defineProperty$7(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$4(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var DEFAULT_CREATORS = {
        anchor: createAnchor,
        cursor: createCursor,
        editor: createEditor(createEditor$1),
        element: createElement231,
        focus: createFocus,
        fragment: createFragment,
        selection: createSelection,
        text: createText
      };
      var createHyperscript = function createHyperscript2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var {
          elements = {}
        } = options;
        var elementCreators = normalizeElements(elements);
        var creators = _objectSpread$2(_objectSpread$2(_objectSpread$2({}, DEFAULT_CREATORS), elementCreators), options.creators);
        var jsx2 = createFactory(creators);
        return jsx2;
      };
      var createFactory = (creators) => {
        var jsx2 = function jsx3(tagName, attributes) {
          for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            children[_key - 2] = arguments[_key];
          }
          var creator = creators[tagName];
          if (!creator) {
            throw new Error("No hyperscript creator found for tag: <".concat(tagName, ">"));
          }
          if (attributes == null) {
            attributes = {};
          }
          if (!isPlainObject$3(attributes)) {
            children = [attributes].concat(children);
            attributes = {};
          }
          children = children.filter((child) => Boolean(child)).flat();
          var ret = creator(tagName, attributes, children);
          return ret;
        };
        return jsx2;
      };
      var normalizeElements = (elements) => {
        var creators = {};
        var _loop = function _loop4(tagName2) {
          var props = elements[tagName2];
          if (typeof props !== "object") {
            throw new Error("Properties specified for a hyperscript shorthand should be an object, but for the custom element <".concat(tagName2, ">  tag you passed: ").concat(props));
          }
          creators[tagName2] = (tagName3, attributes, children) => {
            return createElement231("element", _objectSpread$2(_objectSpread$2({}, props), attributes), children);
          };
        };
        for (var tagName in elements) {
          _loop(tagName);
        }
        return creators;
      };
      var jsx = createHyperscript();
      const deserializeHtmlNodeChildren = (editor, node) => Array.from(node.childNodes).map(deserializeHtmlNode(editor)).flat();
      const htmlBodyToFragment = (editor, element) => {
        if (element.nodeName === "BODY") {
          return jsx("fragment", {}, deserializeHtmlNodeChildren(editor, element));
        }
      };
      const htmlBrToNewLine = (node) => {
        if (node.nodeName === "BR") {
          return "\n";
        }
      };
      function castArray$2() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray_1$4(value) ? value : [value];
      }
      var castArray_1$2 = castArray$2;
      const pluginDeserializeHtml = (editor, plugin, {
        element: el2,
        deserializeLeaf
      }) => {
        var _getNode;
        const {
          deserializeHtml: deserializeHtml2,
          isElement: isElementRoot,
          isLeaf: isLeafRoot,
          type
        } = plugin;
        if (!deserializeHtml2)
          return;
        const {
          attributeNames,
          query,
          isLeaf: isLeafRule,
          isElement: isElementRule,
          rules
        } = deserializeHtml2;
        let {
          getNode: getNode2
        } = deserializeHtml2;
        const isElement2 = isElementRule || isElementRoot;
        const isLeaf = isLeafRule || isLeafRoot;
        if (!deserializeLeaf && !isElement2) {
          return;
        }
        if (deserializeLeaf && !isLeaf) {
          return;
        }
        if (rules) {
          const isValid2 = rules.some(({
            validNodeName = "*",
            validStyle,
            validClassName,
            validAttribute
          }) => {
            if (validNodeName) {
              const validNodeNames = castArray_1$2(validNodeName);
              if (validNodeNames.length && !validNodeNames.includes(el2.nodeName) && validNodeName !== "*")
                return false;
            }
            if (validClassName && !el2.classList.contains(validClassName))
              return false;
            if (validStyle) {
              for (const [key, value] of Object.entries(validStyle)) {
                var _plugin$inject$props;
                const values2 = castArray_1$2(value);
                if (!values2.includes(el2.style[key]) && value !== "*")
                  return;
                if (value === "*" && !el2.style[key])
                  return;
                const defaultNodeValue = (_plugin$inject$props = plugin.inject.props) === null || _plugin$inject$props === void 0 ? void 0 : _plugin$inject$props.defaultNodeValue;
                if (defaultNodeValue && defaultNodeValue === el2.style[key]) {
                  return false;
                }
              }
            }
            if (validAttribute) {
              if (typeof validAttribute === "string") {
                if (!el2.getAttributeNames().includes(validAttribute))
                  return false;
              } else {
                for (const [attributeName, attributeValue] of Object.entries(validAttribute)) {
                  const attributeValues = castArray_1$2(attributeValue);
                  const elAttribute = el2.getAttribute(attributeName);
                  if (!elAttribute || !attributeValues.includes(elAttribute))
                    return false;
                }
              }
            }
            return true;
          });
          if (!isValid2)
            return;
        }
        if (query && !query(el2)) {
          return;
        }
        if (!getNode2) {
          if (isElement2) {
            getNode2 = () => ({
              type
            });
          } else if (isLeaf) {
            getNode2 = () => ({
              [type]: true
            });
          } else {
            return;
          }
        }
        let node = (_getNode = getNode2(el2, {})) !== null && _getNode !== void 0 ? _getNode : {};
        if (!Object.keys(node).length)
          return;
        const injectedPlugins = getInjectedPlugins(editor, plugin);
        injectedPlugins.forEach((injectedPlugin) => {
          var _injectedPlugin$deser, _injectedPlugin$deser2;
          const res = (_injectedPlugin$deser = injectedPlugin.deserializeHtml) === null || _injectedPlugin$deser === void 0 ? void 0 : (_injectedPlugin$deser2 = _injectedPlugin$deser.getNode) === null || _injectedPlugin$deser2 === void 0 ? void 0 : _injectedPlugin$deser2.call(_injectedPlugin$deser, el2, node);
          if (res) {
            node = {
              ...node,
              ...res
            };
          }
        });
        if (attributeNames) {
          const elementAttributes = {};
          const elementAttributeNames = el2.getAttributeNames();
          for (const elementAttributeName of elementAttributeNames) {
            if (attributeNames.includes(elementAttributeName)) {
              elementAttributes[elementAttributeName] = el2.getAttribute(elementAttributeName);
            }
          }
          if (Object.keys(elementAttributes).length) {
            node.attributes = elementAttributes;
          }
        }
        return {
          ...deserializeHtml2,
          node
        };
      };
      const pipeDeserializeHtmlElement = (editor, element) => {
        let result;
        [...editor.plugins].reverse().some((plugin) => {
          result = pluginDeserializeHtml(editor, plugin, {
            element
          });
          return !!result;
        });
        return result;
      };
      const htmlElementToElement = (editor, element) => {
        const deserialized = pipeDeserializeHtmlElement(editor, element);
        if (deserialized) {
          var _node$children;
          const {
            node,
            withoutChildren
          } = deserialized;
          let descendants = (_node$children = node.children) !== null && _node$children !== void 0 ? _node$children : deserializeHtmlNodeChildren(editor, element);
          if (!descendants.length || withoutChildren) {
            descendants = [{
              text: ""
            }];
          }
          return jsx("element", node, descendants);
        }
      };
      var merge$3 = _createAssigner(function(object, source, srcIndex) {
        _baseMerge(object, source, srcIndex);
      });
      var merge_1$1 = merge$3;
      const getNodeEntry = (editor, at, options) => Editor$1.node(editor, at, options);
      const getPath$1 = (editor, at, options) => Editor$1.path(editor, at, options);
      const isVoid = (editor, value) => {
        return Editor$1.isVoid(editor, value);
      };
      const getNodeDescendants = (root2, options) => Node$1.descendants(root2, options);
      const isBlock = (editor, value) => Editor$1.isBlock(editor, value);
      const match = (obj, path, predicate) => {
        if (!predicate)
          return true;
        if (typeof predicate === "object") {
          return Object.entries(predicate).every(([key, value]) => {
            const values2 = castArray_1$2(value);
            return values2.includes(obj[key]);
          });
        }
        return predicate(obj, path);
      };
      const getQueryOptions = (editor, options = {}) => {
        const {
          match: _match,
          block
        } = options;
        return {
          ...options,
          match: _match || block ? (n2, path) => match(n2, path, _match) && (!block || isBlock(editor, n2)) : void 0
        };
      };
      const findDescendant = (editor, options) => {
        try {
          const {
            match: _match,
            at = editor.selection,
            reverse = false,
            voids = false
          } = options;
          if (!at)
            return;
          let from2;
          let to2;
          if (Span.isSpan(at)) {
            [from2, to2] = at;
          } else if (Range.isRange(at)) {
            const first = getPath$1(editor, at, {
              edge: "start"
            });
            const last2 = getPath$1(editor, at, {
              edge: "end"
            });
            from2 = reverse ? last2 : first;
            to2 = reverse ? first : last2;
          }
          let root2 = [editor, []];
          if (Path.isPath(at)) {
            root2 = getNodeEntry(editor, at);
          }
          const nodeEntries = getNodeDescendants(root2[0], {
            reverse,
            from: from2,
            to: to2,
            pass: ([n2]) => voids ? false : isVoid(editor, n2)
          });
          for (const [node, path] of nodeEntries) {
            if (match(node, path, _match)) {
              return [node, at.concat(path)];
            }
          }
        } catch (error) {
          return void 0;
        }
      };
      const unhangRange = (editor, range, options = {}) => {
        const {
          voids,
          unhang = true
        } = options;
        if (Range.isRange(range) && unhang) {
          return Editor$1.unhangRange(editor, range, {
            voids
          });
        }
      };
      const getNodeEntries = (editor, options) => {
        unhangRange(editor, options === null || options === void 0 ? void 0 : options.at, options);
        return Editor$1.nodes(editor, getQueryOptions(editor, options));
      };
      const findNode = (editor, options = {}) => {
        try {
          const nodeEntries = getNodeEntries(editor, {
            at: editor.selection || [],
            ...getQueryOptions(editor, options)
          });
          for (const [node, path] of nodeEntries) {
            return [node, path];
          }
        } catch (error) {
          return void 0;
        }
      };
      const getAboveNode = (editor, options) => Editor$1.above(editor, getQueryOptions(editor, options));
      const getBlockAbove = (editor, options = {}) => getAboveNode(editor, {
        ...options,
        block: true
      });
      const isAncestor = (value) => Element$1.isAncestor(value);
      const getChildren = (nodeEntry) => {
        const [node, path] = nodeEntry;
        if (isAncestor(node)) {
          const {
            children
          } = node;
          return children.map((child, index2) => {
            const childPath = path.concat([index2]);
            return [child, childPath];
          });
        }
        return [];
      };
      const getLastChild$1 = (nodeEntry) => {
        const [node, path] = nodeEntry;
        if (isText(node))
          return null;
        if (!node.children.length)
          return null;
        const children = node.children;
        return [children[children.length - 1], path.concat([children.length - 1])];
      };
      const getLastChildPath = (nodeEntry) => {
        const lastChild = getLastChild$1(nodeEntry);
        if (!lastChild)
          return nodeEntry[1].concat([-1]);
        return lastChild[1];
      };
      const isLastChild = (parentEntry, childPath) => {
        const lastChildPath = getLastChildPath(parentEntry);
        return Path.equals(lastChildPath, childPath);
      };
      const getLastNode = (editor, at) => Editor$1.last(editor, at);
      const getLastChild = (node, level) => {
        if (!(level + 1) || !isAncestor(node))
          return node;
        const {
          children
        } = node;
        const lastNode = children[children.length - 1];
        return getLastChild(lastNode, level - 1);
      };
      const getLastNodeByLevel = (editor, level) => {
        const {
          children
        } = editor;
        const lastNode = children[children.length - 1];
        if (!lastNode)
          return;
        const [, lastPath] = getLastNode(editor, []);
        return [getLastChild(lastNode, level - 1), lastPath.slice(0, level + 1)];
      };
      const getMarks = (editor) => Editor$1.marks(editor);
      const getMark = (editor, type) => {
        if (!editor)
          return;
        const marks = getMarks(editor);
        return marks === null || marks === void 0 ? void 0 : marks[type];
      };
      const getNextSiblingNodes = (ancestorEntry, path) => {
        const [ancestor, ancestorPath] = ancestorEntry;
        const leafIndex = path[ancestorPath.length];
        const siblings = [];
        const ancestorChildren = ancestor.children;
        if (leafIndex + 1 < ancestor.children.length) {
          for (let i2 = leafIndex + 1; i2 < ancestor.children.length; i2++) {
            siblings.push(ancestorChildren[i2]);
          }
        }
        return siblings;
      };
      function arrayMap$4(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index2 < length) {
          result[index2] = iteratee(array[index2], index2, array);
        }
        return result;
      }
      var _arrayMap$1 = arrayMap$4;
      var HASH_UNDEFINED$7 = "__lodash_hash_undefined__";
      function setCacheAdd$3(value) {
        this.__data__.set(value, HASH_UNDEFINED$7);
        return this;
      }
      var _setCacheAdd$1 = setCacheAdd$3;
      function setCacheHas$3(value) {
        return this.__data__.has(value);
      }
      var _setCacheHas$1 = setCacheHas$3;
      function SetCache$3(values2) {
        var index2 = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new _MapCache$2();
        while (++index2 < length) {
          this.add(values2[index2]);
        }
      }
      SetCache$3.prototype.add = SetCache$3.prototype.push = _setCacheAdd$1;
      SetCache$3.prototype.has = _setCacheHas$1;
      var _SetCache$1 = SetCache$3;
      function arraySome$3(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (predicate(array[index2], index2, array)) {
            return true;
          }
        }
        return false;
      }
      var _arraySome$1 = arraySome$3;
      function cacheHas$3(cache, key) {
        return cache.has(key);
      }
      var _cacheHas$1 = cacheHas$3;
      var COMPARE_PARTIAL_FLAG$5$1 = 1, COMPARE_UNORDERED_FLAG$3$1 = 2;
      function equalArrays$4(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5$1, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3$1 ? new _SetCache$1() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index2 < arrLength) {
          var arrValue = array[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!_arraySome$1(other, function(othValue2, othIndex) {
              if (!_cacheHas$1(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      var _equalArrays$1 = equalArrays$4;
      function mapToArray$3(map2) {
        var index2 = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      var _mapToArray$1 = mapToArray$3;
      function setToArray$3(set2) {
        var index2 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      var _setToArray$1 = setToArray$3;
      var COMPARE_PARTIAL_FLAG$4$1 = 1, COMPARE_UNORDERED_FLAG$2$1 = 2;
      var boolTag$2$2 = "[object Boolean]", dateTag$2$2 = "[object Date]", errorTag$1$2 = "[object Error]", mapTag$4$2 = "[object Map]", numberTag$2$2 = "[object Number]", regexpTag$2$2 = "[object RegExp]", setTag$4$2 = "[object Set]", stringTag$2$2 = "[object String]", symbolTag$3$1 = "[object Symbol]";
      var arrayBufferTag$2$2 = "[object ArrayBuffer]", dataViewTag$3$2 = "[object DataView]";
      var symbolProto$2$1 = _Symbol$2 ? _Symbol$2.prototype : void 0, symbolValueOf$1$1 = symbolProto$2$1 ? symbolProto$2$1.valueOf : void 0;
      function equalByTag$3(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag$3$2:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag$2$2:
            if (object.byteLength != other.byteLength || !equalFunc(new _Uint8Array$2(object), new _Uint8Array$2(other))) {
              return false;
            }
            return true;
          case boolTag$2$2:
          case dateTag$2$2:
          case numberTag$2$2:
            return eq_1$2(+object, +other);
          case errorTag$1$2:
            return object.name == other.name && object.message == other.message;
          case regexpTag$2$2:
          case stringTag$2$2:
            return object == other + "";
          case mapTag$4$2:
            var convert = _mapToArray$1;
          case setTag$4$2:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4$1;
            convert || (convert = _setToArray$1);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG$2$1;
            stack.set(object, other);
            var result = _equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag$3$1:
            if (symbolValueOf$1$1) {
              return symbolValueOf$1$1.call(object) == symbolValueOf$1$1.call(other);
            }
        }
        return false;
      }
      var _equalByTag$1 = equalByTag$3;
      function arrayPush$5(array, values2) {
        var index2 = -1, length = values2.length, offset2 = array.length;
        while (++index2 < length) {
          array[offset2 + index2] = values2[index2];
        }
        return array;
      }
      var _arrayPush$2 = arrayPush$5;
      function baseGetAllKeys$5(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray_1$4(object) ? result : _arrayPush$2(result, symbolsFunc(object));
      }
      var _baseGetAllKeys$2 = baseGetAllKeys$5;
      function arrayFilter$4(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array[index2];
          if (predicate(value, index2, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      var _arrayFilter$2 = arrayFilter$4;
      function stubArray$5() {
        return [];
      }
      var stubArray_1$2 = stubArray$5;
      var objectProto$5$2 = Object.prototype;
      var propertyIsEnumerable$5 = objectProto$5$2.propertyIsEnumerable;
      var nativeGetSymbols$1$2 = Object.getOwnPropertySymbols;
      var getSymbols$7 = !nativeGetSymbols$1$2 ? stubArray_1$2 : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return _arrayFilter$2(nativeGetSymbols$1$2(object), function(symbol) {
          return propertyIsEnumerable$5.call(object, symbol);
        });
      };
      var _getSymbols$2 = getSymbols$7;
      var nativeKeys$5 = _overArg$2(Object.keys, Object);
      var _nativeKeys$2 = nativeKeys$5;
      var objectProto$4$2 = Object.prototype;
      var hasOwnProperty$4$3 = objectProto$4$2.hasOwnProperty;
      function baseKeys$4(object) {
        if (!_isPrototype$2(object)) {
          return _nativeKeys$2(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty$4$3.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      var _baseKeys$2 = baseKeys$4;
      function keys$a(object) {
        return isArrayLike_1$2(object) ? _arrayLikeKeys$2(object) : _baseKeys$2(object);
      }
      var keys_1$2 = keys$a;
      function getAllKeys$5(object) {
        return _baseGetAllKeys$2(object, keys_1$2, _getSymbols$2);
      }
      var _getAllKeys$2 = getAllKeys$5;
      var COMPARE_PARTIAL_FLAG$3$1 = 1;
      var objectProto$3$2 = Object.prototype;
      var hasOwnProperty$3$2 = objectProto$3$2.hasOwnProperty;
      function equalObjects$3(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3$1, objProps = _getAllKeys$2(object), objLength = objProps.length, othProps = _getAllKeys$2(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty$3$2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      var _equalObjects$1 = equalObjects$3;
      var DataView$6 = _getNative$3(_root$2, "DataView");
      var _DataView$3 = DataView$6;
      var Promise$1$3 = _getNative$3(_root$2, "Promise");
      var _Promise$3 = Promise$1$3;
      var Set$7 = _getNative$3(_root$2, "Set");
      var _Set$3 = Set$7;
      var WeakMap$1$1 = _getNative$3(_root$2, "WeakMap");
      var _WeakMap$3 = WeakMap$1$1;
      var mapTag$3$3 = "[object Map]", objectTag$2$2 = "[object Object]", promiseTag$4 = "[object Promise]", setTag$3$3 = "[object Set]", weakMapTag$1$3 = "[object WeakMap]";
      var dataViewTag$2$3 = "[object DataView]";
      var dataViewCtorString$4 = _toSource$3(_DataView$3), mapCtorString$4 = _toSource$3(_Map$3), promiseCtorString$4 = _toSource$3(_Promise$3), setCtorString$4 = _toSource$3(_Set$3), weakMapCtorString$4 = _toSource$3(_WeakMap$3);
      var getTag$9 = _baseGetTag$2;
      if (_DataView$3 && getTag$9(new _DataView$3(new ArrayBuffer(1))) != dataViewTag$2$3 || _Map$3 && getTag$9(new _Map$3()) != mapTag$3$3 || _Promise$3 && getTag$9(_Promise$3.resolve()) != promiseTag$4 || _Set$3 && getTag$9(new _Set$3()) != setTag$3$3 || _WeakMap$3 && getTag$9(new _WeakMap$3()) != weakMapTag$1$3) {
        getTag$9 = function(value) {
          var result = _baseGetTag$2(value), Ctor = result == objectTag$2$2 ? value.constructor : void 0, ctorString = Ctor ? _toSource$3(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString$4:
                return dataViewTag$2$3;
              case mapCtorString$4:
                return mapTag$3$3;
              case promiseCtorString$4:
                return promiseTag$4;
              case setCtorString$4:
                return setTag$3$3;
              case weakMapCtorString$4:
                return weakMapTag$1$3;
            }
          }
          return result;
        };
      }
      var _getTag$2 = getTag$9;
      var COMPARE_PARTIAL_FLAG$2$1 = 1;
      var argsTag$1$2 = "[object Arguments]", arrayTag$1$2 = "[object Array]", objectTag$1$3 = "[object Object]";
      var objectProto$2$2 = Object.prototype;
      var hasOwnProperty$2$2 = objectProto$2$2.hasOwnProperty;
      function baseIsEqualDeep$3(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray_1$4(object), othIsArr = isArray_1$4(other), objTag = objIsArr ? arrayTag$1$2 : _getTag$2(object), othTag = othIsArr ? arrayTag$1$2 : _getTag$2(other);
        objTag = objTag == argsTag$1$2 ? objectTag$1$3 : objTag;
        othTag = othTag == argsTag$1$2 ? objectTag$1$3 : othTag;
        var objIsObj = objTag == objectTag$1$3, othIsObj = othTag == objectTag$1$3, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer_1$1(object)) {
          if (!isBuffer_1$1(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new _Stack$2());
          return objIsArr || isTypedArray_1$2(object) ? _equalArrays$1(object, other, bitmask, customizer, equalFunc, stack) : _equalByTag$1(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG$2$1)) {
          var objIsWrapped = objIsObj && hasOwnProperty$2$2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$2$2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new _Stack$2());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new _Stack$2());
        return _equalObjects$1(object, other, bitmask, customizer, equalFunc, stack);
      }
      var _baseIsEqualDeep$1 = baseIsEqualDeep$3;
      function baseIsEqual$4(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike_1$2(value) && !isObjectLike_1$2(other)) {
          return value !== value && other !== other;
        }
        return _baseIsEqualDeep$1(value, other, bitmask, customizer, baseIsEqual$4, stack);
      }
      var _baseIsEqual$1 = baseIsEqual$4;
      var COMPARE_PARTIAL_FLAG$1$1 = 1, COMPARE_UNORDERED_FLAG$1$1 = 2;
      function baseIsMatch$3(object, source, matchData, customizer) {
        var index2 = matchData.length, length = index2, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index2 < length) {
          data = matchData[index2];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new _Stack$2();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? _baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1$1 | COMPARE_UNORDERED_FLAG$1$1, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      var _baseIsMatch$1 = baseIsMatch$3;
      function isStrictComparable$4(value) {
        return value === value && !isObject_1$2(value);
      }
      var _isStrictComparable$1 = isStrictComparable$4;
      function getMatchData$3(object) {
        var result = keys_1$2(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, _isStrictComparable$1(value)];
        }
        return result;
      }
      var _getMatchData$1 = getMatchData$3;
      function matchesStrictComparable$4(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      var _matchesStrictComparable$1 = matchesStrictComparable$4;
      function baseMatches$3(source) {
        var matchData = _getMatchData$1(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return _matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || _baseIsMatch$1(object, source, matchData);
        };
      }
      var _baseMatches$1 = baseMatches$3;
      var symbolTag$2$1 = "[object Symbol]";
      function isSymbol$4(value) {
        return typeof value == "symbol" || isObjectLike_1$2(value) && _baseGetTag$2(value) == symbolTag$2$1;
      }
      var isSymbol_1 = isSymbol$4;
      var reIsDeepProp$2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp$2 = /^\w*$/;
      function isKey$5(value, object) {
        if (isArray_1$4(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_1(value)) {
          return true;
        }
        return reIsPlainProp$2.test(value) || !reIsDeepProp$2.test(value) || object != null && value in Object(object);
      }
      var _isKey$1 = isKey$5;
      var FUNC_ERROR_TEXT$4 = "Expected a function";
      function memoize$3(func, resolver2) {
        if (typeof func != "function" || resolver2 != null && typeof resolver2 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT$4);
        }
        var memoized = function() {
          var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize$3.Cache || _MapCache$2)();
        return memoized;
      }
      memoize$3.Cache = _MapCache$2;
      var memoize_1$1 = memoize$3;
      var MAX_MEMOIZE_SIZE$2 = 500;
      function memoizeCapped$3(func) {
        var result = memoize_1$1(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE$2) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      var _memoizeCapped$1 = memoizeCapped$3;
      var rePropName$2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar$2 = /\\(\\)?/g;
      var stringToPath$4 = _memoizeCapped$1(function(string2) {
        var result = [];
        if (string2.charCodeAt(0) === 46) {
          result.push("");
        }
        string2.replace(rePropName$2, function(match5, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar$2, "$1") : number || match5);
        });
        return result;
      });
      var _stringToPath$1 = stringToPath$4;
      var INFINITY$1$1 = 1 / 0;
      var symbolProto$1$1 = _Symbol$2 ? _Symbol$2.prototype : void 0, symbolToString$2 = symbolProto$1$1 ? symbolProto$1$1.toString : void 0;
      function baseToString$3(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray_1$4(value)) {
          return _arrayMap$1(value, baseToString$3) + "";
        }
        if (isSymbol_1(value)) {
          return symbolToString$2 ? symbolToString$2.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY$1$1 ? "-0" : result;
      }
      var _baseToString$1 = baseToString$3;
      function toString$5(value) {
        return value == null ? "" : _baseToString$1(value);
      }
      var toString_1$1 = toString$5;
      function castPath$4(value, object) {
        if (isArray_1$4(value)) {
          return value;
        }
        return _isKey$1(value, object) ? [value] : _stringToPath$1(toString_1$1(value));
      }
      var _castPath$1 = castPath$4;
      var INFINITY$4 = 1 / 0;
      function toKey$6(value) {
        if (typeof value == "string" || isSymbol_1(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY$4 ? "-0" : result;
      }
      var _toKey$1 = toKey$6;
      function baseGet$4(object, path) {
        path = _castPath$1(path, object);
        var index2 = 0, length = path.length;
        while (object != null && index2 < length) {
          object = object[_toKey$1(path[index2++])];
        }
        return index2 && index2 == length ? object : void 0;
      }
      var _baseGet$1 = baseGet$4;
      function get$7(object, path, defaultValue) {
        var result = object == null ? void 0 : _baseGet$1(object, path);
        return result === void 0 ? defaultValue : result;
      }
      var get_1$1 = get$7;
      function baseHasIn$3(object, key) {
        return object != null && key in Object(object);
      }
      var _baseHasIn$1 = baseHasIn$3;
      function hasPath$3(object, path, hasFunc) {
        path = _castPath$1(path, object);
        var index2 = -1, length = path.length, result = false;
        while (++index2 < length) {
          var key = _toKey$1(path[index2]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index2 != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength_1$2(length) && _isIndex$2(key, length) && (isArray_1$4(object) || isArguments_1$2(object));
      }
      var _hasPath$1 = hasPath$3;
      function hasIn$3(object, path) {
        return object != null && _hasPath$1(object, path, _baseHasIn$1);
      }
      var hasIn_1$1 = hasIn$3;
      var COMPARE_PARTIAL_FLAG$c = 1, COMPARE_UNORDERED_FLAG$8 = 2;
      function baseMatchesProperty$3(path, srcValue) {
        if (_isKey$1(path) && _isStrictComparable$1(srcValue)) {
          return _matchesStrictComparable$1(_toKey$1(path), srcValue);
        }
        return function(object) {
          var objValue = get_1$1(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn_1$1(object, path) : _baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$c | COMPARE_UNORDERED_FLAG$8);
        };
      }
      var _baseMatchesProperty$1 = baseMatchesProperty$3;
      function baseProperty$3(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      var _baseProperty$1 = baseProperty$3;
      function basePropertyDeep$3(path) {
        return function(object) {
          return _baseGet$1(object, path);
        };
      }
      var _basePropertyDeep$1 = basePropertyDeep$3;
      function property$3(path) {
        return _isKey$1(path) ? _baseProperty$1(_toKey$1(path)) : _basePropertyDeep$1(path);
      }
      var property_1$1 = property$3;
      function baseIteratee$3(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity_1$1;
        }
        if (typeof value == "object") {
          return isArray_1$4(value) ? _baseMatchesProperty$1(value[0], value[1]) : _baseMatches$1(value);
        }
        return property_1$1(value);
      }
      var _baseIteratee$1 = baseIteratee$3;
      function baseForOwn$4(object, iteratee) {
        return object && _baseFor$1(object, iteratee, keys_1$2);
      }
      var _baseForOwn$1 = baseForOwn$4;
      function createBaseEach$3(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike_1$2(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index2-- : ++index2 < length) {
            if (iteratee(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      var _createBaseEach$1 = createBaseEach$3;
      var baseEach$4 = _createBaseEach$1(_baseForOwn$1);
      var _baseEach$1 = baseEach$4;
      function baseMap$3(collection, iteratee) {
        var index2 = -1, result = isArrayLike_1$2(collection) ? Array(collection.length) : [];
        _baseEach$1(collection, function(value, key, collection2) {
          result[++index2] = iteratee(value, key, collection2);
        });
        return result;
      }
      var _baseMap$1 = baseMap$3;
      function map$3(collection, iteratee) {
        var func = isArray_1$4(collection) ? _arrayMap$1 : _baseMap$1;
        return func(collection, _baseIteratee$1(iteratee));
      }
      var map_1$1 = map$3;
      const getEditorString = (editor, at, options) => at ? Editor$1.string(editor, at, options) : "";
      const getPoint = (editor, at, options) => Editor$1.point(editor, at, options);
      const getPointBefore = (editor, at, options) => Editor$1.before(editor, at, options);
      const isRangeAcrossBlocks = (editor, {
        at,
        ...options
      } = {}) => {
        if (!at)
          at = editor.selection;
        if (!at)
          return false;
        const [start, end] = Range.edges(at);
        const startBlock = getBlockAbove(editor, {
          at: start,
          ...options
        });
        const endBlock = getBlockAbove(editor, {
          at: end,
          ...options
        });
        return startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);
      };
      const getPointBeforeLocation = (editor, at, options) => {
        if (!options || !options.match && !options.matchString) {
          return getPointBefore(editor, at, options);
        }
        const unitOffset = !options.unit || options.unit === "offset";
        const matchStrings = options.matchString ? castArray_1$2(options.matchString) : [""];
        let point2;
        matchStrings.some((matchString) => {
          let beforeAt = at;
          let previousBeforePoint = getPoint(editor, at, {
            edge: "end"
          });
          const stackLength = matchString.length + 1;
          const stack = Array(stackLength);
          let count = 0;
          while (true) {
            var _options$match;
            const beforePoint = getPointBefore(editor, beforeAt, options);
            if (!beforePoint)
              return;
            if (isRangeAcrossBlocks(editor, {
              at: {
                anchor: beforePoint,
                focus: previousBeforePoint
              }
            })) {
              return;
            }
            const beforeString = getEditorString(editor, {
              anchor: beforePoint,
              focus: previousBeforePoint
            });
            let beforeStringToMatch = beforeString;
            if (unitOffset && stackLength) {
              stack.unshift({
                point: beforePoint,
                text: beforeString
              });
              stack.pop();
              beforeStringToMatch = map_1$1(stack.slice(0, -1), "text").join("");
            }
            if (matchString === beforeStringToMatch || (_options$match = options.match) !== null && _options$match !== void 0 && _options$match.call(options, {
              beforeString: beforeStringToMatch,
              beforePoint,
              at
            })) {
              if (options.afterMatch) {
                if (stackLength && unitOffset) {
                  var _stack;
                  point2 = (_stack = stack[stack.length - 1]) === null || _stack === void 0 ? void 0 : _stack.point;
                  return !!point2;
                }
                point2 = previousBeforePoint;
                return true;
              }
              point2 = beforePoint;
              return true;
            }
            previousBeforePoint = beforePoint;
            beforeAt = beforePoint;
            count += 1;
            if (!options.skipInvalid) {
              if (!matchString || count > matchString.length)
                return;
            }
          }
        });
        return point2;
      };
      const getPointFromLocation = (editor, {
        at = editor.selection,
        focus
      } = {}) => {
        let point2;
        if (Range.isRange(at))
          point2 = !focus ? at.anchor : at.focus;
        if (Point.isPoint(at))
          point2 = at;
        if (Path.isPath(at))
          point2 = {
            path: at,
            offset: 0
          };
        return point2;
      };
      const getPointAfter = (editor, at, options) => Editor$1.after(editor, at, options);
      const getVoidNode = (editor, options) => Editor$1.void(editor, options);
      const getPreviousNode = (editor, options) => Editor$1.previous(editor, options);
      const queryNode = (entry, {
        filter,
        allow,
        exclude
      } = {}) => {
        if (!entry)
          return false;
        if (filter && !filter(entry)) {
          return false;
        }
        if (allow) {
          const allows = castArray_1$2(allow);
          if (allows.length && !allows.includes(entry[0].type)) {
            return false;
          }
        }
        if (exclude) {
          const excludes = castArray_1$2(exclude);
          if (excludes.length && excludes.includes(entry[0].type)) {
            return false;
          }
        }
        return true;
      };
      const getPreviousPath = (path) => {
        if (path.length === 0)
          return;
        const last2 = path[path.length - 1];
        if (last2 <= 0)
          return;
        return path.slice(0, -1).concat(last2 - 1);
      };
      const getRangeBefore = (editor, at, options) => {
        const anchor = getPointBeforeLocation(editor, at, options);
        if (!anchor)
          return;
        const focus = getPoint(editor, at, {
          edge: "end"
        });
        return {
          anchor,
          focus
        };
      };
      const getStartPoint = (editor, at) => Editor$1.start(editor, at);
      const getRangeFromBlockStart = (editor, options = {}) => {
        var _getBlockAbove;
        const path = (_getBlockAbove = getBlockAbove(editor, options)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[1];
        if (!path)
          return;
        const start = getStartPoint(editor, path);
        const focus = getPointFromLocation(editor, options);
        if (!focus)
          return;
        return {
          anchor: start,
          focus
        };
      };
      const hasSingleChild = (node) => {
        if (isText(node)) {
          return true;
        }
        return node.children.length === 1 && hasSingleChild(node.children[0]);
      };
      const isInline = (editor, value) => Editor$1.isInline(editor, value);
      const getNodeString = (node) => Node$1.string(node);
      const isAncestorEmpty = (editor, node) => !getNodeString(node) && !node.children.some((n2) => isInline(editor, n2));
      const isBlockAboveEmpty = (editor) => {
        var _getBlockAbove;
        const block = (_getBlockAbove = getBlockAbove(editor)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[0];
        if (!block)
          return false;
        return isAncestorEmpty(editor, block);
      };
      const getParentNode = (editor, at, options) => {
        try {
          return Editor$1.parent(editor, at, options);
        } catch (err) {
        }
      };
      const isEndPoint = (editor, point2, at) => !!point2 && Editor$1.isEnd(editor, point2, at);
      const isBlockTextEmptyAfterSelection = (editor) => {
        if (!editor.selection)
          return false;
        const blockAbove = getBlockAbove(editor);
        if (!blockAbove)
          return false;
        const cursor = editor.selection.focus;
        const selectionParentEntry = getParentNode(editor, editor.selection);
        if (!selectionParentEntry)
          return false;
        const [, selectionParentPath] = selectionParentEntry;
        if (!isEndPoint(editor, cursor, selectionParentPath))
          return false;
        const siblingNodes = getNextSiblingNodes(blockAbove, cursor.path);
        if (siblingNodes.length) {
          for (const siblingNode of siblingNodes) {
            if (isText(siblingNode) && siblingNode.text) {
              return false;
            }
          }
        } else {
          return isEndPoint(editor, cursor, blockAbove[1]);
        }
        return true;
      };
      const isFirstChild = (path) => path[path.length - 1] === 0;
      const isMarkActive = (editor, type) => {
        return isDefined$1(getMark(editor, type));
      };
      const getRange = (editor, at, to2) => Editor$1.range(editor, at, to2);
      const isSelectionAtBlockEnd = (editor) => {
        var _getBlockAbove, _editor$selection;
        const path = (_getBlockAbove = getBlockAbove(editor)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[1];
        return !!path && isEndPoint(editor, (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.focus, path);
      };
      const isStartPoint = (editor, point2, at) => !!point2 && Editor$1.isStart(editor, point2, at);
      const isSelectionAtBlockStart = (editor, options) => {
        var _getBlockAbove, _editor$selection;
        const path = (_getBlockAbove = getBlockAbove(editor, options)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[1];
        return !!path && isStartPoint(editor, (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.focus, path);
      };
      const isExpanded = (range) => !!range && Range.isExpanded(range);
      const getNode = (root2, path) => {
        try {
          return Node$1.get(root2, path);
        } catch (err) {
          return null;
        }
      };
      const isType = (editor, node, key) => {
        const keys2 = castArray_1$2(key);
        const types = [];
        keys2.forEach((_key) => types.push(getPluginType(editor, _key)));
        return types.includes(node === null || node === void 0 ? void 0 : node.type);
      };
      const someNode = (editor, options) => {
        return !!findNode(editor, options);
      };
      const applyDeepToNodes = ({
        node,
        source,
        apply: apply2,
        query
      }) => {
        const entry = [node, []];
        if (queryNode(entry, query)) {
          if (source instanceof Function) {
            apply2(node, source());
          } else {
            apply2(node, source);
          }
        }
        if (!isAncestor(node))
          return;
        node.children.forEach((child) => {
          applyDeepToNodes({
            node: child,
            source,
            apply: apply2,
            query
          });
        });
      };
      const mergeDeepToNodes = (options) => {
        applyDeepToNodes({
          ...options,
          apply: merge_1$1
        });
      };
      const pipeDeserializeHtmlLeaf = (editor, element) => {
        let node = {};
        [...editor.plugins].reverse().forEach((plugin) => {
          const deserialized = pluginDeserializeHtml(editor, plugin, {
            element,
            deserializeLeaf: true
          });
          if (!deserialized)
            return;
          node = {
            ...node,
            ...deserialized.node
          };
        });
        return node;
      };
      const htmlElementToLeaf = (editor, element) => {
        const node = pipeDeserializeHtmlLeaf(editor, element);
        return deserializeHtmlNodeChildren(editor, element).reduce((arr, child) => {
          if (!child)
            return arr;
          if (isElement(child)) {
            if (Object.keys(node).length) {
              mergeDeepToNodes({
                node: child,
                source: node,
                query: {
                  filter: ([n2]) => isText(n2)
                }
              });
            }
            arr.push(child);
          } else {
            const attributes = {
              ...node
            };
            if (isText(child) && child.text) {
              Object.keys(attributes).forEach((key) => {
                if (attributes[key] && child[key]) {
                  attributes[key] = child[key];
                }
              });
            }
            arr.push(jsx("text", attributes, child));
          }
          return arr;
        }, []);
      };
      const isHtmlText = (node) => node.nodeType === Node.TEXT_NODE;
      const htmlTextNodeToString = (node) => {
        if (isHtmlText(node)) {
          return node.nodeValue === "\n" ? null : node.textContent;
        }
      };
      const isHtmlElement = (node) => node.nodeType === Node.ELEMENT_NODE;
      const deserializeHtmlNode = (editor) => (node) => {
        const textNode = htmlTextNodeToString(node);
        if (textNode)
          return textNode;
        if (!isHtmlElement(node))
          return null;
        const breakLine = htmlBrToNewLine(node);
        if (breakLine)
          return breakLine;
        const fragment = htmlBodyToFragment(editor, node);
        if (fragment)
          return fragment;
        const element = htmlElementToElement(editor, node);
        if (element)
          return element;
        return htmlElementToLeaf(editor, node);
      };
      const deserializeHtmlElement = (editor, element) => {
        return deserializeHtmlNode(editor)(element);
      };
      const htmlStringToDOMNode = (rawHtml, stripWhitespace = true) => {
        const node = document.createElement("body");
        node.innerHTML = rawHtml;
        if (stripWhitespace) {
          node.innerHTML = node.innerHTML.replace(/(\r\n|\n|\r|\t)/gm, "");
        }
        return node;
      };
      const deserializeHtml = (editor, {
        element,
        stripWhitespace = true
      }) => {
        if (typeof element === "string") {
          element = htmlStringToDOMNode(element, stripWhitespace);
        }
        const fragment = deserializeHtmlElement(editor, element);
        return normalizeDescendantsToDocumentFragment(editor, {
          descendants: fragment
        });
      };
      const parseHtmlDocument = (html) => {
        return new DOMParser().parseFromString(html, "text/html");
      };
      const KEY_DESERIALIZE_HTML = "deserializeHtml";
      const createDeserializeHtmlPlugin = createPluginFactory({
        key: KEY_DESERIALIZE_HTML,
        then: (editor) => ({
          editor: {
            insertData: {
              format: "text/html",
              getFragment: ({
                data
              }) => {
                const document2 = parseHtmlDocument(data);
                return deserializeHtml(editor, {
                  element: document2.body
                });
              }
            }
          }
        })
      });
      atom(null);
      const getEventEditorId = (id2) => {
        var _eventEditorSelectors;
        if (id2)
          return id2;
        const focus = eventEditorSelectors.focus();
        if (focus)
          return focus;
        const blur = eventEditorSelectors.blur();
        if (blur)
          return blur;
        return (_eventEditorSelectors = eventEditorSelectors.last()) !== null && _eventEditorSelectors !== void 0 ? _eventEditorSelectors : "main";
      };
      const loadingStore = createPlateStore({
        id: "loading"
      });
      const getPlateStore = (id2) => {
        id2 = getEventEditorId(id2);
        const store = platesStore.get.get(id2);
        return store || loadingStore;
      };
      const setPlateState = (draft, state) => {
        if (!isUndefined$3(state.onChange))
          draft.onChange = state.onChange;
        if (!isUndefined$3(state.plugins))
          draft.plugins = state.plugins;
        if (!isUndefined$3(state.editableProps))
          draft.editableProps = state.editableProps;
        if (!isUndefined$3(state.renderElement))
          draft.renderElement = state.renderElement;
        if (!isUndefined$3(state.renderLeaf))
          draft.renderLeaf = state.renderLeaf;
        if (!isUndefined$3(state.decorate))
          draft.decorate = state.decorate;
        if (!isUndefined$3(state.enabled))
          draft.enabled = state.enabled;
        if (!isUndefined$3(state.editor)) {
          draft.editor = state.editor;
          if (state.editor) {
            draft.value = state.editor.children;
          }
        }
        if (!isUndefined$3(state.initialValue))
          draft.value = state.initialValue;
        if (!isUndefined$3(state.value))
          draft.value = state.value;
        return draft;
      };
      const createPlatesStore = (initialState2 = {}) => createStore("plate")(initialState2).extendActions((set2) => ({
        set: (id2, state) => {
          set2.state((draft) => {
            if (!id2)
              return;
            let store = draft[id2];
            if (!store) {
              store = createPlateStore({
                id: id2,
                ...setPlateState({}, state !== null && state !== void 0 ? state : {})
              });
              draft[id2] = store;
              eventEditorActions.last(id2);
            }
          });
        },
        unset: (id2) => {
          set2.state((draft) => {
            delete draft[id2];
          });
        }
      })).extendSelectors((state) => ({
        get(id2) {
          return state[id2];
        },
        has(id2) {
          const ids = castArray_1$2(id2);
          return ids.every((_id) => !!state[_id]);
        }
      }));
      const platesStore = createPlatesStore({});
      platesStore.set;
      platesStore.get;
      platesStore.use;
      const getPlateActions = (id2) => getPlateStore(id2).set;
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          var value = array[index2];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      var _arrayAggregator = arrayAggregator;
      function baseAggregator(collection, setter, iteratee, accumulator) {
        _baseEach$1(collection, function(value, key, collection2) {
          setter(accumulator, value, iteratee(value), collection2);
        });
        return accumulator;
      }
      var _baseAggregator = baseAggregator;
      function createAggregator(setter, initializer) {
        return function(collection, iteratee) {
          var func = isArray_1$4(collection) ? _arrayAggregator : _baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, _baseIteratee$1(iteratee), accumulator);
        };
      }
      var _createAggregator = createAggregator;
      var keyBy = _createAggregator(function(result, value, key) {
        _baseAssignValue$2(result, key, value);
      });
      var keyBy_1 = keyBy;
      function baseValues(object, props) {
        return _arrayMap$1(props, function(key) {
          return object[key];
        });
      }
      var _baseValues = baseValues;
      function values(object) {
        return object == null ? [] : _baseValues(object, keys_1$2(object));
      }
      var values_1 = values;
      const mergeDeepPlugins = (editor, _plugin) => {
        const plugin = {
          ..._plugin
        };
        const {
          then
        } = plugin;
        if (then) {
          delete plugin.then;
          const {
            plugins: pluginPlugins
          } = plugin;
          const pluginThen = mergeDeepPlugins(editor, defaultsDeep_1(then(editor, plugin), plugin));
          if (pluginPlugins && pluginThen.plugins) {
            const merged = merge_1$1(keyBy_1(pluginPlugins, "key"), keyBy_1(pluginThen.plugins, "key"));
            pluginThen.plugins = values_1(merged);
          }
          return pluginThen;
        }
        return plugin;
      };
      const setDefaultPlugin = (plugin) => {
        if (plugin.type === void 0)
          plugin.type = plugin.key;
        if (!plugin.options)
          plugin.options = {};
        if (!plugin.inject)
          plugin.inject = {};
        if (!plugin.editor)
          plugin.editor = {};
        return plugin;
      };
      const flattenDeepPlugins = (editor, plugins) => {
        if (!plugins)
          return;
        plugins.forEach((plugin) => {
          let p2 = setDefaultPlugin(plugin);
          p2 = mergeDeepPlugins(editor, p2);
          if (!editor.pluginsByKey[p2.key]) {
            editor.plugins.push(p2);
            editor.pluginsByKey[p2.key] = p2;
          } else {
            const index2 = editor.plugins.indexOf(editor.pluginsByKey[p2.key]);
            const mergedPlugin = defaultsDeep_1(p2, editor.pluginsByKey[p2.key]);
            if (index2 >= 0) {
              editor.plugins[index2] = mergedPlugin;
            }
            editor.pluginsByKey[p2.key] = mergedPlugin;
          }
          flattenDeepPlugins(editor, p2.plugins);
        });
      };
      const setPlatePlugins = (editor, {
        disableCorePlugins,
        plugins: _plugins = []
      }) => {
        let plugins = [];
        if (disableCorePlugins !== true) {
          const dcp = disableCorePlugins;
          if (typeof dcp !== "object" || !dcp.react) {
            var _ref, _editor$pluginsByKey;
            plugins.push((_ref = (_editor$pluginsByKey = editor.pluginsByKey) === null || _editor$pluginsByKey === void 0 ? void 0 : _editor$pluginsByKey.react) !== null && _ref !== void 0 ? _ref : createReactPlugin());
          }
          if (typeof dcp !== "object" || !dcp.history) {
            var _ref2, _editor$pluginsByKey2;
            plugins.push((_ref2 = (_editor$pluginsByKey2 = editor.pluginsByKey) === null || _editor$pluginsByKey2 === void 0 ? void 0 : _editor$pluginsByKey2.history) !== null && _ref2 !== void 0 ? _ref2 : createHistoryPlugin());
          }
          if (typeof dcp !== "object" || !dcp.eventEditor) {
            var _ref3, _editor$pluginsByKey3;
            plugins.push((_ref3 = (_editor$pluginsByKey3 = editor.pluginsByKey) === null || _editor$pluginsByKey3 === void 0 ? void 0 : _editor$pluginsByKey3[KEY_EVENT_EDITOR]) !== null && _ref3 !== void 0 ? _ref3 : createEventEditorPlugin());
          }
          if (typeof dcp !== "object" || !dcp.inlineVoid) {
            var _ref4, _editor$pluginsByKey4;
            plugins.push((_ref4 = (_editor$pluginsByKey4 = editor.pluginsByKey) === null || _editor$pluginsByKey4 === void 0 ? void 0 : _editor$pluginsByKey4[KEY_INLINE_VOID]) !== null && _ref4 !== void 0 ? _ref4 : createInlineVoidPlugin());
          }
          if (typeof dcp !== "object" || !dcp.insertData) {
            var _ref5, _editor$pluginsByKey5;
            plugins.push((_ref5 = (_editor$pluginsByKey5 = editor.pluginsByKey) === null || _editor$pluginsByKey5 === void 0 ? void 0 : _editor$pluginsByKey5[KEY_INSERT_DATA]) !== null && _ref5 !== void 0 ? _ref5 : createInsertDataPlugin());
          }
          if (typeof dcp !== "object" || !dcp.deserializeHtml) {
            var _ref6, _editor$pluginsByKey6;
            plugins.push((_ref6 = (_editor$pluginsByKey6 = editor.pluginsByKey) === null || _editor$pluginsByKey6 === void 0 ? void 0 : _editor$pluginsByKey6[KEY_DESERIALIZE_HTML]) !== null && _ref6 !== void 0 ? _ref6 : createDeserializeHtmlPlugin());
          }
          if (typeof dcp !== "object" || !dcp.deserializeAst) {
            var _ref7, _editor$pluginsByKey7;
            plugins.push((_ref7 = (_editor$pluginsByKey7 = editor.pluginsByKey) === null || _editor$pluginsByKey7 === void 0 ? void 0 : _editor$pluginsByKey7[KEY_DESERIALIZE_AST]) !== null && _ref7 !== void 0 ? _ref7 : createDeserializeAstPlugin());
          }
        }
        plugins = [...plugins, ..._plugins];
        editor.plugins = [];
        editor.pluginsByKey = {};
        flattenDeepPlugins(editor, plugins);
        editor.plugins.forEach((plugin) => {
          if (plugin.overrideByKey) {
            const newPlugins = editor.plugins.map((p2) => {
              return overridePluginsByKey(p2, plugin.overrideByKey);
            });
            editor.plugins = [];
            editor.pluginsByKey = {};
            flattenDeepPlugins(editor, newPlugins);
          }
        });
        getPlateActions(editor.id).incrementKey("keyPlugins");
      };
      const withPlate = (e2, {
        id: id2 = "main",
        plugins = [],
        disableCorePlugins
      } = {}) => {
        let editor = e2;
        editor.id = id2;
        if (!editor.key) {
          editor.key = Math.random();
        }
        setPlatePlugins(editor, {
          plugins,
          disableCorePlugins
        });
        editor.plugins.forEach((plugin) => {
          if (plugin.withOverrides) {
            editor = plugin.withOverrides(editor, plugin);
          }
        });
        return editor;
      };
      function arrayEach$4(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (iteratee(array[index2], index2, array) === false) {
            break;
          }
        }
        return array;
      }
      var _arrayEach$2 = arrayEach$4;
      function baseAssign$3(object, source) {
        return object && _copyObject$2(source, keys_1$2(source), object);
      }
      var _baseAssign$2 = baseAssign$3;
      function baseAssignIn$3(object, source) {
        return object && _copyObject$2(source, keysIn_1$2(source), object);
      }
      var _baseAssignIn$2 = baseAssignIn$3;
      function copySymbols$3(source, object) {
        return _copyObject$2(source, _getSymbols$2(source), object);
      }
      var _copySymbols$2 = copySymbols$3;
      var nativeGetSymbols$4 = Object.getOwnPropertySymbols;
      var getSymbolsIn$4 = !nativeGetSymbols$4 ? stubArray_1$2 : function(object) {
        var result = [];
        while (object) {
          _arrayPush$2(result, _getSymbols$2(object));
          object = _getPrototype$2(object);
        }
        return result;
      };
      var _getSymbolsIn$2 = getSymbolsIn$4;
      function copySymbolsIn$3(source, object) {
        return _copyObject$2(source, _getSymbolsIn$2(source), object);
      }
      var _copySymbolsIn$2 = copySymbolsIn$3;
      function getAllKeysIn$3(object) {
        return _baseGetAllKeys$2(object, keysIn_1$2, _getSymbolsIn$2);
      }
      var _getAllKeysIn$2 = getAllKeysIn$3;
      var objectProto$1$2 = Object.prototype;
      var hasOwnProperty$1$2 = objectProto$1$2.hasOwnProperty;
      function initCloneArray$3(array) {
        var length = array.length, result = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty$1$2.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      var _initCloneArray$2 = initCloneArray$3;
      function cloneDataView$3(dataView, isDeep) {
        var buffer2 = isDeep ? _cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer2, dataView.byteOffset, dataView.byteLength);
      }
      var _cloneDataView$2 = cloneDataView$3;
      var reFlags$2 = /\w*$/;
      function cloneRegExp$3(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags$2.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      var _cloneRegExp$2 = cloneRegExp$3;
      var symbolProto$7 = _Symbol$2 ? _Symbol$2.prototype : void 0, symbolValueOf$4 = symbolProto$7 ? symbolProto$7.valueOf : void 0;
      function cloneSymbol$3(symbol) {
        return symbolValueOf$4 ? Object(symbolValueOf$4.call(symbol)) : {};
      }
      var _cloneSymbol$2 = cloneSymbol$3;
      var boolTag$1$2 = "[object Boolean]", dateTag$1$2 = "[object Date]", mapTag$2$2 = "[object Map]", numberTag$1$2 = "[object Number]", regexpTag$1$2 = "[object RegExp]", setTag$2$2 = "[object Set]", stringTag$1$2 = "[object String]", symbolTag$1$2 = "[object Symbol]";
      var arrayBufferTag$1$2 = "[object ArrayBuffer]", dataViewTag$1$2 = "[object DataView]", float32Tag$1$2 = "[object Float32Array]", float64Tag$1$2 = "[object Float64Array]", int8Tag$1$2 = "[object Int8Array]", int16Tag$1$2 = "[object Int16Array]", int32Tag$1$2 = "[object Int32Array]", uint8Tag$1$2 = "[object Uint8Array]", uint8ClampedTag$1$2 = "[object Uint8ClampedArray]", uint16Tag$1$2 = "[object Uint16Array]", uint32Tag$1$2 = "[object Uint32Array]";
      function initCloneByTag$3(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag$1$2:
            return _cloneArrayBuffer$2(object);
          case boolTag$1$2:
          case dateTag$1$2:
            return new Ctor(+object);
          case dataViewTag$1$2:
            return _cloneDataView$2(object, isDeep);
          case float32Tag$1$2:
          case float64Tag$1$2:
          case int8Tag$1$2:
          case int16Tag$1$2:
          case int32Tag$1$2:
          case uint8Tag$1$2:
          case uint8ClampedTag$1$2:
          case uint16Tag$1$2:
          case uint32Tag$1$2:
            return _cloneTypedArray$2(object, isDeep);
          case mapTag$2$2:
            return new Ctor();
          case numberTag$1$2:
          case stringTag$1$2:
            return new Ctor(object);
          case regexpTag$1$2:
            return _cloneRegExp$2(object);
          case setTag$2$2:
            return new Ctor();
          case symbolTag$1$2:
            return _cloneSymbol$2(object);
        }
      }
      var _initCloneByTag$2 = initCloneByTag$3;
      var mapTag$1$2 = "[object Map]";
      function baseIsMap$3(value) {
        return isObjectLike_1$2(value) && _getTag$2(value) == mapTag$1$2;
      }
      var _baseIsMap$2 = baseIsMap$3;
      var nodeIsMap$2 = _nodeUtil$3 && _nodeUtil$3.isMap;
      var isMap$3 = nodeIsMap$2 ? _baseUnary$2(nodeIsMap$2) : _baseIsMap$2;
      var isMap_1$2 = isMap$3;
      var setTag$1$2 = "[object Set]";
      function baseIsSet$3(value) {
        return isObjectLike_1$2(value) && _getTag$2(value) == setTag$1$2;
      }
      var _baseIsSet$2 = baseIsSet$3;
      var nodeIsSet$2 = _nodeUtil$3 && _nodeUtil$3.isSet;
      var isSet$3 = nodeIsSet$2 ? _baseUnary$2(nodeIsSet$2) : _baseIsSet$2;
      var isSet_1$2 = isSet$3;
      var CLONE_DEEP_FLAG$2$1 = 1, CLONE_FLAT_FLAG$1$1 = 2, CLONE_SYMBOLS_FLAG$2$1 = 4;
      var argsTag$8 = "[object Arguments]", arrayTag$6 = "[object Array]", boolTag$7 = "[object Boolean]", dateTag$7 = "[object Date]", errorTag$6 = "[object Error]", funcTag$6 = "[object Function]", genTag$4 = "[object GeneratorFunction]", mapTag$a = "[object Map]", numberTag$7 = "[object Number]", objectTag$a = "[object Object]", regexpTag$7 = "[object RegExp]", setTag$a = "[object Set]", stringTag$8 = "[object String]", symbolTag$6 = "[object Symbol]", weakMapTag$6 = "[object WeakMap]";
      var arrayBufferTag$7 = "[object ArrayBuffer]", dataViewTag$9 = "[object DataView]", float32Tag$5 = "[object Float32Array]", float64Tag$5 = "[object Float64Array]", int8Tag$5 = "[object Int8Array]", int16Tag$5 = "[object Int16Array]", int32Tag$5 = "[object Int32Array]", uint8Tag$5 = "[object Uint8Array]", uint8ClampedTag$5 = "[object Uint8ClampedArray]", uint16Tag$5 = "[object Uint16Array]", uint32Tag$5 = "[object Uint32Array]";
      var cloneableTags$2 = {};
      cloneableTags$2[argsTag$8] = cloneableTags$2[arrayTag$6] = cloneableTags$2[arrayBufferTag$7] = cloneableTags$2[dataViewTag$9] = cloneableTags$2[boolTag$7] = cloneableTags$2[dateTag$7] = cloneableTags$2[float32Tag$5] = cloneableTags$2[float64Tag$5] = cloneableTags$2[int8Tag$5] = cloneableTags$2[int16Tag$5] = cloneableTags$2[int32Tag$5] = cloneableTags$2[mapTag$a] = cloneableTags$2[numberTag$7] = cloneableTags$2[objectTag$a] = cloneableTags$2[regexpTag$7] = cloneableTags$2[setTag$a] = cloneableTags$2[stringTag$8] = cloneableTags$2[symbolTag$6] = cloneableTags$2[uint8Tag$5] = cloneableTags$2[uint8ClampedTag$5] = cloneableTags$2[uint16Tag$5] = cloneableTags$2[uint32Tag$5] = true;
      cloneableTags$2[errorTag$6] = cloneableTags$2[funcTag$6] = cloneableTags$2[weakMapTag$6] = false;
      function baseClone$3(value, bitmask, customizer, key, object, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG$2$1, isFlat = bitmask & CLONE_FLAT_FLAG$1$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$2$1;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject_1$2(value)) {
          return value;
        }
        var isArr = isArray_1$4(value);
        if (isArr) {
          result = _initCloneArray$2(value);
          if (!isDeep) {
            return _copyArray$2(value, result);
          }
        } else {
          var tag = _getTag$2(value), isFunc = tag == funcTag$6 || tag == genTag$4;
          if (isBuffer_1$1(value)) {
            return _cloneBuffer$2(value, isDeep);
          }
          if (tag == objectTag$a || tag == argsTag$8 || isFunc && !object) {
            result = isFlat || isFunc ? {} : _initCloneObject$2(value);
            if (!isDeep) {
              return isFlat ? _copySymbolsIn$2(value, _baseAssignIn$2(result, value)) : _copySymbols$2(value, _baseAssign$2(result, value));
            }
          } else {
            if (!cloneableTags$2[tag]) {
              return object ? value : {};
            }
            result = _initCloneByTag$2(value, tag, isDeep);
          }
        }
        stack || (stack = new _Stack$2());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet_1$2(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone$3(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap_1$2(value)) {
          value.forEach(function(subValue, key2) {
            result.set(key2, baseClone$3(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? _getAllKeysIn$2 : _getAllKeys$2 : isFlat ? keysIn_1$2 : keys_1$2;
        var props = isArr ? void 0 : keysFunc(value);
        _arrayEach$2(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          _assignValue$2(result, key2, baseClone$3(subValue, bitmask, customizer, key2, value, stack));
        });
        return result;
      }
      var _baseClone$2 = baseClone$3;
      const mockPlugin = (plugin) => ({
        key: "",
        type: "",
        editor: {},
        inject: {},
        options: {},
        ...plugin
      });
      createAtomStore({
        element: null
      }, {
        name: "element"
      });
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : void 0;
      }
      var last_1 = last;
      function baseSlice(array, start, end) {
        var index2 = -1, length = array.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);
        while (++index2 < length) {
          result[index2] = array[index2 + start];
        }
        return result;
      }
      var _baseSlice = baseSlice;
      function parent(object, path) {
        return path.length < 2 ? object : _baseGet$1(object, _baseSlice(path, 0, -1));
      }
      var _parent = parent;
      function baseUnset(object, path) {
        path = _castPath$1(path, object);
        object = _parent(object, path);
        return object == null || delete object[_toKey$1(last_1(path))];
      }
      var _baseUnset = baseUnset;
      function customOmitClone(value) {
        return isPlainObject_1$1(value) ? void 0 : value;
      }
      var _customOmitClone = customOmitClone;
      var spreadableSymbol = _Symbol$2 ? _Symbol$2.isConcatSpreadable : void 0;
      function isFlattenable(value) {
        return isArray_1$4(value) || isArguments_1$2(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      var _isFlattenable = isFlattenable;
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index2 = -1, length = array.length;
        predicate || (predicate = _isFlattenable);
        result || (result = []);
        while (++index2 < length) {
          var value = array[index2];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              _arrayPush$2(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      var _baseFlatten = baseFlatten;
      function flatten$1(array) {
        var length = array == null ? 0 : array.length;
        return length ? _baseFlatten(array, 1) : [];
      }
      var flatten_1 = flatten$1;
      function flatRest(func) {
        return _setToString(_overRest(func, void 0, flatten_1), func + "");
      }
      var _flatRest = flatRest;
      var CLONE_DEEP_FLAG$3 = 1, CLONE_FLAT_FLAG$2 = 2, CLONE_SYMBOLS_FLAG$3 = 4;
      _flatRest(function(object, paths) {
        var result = {};
        if (object == null) {
          return result;
        }
        var isDeep = false;
        paths = _arrayMap$1(paths, function(path) {
          path = _castPath$1(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        _copyObject$2(object, _getAllKeysIn$2(object), result);
        if (isDeep) {
          result = _baseClone$2(result, CLONE_DEEP_FLAG$3 | CLONE_FLAT_FLAG$2 | CLONE_SYMBOLS_FLAG$3, _customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          _baseUnset(result, paths[length]);
        }
        return result;
      });
      const setNodes = (editor, props, options) => Transforms.setNodes(editor, props, options);
      const setElements = (editor, props, options) => setNodes(editor, props, options);
      const toggleNodeType = (editor, options, editorNodesOptions) => {
        const {
          activeType,
          inactiveType = getPluginType(editor, ELEMENT_DEFAULT)
        } = options;
        if (!activeType || !editor.selection)
          return;
        const isActive = someNode(editor, {
          ...editorNodesOptions,
          match: {
            type: activeType
          }
        });
        if (isActive && activeType === inactiveType)
          return;
        setElements(editor, {
          type: isActive ? inactiveType : activeType
        });
      };
      const onKeyDownToggleElement = (editor, {
        type,
        options: {
          hotkey
        }
      }) => (e2) => {
        const defaultType = getPluginType(editor, ELEMENT_DEFAULT);
        if (!hotkey)
          return;
        const hotkeys = castArray_1$2(hotkey);
        for (const _hotkey of hotkeys) {
          if (isHotkey$6(_hotkey, e2)) {
            e2.preventDefault();
            toggleNodeType(editor, {
              activeType: type,
              inactiveType: defaultType
            });
            return;
          }
        }
      };
      const unsetNodes = (editor, props, options) => {
        return Transforms.unsetNodes(editor, props, options);
      };
      const removeMark = (editor, {
        key,
        at,
        shouldChange = true,
        ...rest
      }) => {
        const selection = at !== null && at !== void 0 ? at : editor.selection;
        key = castArray_1$2(key);
        if (selection) {
          if (Range.isRange(selection) && Range.isExpanded(selection)) {
            unsetNodes(editor, key, {
              at: selection,
              match: isText,
              split: true,
              ...rest
            });
          } else if (editor.selection) {
            const marks = {
              ...getMarks(editor) || {}
            };
            key.forEach((k2) => {
              delete marks[k2];
            });
            editor.marks = marks;
            shouldChange && editor.onChange();
          }
        }
      };
      const toggleMark = (editor, {
        key,
        clear
      }) => {
        if (!editor.selection)
          return;
        withoutNormalizing(editor, () => {
          const isActive = isMarkActive(editor, key);
          if (isActive) {
            removeMark(editor, {
              key
            });
            return;
          }
          if (clear) {
            const clears = castArray_1$2(clear);
            removeMark(editor, {
              key: clears
            });
          }
          editor.addMark(key, true);
        });
      };
      const onKeyDownToggleMark = (editor, {
        type,
        options: {
          hotkey,
          clear
        }
      }) => (e2) => {
        if (!hotkey)
          return;
        if (isHotkey$6(hotkey, e2)) {
          e2.preventDefault();
          toggleMark(editor, {
            key: type,
            clear
          });
        }
      };
      const traverseHtmlNode = (node, callback) => {
        const keepTraversing = callback(node);
        if (!keepTraversing) {
          return;
        }
        let child = node.firstChild;
        while (child) {
          const currentChild = child;
          const previousChild = child.previousSibling;
          child = child.nextSibling;
          traverseHtmlNode(currentChild, callback);
          if (!currentChild.previousSibling && !currentChild.nextSibling && !currentChild.parentNode && child && previousChild !== child.previousSibling && child.parentNode) {
            if (previousChild) {
              child = previousChild.nextSibling;
            } else {
              child = node.firstChild;
            }
          } else if (!currentChild.previousSibling && !currentChild.nextSibling && !currentChild.parentNode && child && !child.previousSibling && !child.nextSibling && !child.parentNode) {
            if (previousChild) {
              if (previousChild.nextSibling) {
                child = previousChild.nextSibling.nextSibling;
              } else {
                child = null;
              }
            } else if (node.firstChild) {
              child = node.firstChild.nextSibling;
            }
          }
        }
      };
      const traverseHtmlElements = (rootNode, callback) => {
        traverseHtmlNode(rootNode, (node) => {
          if (!isHtmlElement(node)) {
            return true;
          }
          return callback(node);
        });
      };
      const findHtmlElement = (rootNode, predicate) => {
        let res = null;
        traverseHtmlElements(rootNode, (node) => {
          if (predicate(node)) {
            res = node;
            return false;
          }
          return true;
        });
        return res;
      };
      const someHtmlElement = (rootNode, predicate) => {
        return !!findHtmlElement(rootNode, predicate);
      };
      const createPathRef = (editor, at, options) => Editor$1.pathRef(editor, at, options);
      const createPointRef = (editor, point2, options) => Editor$1.pointRef(editor, point2, options);
      const deleteBackward = (editor, options) => Editor$1.deleteBackward(editor, options);
      const isElementEmpty = (editor, element) => Editor$1.isEmpty(editor, element);
      const deleteText = (editor, options) => {
        Transforms.delete(editor, options);
      };
      const moveNodes = (editor, options) => Transforms.moveNodes(editor, options);
      const removeNodes = (editor, options) => Transforms.removeNodes(editor, options);
      const select = (editor, target) => {
        Transforms.select(editor, target);
      };
      const mergeNodes = (editor, options = {}) => {
        withoutNormalizing(editor, () => {
          let {
            match: match5,
            at = editor.selection
          } = options;
          const {
            mergeNode,
            removeEmptyAncestor,
            hanging = false,
            voids = false,
            mode = "lowest"
          } = options;
          if (!at) {
            return;
          }
          if (match5 == null) {
            if (Path.isPath(at)) {
              const [parent2] = getParentNode(editor, at);
              match5 = (n2) => parent2.children.includes(n2);
            } else {
              match5 = (n2) => isBlock(editor, n2);
            }
          }
          if (!hanging && Range.isRange(at)) {
            at = Editor$1.unhangRange(editor, at);
          }
          if (Range.isRange(at)) {
            if (Range.isCollapsed(at)) {
              at = at.anchor;
            } else {
              const [, end] = Range.edges(at);
              const pointRef = createPointRef(editor, end);
              deleteText(editor, {
                at
              });
              at = pointRef.unref();
              if (options.at == null) {
                select(editor, at);
              }
            }
          }
          const _nodes = getNodeEntries(editor, {
            at,
            match: match5,
            voids,
            mode
          });
          const [current] = Array.from(_nodes);
          const prev = getPreviousNode(editor, {
            at,
            match: match5,
            voids,
            mode
          });
          if (!current || !prev) {
            return;
          }
          const [node, path] = current;
          const [prevNode, prevPath] = prev;
          if (path.length === 0 || prevPath.length === 0) {
            return;
          }
          const newPath = Path.next(prevPath);
          const commonPath = Path.common(path, prevPath);
          const isPreviousSibling = Path.isSibling(path, prevPath);
          const _levels = Editor$1.levels(editor, {
            at: path
          });
          const levels = Array.from(_levels, ([n2]) => n2).slice(commonPath.length).slice(0, -1);
          const emptyAncestor = getAboveNode(editor, {
            at: path,
            mode: "highest",
            match: (n2) => levels.includes(n2) && isElement(n2) && hasSingleChild(n2)
          });
          const emptyRef = emptyAncestor && createPathRef(editor, emptyAncestor[1]);
          let properties;
          let position2;
          if (isText(node) && isText(prevNode)) {
            const {
              text: text2,
              ...rest
            } = node;
            position2 = prevNode.text.length;
            properties = rest;
          } else if (isElement(node) && isElement(prevNode)) {
            const {
              children,
              ...rest
            } = node;
            position2 = prevNode.children.length;
            properties = rest;
          } else {
            throw new Error(`Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(node)} ${JSON.stringify(prevNode)}`);
          }
          if (!isPreviousSibling) {
            if (!mergeNode) {
              moveNodes(editor, {
                at: path,
                to: newPath,
                voids
              });
            }
          }
          if (emptyRef) {
            if (!removeEmptyAncestor) {
              removeNodes(editor, {
                at: emptyRef.current,
                voids
              });
            } else {
              const emptyPath = emptyRef.current;
              emptyPath && removeEmptyAncestor(editor, {
                at: emptyPath
              });
            }
          }
          if (mergeNode) {
            mergeNode(editor, {
              at: path,
              to: newPath
            });
          } else if (isElement(prevNode) && isElementEmpty(editor, prevNode) || isText(prevNode) && prevNode.text === "") {
            removeNodes(editor, {
              at: prevPath,
              voids
            });
          } else {
            editor.apply({
              type: "merge_node",
              path: newPath,
              position: position2,
              properties
            });
          }
          if (emptyRef) {
            emptyRef.unref();
          }
        });
      };
      const getEndPoint = (editor, at) => Editor$1.end(editor, at);
      const getLeafNode = (editor, at, options) => Editor$1.leaf(editor, at, options);
      const deleteMerge = (editor, options = {}) => {
        withoutNormalizing(editor, () => {
          const {
            reverse = false,
            unit = "character",
            distance = 1,
            voids = false
          } = options;
          let {
            at = editor.selection,
            hanging = false
          } = options;
          if (!at) {
            return;
          }
          if (Range.isRange(at) && Range.isCollapsed(at)) {
            at = at.anchor;
          }
          if (Point.isPoint(at)) {
            const furthestVoid = getVoidNode(editor, {
              at,
              mode: "highest"
            });
            if (!voids && furthestVoid) {
              const [, voidPath] = furthestVoid;
              at = voidPath;
            } else {
              const opts = {
                unit,
                distance
              };
              const target = reverse ? getPointBefore(editor, at, opts) || getStartPoint(editor, []) : getPointAfter(editor, at, opts) || getEndPoint(editor, []);
              at = {
                anchor: at,
                focus: target
              };
              hanging = true;
            }
          }
          if (Path.isPath(at)) {
            removeNodes(editor, {
              at,
              voids
            });
            return;
          }
          if (Range.isCollapsed(at)) {
            return;
          }
          if (!hanging) {
            at = Editor$1.unhangRange(editor, at, {
              voids
            });
          }
          let [start, end] = Range.edges(at);
          const startBlock = getAboveNode(editor, {
            match: (n2) => isBlock(editor, n2),
            at: start,
            voids
          });
          const endBlock = getAboveNode(editor, {
            match: (n2) => isBlock(editor, n2),
            at: end,
            voids
          });
          const isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);
          const isSingleText = Path.equals(start.path, end.path);
          const startVoid = voids ? null : getVoidNode(editor, {
            at: start,
            mode: "highest"
          });
          const endVoid = voids ? null : getVoidNode(editor, {
            at: end,
            mode: "highest"
          });
          if (startVoid) {
            const before = getPointBefore(editor, start);
            if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {
              start = before;
            }
          }
          if (endVoid) {
            const after = getPointAfter(editor, end);
            if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {
              end = after;
            }
          }
          const matches = [];
          let lastPath;
          const _nodes = getNodeEntries(editor, {
            at,
            voids
          });
          for (const entry of _nodes) {
            const [node, path] = entry;
            if (lastPath && Path.compare(path, lastPath) === 0) {
              continue;
            }
            if (!voids && isVoid(editor, node) || !Path.isCommon(path, start.path) && !Path.isCommon(path, end.path)) {
              matches.push(entry);
              lastPath = path;
            }
          }
          const pathRefs = Array.from(matches, ([, p2]) => createPathRef(editor, p2));
          const startRef = createPointRef(editor, start);
          const endRef = createPointRef(editor, end);
          if (!isSingleText && !startVoid) {
            const point3 = startRef.current;
            const [node] = getLeafNode(editor, point3);
            const {
              path
            } = point3;
            const {
              offset: offset2
            } = start;
            const text2 = node.text.slice(offset2);
            editor.apply({
              type: "remove_text",
              path,
              offset: offset2,
              text: text2
            });
          }
          for (const pathRef of pathRefs) {
            const path = pathRef.unref();
            removeNodes(editor, {
              at: path,
              voids
            });
          }
          if (!endVoid) {
            const point3 = endRef.current;
            const [node] = getLeafNode(editor, point3);
            const {
              path
            } = point3;
            const offset2 = isSingleText ? start.offset : 0;
            const text2 = node.text.slice(offset2, end.offset);
            editor.apply({
              type: "remove_text",
              path,
              offset: offset2,
              text: text2
            });
          }
          if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {
            mergeNodes(editor, {
              at: endRef.current,
              hanging: true,
              voids
            });
          }
          const point2 = endRef.unref() || startRef.unref();
          if (options.at == null && point2) {
            select(editor, point2);
          }
        });
      };
      const insertNode = (editor, node) => Editor$1.insertNode(editor, node);
      const getCommonNode = (root2, path, another) => Node$1.common(root2, path, another);
      const getNodeTexts = (root2, options) => Node$1.texts(root2, options);
      const getNodes = (root2, options) => Node$1.nodes(root2, options);
      const isCollapsed = (range) => !!range && Range.isCollapsed(range);
      const collapseSelection = (editor, options) => {
        Transforms.collapse(editor, options);
      };
      const insertFragment = (editor, fragment, options) => {
        Transforms.insertFragment(editor, fragment, options);
      };
      const insertNodes = (editor, nodes, options) => Transforms.insertNodes(editor, nodes, options);
      const insertText = (editor, text2, options) => {
        Transforms.insertText(editor, text2, options);
      };
      const splitNodes = (editor, options) => Transforms.splitNodes(editor, options);
      const unwrapNodes = (editor, options) => {
        Transforms.unwrapNodes(editor, getQueryOptions(editor, options));
      };
      const wrapNodes = (editor, element, options) => {
        unhangRange(editor, options === null || options === void 0 ? void 0 : options.at, options);
        Transforms.wrapNodes(editor, element, options);
      };
      var objectProto$u = Object.prototype;
      var hasOwnProperty$r = objectProto$u.hasOwnProperty;
      var defaults$1 = _baseRest(function(object, sources) {
        object = Object(object);
        var index2 = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : void 0;
        if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }
        while (++index2 < length) {
          var source = sources[index2];
          var props = keysIn_1$2(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];
            if (value === void 0 || eq_1$2(value, objectProto$u[key]) && !hasOwnProperty$r.call(object, key)) {
              object[key] = source[key];
            }
          }
        }
        return object;
      });
      var defaults_1 = defaults$1;
      const defaultsDeepToNodes = (options) => {
        applyDeepToNodes({
          ...options,
          apply: defaults_1
        });
      };
      const insertElements = (editor, nodes, options) => insertNodes(editor, nodes, options);
      const insertEmptyElement = (editor, type, options) => {
        insertElements(editor, {
          type,
          children: [{
            text: ""
          }]
        }, getQueryOptions(editor, options));
      };
      const moveChildren = (editor, {
        at,
        to: to2,
        match: match5,
        fromStartIndex = 0
      }) => {
        let moved = 0;
        const parentPath = Path.isPath(at) ? at : at[1];
        const parentNode = Path.isPath(at) ? getNode(editor, parentPath) : at[0];
        if (!isBlock(editor, parentNode))
          return moved;
        for (let i2 = parentNode.children.length - 1; i2 >= fromStartIndex; i2--) {
          const childPath = [...parentPath, i2];
          const childNode = getNode(editor, childPath);
          if (!match5 || childNode && match5([childNode, childPath])) {
            moveNodes(editor, {
              at: childPath,
              to: to2
            });
            moved++;
          }
        }
        return moved;
      };
      function unwrapExports$b(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$c(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$d = createCommonjsModule$c(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      var isHotkey$5 = unwrapExports$b(lib$d);
      lib$d.isHotkey;
      lib$d.isCodeHotkey;
      lib$d.isKeyHotkey;
      lib$d.parseHotkey;
      lib$d.compareHotkey;
      lib$d.toKeyCode;
      lib$d.toKeyName;
      const onKeyDownAutoformat = (editor, {
        options: {
          rules,
          enableUndoOnDelete
        }
      }) => (e2) => {
        if (!isHotkey$5("backspace", {
          byKey: true
        }, e2))
          return false;
        if (!rules)
          return false;
        if (!enableUndoOnDelete)
          return false;
        const {
          selection
        } = editor;
        if (!selection || !Range.isCollapsed(selection))
          return;
        const [start, end] = Range.edges(selection);
        const before = getPointBefore(editor, end, {
          unit: "character",
          distance: 1
        });
        if (!start)
          return false;
        if (!before)
          return false;
        const charRange = {
          anchor: before,
          focus: start
        };
        if (!charRange)
          return false;
        const char = getEditorString(editor, charRange);
        if (!char)
          return false;
        const matchers = [...rules].filter((rule2) => {
          const textRule = rule2;
          if (textRule) {
            return textRule.mode === "text" && textRule.format === char;
          }
          return false;
        });
        if (!matchers || matchers.length === 0)
          return false;
        e2.preventDefault();
        deleteBackward(editor, {
          unit: "character"
        });
        const rule = matchers[0];
        if (rule && typeof rule.match === "string") {
          insertText(editor, rule.match);
        } else {
          const matchArray = rule.match;
          if (matchArray && matchArray.length > 0) {
            insertText(editor, matchArray[0]);
          }
        }
        return true;
      };
      var isArray$i = Array.isArray;
      var isArray_1$3 = isArray$i;
      function castArray$1() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray_1$3(value) ? value : [value];
      }
      var castArray_1$1 = castArray$1;
      const getMatchRange = ({
        match: match5,
        trigger
      }) => {
        let start;
        let end;
        if (typeof match5 === "object") {
          start = match5.start;
          end = match5.end;
        } else {
          start = match5;
          end = start.split("").reverse().join("");
        }
        const triggers = trigger ? castArray_1$1(trigger) : [end.slice(-1)];
        end = trigger ? end : end.slice(0, -1);
        return {
          start,
          end,
          triggers
        };
      };
      const autoformatBlock = (editor, {
        text: text2,
        trigger,
        match: _match,
        type = ELEMENT_DEFAULT,
        allowSameTypeAbove = false,
        preFormat: preFormat2,
        format: format2,
        triggerAtBlockStart = true
      }) => {
        const matches = castArray_1$1(_match);
        for (const match5 of matches) {
          const {
            end,
            triggers
          } = getMatchRange({
            match: {
              start: "",
              end: match5
            },
            trigger
          });
          if (!triggers.includes(text2))
            continue;
          let matchRange;
          if (triggerAtBlockStart) {
            matchRange = getRangeFromBlockStart(editor);
            const hasVoidNode = someNode(editor, {
              at: matchRange,
              match: (n2) => isVoid(editor, n2)
            });
            if (hasVoidNode)
              continue;
            const textFromBlockStart = getEditorString(editor, matchRange);
            if (end !== textFromBlockStart)
              continue;
          } else {
            matchRange = getRangeBefore(editor, editor.selection, {
              matchString: end
            });
            if (!matchRange)
              continue;
          }
          if (!allowSameTypeAbove) {
            const isBelowSameBlockType = someNode(editor, {
              match: {
                type
              }
            });
            if (isBelowSameBlockType)
              continue;
          }
          if (match5.length > 1) {
            deleteText(editor, {
              at: matchRange
            });
          }
          if (preFormat2) {
            preFormat2(editor);
          }
          if (!format2) {
            setElements(editor, {
              type
            }, {
              match: (n2) => isBlock(editor, n2)
            });
          } else {
            format2(editor);
          }
          return true;
        }
        return false;
      };
      const isPreviousCharacterEmpty = (editor, at) => {
        const range = getRangeBefore(editor, at);
        if (range) {
          const text2 = getEditorString(editor, range);
          if (text2) {
            const noWhiteSpaceRegex = new RegExp(`\\S+`);
            return !text2.match(noWhiteSpaceRegex);
          }
        }
        return true;
      };
      const getMatchPoints = (editor, {
        start,
        end
      }) => {
        const selection = editor.selection;
        let beforeEndMatchPoint = selection.anchor;
        if (end) {
          beforeEndMatchPoint = getPointBeforeLocation(editor, selection, {
            matchString: end
          });
          if (!beforeEndMatchPoint)
            return;
        }
        let afterStartMatchPoint;
        let beforeStartMatchPoint;
        if (start) {
          afterStartMatchPoint = getPointBeforeLocation(editor, beforeEndMatchPoint, {
            matchString: start,
            skipInvalid: true,
            afterMatch: true
          });
          if (!afterStartMatchPoint)
            return;
          beforeStartMatchPoint = getPointBeforeLocation(editor, beforeEndMatchPoint, {
            matchString: start,
            skipInvalid: true
          });
          if (!isPreviousCharacterEmpty(editor, beforeStartMatchPoint))
            return;
        }
        return {
          afterStartMatchPoint,
          beforeStartMatchPoint,
          beforeEndMatchPoint
        };
      };
      const autoformatMark = (editor, {
        type,
        text: text2,
        trigger,
        match: _match,
        ignoreTrim
      }) => {
        if (!type)
          return false;
        const selection = editor.selection;
        const matches = castArray_1$1(_match);
        for (const match5 of matches) {
          const {
            start,
            end,
            triggers
          } = getMatchRange({
            match: match5,
            trigger
          });
          if (!triggers.includes(text2))
            continue;
          const matched = getMatchPoints(editor, {
            start,
            end
          });
          if (!matched)
            continue;
          const {
            afterStartMatchPoint,
            beforeEndMatchPoint,
            beforeStartMatchPoint
          } = matched;
          const matchRange = {
            anchor: afterStartMatchPoint,
            focus: beforeEndMatchPoint
          };
          if (!ignoreTrim) {
            const matchText = getEditorString(editor, matchRange);
            if (matchText.trim() !== matchText)
              continue;
          }
          if (end) {
            deleteText(editor, {
              at: {
                anchor: beforeEndMatchPoint,
                focus: selection.anchor
              }
            });
          }
          const marks = castArray_1$1(type);
          select(editor, matchRange);
          marks.forEach((mark) => {
            editor.addMark(mark, true);
          });
          collapseSelection(editor, {
            edge: "end"
          });
          removeMark(editor, {
            key: marks,
            shouldChange: false
          });
          deleteText(editor, {
            at: {
              anchor: beforeStartMatchPoint,
              focus: afterStartMatchPoint
            }
          });
          return true;
        }
        return false;
      };
      const autoformatText = (editor, {
        text: text2,
        match: _match,
        trigger,
        format: format2
      }) => {
        const selection = editor.selection;
        const matches = castArray_1$1(_match);
        for (const match5 of matches) {
          const {
            start,
            end,
            triggers
          } = getMatchRange({
            match: Array.isArray(format2) ? match5 : {
              start: "",
              end: match5
            },
            trigger
          });
          if (!triggers.includes(text2))
            continue;
          const matched = getMatchPoints(editor, {
            start,
            end
          });
          if (!matched)
            continue;
          const {
            afterStartMatchPoint,
            beforeEndMatchPoint,
            beforeStartMatchPoint
          } = matched;
          if (end) {
            deleteText(editor, {
              at: {
                anchor: beforeEndMatchPoint,
                focus: selection.anchor
              }
            });
          }
          if (typeof format2 === "function") {
            format2(editor, matched);
          } else {
            const formatEnd = Array.isArray(format2) ? format2[1] : format2;
            editor.insertText(formatEnd);
            if (beforeStartMatchPoint) {
              const formatStart = Array.isArray(format2) ? format2[0] : format2;
              deleteText(editor, {
                at: {
                  anchor: beforeStartMatchPoint,
                  focus: afterStartMatchPoint
                }
              });
              insertText(editor, formatStart, {
                at: beforeStartMatchPoint
              });
            }
          }
          return true;
        }
        return false;
      };
      const withAutoformat = (editor, {
        options: {
          rules
        }
      }) => {
        const {
          insertText: insertText2
        } = editor;
        editor.insertText = (text2) => {
          if (!isCollapsed(editor.selection))
            return insertText2(text2);
          for (const rule of rules) {
            var _autoformatter$mode;
            const {
              mode = "text",
              insertTrigger,
              query
            } = rule;
            if (query && !query(editor, {
              ...rule,
              text: text2
            }))
              continue;
            const autoformatter = {
              block: autoformatBlock,
              mark: autoformatMark,
              text: autoformatText
            };
            if ((_autoformatter$mode = autoformatter[mode]) !== null && _autoformatter$mode !== void 0 && _autoformatter$mode.call(autoformatter, editor, {
              ...rule,
              text: text2
            })) {
              return insertTrigger && insertText2(text2);
            }
          }
          insertText2(text2);
        };
        return editor;
      };
      const KEY_AUTOFORMAT = "autoformat";
      const createAutoformatPlugin = createPluginFactory({
        key: KEY_AUTOFORMAT,
        withOverrides: withAutoformat,
        handlers: {
          onKeyDown: onKeyDownAutoformat
        },
        options: {
          rules: []
        }
      });
      const ELEMENT_BLOCKQUOTE = "blockquote";
      const createBlockquotePlugin = createPluginFactory({
        key: ELEMENT_BLOCKQUOTE,
        isElement: true,
        deserializeHtml: {
          rules: [{
            validNodeName: "BLOCKQUOTE"
          }]
        },
        handlers: {
          onKeyDown: onKeyDownToggleElement
        },
        options: {
          hotkey: "mod+shift+."
        }
      });
      var prism = { exports: {} };
      (function(module2) {
        var _self = typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : {};
        var Prism2 = function(_self2) {
          var lang2 = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
          var uniqueId = 0;
          var plainTextGrammar = {};
          var _2 = {
            manual: _self2.Prism && _self2.Prism.manual,
            disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,
            util: {
              encode: function encode(tokens2) {
                if (tokens2 instanceof Token2) {
                  return new Token2(tokens2.type, encode(tokens2.content), tokens2.alias);
                } else if (Array.isArray(tokens2)) {
                  return tokens2.map(encode);
                } else {
                  return tokens2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
                }
              },
              type: function(o2) {
                return Object.prototype.toString.call(o2).slice(8, -1);
              },
              objId: function(obj) {
                if (!obj["__id"]) {
                  Object.defineProperty(obj, "__id", { value: ++uniqueId });
                }
                return obj["__id"];
              },
              clone: function deepClone(o2, visited) {
                visited = visited || {};
                var clone2;
                var id2;
                switch (_2.util.type(o2)) {
                  case "Object":
                    id2 = _2.util.objId(o2);
                    if (visited[id2]) {
                      return visited[id2];
                    }
                    clone2 = {};
                    visited[id2] = clone2;
                    for (var key in o2) {
                      if (o2.hasOwnProperty(key)) {
                        clone2[key] = deepClone(o2[key], visited);
                      }
                    }
                    return clone2;
                  case "Array":
                    id2 = _2.util.objId(o2);
                    if (visited[id2]) {
                      return visited[id2];
                    }
                    clone2 = [];
                    visited[id2] = clone2;
                    o2.forEach(function(v2, i2) {
                      clone2[i2] = deepClone(v2, visited);
                    });
                    return clone2;
                  default:
                    return o2;
                }
              },
              getLanguage: function(element) {
                while (element) {
                  var m2 = lang2.exec(element.className);
                  if (m2) {
                    return m2[1].toLowerCase();
                  }
                  element = element.parentElement;
                }
                return "none";
              },
              setLanguage: function(element, language) {
                element.className = element.className.replace(RegExp(lang2, "gi"), "");
                element.classList.add("language-" + language);
              },
              currentScript: function() {
                if (typeof document === "undefined") {
                  return null;
                }
                if ("currentScript" in document && 1 < 2) {
                  return document.currentScript;
                }
                try {
                  throw new Error();
                } catch (err) {
                  var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
                  if (src) {
                    var scripts = document.getElementsByTagName("script");
                    for (var i2 in scripts) {
                      if (scripts[i2].src == src) {
                        return scripts[i2];
                      }
                    }
                  }
                  return null;
                }
              },
              isActive: function(element, className, defaultActivation) {
                var no = "no-" + className;
                while (element) {
                  var classList = element.classList;
                  if (classList.contains(className)) {
                    return true;
                  }
                  if (classList.contains(no)) {
                    return false;
                  }
                  element = element.parentElement;
                }
                return !!defaultActivation;
              }
            },
            languages: {
              plain: plainTextGrammar,
              plaintext: plainTextGrammar,
              text: plainTextGrammar,
              txt: plainTextGrammar,
              extend: function(id2, redef) {
                var lang3 = _2.util.clone(_2.languages[id2]);
                for (var key in redef) {
                  lang3[key] = redef[key];
                }
                return lang3;
              },
              insertBefore: function(inside, before, insert, root2) {
                root2 = root2 || _2.languages;
                var grammar = root2[inside];
                var ret = {};
                for (var token2 in grammar) {
                  if (grammar.hasOwnProperty(token2)) {
                    if (token2 == before) {
                      for (var newToken in insert) {
                        if (insert.hasOwnProperty(newToken)) {
                          ret[newToken] = insert[newToken];
                        }
                      }
                    }
                    if (!insert.hasOwnProperty(token2)) {
                      ret[token2] = grammar[token2];
                    }
                  }
                }
                var old = root2[inside];
                root2[inside] = ret;
                _2.languages.DFS(_2.languages, function(key, value) {
                  if (value === old && key != inside) {
                    this[key] = ret;
                  }
                });
                return ret;
              },
              DFS: function DFS(o2, callback, type, visited) {
                visited = visited || {};
                var objId = _2.util.objId;
                for (var i2 in o2) {
                  if (o2.hasOwnProperty(i2)) {
                    callback.call(o2, i2, o2[i2], type || i2);
                    var property2 = o2[i2];
                    var propertyType = _2.util.type(property2);
                    if (propertyType === "Object" && !visited[objId(property2)]) {
                      visited[objId(property2)] = true;
                      DFS(property2, callback, null, visited);
                    } else if (propertyType === "Array" && !visited[objId(property2)]) {
                      visited[objId(property2)] = true;
                      DFS(property2, callback, i2, visited);
                    }
                  }
                }
              }
            },
            plugins: {},
            highlightAll: function(async, callback) {
              _2.highlightAllUnder(document, async, callback);
            },
            highlightAllUnder: function(container, async, callback) {
              var env = {
                callback,
                container,
                selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
              };
              _2.hooks.run("before-highlightall", env);
              env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
              _2.hooks.run("before-all-elements-highlight", env);
              for (var i2 = 0, element; element = env.elements[i2++]; ) {
                _2.highlightElement(element, async === true, env.callback);
              }
            },
            highlightElement: function(element, async, callback) {
              var language = _2.util.getLanguage(element);
              var grammar = _2.languages[language];
              _2.util.setLanguage(element, language);
              var parent2 = element.parentElement;
              if (parent2 && parent2.nodeName.toLowerCase() === "pre") {
                _2.util.setLanguage(parent2, language);
              }
              var code = element.textContent;
              var env = {
                element,
                language,
                grammar,
                code
              };
              function insertHighlightedCode(highlightedCode) {
                env.highlightedCode = highlightedCode;
                _2.hooks.run("before-insert", env);
                env.element.innerHTML = env.highlightedCode;
                _2.hooks.run("after-highlight", env);
                _2.hooks.run("complete", env);
                callback && callback.call(env.element);
              }
              _2.hooks.run("before-sanity-check", env);
              parent2 = env.element.parentElement;
              if (parent2 && parent2.nodeName.toLowerCase() === "pre" && !parent2.hasAttribute("tabindex")) {
                parent2.setAttribute("tabindex", "0");
              }
              if (!env.code) {
                _2.hooks.run("complete", env);
                callback && callback.call(env.element);
                return;
              }
              _2.hooks.run("before-highlight", env);
              if (!env.grammar) {
                insertHighlightedCode(_2.util.encode(env.code));
                return;
              }
              if (async && _self2.Worker) {
                var worker = new Worker(_2.filename);
                worker.onmessage = function(evt) {
                  insertHighlightedCode(evt.data);
                };
                worker.postMessage(JSON.stringify({
                  language: env.language,
                  code: env.code,
                  immediateClose: true
                }));
              } else {
                insertHighlightedCode(_2.highlight(env.code, env.grammar, env.language));
              }
            },
            highlight: function(text2, grammar, language) {
              var env = {
                code: text2,
                grammar,
                language
              };
              _2.hooks.run("before-tokenize", env);
              if (!env.grammar) {
                throw new Error('The language "' + env.language + '" has no grammar.');
              }
              env.tokens = _2.tokenize(env.code, env.grammar);
              _2.hooks.run("after-tokenize", env);
              return Token2.stringify(_2.util.encode(env.tokens), env.language);
            },
            tokenize: function(text2, grammar) {
              var rest = grammar.rest;
              if (rest) {
                for (var token2 in rest) {
                  grammar[token2] = rest[token2];
                }
                delete grammar.rest;
              }
              var tokenList = new LinkedList();
              addAfter(tokenList, tokenList.head, text2);
              matchGrammar(text2, tokenList, grammar, tokenList.head, 0);
              return toArray2(tokenList);
            },
            hooks: {
              all: {},
              add: function(name2, callback) {
                var hooks2 = _2.hooks.all;
                hooks2[name2] = hooks2[name2] || [];
                hooks2[name2].push(callback);
              },
              run: function(name2, env) {
                var callbacks = _2.hooks.all[name2];
                if (!callbacks || !callbacks.length) {
                  return;
                }
                for (var i2 = 0, callback; callback = callbacks[i2++]; ) {
                  callback(env);
                }
              }
            },
            Token: Token2
          };
          _self2.Prism = _2;
          function Token2(type, content2, alias, matchedStr) {
            this.type = type;
            this.content = content2;
            this.alias = alias;
            this.length = (matchedStr || "").length | 0;
          }
          Token2.stringify = function stringify2(o2, language) {
            if (typeof o2 == "string") {
              return o2;
            }
            if (Array.isArray(o2)) {
              var s2 = "";
              o2.forEach(function(e2) {
                s2 += stringify2(e2, language);
              });
              return s2;
            }
            var env = {
              type: o2.type,
              content: stringify2(o2.content, language),
              tag: "span",
              classes: ["token", o2.type],
              attributes: {},
              language
            };
            var aliases2 = o2.alias;
            if (aliases2) {
              if (Array.isArray(aliases2)) {
                Array.prototype.push.apply(env.classes, aliases2);
              } else {
                env.classes.push(aliases2);
              }
            }
            _2.hooks.run("wrap", env);
            var attributes = "";
            for (var name2 in env.attributes) {
              attributes += " " + name2 + '="' + (env.attributes[name2] || "").replace(/"/g, "&quot;") + '"';
            }
            return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes + ">" + env.content + "</" + env.tag + ">";
          };
          function matchPattern(pattern, pos, text2, lookbehind) {
            pattern.lastIndex = pos;
            var match5 = pattern.exec(text2);
            if (match5 && lookbehind && match5[1]) {
              var lookbehindLength = match5[1].length;
              match5.index += lookbehindLength;
              match5[0] = match5[0].slice(lookbehindLength);
            }
            return match5;
          }
          function matchGrammar(text2, tokenList, grammar, startNode, startPos, rematch) {
            for (var token2 in grammar) {
              if (!grammar.hasOwnProperty(token2) || !grammar[token2]) {
                continue;
              }
              var patterns = grammar[token2];
              patterns = Array.isArray(patterns) ? patterns : [patterns];
              for (var j2 = 0; j2 < patterns.length; ++j2) {
                if (rematch && rematch.cause == token2 + "," + j2) {
                  return;
                }
                var patternObj = patterns[j2];
                var inside = patternObj.inside;
                var lookbehind = !!patternObj.lookbehind;
                var greedy = !!patternObj.greedy;
                var alias = patternObj.alias;
                if (greedy && !patternObj.pattern.global) {
                  var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
                  patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g");
                }
                var pattern = patternObj.pattern || patternObj;
                for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
                  if (rematch && pos >= rematch.reach) {
                    break;
                  }
                  var str = currentNode.value;
                  if (tokenList.length > text2.length) {
                    return;
                  }
                  if (str instanceof Token2) {
                    continue;
                  }
                  var removeCount = 1;
                  var match5;
                  if (greedy) {
                    match5 = matchPattern(pattern, pos, text2, lookbehind);
                    if (!match5 || match5.index >= text2.length) {
                      break;
                    }
                    var from2 = match5.index;
                    var to2 = match5.index + match5[0].length;
                    var p2 = pos;
                    p2 += currentNode.value.length;
                    while (from2 >= p2) {
                      currentNode = currentNode.next;
                      p2 += currentNode.value.length;
                    }
                    p2 -= currentNode.value.length;
                    pos = p2;
                    if (currentNode.value instanceof Token2) {
                      continue;
                    }
                    for (var k2 = currentNode; k2 !== tokenList.tail && (p2 < to2 || typeof k2.value === "string"); k2 = k2.next) {
                      removeCount++;
                      p2 += k2.value.length;
                    }
                    removeCount--;
                    str = text2.slice(pos, p2);
                    match5.index -= pos;
                  } else {
                    match5 = matchPattern(pattern, 0, str, lookbehind);
                    if (!match5) {
                      continue;
                    }
                  }
                  var from2 = match5.index;
                  var matchStr = match5[0];
                  var before = str.slice(0, from2);
                  var after = str.slice(from2 + matchStr.length);
                  var reach = pos + str.length;
                  if (rematch && reach > rematch.reach) {
                    rematch.reach = reach;
                  }
                  var removeFrom = currentNode.prev;
                  if (before) {
                    removeFrom = addAfter(tokenList, removeFrom, before);
                    pos += before.length;
                  }
                  removeRange(tokenList, removeFrom, removeCount);
                  var wrapped = new Token2(token2, inside ? _2.tokenize(matchStr, inside) : matchStr, alias, matchStr);
                  currentNode = addAfter(tokenList, removeFrom, wrapped);
                  if (after) {
                    addAfter(tokenList, currentNode, after);
                  }
                  if (removeCount > 1) {
                    var nestedRematch = {
                      cause: token2 + "," + j2,
                      reach
                    };
                    matchGrammar(text2, tokenList, grammar, currentNode.prev, pos, nestedRematch);
                    if (rematch && nestedRematch.reach > rematch.reach) {
                      rematch.reach = nestedRematch.reach;
                    }
                  }
                }
              }
            }
          }
          function LinkedList() {
            var head = { value: null, prev: null, next: null };
            var tail = { value: null, prev: head, next: null };
            head.next = tail;
            this.head = head;
            this.tail = tail;
            this.length = 0;
          }
          function addAfter(list2, node, value) {
            var next = node.next;
            var newNode = { value, prev: node, next };
            node.next = newNode;
            next.prev = newNode;
            list2.length++;
            return newNode;
          }
          function removeRange(list2, node, count) {
            var next = node.next;
            for (var i2 = 0; i2 < count && next !== list2.tail; i2++) {
              next = next.next;
            }
            node.next = next;
            next.prev = node;
            list2.length -= i2;
          }
          function toArray2(list2) {
            var array = [];
            var node = list2.head.next;
            while (node !== list2.tail) {
              array.push(node.value);
              node = node.next;
            }
            return array;
          }
          if (!_self2.document) {
            if (!_self2.addEventListener) {
              return _2;
            }
            if (!_2.disableWorkerMessageHandler) {
              _self2.addEventListener("message", function(evt) {
                var message2 = JSON.parse(evt.data);
                var lang3 = message2.language;
                var code = message2.code;
                var immediateClose = message2.immediateClose;
                _self2.postMessage(_2.highlight(code, _2.languages[lang3], lang3));
                if (immediateClose) {
                  _self2.close();
                }
              }, false);
            }
            return _2;
          }
          var script = _2.util.currentScript();
          if (script) {
            _2.filename = script.src;
            if (script.hasAttribute("data-manual")) {
              _2.manual = true;
            }
          }
          function highlightAutomaticallyCallback() {
            if (!_2.manual) {
              _2.highlightAll();
            }
          }
          if (!_2.manual) {
            var readyState = document.readyState;
            if (readyState === "loading" || readyState === "interactive" && script && script.defer) {
              document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback);
            } else {
              if (window.requestAnimationFrame) {
                window.requestAnimationFrame(highlightAutomaticallyCallback);
              } else {
                window.setTimeout(highlightAutomaticallyCallback, 16);
              }
            }
          }
          return _2;
        }(_self);
        if (module2.exports) {
          module2.exports = Prism2;
        }
        if (typeof commonjsGlobal$4 !== "undefined") {
          commonjsGlobal$4.Prism = Prism2;
        }
        Prism2.languages.markup = {
          "comment": {
            pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
            greedy: true
          },
          "prolog": {
            pattern: /<\?[\s\S]+?\?>/,
            greedy: true
          },
          "doctype": {
            pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
            greedy: true,
            inside: {
              "internal-subset": {
                pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
                lookbehind: true,
                greedy: true,
                inside: null
              },
              "string": {
                pattern: /"[^"]*"|'[^']*'/,
                greedy: true
              },
              "punctuation": /^<!|>$|[[\]]/,
              "doctype-tag": /^DOCTYPE/i,
              "name": /[^\s<>'"]+/
            }
          },
          "cdata": {
            pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
            greedy: true
          },
          "tag": {
            pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
            greedy: true,
            inside: {
              "tag": {
                pattern: /^<\/?[^\s>\/]+/,
                inside: {
                  "punctuation": /^<\/?/,
                  "namespace": /^[^\s>\/:]+:/
                }
              },
              "special-attr": [],
              "attr-value": {
                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
                inside: {
                  "punctuation": [
                    {
                      pattern: /^=/,
                      alias: "attr-equals"
                    },
                    /"|'/
                  ]
                }
              },
              "punctuation": /\/?>/,
              "attr-name": {
                pattern: /[^\s>\/]+/,
                inside: {
                  "namespace": /^[^\s>\/:]+:/
                }
              }
            }
          },
          "entity": [
            {
              pattern: /&[\da-z]{1,8};/i,
              alias: "named-entity"
            },
            /&#x?[\da-f]{1,8};/i
          ]
        };
        Prism2.languages.markup["tag"].inside["attr-value"].inside["entity"] = Prism2.languages.markup["entity"];
        Prism2.languages.markup["doctype"].inside["internal-subset"].inside = Prism2.languages.markup;
        Prism2.hooks.add("wrap", function(env) {
          if (env.type === "entity") {
            env.attributes["title"] = env.content.replace(/&amp;/, "&");
          }
        });
        Object.defineProperty(Prism2.languages.markup.tag, "addInlined", {
          value: function addInlined(tagName, lang2) {
            var includedCdataInside = {};
            includedCdataInside["language-" + lang2] = {
              pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
              lookbehind: true,
              inside: Prism2.languages[lang2]
            };
            includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
            var inside = {
              "included-cdata": {
                pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
                inside: includedCdataInside
              }
            };
            inside["language-" + lang2] = {
              pattern: /[\s\S]+/,
              inside: Prism2.languages[lang2]
            };
            var def = {};
            def[tagName] = {
              pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
                return tagName;
              }), "i"),
              lookbehind: true,
              greedy: true,
              inside
            };
            Prism2.languages.insertBefore("markup", "cdata", def);
          }
        });
        Object.defineProperty(Prism2.languages.markup.tag, "addAttribute", {
          value: function(attrName, lang2) {
            Prism2.languages.markup.tag.inside["special-attr"].push({
              pattern: RegExp(/(^|["'\s])/.source + "(?:" + attrName + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, "i"),
              lookbehind: true,
              inside: {
                "attr-name": /^[^\s=]+/,
                "attr-value": {
                  pattern: /=[\s\S]+/,
                  inside: {
                    "value": {
                      pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                      lookbehind: true,
                      alias: [lang2, "language-" + lang2],
                      inside: Prism2.languages[lang2]
                    },
                    "punctuation": [
                      {
                        pattern: /^=/,
                        alias: "attr-equals"
                      },
                      /"|'/
                    ]
                  }
                }
              }
            });
          }
        });
        Prism2.languages.html = Prism2.languages.markup;
        Prism2.languages.mathml = Prism2.languages.markup;
        Prism2.languages.svg = Prism2.languages.markup;
        Prism2.languages.xml = Prism2.languages.extend("markup", {});
        Prism2.languages.ssml = Prism2.languages.xml;
        Prism2.languages.atom = Prism2.languages.xml;
        Prism2.languages.rss = Prism2.languages.xml;
        (function(Prism3) {
          var string2 = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
          Prism3.languages.css = {
            "comment": /\/\*[\s\S]*?\*\//,
            "atrule": {
              pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
              inside: {
                "rule": /^@[\w-]+/,
                "selector-function-argument": {
                  pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
                  lookbehind: true,
                  alias: "selector"
                },
                "keyword": {
                  pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
                  lookbehind: true
                }
              }
            },
            "url": {
              pattern: RegExp("\\burl\\((?:" + string2.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
              greedy: true,
              inside: {
                "function": /^url/i,
                "punctuation": /^\(|\)$/,
                "string": {
                  pattern: RegExp("^" + string2.source + "$"),
                  alias: "url"
                }
              }
            },
            "selector": {
              pattern: RegExp(`(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + string2.source + ")*(?=\\s*\\{)"),
              lookbehind: true
            },
            "string": {
              pattern: string2,
              greedy: true
            },
            "property": {
              pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
              lookbehind: true
            },
            "important": /!important\b/i,
            "function": {
              pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
              lookbehind: true
            },
            "punctuation": /[(){};:,]/
          };
          Prism3.languages.css["atrule"].inside.rest = Prism3.languages.css;
          var markup = Prism3.languages.markup;
          if (markup) {
            markup.tag.addInlined("style", "css");
            markup.tag.addAttribute("style", "css");
          }
        })(Prism2);
        Prism2.languages.clike = {
          "comment": [
            {
              pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /(^|[^\\:])\/\/.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          "string": {
            pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          "class-name": {
            pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
            lookbehind: true,
            inside: {
              "punctuation": /[.\\]/
            }
          },
          "keyword": /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
          "boolean": /\b(?:false|true)\b/,
          "function": /\b\w+(?=\()/,
          "number": /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
          "operator": /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
          "punctuation": /[{}[\];(),.:]/
        };
        Prism2.languages.javascript = Prism2.languages.extend("clike", {
          "class-name": [
            Prism2.languages.clike["class-name"],
            {
              pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
              lookbehind: true
            }
          ],
          "keyword": [
            {
              pattern: /((?:^|\})\s*)catch\b/,
              lookbehind: true
            },
            {
              pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
              lookbehind: true
            }
          ],
          "function": /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
          "number": {
            pattern: RegExp(/(^|[^\w$])/.source + "(?:" + (/NaN|Infinity/.source + "|" + /0[bB][01]+(?:_[01]+)*n?/.source + "|" + /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + /\d+(?:_\d+)*n/.source + "|" + /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source),
            lookbehind: true
          },
          "operator": /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
        });
        Prism2.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
        Prism2.languages.insertBefore("javascript", "keyword", {
          "regex": {
            pattern: RegExp(/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source + /\//.source + "(?:" + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + "|" + /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ")" + /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),
            lookbehind: true,
            greedy: true,
            inside: {
              "regex-source": {
                pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
                lookbehind: true,
                alias: "language-regex",
                inside: Prism2.languages.regex
              },
              "regex-delimiter": /^\/|\/$/,
              "regex-flags": /^[a-z]+$/
            }
          },
          "function-variable": {
            pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
            alias: "function"
          },
          "parameter": [
            {
              pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
              lookbehind: true,
              inside: Prism2.languages.javascript
            },
            {
              pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
              lookbehind: true,
              inside: Prism2.languages.javascript
            },
            {
              pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
              lookbehind: true,
              inside: Prism2.languages.javascript
            },
            {
              pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
              lookbehind: true,
              inside: Prism2.languages.javascript
            }
          ],
          "constant": /\b[A-Z](?:[A-Z_]|\dx?)*\b/
        });
        Prism2.languages.insertBefore("javascript", "string", {
          "hashbang": {
            pattern: /^#!.*/,
            greedy: true,
            alias: "comment"
          },
          "template-string": {
            pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
            greedy: true,
            inside: {
              "template-punctuation": {
                pattern: /^`|`$/,
                alias: "string"
              },
              "interpolation": {
                pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
                lookbehind: true,
                inside: {
                  "interpolation-punctuation": {
                    pattern: /^\$\{|\}$/,
                    alias: "punctuation"
                  },
                  rest: Prism2.languages.javascript
                }
              },
              "string": /[\s\S]+/
            }
          },
          "string-property": {
            pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
            lookbehind: true,
            greedy: true,
            alias: "property"
          }
        });
        Prism2.languages.insertBefore("javascript", "operator", {
          "literal-property": {
            pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
            lookbehind: true,
            alias: "property"
          }
        });
        if (Prism2.languages.markup) {
          Prism2.languages.markup.tag.addInlined("script", "javascript");
          Prism2.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, "javascript");
        }
        Prism2.languages.js = Prism2.languages.javascript;
        (function() {
          if (typeof Prism2 === "undefined" || typeof document === "undefined") {
            return;
          }
          if (!Element.prototype.matches) {
            Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
          }
          var LOADING_MESSAGE = "Loading\u2026";
          var FAILURE_MESSAGE = function(status, message2) {
            return "\u2716 Error " + status + " while fetching file: " + message2;
          };
          var FAILURE_EMPTY_MESSAGE = "\u2716 Error: File does not exist or is empty";
          var EXTENSIONS = {
            "js": "javascript",
            "py": "python",
            "rb": "ruby",
            "ps1": "powershell",
            "psm1": "powershell",
            "sh": "bash",
            "bat": "batch",
            "h": "c",
            "tex": "latex"
          };
          var STATUS_ATTR = "data-src-status";
          var STATUS_LOADING = "loading";
          var STATUS_LOADED = "loaded";
          var STATUS_FAILED = "failed";
          var SELECTOR = "pre[data-src]:not([" + STATUS_ATTR + '="' + STATUS_LOADED + '"]):not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';
          function loadFile(src, success, error) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", src, true);
            xhr.onreadystatechange = function() {
              if (xhr.readyState == 4) {
                if (xhr.status < 400 && xhr.responseText) {
                  success(xhr.responseText);
                } else {
                  if (xhr.status >= 400) {
                    error(FAILURE_MESSAGE(xhr.status, xhr.statusText));
                  } else {
                    error(FAILURE_EMPTY_MESSAGE);
                  }
                }
              }
            };
            xhr.send(null);
          }
          function parseRange(range) {
            var m2 = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range || "");
            if (m2) {
              var start = Number(m2[1]);
              var comma = m2[2];
              var end = m2[3];
              if (!comma) {
                return [start, start];
              }
              if (!end) {
                return [start, void 0];
              }
              return [start, Number(end)];
            }
            return void 0;
          }
          Prism2.hooks.add("before-highlightall", function(env) {
            env.selector += ", " + SELECTOR;
          });
          Prism2.hooks.add("before-sanity-check", function(env) {
            var pre = env.element;
            if (pre.matches(SELECTOR)) {
              env.code = "";
              pre.setAttribute(STATUS_ATTR, STATUS_LOADING);
              var code = pre.appendChild(document.createElement("CODE"));
              code.textContent = LOADING_MESSAGE;
              var src = pre.getAttribute("data-src");
              var language = env.language;
              if (language === "none") {
                var extension = (/\.(\w+)$/.exec(src) || [, "none"])[1];
                language = EXTENSIONS[extension] || extension;
              }
              Prism2.util.setLanguage(code, language);
              Prism2.util.setLanguage(pre, language);
              var autoloader = Prism2.plugins.autoloader;
              if (autoloader) {
                autoloader.loadLanguages(language);
              }
              loadFile(src, function(text2) {
                pre.setAttribute(STATUS_ATTR, STATUS_LOADED);
                var range = parseRange(pre.getAttribute("data-range"));
                if (range) {
                  var lines = text2.split(/\r\n?|\n/g);
                  var start = range[0];
                  var end = range[1] == null ? lines.length : range[1];
                  if (start < 0) {
                    start += lines.length;
                  }
                  start = Math.max(0, Math.min(start - 1, lines.length));
                  if (end < 0) {
                    end += lines.length;
                  }
                  end = Math.max(0, Math.min(end, lines.length));
                  text2 = lines.slice(start, end).join("\n");
                  if (!pre.hasAttribute("data-start")) {
                    pre.setAttribute("data-start", String(start + 1));
                  }
                }
                code.textContent = text2;
                Prism2.highlightElement(code);
              }, function(error) {
                pre.setAttribute(STATUS_ATTR, STATUS_FAILED);
                code.textContent = error;
              });
            }
          });
          Prism2.plugins.fileHighlight = {
            highlight: function highlight(container) {
              var elements = (container || document).querySelectorAll(SELECTOR);
              for (var i2 = 0, element; element = elements[i2++]; ) {
                Prism2.highlightElement(element);
              }
            }
          };
          var logged = false;
          Prism2.fileHighlight = function() {
            if (!logged) {
              console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.");
              logged = true;
            }
            Prism2.plugins.fileHighlight.highlight.apply(this, arguments);
          };
        })();
      })(prism);
      const ELEMENT_CODE_BLOCK = "code_block";
      const ELEMENT_CODE_LINE = "code_line";
      const ELEMENT_CODE_SYNTAX = "code_syntax";
      Prism.languages.antlr4 = {
        "comment": /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
        "string": {
          pattern: /'(?:\\.|[^\\'\r\n])*'/,
          greedy: true
        },
        "character-class": {
          pattern: /\[(?:\\.|[^\\\]\r\n])*\]/,
          greedy: true,
          alias: "regex",
          inside: {
            "range": {
              pattern: /([^[]|(?:^|[^\\])(?:\\\\)*\\\[)-(?!\])/,
              lookbehind: true,
              alias: "punctuation"
            },
            "escape": /\\(?:u(?:[a-fA-F\d]{4}|\{[a-fA-F\d]+\})|[pP]\{[=\w-]+\}|[^\r\nupP])/,
            "punctuation": /[\[\]]/
          }
        },
        "action": {
          pattern: /\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\}/,
          greedy: true,
          inside: {
            "content": {
              pattern: /(\{)[\s\S]+(?=\})/,
              lookbehind: true
            },
            "punctuation": /[{}]/
          }
        },
        "command": {
          pattern: /(->\s*(?!\s))(?:\s*(?:,\s*)?\b[a-z]\w*(?:\s*\([^()\r\n]*\))?)+(?=\s*;)/i,
          lookbehind: true,
          inside: {
            "function": /\b\w+(?=\s*(?:[,(]|$))/,
            "punctuation": /[,()]/
          }
        },
        "annotation": {
          pattern: /@\w+(?:::\w+)*/,
          alias: "keyword"
        },
        "label": {
          pattern: /#[ \t]*\w+/,
          alias: "punctuation"
        },
        "keyword": /\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\b/,
        "definition": [
          {
            pattern: /\b[a-z]\w*(?=\s*:)/,
            alias: ["rule", "class-name"]
          },
          {
            pattern: /\b[A-Z]\w*(?=\s*:)/,
            alias: ["token", "constant"]
          }
        ],
        "constant": /\b[A-Z][A-Z_]*\b/,
        "operator": /\.\.|->|[|~]|[*+?]\??/,
        "punctuation": /[;:()=]/
      };
      Prism.languages.g4 = Prism.languages.antlr4;
      (function(Prism2) {
        var envVars = "\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b";
        var commandAfterHeredoc = {
          pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
          lookbehind: true,
          alias: "punctuation",
          inside: null
        };
        var insideString = {
          "bash": commandAfterHeredoc,
          "environment": {
            pattern: RegExp("\\$" + envVars),
            alias: "constant"
          },
          "variable": [
            {
              pattern: /\$?\(\([\s\S]+?\)\)/,
              greedy: true,
              inside: {
                "variable": [
                  {
                    pattern: /(^\$\(\([\s\S]+)\)\)/,
                    lookbehind: true
                  },
                  /^\$\(\(/
                ],
                "number": /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
                "operator": /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
                "punctuation": /\(\(?|\)\)?|,|;/
              }
            },
            {
              pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
              greedy: true,
              inside: {
                "variable": /^\$\(|^`|\)$|`$/
              }
            },
            {
              pattern: /\$\{[^}]+\}/,
              greedy: true,
              inside: {
                "operator": /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
                "punctuation": /[\[\]]/,
                "environment": {
                  pattern: RegExp("(\\{)" + envVars),
                  lookbehind: true,
                  alias: "constant"
                }
              }
            },
            /\$(?:\w+|[#?*!@$])/
          ],
          "entity": /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
        };
        Prism2.languages.bash = {
          "shebang": {
            pattern: /^#!\s*\/.*/,
            alias: "important"
          },
          "comment": {
            pattern: /(^|[^"{\\$])#.*/,
            lookbehind: true
          },
          "function-name": [
            {
              pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
              lookbehind: true,
              alias: "function"
            },
            {
              pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
              alias: "function"
            }
          ],
          "for-or-select": {
            pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
            alias: "variable",
            lookbehind: true
          },
          "assign-left": {
            pattern: /(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,
            inside: {
              "environment": {
                pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + envVars),
                lookbehind: true,
                alias: "constant"
              }
            },
            alias: "variable",
            lookbehind: true
          },
          "string": [
            {
              pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
              lookbehind: true,
              greedy: true,
              inside: insideString
            },
            {
              pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
              lookbehind: true,
              greedy: true,
              inside: {
                "bash": commandAfterHeredoc
              }
            },
            {
              pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
              lookbehind: true,
              greedy: true,
              inside: insideString
            },
            {
              pattern: /(^|[^$\\])'[^']*'/,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
              greedy: true,
              inside: {
                "entity": insideString.entity
              }
            }
          ],
          "environment": {
            pattern: RegExp("\\$?" + envVars),
            alias: "constant"
          },
          "variable": insideString.variable,
          "function": {
            pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
            lookbehind: true
          },
          "keyword": {
            pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
            lookbehind: true
          },
          "builtin": {
            pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
            lookbehind: true,
            alias: "class-name"
          },
          "boolean": {
            pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
            lookbehind: true
          },
          "file-descriptor": {
            pattern: /\B&\d\b/,
            alias: "important"
          },
          "operator": {
            pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
            inside: {
              "file-descriptor": {
                pattern: /^\d/,
                alias: "important"
              }
            }
          },
          "punctuation": /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
          "number": {
            pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
            lookbehind: true
          }
        };
        commandAfterHeredoc.inside = Prism2.languages.bash;
        var toBeCopied = [
          "comment",
          "function-name",
          "for-or-select",
          "assign-left",
          "string",
          "environment",
          "function",
          "keyword",
          "builtin",
          "boolean",
          "file-descriptor",
          "operator",
          "punctuation",
          "number"
        ];
        var inside = insideString.variable[1].inside;
        for (var i2 = 0; i2 < toBeCopied.length; i2++) {
          inside[toBeCopied[i2]] = Prism2.languages.bash[toBeCopied[i2]];
        }
        Prism2.languages.shell = Prism2.languages.bash;
      })(Prism);
      Prism.languages.c = Prism.languages.extend("clike", {
        "comment": {
          pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
          greedy: true
        },
        "string": {
          pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
          greedy: true
        },
        "class-name": {
          pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
          lookbehind: true
        },
        "keyword": /\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,
        "function": /\b[a-z_]\w*(?=\s*\()/i,
        "number": /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
        "operator": />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
      });
      Prism.languages.insertBefore("c", "string", {
        "char": {
          pattern: /'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,
          greedy: true
        }
      });
      Prism.languages.insertBefore("c", "string", {
        "macro": {
          pattern: /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
          lookbehind: true,
          greedy: true,
          alias: "property",
          inside: {
            "string": [
              {
                pattern: /^(#\s*include\s*)<[^>]+>/,
                lookbehind: true
              },
              Prism.languages.c["string"]
            ],
            "char": Prism.languages.c["char"],
            "comment": Prism.languages.c["comment"],
            "macro-name": [
              {
                pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
                lookbehind: true
              },
              {
                pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
                lookbehind: true,
                alias: "function"
              }
            ],
            "directive": {
              pattern: /^(#\s*)[a-z]+/,
              lookbehind: true,
              alias: "keyword"
            },
            "directive-hash": /^#/,
            "punctuation": /##|\\(?=[\r\n])/,
            "expression": {
              pattern: /\S[\s\S]*/,
              inside: Prism.languages.c
            }
          }
        }
      });
      Prism.languages.insertBefore("c", "function", {
        "constant": /\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/
      });
      delete Prism.languages.c["boolean"];
      Prism.languages.cmake = {
        "comment": /#.*/,
        "string": {
          pattern: /"(?:[^\\"]|\\.)*"/,
          greedy: true,
          inside: {
            "interpolation": {
              pattern: /\$\{(?:[^{}$]|\$\{[^{}$]*\})*\}/,
              inside: {
                "punctuation": /\$\{|\}/,
                "variable": /\w+/
              }
            }
          }
        },
        "variable": /\b(?:CMAKE_\w+|\w+_(?:(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT|VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_NAME|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE))\b/,
        "property": /\b(?:cxx_\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\w+|\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\b/,
        "keyword": /\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\s*\()\b/,
        "boolean": /\b(?:FALSE|OFF|ON|TRUE)\b/,
        "namespace": /\b(?:INTERFACE|PRIVATE|PROPERTIES|PUBLIC|SHARED|STATIC|TARGET_OBJECTS)\b/,
        "operator": /\b(?:AND|DEFINED|EQUAL|GREATER|LESS|MATCHES|NOT|OR|STREQUAL|STRGREATER|STRLESS|VERSION_EQUAL|VERSION_GREATER|VERSION_LESS)\b/,
        "inserted": {
          pattern: /\b\w+::\w+\b/,
          alias: "class-name"
        },
        "number": /\b\d+(?:\.\d+)*\b/,
        "function": /\b[a-z_]\w*(?=\s*\()\b/i,
        "punctuation": /[()>}]|\$[<{]/
      };
      (function(Prism2) {
        var comment = /#(?!\{).+/;
        var interpolation = {
          pattern: /#\{[^}]+\}/,
          alias: "variable"
        };
        Prism2.languages.coffeescript = Prism2.languages.extend("javascript", {
          "comment": comment,
          "string": [
            {
              pattern: /'(?:\\[\s\S]|[^\\'])*'/,
              greedy: true
            },
            {
              pattern: /"(?:\\[\s\S]|[^\\"])*"/,
              greedy: true,
              inside: {
                "interpolation": interpolation
              }
            }
          ],
          "keyword": /\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,
          "class-member": {
            pattern: /@(?!\d)\w+/,
            alias: "variable"
          }
        });
        Prism2.languages.insertBefore("coffeescript", "comment", {
          "multiline-comment": {
            pattern: /###[\s\S]+?###/,
            alias: "comment"
          },
          "block-regex": {
            pattern: /\/{3}[\s\S]*?\/{3}/,
            alias: "regex",
            inside: {
              "comment": comment,
              "interpolation": interpolation
            }
          }
        });
        Prism2.languages.insertBefore("coffeescript", "string", {
          "inline-javascript": {
            pattern: /`(?:\\[\s\S]|[^\\`])*`/,
            inside: {
              "delimiter": {
                pattern: /^`|`$/,
                alias: "punctuation"
              },
              "script": {
                pattern: /[\s\S]+/,
                alias: "language-javascript",
                inside: Prism2.languages.javascript
              }
            }
          },
          "multiline-string": [
            {
              pattern: /'''[\s\S]*?'''/,
              greedy: true,
              alias: "string"
            },
            {
              pattern: /"""[\s\S]*?"""/,
              greedy: true,
              alias: "string",
              inside: {
                interpolation
              }
            }
          ]
        });
        Prism2.languages.insertBefore("coffeescript", "keyword", {
          "property": /(?!\d)\w+(?=\s*:(?!:))/
        });
        delete Prism2.languages.coffeescript["template-string"];
        Prism2.languages.coffee = Prism2.languages.coffeescript;
      })(Prism);
      (function(Prism2) {
        var keyword = /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
        var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g, function() {
          return keyword.source;
        });
        Prism2.languages.cpp = Prism2.languages.extend("c", {
          "class-name": [
            {
              pattern: RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g, function() {
                return keyword.source;
              })),
              lookbehind: true
            },
            /\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,
            /\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,
            /\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/
          ],
          "keyword": keyword,
          "number": {
            pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
            greedy: true
          },
          "operator": />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
          "boolean": /\b(?:false|true)\b/
        });
        Prism2.languages.insertBefore("cpp", "string", {
          "module": {
            pattern: RegExp(/(\b(?:import|module)\s+)/.source + "(?:" + /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source + "|" + /<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g, function() {
              return modName;
            }) + ")"),
            lookbehind: true,
            greedy: true,
            inside: {
              "string": /^[<"][\s\S]+/,
              "operator": /:/,
              "punctuation": /\./
            }
          },
          "raw-string": {
            pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
            alias: "string",
            greedy: true
          }
        });
        Prism2.languages.insertBefore("cpp", "keyword", {
          "generic-function": {
            pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
            inside: {
              "function": /^\w+/,
              "generic": {
                pattern: /<[\s\S]+/,
                alias: "class-name",
                inside: Prism2.languages.cpp
              }
            }
          }
        });
        Prism2.languages.insertBefore("cpp", "operator", {
          "double-colon": {
            pattern: /::/,
            alias: "punctuation"
          }
        });
        Prism2.languages.insertBefore("cpp", "class-name", {
          "base-clause": {
            pattern: /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
            lookbehind: true,
            greedy: true,
            inside: Prism2.languages.extend("cpp", {})
          }
        });
        Prism2.languages.insertBefore("inside", "double-colon", {
          "class-name": /\b[a-z_]\w*\b(?!\s*::)/i
        }, Prism2.languages.cpp["base-clause"]);
      })(Prism);
      (function(Prism2) {
        function replace(pattern, replacements) {
          return pattern.replace(/<<(\d+)>>/g, function(m2, index2) {
            return "(?:" + replacements[+index2] + ")";
          });
        }
        function re2(pattern, replacements, flags) {
          return RegExp(replace(pattern, replacements), flags || "");
        }
        function nested(pattern, depthLog2) {
          for (var i2 = 0; i2 < depthLog2; i2++) {
            pattern = pattern.replace(/<<self>>/g, function() {
              return "(?:" + pattern + ")";
            });
          }
          return pattern.replace(/<<self>>/g, "[^\\s\\S]");
        }
        var keywordKinds = {
          type: "bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void",
          typeDeclaration: "class enum interface record struct",
          contextual: "add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)",
          other: "abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield"
        };
        function keywordsToPattern(words) {
          return "\\b(?:" + words.trim().replace(/ /g, "|") + ")\\b";
        }
        var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);
        var keywords = RegExp(keywordsToPattern(keywordKinds.type + " " + keywordKinds.typeDeclaration + " " + keywordKinds.contextual + " " + keywordKinds.other));
        var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + " " + keywordKinds.contextual + " " + keywordKinds.other);
        var nonContextualKeywords = keywordsToPattern(keywordKinds.type + " " + keywordKinds.typeDeclaration + " " + keywordKinds.other);
        var generic = nested(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source, 2);
        var nestedRound = nested(/\((?:[^()]|<<self>>)*\)/.source, 2);
        var name2 = /@?\b[A-Za-z_]\w*\b/.source;
        var genericName = replace(/<<0>>(?:\s*<<1>>)?/.source, [name2, generic]);
        var identifier = replace(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);
        var array = /\[\s*(?:,\s*)*\]/.source;
        var typeExpressionWithoutTuple = replace(/<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source, [identifier, array]);
        var tupleElement = replace(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);
        var tuple = replace(/\(<<0>>+(?:,<<0>>+)+\)/.source, [tupleElement]);
        var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source, [tuple, identifier, array]);
        var typeInside = {
          "keyword": keywords,
          "punctuation": /[<>()?,.:[\]]/
        };
        var character = /'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source;
        var regularString = /"(?:\\.|[^\\"\r\n])*"/.source;
        var verbatimString = /@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;
        Prism2.languages.csharp = Prism2.languages.extend("clike", {
          "string": [
            {
              pattern: re2(/(^|[^$\\])<<0>>/.source, [verbatimString]),
              lookbehind: true,
              greedy: true
            },
            {
              pattern: re2(/(^|[^@$\\])<<0>>/.source, [regularString]),
              lookbehind: true,
              greedy: true
            }
          ],
          "class-name": [
            {
              pattern: re2(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source, [identifier]),
              lookbehind: true,
              inside: typeInside
            },
            {
              pattern: re2(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source, [name2, typeExpression]),
              lookbehind: true,
              inside: typeInside
            },
            {
              pattern: re2(/(\busing\s+)<<0>>(?=\s*=)/.source, [name2]),
              lookbehind: true
            },
            {
              pattern: re2(/(\b<<0>>\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),
              lookbehind: true,
              inside: typeInside
            },
            {
              pattern: re2(/(\bcatch\s*\(\s*)<<0>>/.source, [identifier]),
              lookbehind: true,
              inside: typeInside
            },
            {
              pattern: re2(/(\bwhere\s+)<<0>>/.source, [name2]),
              lookbehind: true
            },
            {
              pattern: re2(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source, [typeExpressionWithoutTuple]),
              lookbehind: true,
              inside: typeInside
            },
            {
              pattern: re2(/\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source, [typeExpression, nonContextualKeywords, name2]),
              inside: typeInside
            }
          ],
          "keyword": keywords,
          "number": /(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:[dflmu]|lu|ul)?\b/i,
          "operator": />>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,
          "punctuation": /\?\.?|::|[{}[\];(),.:]/
        });
        Prism2.languages.insertBefore("csharp", "number", {
          "range": {
            pattern: /\.\./,
            alias: "operator"
          }
        });
        Prism2.languages.insertBefore("csharp", "punctuation", {
          "named-parameter": {
            pattern: re2(/([(,]\s*)<<0>>(?=\s*:)/.source, [name2]),
            lookbehind: true,
            alias: "punctuation"
          }
        });
        Prism2.languages.insertBefore("csharp", "class-name", {
          "namespace": {
            pattern: re2(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source, [name2]),
            lookbehind: true,
            inside: {
              "punctuation": /\./
            }
          },
          "type-expression": {
            pattern: re2(/(\b(?:default|sizeof|typeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source, [nestedRound]),
            lookbehind: true,
            alias: "class-name",
            inside: typeInside
          },
          "return-type": {
            pattern: re2(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source, [typeExpression, identifier]),
            inside: typeInside,
            alias: "class-name"
          },
          "constructor-invocation": {
            pattern: re2(/(\bnew\s+)<<0>>(?=\s*[[({])/.source, [typeExpression]),
            lookbehind: true,
            inside: typeInside,
            alias: "class-name"
          },
          "generic-method": {
            pattern: re2(/<<0>>\s*<<1>>(?=\s*\()/.source, [name2, generic]),
            inside: {
              "function": re2(/^<<0>>/.source, [name2]),
              "generic": {
                pattern: RegExp(generic),
                alias: "class-name",
                inside: typeInside
              }
            }
          },
          "type-list": {
            pattern: re2(/\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source, [typeDeclarationKeywords, genericName, name2, typeExpression, keywords.source, nestedRound, /\bnew\s*\(\s*\)/.source]),
            lookbehind: true,
            inside: {
              "record-arguments": {
                pattern: re2(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source, [genericName, nestedRound]),
                lookbehind: true,
                greedy: true,
                inside: Prism2.languages.csharp
              },
              "keyword": keywords,
              "class-name": {
                pattern: RegExp(typeExpression),
                greedy: true,
                inside: typeInside
              },
              "punctuation": /[,()]/
            }
          },
          "preprocessor": {
            pattern: /(^[\t ]*)#.*/m,
            lookbehind: true,
            alias: "property",
            inside: {
              "directive": {
                pattern: /(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,
                lookbehind: true,
                alias: "keyword"
              }
            }
          }
        });
        var regularStringOrCharacter = regularString + "|" + character;
        var regularStringCharacterOrComment = replace(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source, [regularStringOrCharacter]);
        var roundExpression = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);
        var attrTarget = /\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source;
        var attr = replace(/<<0>>(?:\s*\(<<1>>*\))?/.source, [identifier, roundExpression]);
        Prism2.languages.insertBefore("csharp", "class-name", {
          "attribute": {
            pattern: re2(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source, [attrTarget, attr]),
            lookbehind: true,
            greedy: true,
            inside: {
              "target": {
                pattern: re2(/^<<0>>(?=\s*:)/.source, [attrTarget]),
                alias: "keyword"
              },
              "attribute-arguments": {
                pattern: re2(/\(<<0>>*\)/.source, [roundExpression]),
                inside: Prism2.languages.csharp
              },
              "class-name": {
                pattern: RegExp(identifier),
                inside: {
                  "punctuation": /\./
                }
              },
              "punctuation": /[:,]/
            }
          }
        });
        var formatString = /:[^}\r\n]+/.source;
        var mInterpolationRound = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);
        var mInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [mInterpolationRound, formatString]);
        var sInterpolationRound = nested(replace(/[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source, [regularStringOrCharacter]), 2);
        var sInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [sInterpolationRound, formatString]);
        function createInterpolationInside(interpolation, interpolationRound) {
          return {
            "interpolation": {
              pattern: re2(/((?:^|[^{])(?:\{\{)*)<<0>>/.source, [interpolation]),
              lookbehind: true,
              inside: {
                "format-string": {
                  pattern: re2(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source, [interpolationRound, formatString]),
                  lookbehind: true,
                  inside: {
                    "punctuation": /^:/
                  }
                },
                "punctuation": /^\{|\}$/,
                "expression": {
                  pattern: /[\s\S]+/,
                  alias: "language-csharp",
                  inside: Prism2.languages.csharp
                }
              }
            },
            "string": /[\s\S]+/
          };
        }
        Prism2.languages.insertBefore("csharp", "string", {
          "interpolation-string": [
            {
              pattern: re2(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source, [mInterpolation]),
              lookbehind: true,
              greedy: true,
              inside: createInterpolationInside(mInterpolation, mInterpolationRound)
            },
            {
              pattern: re2(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source, [sInterpolation]),
              lookbehind: true,
              greedy: true,
              inside: createInterpolationInside(sInterpolation, sInterpolationRound)
            }
          ],
          "char": {
            pattern: RegExp(character),
            greedy: true
          }
        });
        Prism2.languages.dotnet = Prism2.languages.cs = Prism2.languages.csharp;
      })(Prism);
      (function(Prism2) {
        var string2 = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
        Prism2.languages.css = {
          "comment": /\/\*[\s\S]*?\*\//,
          "atrule": {
            pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
            inside: {
              "rule": /^@[\w-]+/,
              "selector-function-argument": {
                pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
                lookbehind: true,
                alias: "selector"
              },
              "keyword": {
                pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
                lookbehind: true
              }
            }
          },
          "url": {
            pattern: RegExp("\\burl\\((?:" + string2.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
            greedy: true,
            inside: {
              "function": /^url/i,
              "punctuation": /^\(|\)$/,
              "string": {
                pattern: RegExp("^" + string2.source + "$"),
                alias: "url"
              }
            }
          },
          "selector": {
            pattern: RegExp(`(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + string2.source + ")*(?=\\s*\\{)"),
            lookbehind: true
          },
          "string": {
            pattern: string2,
            greedy: true
          },
          "property": {
            pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
            lookbehind: true
          },
          "important": /!important\b/i,
          "function": {
            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
            lookbehind: true
          },
          "punctuation": /[(){};:,]/
        };
        Prism2.languages.css["atrule"].inside.rest = Prism2.languages.css;
        var markup = Prism2.languages.markup;
        if (markup) {
          markup.tag.addInlined("style", "css");
          markup.tag.addAttribute("style", "css");
        }
      })(Prism);
      (function(Prism2) {
        var keywords = [
          /\b(?:async|sync|yield)\*/,
          /\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\b/
        ];
        var packagePrefix = /(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;
        var className = {
          pattern: RegExp(packagePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
          lookbehind: true,
          inside: {
            "namespace": {
              pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
              inside: {
                "punctuation": /\./
              }
            }
          }
        };
        Prism2.languages.dart = Prism2.languages.extend("clike", {
          "class-name": [
            className,
            {
              pattern: RegExp(packagePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()])/.source),
              lookbehind: true,
              inside: className.inside
            }
          ],
          "keyword": keywords,
          "operator": /\bis!|\b(?:as|is)\b|\+\+|--|&&|\|\||<<=?|>>=?|~(?:\/=?)?|[+\-*\/%&^|=!<>]=?|\?/
        });
        Prism2.languages.insertBefore("dart", "string", {
          "string-literal": {
            pattern: /r?(?:("""|''')[\s\S]*?\1|(["'])(?:\\.|(?!\2)[^\\\r\n])*\2(?!\2))/,
            greedy: true,
            inside: {
              "interpolation": {
                pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:\w+|\{(?:[^{}]|\{[^{}]*\})*\})/,
                lookbehind: true,
                inside: {
                  "punctuation": /^\$\{?|\}$/,
                  "expression": {
                    pattern: /[\s\S]+/,
                    inside: Prism2.languages.dart
                  }
                }
              },
              "string": /[\s\S]+/
            }
          },
          "string": void 0
        });
        Prism2.languages.insertBefore("dart", "class-name", {
          "metadata": {
            pattern: /@\w+/,
            alias: "function"
          }
        });
        Prism2.languages.insertBefore("dart", "class-name", {
          "generics": {
            pattern: /<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<[\w\s,.&?]*>)*>)*>)*>/,
            inside: {
              "class-name": className,
              "keyword": keywords,
              "punctuation": /[<>(),.:]/,
              "operator": /[?&|]/
            }
          }
        });
      })(Prism);
      (function(Prism2) {
        Prism2.languages.django = {
          "comment": /^\{#[\s\S]*?#\}$/,
          "tag": {
            pattern: /(^\{%[+-]?\s*)\w+/,
            lookbehind: true,
            alias: "keyword"
          },
          "delimiter": {
            pattern: /^\{[{%][+-]?|[+-]?[}%]\}$/,
            alias: "punctuation"
          },
          "string": {
            pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          "filter": {
            pattern: /(\|)\w+/,
            lookbehind: true,
            alias: "function"
          },
          "test": {
            pattern: /(\bis\s+(?:not\s+)?)(?!not\b)\w+/,
            lookbehind: true,
            alias: "function"
          },
          "function": /\b[a-z_]\w+(?=\s*\()/i,
          "keyword": /\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\b/,
          "operator": /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
          "number": /\b\d+(?:\.\d+)?\b/,
          "boolean": /[Ff]alse|[Nn]one|[Tt]rue/,
          "variable": /\b\w+\b/,
          "punctuation": /[{}[\](),.:;]/
        };
        var pattern = /\{\{[\s\S]*?\}\}|\{%[\s\S]*?%\}|\{#[\s\S]*?#\}/g;
        var markupTemplating = Prism2.languages["markup-templating"];
        Prism2.hooks.add("before-tokenize", function(env) {
          markupTemplating.buildPlaceholders(env, "django", pattern);
        });
        Prism2.hooks.add("after-tokenize", function(env) {
          markupTemplating.tokenizePlaceholders(env, "django");
        });
        Prism2.languages.jinja2 = Prism2.languages.django;
        Prism2.hooks.add("before-tokenize", function(env) {
          markupTemplating.buildPlaceholders(env, "jinja2", pattern);
        });
        Prism2.hooks.add("after-tokenize", function(env) {
          markupTemplating.tokenizePlaceholders(env, "jinja2");
        });
      })(Prism);
      (function(Prism2) {
        var spaceAfterBackSlash = /\\[\r\n](?:\s|\\[\r\n]|#.*(?!.))*(?![\s#]|\\[\r\n])/.source;
        var space = /(?:[ \t]+(?![ \t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function() {
          return spaceAfterBackSlash;
        });
        var string2 = /"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"|'(?:[^'\\\r\n]|\\(?:\r\n|[\s\S]))*'/.source;
        var option = /--[\w-]+=(?:<STR>|(?!["'])(?:[^\s\\]|\\.)+)/.source.replace(/<STR>/g, function() {
          return string2;
        });
        var stringRule = {
          pattern: RegExp(string2),
          greedy: true
        };
        var commentRule = {
          pattern: /(^[ \t]*)#.*/m,
          lookbehind: true,
          greedy: true
        };
        function re2(source, flags) {
          source = source.replace(/<OPT>/g, function() {
            return option;
          }).replace(/<SP>/g, function() {
            return space;
          });
          return RegExp(source, flags);
        }
        Prism2.languages.docker = {
          "instruction": {
            pattern: /(^[ \t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\s)(?:\\.|[^\r\n\\])*(?:\\$(?:\s|#.*$)*(?![\s#])(?:\\.|[^\r\n\\])*)*/im,
            lookbehind: true,
            greedy: true,
            inside: {
              "options": {
                pattern: re2(/(^(?:ONBUILD<SP>)?\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, "i"),
                lookbehind: true,
                greedy: true,
                inside: {
                  "property": {
                    pattern: /(^|\s)--[\w-]+/,
                    lookbehind: true
                  },
                  "string": [
                    stringRule,
                    {
                      pattern: /(=)(?!["'])(?:[^\s\\]|\\.)+/,
                      lookbehind: true
                    }
                  ],
                  "operator": /\\$/m,
                  "punctuation": /=/
                }
              },
              "keyword": [
                {
                  pattern: re2(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\b/.source, "i"),
                  lookbehind: true,
                  greedy: true
                },
                {
                  pattern: re2(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \t\\]+<SP>)AS/.source, "i"),
                  lookbehind: true,
                  greedy: true
                },
                {
                  pattern: re2(/(^ONBUILD<SP>)\w+/.source, "i"),
                  lookbehind: true,
                  greedy: true
                },
                {
                  pattern: /^\w+/,
                  greedy: true
                }
              ],
              "comment": commentRule,
              "string": stringRule,
              "variable": /\$(?:\w+|\{[^{}"'\\]*\})/,
              "operator": /\\$/m
            }
          },
          "comment": commentRule
        };
        Prism2.languages.dockerfile = Prism2.languages.docker;
      })(Prism);
      (function(Prism2) {
        Prism2.languages.ejs = {
          "delimiter": {
            pattern: /^<%[-_=]?|[-_]?%>$/,
            alias: "punctuation"
          },
          "comment": /^#[\s\S]*/,
          "language-javascript": {
            pattern: /[\s\S]+/,
            inside: Prism2.languages.javascript
          }
        };
        Prism2.hooks.add("before-tokenize", function(env) {
          var ejsPattern = /<%(?!%)[\s\S]+?%>/g;
          Prism2.languages["markup-templating"].buildPlaceholders(env, "ejs", ejsPattern);
        });
        Prism2.hooks.add("after-tokenize", function(env) {
          Prism2.languages["markup-templating"].tokenizePlaceholders(env, "ejs");
        });
        Prism2.languages.eta = Prism2.languages.ejs;
      })(Prism);
      Prism.languages.erlang = {
        "comment": /%.+/,
        "string": {
          pattern: /"(?:\\.|[^\\"\r\n])*"/,
          greedy: true
        },
        "quoted-function": {
          pattern: /'(?:\\.|[^\\'\r\n])+'(?=\()/,
          alias: "function"
        },
        "quoted-atom": {
          pattern: /'(?:\\.|[^\\'\r\n])+'/,
          alias: "atom"
        },
        "boolean": /\b(?:false|true)\b/,
        "keyword": /\b(?:after|begin|case|catch|end|fun|if|of|receive|try|when)\b/,
        "number": [
          /\$\\?./,
          /\b\d+#[a-z0-9]+/i,
          /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i
        ],
        "function": /\b[a-z][\w@]*(?=\()/,
        "variable": {
          pattern: /(^|[^@])(?:\b|\?)[A-Z_][\w@]*/,
          lookbehind: true
        },
        "operator": [
          /[=\/<>:]=|=[:\/]=|\+\+?|--?|[=*\/!]|\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\b/,
          {
            pattern: /(^|[^<])<(?!<)/,
            lookbehind: true
          },
          {
            pattern: /(^|[^>])>(?!>)/,
            lookbehind: true
          }
        ],
        "atom": /\b[a-z][\w@]*/,
        "punctuation": /[()[\]{}:;,.#|]|<<|>>/
      };
      Prism.languages.git = {
        "comment": /^#.*/m,
        "deleted": /^[-–].*/m,
        "inserted": /^\+.*/m,
        "string": /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
        "command": {
          pattern: /^.*\$ git .*$/m,
          inside: {
            "parameter": /\s--?\w+/
          }
        },
        "coord": /^@@.*@@$/m,
        "commit-sha1": /^commit \w{40}$/m
      };
      Prism.languages.go = Prism.languages.extend("clike", {
        "string": {
          pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,
          lookbehind: true,
          greedy: true
        },
        "keyword": /\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,
        "boolean": /\b(?:_|false|iota|nil|true)\b/,
        "number": [
          /\b0(?:b[01_]+|o[0-7_]+)i?\b/i,
          /\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,
          /(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i
        ],
        "operator": /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,
        "builtin": /\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/
      });
      Prism.languages.insertBefore("go", "string", {
        "char": {
          pattern: /'(?:\\.|[^'\\\r\n]){0,10}'/,
          greedy: true
        }
      });
      delete Prism.languages.go["class-name"];
      Prism.languages.graphql = {
        "comment": /#.*/,
        "description": {
          pattern: /(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,
          greedy: true,
          alias: "string",
          inside: {
            "language-markdown": {
              pattern: /(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,
              lookbehind: true,
              inside: Prism.languages.markdown
            }
          }
        },
        "string": {
          pattern: /"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,
          greedy: true
        },
        "number": /(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
        "boolean": /\b(?:false|true)\b/,
        "variable": /\$[a-z_]\w*/i,
        "directive": {
          pattern: /@[a-z_]\w*/i,
          alias: "function"
        },
        "attr-name": {
          pattern: /\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,
          greedy: true
        },
        "atom-input": {
          pattern: /\b[A-Z]\w*Input\b/,
          alias: "class-name"
        },
        "scalar": /\b(?:Boolean|Float|ID|Int|String)\b/,
        "constant": /\b[A-Z][A-Z_\d]*\b/,
        "class-name": {
          pattern: /(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,
          lookbehind: true
        },
        "fragment": {
          pattern: /(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,
          lookbehind: true,
          alias: "function"
        },
        "definition-mutation": {
          pattern: /(\bmutation\s+)[a-zA-Z_]\w*/,
          lookbehind: true,
          alias: "function"
        },
        "definition-query": {
          pattern: /(\bquery\s+)[a-zA-Z_]\w*/,
          lookbehind: true,
          alias: "function"
        },
        "keyword": /\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,
        "operator": /[!=|&]|\.{3}/,
        "property-query": /\w+(?=\s*\()/,
        "object": /\w+(?=\s*\{)/,
        "punctuation": /[!(){}\[\]:=,]/,
        "property": /\w+/
      };
      Prism.hooks.add("after-tokenize", function afterTokenizeGraphql(env) {
        if (env.language !== "graphql") {
          return;
        }
        var validTokens = env.tokens.filter(function(token2) {
          return typeof token2 !== "string" && token2.type !== "comment" && token2.type !== "scalar";
        });
        var currentIndex = 0;
        function getToken(offset2) {
          return validTokens[currentIndex + offset2];
        }
        function isTokenType(types, offset2) {
          offset2 = offset2 || 0;
          for (var i3 = 0; i3 < types.length; i3++) {
            var token2 = getToken(i3 + offset2);
            if (!token2 || token2.type !== types[i3]) {
              return false;
            }
          }
          return true;
        }
        function findClosingBracket(open, close) {
          var stackHeight = 1;
          for (var i3 = currentIndex; i3 < validTokens.length; i3++) {
            var token2 = validTokens[i3];
            var content2 = token2.content;
            if (token2.type === "punctuation" && typeof content2 === "string") {
              if (open.test(content2)) {
                stackHeight++;
              } else if (close.test(content2)) {
                stackHeight--;
                if (stackHeight === 0) {
                  return i3;
                }
              }
            }
          }
          return -1;
        }
        function addAlias(token2, alias) {
          var aliases2 = token2.alias;
          if (!aliases2) {
            token2.alias = aliases2 = [];
          } else if (!Array.isArray(aliases2)) {
            token2.alias = aliases2 = [aliases2];
          }
          aliases2.push(alias);
        }
        for (; currentIndex < validTokens.length; ) {
          var startToken = validTokens[currentIndex++];
          if (startToken.type === "keyword" && startToken.content === "mutation") {
            var inputVariables = [];
            if (isTokenType(["definition-mutation", "punctuation"]) && getToken(1).content === "(") {
              currentIndex += 2;
              var definitionEnd = findClosingBracket(/^\($/, /^\)$/);
              if (definitionEnd === -1) {
                continue;
              }
              for (; currentIndex < definitionEnd; currentIndex++) {
                var t2 = getToken(0);
                if (t2.type === "variable") {
                  addAlias(t2, "variable-input");
                  inputVariables.push(t2.content);
                }
              }
              currentIndex = definitionEnd + 1;
            }
            if (isTokenType(["punctuation", "property-query"]) && getToken(0).content === "{") {
              currentIndex++;
              addAlias(getToken(0), "property-mutation");
              if (inputVariables.length > 0) {
                var mutationEnd = findClosingBracket(/^\{$/, /^\}$/);
                if (mutationEnd === -1) {
                  continue;
                }
                for (var i2 = currentIndex; i2 < mutationEnd; i2++) {
                  var varToken = validTokens[i2];
                  if (varToken.type === "variable" && inputVariables.indexOf(varToken.content) >= 0) {
                    addAlias(varToken, "variable-input");
                  }
                }
              }
            }
          }
        }
      });
      (function(Prism2) {
        var interpolation = {
          pattern: /((?:^|[^\\$])(?:\\{2})*)\$(?:\w+|\{[^{}]*\})/,
          lookbehind: true,
          inside: {
            "interpolation-punctuation": {
              pattern: /^\$\{?|\}$/,
              alias: "punctuation"
            },
            "expression": {
              pattern: /[\s\S]+/,
              inside: null
            }
          }
        };
        Prism2.languages.groovy = Prism2.languages.extend("clike", {
          "string": {
            pattern: /'''(?:[^\\]|\\[\s\S])*?'''|'(?:\\.|[^\\'\r\n])*'/,
            greedy: true
          },
          "keyword": /\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\b/,
          "number": /\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?\d+)?)[glidf]?\b/i,
          "operator": {
            pattern: /(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.\.(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,
            lookbehind: true
          },
          "punctuation": /\.+|[{}[\];(),:$]/
        });
        Prism2.languages.insertBefore("groovy", "string", {
          "shebang": {
            pattern: /#!.+/,
            alias: "comment",
            greedy: true
          },
          "interpolation-string": {
            pattern: /"""(?:[^\\]|\\[\s\S])*?"""|(["/])(?:\\.|(?!\1)[^\\\r\n])*\1|\$\/(?:[^/$]|\$(?:[/$]|(?![/$]))|\/(?!\$))*\/\$/,
            greedy: true,
            inside: {
              "interpolation": interpolation,
              "string": /[\s\S]+/
            }
          }
        });
        Prism2.languages.insertBefore("groovy", "punctuation", {
          "spock-block": /\b(?:and|cleanup|expect|given|setup|then|when|where):/
        });
        Prism2.languages.insertBefore("groovy", "function", {
          "annotation": {
            pattern: /(^|[^.])@\w+/,
            lookbehind: true,
            alias: "punctuation"
          }
        });
        interpolation.inside.expression.inside = Prism2.languages.groovy;
      })(Prism);
      (function(Prism2) {
        var keywords = /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\s*[(){}[\]<>=%~.:,;?+\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/;
        var classNamePrefix = /(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;
        var className = {
          pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
          lookbehind: true,
          inside: {
            "namespace": {
              pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
              inside: {
                "punctuation": /\./
              }
            },
            "punctuation": /\./
          }
        };
        Prism2.languages.java = Prism2.languages.extend("clike", {
          "string": {
            pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"/,
            lookbehind: true,
            greedy: true
          },
          "class-name": [
            className,
            {
              pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()]|\s*(?:\[[\s,]*\]\s*)?::\s*new\b)/.source),
              lookbehind: true,
              inside: className.inside
            },
            {
              pattern: RegExp(/(\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\s+)/.source + classNamePrefix + /[A-Z]\w*\b/.source),
              lookbehind: true,
              inside: className.inside
            }
          ],
          "keyword": keywords,
          "function": [
            Prism2.languages.clike.function,
            {
              pattern: /(::\s*)[a-z_]\w*/,
              lookbehind: true
            }
          ],
          "number": /\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
          "operator": {
            pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
            lookbehind: true
          }
        });
        Prism2.languages.insertBefore("java", "string", {
          "triple-quoted-string": {
            pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
            greedy: true,
            alias: "string"
          },
          "char": {
            pattern: /'(?:\\.|[^'\\\r\n]){1,6}'/,
            greedy: true
          }
        });
        Prism2.languages.insertBefore("java", "class-name", {
          "annotation": {
            pattern: /(^|[^.])@\w+(?:\s*\.\s*\w+)*/,
            lookbehind: true,
            alias: "punctuation"
          },
          "generics": {
            pattern: /<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,
            inside: {
              "class-name": className,
              "keyword": keywords,
              "punctuation": /[<>(),.:]/,
              "operator": /[?&|]/
            }
          },
          "import": [
            {
              pattern: RegExp(/(\bimport\s+)/.source + classNamePrefix + /(?:[A-Z]\w*|\*)(?=\s*;)/.source),
              lookbehind: true,
              inside: {
                "namespace": className.inside.namespace,
                "punctuation": /\./,
                "operator": /\*/,
                "class-name": /\w+/
              }
            },
            {
              pattern: RegExp(/(\bimport\s+static\s+)/.source + classNamePrefix + /(?:\w+|\*)(?=\s*;)/.source),
              lookbehind: true,
              alias: "static",
              inside: {
                "namespace": className.inside.namespace,
                "static": /\b\w+$/,
                "punctuation": /\./,
                "operator": /\*/,
                "class-name": /\w+/
              }
            }
          ],
          "namespace": {
            pattern: RegExp(/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(/<keyword>/g, function() {
              return keywords.source;
            })),
            lookbehind: true,
            inside: {
              "punctuation": /\./
            }
          }
        });
      })(Prism);
      Prism.languages.javascript = Prism.languages.extend("clike", {
        "class-name": [
          Prism.languages.clike["class-name"],
          {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
            lookbehind: true
          }
        ],
        "keyword": [
          {
            pattern: /((?:^|\})\s*)catch\b/,
            lookbehind: true
          },
          {
            pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
            lookbehind: true
          }
        ],
        "function": /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
        "number": {
          pattern: RegExp(/(^|[^\w$])/.source + "(?:" + (/NaN|Infinity/.source + "|" + /0[bB][01]+(?:_[01]+)*n?/.source + "|" + /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + /\d+(?:_\d+)*n/.source + "|" + /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source),
          lookbehind: true
        },
        "operator": /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
      });
      Prism.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
      Prism.languages.insertBefore("javascript", "keyword", {
        "regex": {
          pattern: RegExp(/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source + /\//.source + "(?:" + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + "|" + /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ")" + /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),
          lookbehind: true,
          greedy: true,
          inside: {
            "regex-source": {
              pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
              lookbehind: true,
              alias: "language-regex",
              inside: Prism.languages.regex
            },
            "regex-delimiter": /^\/|\/$/,
            "regex-flags": /^[a-z]+$/
          }
        },
        "function-variable": {
          pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
          alias: "function"
        },
        "parameter": [
          {
            pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
            lookbehind: true,
            inside: Prism.languages.javascript
          },
          {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
            lookbehind: true,
            inside: Prism.languages.javascript
          },
          {
            pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
            lookbehind: true,
            inside: Prism.languages.javascript
          },
          {
            pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
            lookbehind: true,
            inside: Prism.languages.javascript
          }
        ],
        "constant": /\b[A-Z](?:[A-Z_]|\dx?)*\b/
      });
      Prism.languages.insertBefore("javascript", "string", {
        "hashbang": {
          pattern: /^#!.*/,
          greedy: true,
          alias: "comment"
        },
        "template-string": {
          pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
          greedy: true,
          inside: {
            "template-punctuation": {
              pattern: /^`|`$/,
              alias: "string"
            },
            "interpolation": {
              pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
              lookbehind: true,
              inside: {
                "interpolation-punctuation": {
                  pattern: /^\$\{|\}$/,
                  alias: "punctuation"
                },
                rest: Prism.languages.javascript
              }
            },
            "string": /[\s\S]+/
          }
        },
        "string-property": {
          pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
          lookbehind: true,
          greedy: true,
          alias: "property"
        }
      });
      Prism.languages.insertBefore("javascript", "operator", {
        "literal-property": {
          pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
          lookbehind: true,
          alias: "property"
        }
      });
      if (Prism.languages.markup) {
        Prism.languages.markup.tag.addInlined("script", "javascript");
        Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, "javascript");
      }
      Prism.languages.js = Prism.languages.javascript;
      Prism.languages.json = {
        "property": {
          pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
          lookbehind: true,
          greedy: true
        },
        "string": {
          pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
          lookbehind: true,
          greedy: true
        },
        "comment": {
          pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
          greedy: true
        },
        "number": /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
        "punctuation": /[{}[\],]/,
        "operator": /:/,
        "boolean": /\b(?:false|true)\b/,
        "null": {
          pattern: /\bnull\b/,
          alias: "keyword"
        }
      };
      Prism.languages.webmanifest = Prism.languages.json;
      (function(Prism2) {
        var javascript = Prism2.util.clone(Prism2.languages.javascript);
        var space = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source;
        var braces = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source;
        var spread = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;
        function re2(source, flags) {
          source = source.replace(/<S>/g, function() {
            return space;
          }).replace(/<BRACES>/g, function() {
            return braces;
          }).replace(/<SPREAD>/g, function() {
            return spread;
          });
          return RegExp(source, flags);
        }
        spread = re2(spread).source;
        Prism2.languages.jsx = Prism2.languages.extend("markup", javascript);
        Prism2.languages.jsx.tag.pattern = re2(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source);
        Prism2.languages.jsx.tag.inside["tag"].pattern = /^<\/?[^\s>\/]*/;
        Prism2.languages.jsx.tag.inside["attr-value"].pattern = /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/;
        Prism2.languages.jsx.tag.inside["tag"].inside["class-name"] = /^[A-Z]\w*(?:\.[A-Z]\w*)*$/;
        Prism2.languages.jsx.tag.inside["comment"] = javascript["comment"];
        Prism2.languages.insertBefore("inside", "attr-name", {
          "spread": {
            pattern: re2(/<SPREAD>/.source),
            inside: Prism2.languages.jsx
          }
        }, Prism2.languages.jsx.tag);
        Prism2.languages.insertBefore("inside", "special-attr", {
          "script": {
            pattern: re2(/=<BRACES>/.source),
            alias: "language-javascript",
            inside: {
              "script-punctuation": {
                pattern: /^=(?=\{)/,
                alias: "punctuation"
              },
              rest: Prism2.languages.jsx
            }
          }
        }, Prism2.languages.jsx.tag);
        var stringifyToken = function(token2) {
          if (!token2) {
            return "";
          }
          if (typeof token2 === "string") {
            return token2;
          }
          if (typeof token2.content === "string") {
            return token2.content;
          }
          return token2.content.map(stringifyToken).join("");
        };
        var walkTokens = function(tokens2) {
          var openedTags = [];
          for (var i2 = 0; i2 < tokens2.length; i2++) {
            var token2 = tokens2[i2];
            var notTagNorBrace = false;
            if (typeof token2 !== "string") {
              if (token2.type === "tag" && token2.content[0] && token2.content[0].type === "tag") {
                if (token2.content[0].content[0].content === "</") {
                  if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token2.content[0].content[1])) {
                    openedTags.pop();
                  }
                } else {
                  if (token2.content[token2.content.length - 1].content === "/>")
                    ;
                  else {
                    openedTags.push({
                      tagName: stringifyToken(token2.content[0].content[1]),
                      openedBraces: 0
                    });
                  }
                }
              } else if (openedTags.length > 0 && token2.type === "punctuation" && token2.content === "{") {
                openedTags[openedTags.length - 1].openedBraces++;
              } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token2.type === "punctuation" && token2.content === "}") {
                openedTags[openedTags.length - 1].openedBraces--;
              } else {
                notTagNorBrace = true;
              }
            }
            if (notTagNorBrace || typeof token2 === "string") {
              if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
                var plainText = stringifyToken(token2);
                if (i2 < tokens2.length - 1 && (typeof tokens2[i2 + 1] === "string" || tokens2[i2 + 1].type === "plain-text")) {
                  plainText += stringifyToken(tokens2[i2 + 1]);
                  tokens2.splice(i2 + 1, 1);
                }
                if (i2 > 0 && (typeof tokens2[i2 - 1] === "string" || tokens2[i2 - 1].type === "plain-text")) {
                  plainText = stringifyToken(tokens2[i2 - 1]) + plainText;
                  tokens2.splice(i2 - 1, 1);
                  i2--;
                }
                tokens2[i2] = new Prism2.Token("plain-text", plainText, null, plainText);
              }
            }
            if (token2.content && typeof token2.content !== "string") {
              walkTokens(token2.content);
            }
          }
        };
        Prism2.hooks.add("after-tokenize", function(env) {
          if (env.language !== "jsx" && env.language !== "tsx") {
            return;
          }
          walkTokens(env.tokens);
        });
      })(Prism);
      (function(Prism2) {
        Prism2.languages.kotlin = Prism2.languages.extend("clike", {
          "keyword": {
            pattern: /(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,
            lookbehind: true
          },
          "function": [
            {
              pattern: /(?:`[^\r\n`]+`|\b\w+)(?=\s*\()/,
              greedy: true
            },
            {
              pattern: /(\.)(?:`[^\r\n`]+`|\w+)(?=\s*\{)/,
              lookbehind: true,
              greedy: true
            }
          ],
          "number": /\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,
          "operator": /\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/
        });
        delete Prism2.languages.kotlin["class-name"];
        var interpolationInside = {
          "interpolation-punctuation": {
            pattern: /^\$\{?|\}$/,
            alias: "punctuation"
          },
          "expression": {
            pattern: /[\s\S]+/,
            inside: Prism2.languages.kotlin
          }
        };
        Prism2.languages.insertBefore("kotlin", "string", {
          "string-literal": [
            {
              pattern: /"""(?:[^$]|\$(?:(?!\{)|\{[^{}]*\}))*?"""/,
              alias: "multiline",
              inside: {
                "interpolation": {
                  pattern: /\$(?:[a-z_]\w*|\{[^{}]*\})/i,
                  inside: interpolationInside
                },
                "string": /[\s\S]+/
              }
            },
            {
              pattern: /"(?:[^"\\\r\n$]|\\.|\$(?:(?!\{)|\{[^{}]*\}))*"/,
              alias: "singleline",
              inside: {
                "interpolation": {
                  pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:[a-z_]\w*|\{[^{}]*\})/i,
                  lookbehind: true,
                  inside: interpolationInside
                },
                "string": /[\s\S]+/
              }
            }
          ],
          "char": {
            pattern: /'(?:[^'\\\r\n]|\\(?:.|u[a-fA-F0-9]{0,4}))'/,
            greedy: true
          }
        });
        delete Prism2.languages.kotlin["string"];
        Prism2.languages.insertBefore("kotlin", "keyword", {
          "annotation": {
            pattern: /\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,
            alias: "builtin"
          }
        });
        Prism2.languages.insertBefore("kotlin", "function", {
          "label": {
            pattern: /\b\w+@|@\w+\b/,
            alias: "symbol"
          }
        });
        Prism2.languages.kt = Prism2.languages.kotlin;
        Prism2.languages.kts = Prism2.languages.kotlin;
      })(Prism);
      (function(Prism2) {
        var funcPattern = /\\(?:[^a-z()[\]]|[a-z*]+)/i;
        var insideEqu = {
          "equation-command": {
            pattern: funcPattern,
            alias: "regex"
          }
        };
        Prism2.languages.latex = {
          "comment": /%.*/,
          "cdata": {
            pattern: /(\\begin\{((?:lstlisting|verbatim)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
            lookbehind: true
          },
          "equation": [
            {
              pattern: /\$\$(?:\\[\s\S]|[^\\$])+\$\$|\$(?:\\[\s\S]|[^\\$])+\$|\\\([\s\S]*?\\\)|\\\[[\s\S]*?\\\]/,
              inside: insideEqu,
              alias: "string"
            },
            {
              pattern: /(\\begin\{((?:align|eqnarray|equation|gather|math|multline)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
              lookbehind: true,
              inside: insideEqu,
              alias: "string"
            }
          ],
          "keyword": {
            pattern: /(\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
            lookbehind: true
          },
          "url": {
            pattern: /(\\url\{)[^}]+(?=\})/,
            lookbehind: true
          },
          "headline": {
            pattern: /(\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\*?(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
            lookbehind: true,
            alias: "class-name"
          },
          "function": {
            pattern: funcPattern,
            alias: "selector"
          },
          "punctuation": /[[\]{}&]/
        };
        Prism2.languages.tex = Prism2.languages.latex;
        Prism2.languages.context = Prism2.languages.latex;
      })(Prism);
      Prism.languages.less = Prism.languages.extend("css", {
        "comment": [
          /\/\*[\s\S]*?\*\//,
          {
            pattern: /(^|[^\\])\/\/.*/,
            lookbehind: true
          }
        ],
        "atrule": {
          pattern: /@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,
          inside: {
            "punctuation": /[:()]/
          }
        },
        "selector": {
          pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,
          inside: {
            "variable": /@+[\w-]+/
          }
        },
        "property": /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,
        "operator": /[+\-*\/]/
      });
      Prism.languages.insertBefore("less", "property", {
        "variable": [
          {
            pattern: /@[\w-]+\s*:/,
            inside: {
              "punctuation": /:/
            }
          },
          /@@?[\w-]+/
        ],
        "mixin-usage": {
          pattern: /([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,
          lookbehind: true,
          alias: "function"
        }
      });
      Prism.languages.lua = {
        "comment": /^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,
        "string": {
          pattern: /(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[^z]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,
          greedy: true
        },
        "number": /\b0x[a-f\d]+(?:\.[a-f\d]*)?(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|(?:\.\d*)?(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,
        "keyword": /\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,
        "function": /(?!\d)\w+(?=\s*(?:[({]))/,
        "operator": [
          /[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/,
          {
            pattern: /(^|[^.])\.\.(?!\.)/,
            lookbehind: true
          }
        ],
        "punctuation": /[\[\](){},;]|\.+|:+/
      };
      Prism.languages.makefile = {
        "comment": {
          pattern: /(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,
          lookbehind: true
        },
        "string": {
          pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
          greedy: true
        },
        "builtin-target": {
          pattern: /\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,
          alias: "builtin"
        },
        "target": {
          pattern: /^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,
          alias: "symbol",
          inside: {
            "variable": /\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/
          }
        },
        "variable": /\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,
        "keyword": /-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,
        "function": {
          pattern: /(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,
          lookbehind: true
        },
        "operator": /(?:::|[?:+!])?=|[|@]/,
        "punctuation": /[:;(){}]/
      };
      (function(Prism2) {
        var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;
        function createInline(pattern) {
          pattern = pattern.replace(/<inner>/g, function() {
            return inner;
          });
          return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + "(?:" + pattern + ")");
        }
        var tableCell = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
        var tableRow = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g, function() {
          return tableCell;
        });
        var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;
        Prism2.languages.markdown = Prism2.languages.extend("markup", {});
        Prism2.languages.insertBefore("markdown", "prolog", {
          "front-matter-block": {
            pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
            lookbehind: true,
            greedy: true,
            inside: {
              "punctuation": /^---|---$/,
              "front-matter": {
                pattern: /\S+(?:\s+\S+)*/,
                alias: ["yaml", "language-yaml"],
                inside: Prism2.languages.yaml
              }
            }
          },
          "blockquote": {
            pattern: /^>(?:[\t ]*>)*/m,
            alias: "punctuation"
          },
          "table": {
            pattern: RegExp("^" + tableRow + tableLine + "(?:" + tableRow + ")*", "m"),
            inside: {
              "table-data-rows": {
                pattern: RegExp("^(" + tableRow + tableLine + ")(?:" + tableRow + ")*$"),
                lookbehind: true,
                inside: {
                  "table-data": {
                    pattern: RegExp(tableCell),
                    inside: Prism2.languages.markdown
                  },
                  "punctuation": /\|/
                }
              },
              "table-line": {
                pattern: RegExp("^(" + tableRow + ")" + tableLine + "$"),
                lookbehind: true,
                inside: {
                  "punctuation": /\||:?-{3,}:?/
                }
              },
              "table-header-row": {
                pattern: RegExp("^" + tableRow + "$"),
                inside: {
                  "table-header": {
                    pattern: RegExp(tableCell),
                    alias: "important",
                    inside: Prism2.languages.markdown
                  },
                  "punctuation": /\|/
                }
              }
            }
          },
          "code": [
            {
              pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
              lookbehind: true,
              alias: "keyword"
            },
            {
              pattern: /^```[\s\S]*?^```$/m,
              greedy: true,
              inside: {
                "code-block": {
                  pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
                  lookbehind: true
                },
                "code-language": {
                  pattern: /^(```).+/,
                  lookbehind: true
                },
                "punctuation": /```/
              }
            }
          ],
          "title": [
            {
              pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
              alias: "important",
              inside: {
                punctuation: /==+$|--+$/
              }
            },
            {
              pattern: /(^\s*)#.+/m,
              lookbehind: true,
              alias: "important",
              inside: {
                punctuation: /^#+|#+$/
              }
            }
          ],
          "hr": {
            pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
            lookbehind: true,
            alias: "punctuation"
          },
          "list": {
            pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
            lookbehind: true,
            alias: "punctuation"
          },
          "url-reference": {
            pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
            inside: {
              "variable": {
                pattern: /^(!?\[)[^\]]+/,
                lookbehind: true
              },
              "string": /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
              "punctuation": /^[\[\]!:]|[<>]/
            },
            alias: "url"
          },
          "bold": {
            pattern: createInline(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),
            lookbehind: true,
            greedy: true,
            inside: {
              "content": {
                pattern: /(^..)[\s\S]+(?=..$)/,
                lookbehind: true,
                inside: {}
              },
              "punctuation": /\*\*|__/
            }
          },
          "italic": {
            pattern: createInline(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),
            lookbehind: true,
            greedy: true,
            inside: {
              "content": {
                pattern: /(^.)[\s\S]+(?=.$)/,
                lookbehind: true,
                inside: {}
              },
              "punctuation": /[*_]/
            }
          },
          "strike": {
            pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
            lookbehind: true,
            greedy: true,
            inside: {
              "content": {
                pattern: /(^~~?)[\s\S]+(?=\1$)/,
                lookbehind: true,
                inside: {}
              },
              "punctuation": /~~?/
            }
          },
          "code-snippet": {
            pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
            lookbehind: true,
            greedy: true,
            alias: ["code", "keyword"]
          },
          "url": {
            pattern: createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),
            lookbehind: true,
            greedy: true,
            inside: {
              "operator": /^!/,
              "content": {
                pattern: /(^\[)[^\]]+(?=\])/,
                lookbehind: true,
                inside: {}
              },
              "variable": {
                pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
                lookbehind: true
              },
              "url": {
                pattern: /(^\]\()[^\s)]+/,
                lookbehind: true
              },
              "string": {
                pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
                lookbehind: true
              }
            }
          }
        });
        ["url", "bold", "italic", "strike"].forEach(function(token2) {
          ["url", "bold", "italic", "strike", "code-snippet"].forEach(function(inside) {
            if (token2 !== inside) {
              Prism2.languages.markdown[token2].inside.content.inside[inside] = Prism2.languages.markdown[inside];
            }
          });
        });
        Prism2.hooks.add("after-tokenize", function(env) {
          if (env.language !== "markdown" && env.language !== "md") {
            return;
          }
          function walkTokens(tokens2) {
            if (!tokens2 || typeof tokens2 === "string") {
              return;
            }
            for (var i2 = 0, l2 = tokens2.length; i2 < l2; i2++) {
              var token2 = tokens2[i2];
              if (token2.type !== "code") {
                walkTokens(token2.content);
                continue;
              }
              var codeLang = token2.content[1];
              var codeBlock = token2.content[3];
              if (codeLang && codeBlock && codeLang.type === "code-language" && codeBlock.type === "code-block" && typeof codeLang.content === "string") {
                var lang2 = codeLang.content.replace(/\b#/g, "sharp").replace(/\b\+\+/g, "pp");
                lang2 = (/[a-z][\w-]*/i.exec(lang2) || [""])[0].toLowerCase();
                var alias = "language-" + lang2;
                if (!codeBlock.alias) {
                  codeBlock.alias = [alias];
                } else if (typeof codeBlock.alias === "string") {
                  codeBlock.alias = [codeBlock.alias, alias];
                } else {
                  codeBlock.alias.push(alias);
                }
              }
            }
          }
          walkTokens(env.tokens);
        });
        Prism2.hooks.add("wrap", function(env) {
          if (env.type !== "code-block") {
            return;
          }
          var codeLang = "";
          for (var i2 = 0, l2 = env.classes.length; i2 < l2; i2++) {
            var cls = env.classes[i2];
            var match5 = /language-(.+)/.exec(cls);
            if (match5) {
              codeLang = match5[1];
              break;
            }
          }
          var grammar = Prism2.languages[codeLang];
          if (!grammar) {
            if (codeLang && codeLang !== "none" && Prism2.plugins.autoloader) {
              var id2 = "md-" + new Date().valueOf() + "-" + Math.floor(Math.random() * 1e16);
              env.attributes["id"] = id2;
              Prism2.plugins.autoloader.loadLanguages(codeLang, function() {
                var ele = document.getElementById(id2);
                if (ele) {
                  ele.innerHTML = Prism2.highlight(ele.textContent, Prism2.languages[codeLang], codeLang);
                }
              });
            }
          } else {
            env.content = Prism2.highlight(textContent(env.content), grammar, codeLang);
          }
        });
        var tagPattern = RegExp(Prism2.languages.markup.tag.pattern.source, "gi");
        var KNOWN_ENTITY_NAMES = {
          "amp": "&",
          "lt": "<",
          "gt": ">",
          "quot": '"'
        };
        var fromCodePoint = String.fromCodePoint || String.fromCharCode;
        function textContent(html) {
          var text2 = html.replace(tagPattern, "");
          text2 = text2.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function(m2, code) {
            code = code.toLowerCase();
            if (code[0] === "#") {
              var value;
              if (code[1] === "x") {
                value = parseInt(code.slice(2), 16);
              } else {
                value = Number(code.slice(1));
              }
              return fromCodePoint(value);
            } else {
              var known = KNOWN_ENTITY_NAMES[code];
              if (known) {
                return known;
              }
              return m2;
            }
          });
          return text2;
        }
        Prism2.languages.md = Prism2.languages.markdown;
      })(Prism);
      Prism.languages.matlab = {
        "comment": [
          /%\{[\s\S]*?\}%/,
          /%.+/
        ],
        "string": {
          pattern: /\B'(?:''|[^'\r\n])*'/,
          greedy: true
        },
        "number": /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+)?(?:[ij])?|\b[ij]\b/,
        "keyword": /\b(?:NaN|break|case|catch|continue|else|elseif|end|for|function|if|inf|otherwise|parfor|pause|pi|return|switch|try|while)\b/,
        "function": /\b(?!\d)\w+(?=\s*\()/,
        "operator": /\.?[*^\/\\']|[+\-:@]|[<>=~]=?|&&?|\|\|?/,
        "punctuation": /\.{3}|[.,;\[\](){}!]/
      };
      Prism.languages.objectivec = Prism.languages.extend("c", {
        "string": {
          pattern: /@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
          greedy: true
        },
        "keyword": /\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,
        "operator": /-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/
      });
      delete Prism.languages.objectivec["class-name"];
      Prism.languages.objc = Prism.languages.objectivec;
      (function(Prism2) {
        var brackets = /(?:\((?:[^()\\]|\\[\s\S])*\)|\{(?:[^{}\\]|\\[\s\S])*\}|\[(?:[^[\]\\]|\\[\s\S])*\]|<(?:[^<>\\]|\\[\s\S])*>)/.source;
        Prism2.languages.perl = {
          "comment": [
            {
              pattern: /(^\s*)=\w[\s\S]*?=cut.*/m,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /(^|[^\\$])#.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          "string": [
            {
              pattern: RegExp(/\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\s*/.source + "(?:" + [
                /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
                /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
                brackets
              ].join("|") + ")"),
              greedy: true
            },
            {
              pattern: /("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,
              greedy: true
            },
            {
              pattern: /'(?:[^'\\\r\n]|\\.)*'/,
              greedy: true
            }
          ],
          "regex": [
            {
              pattern: RegExp(/\b(?:m|qr)(?![a-zA-Z0-9])\s*/.source + "(?:" + [
                /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
                /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
                brackets
              ].join("|") + ")" + /[msixpodualngc]*/.source),
              greedy: true
            },
            {
              pattern: RegExp(/(^|[^-])\b(?:s|tr|y)(?![a-zA-Z0-9])\s*/.source + "(?:" + [
                /([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
                /([a-zA-Z0-9])(?:(?!\3)[^\\]|\\[\s\S])*\3(?:(?!\3)[^\\]|\\[\s\S])*\3/.source,
                brackets + /\s*/.source + brackets
              ].join("|") + ")" + /[msixpodualngcer]*/.source),
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\b))/,
              greedy: true
            }
          ],
          "variable": [
            /[&*$@%]\{\^[A-Z]+\}/,
            /[&*$@%]\^[A-Z_]/,
            /[&*$@%]#?(?=\{)/,
            /[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+(?![\w$]))+(?:::)*/,
            /[&*$@%]\d+/,
            /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/
          ],
          "filehandle": {
            pattern: /<(?![<=])\S*?>|\b_\b/,
            alias: "symbol"
          },
          "v-string": {
            pattern: /v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,
            alias: "string"
          },
          "function": {
            pattern: /(\bsub[ \t]+)\w+/,
            lookbehind: true
          },
          "keyword": /\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\b/,
          "number": /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,
          "operator": /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\b/,
          "punctuation": /[{}[\];(),:]/
        };
      })(Prism);
      (function(Prism2) {
        var comment = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/;
        var constant2 = [
          {
            pattern: /\b(?:false|true)\b/i,
            alias: "boolean"
          },
          {
            pattern: /(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,
            greedy: true,
            lookbehind: true
          },
          {
            pattern: /(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,
            greedy: true,
            lookbehind: true
          },
          /\b(?:null)\b/i,
          /\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/
        ];
        var number = /\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i;
        var operator = /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;
        var punctuation = /[{}\[\](),:;]/;
        Prism2.languages.php = {
          "delimiter": {
            pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i,
            alias: "important"
          },
          "comment": comment,
          "variable": /\$+(?:\w+\b|(?=\{))/,
          "package": {
            pattern: /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
            lookbehind: true,
            inside: {
              "punctuation": /\\/
            }
          },
          "class-name-definition": {
            pattern: /(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,
            lookbehind: true,
            alias: "class-name"
          },
          "function-definition": {
            pattern: /(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,
            lookbehind: true,
            alias: "function"
          },
          "keyword": [
            {
              pattern: /(\(\s*)\b(?:array|bool|boolean|float|int|integer|object|string)\b(?=\s*\))/i,
              alias: "type-casting",
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /([(,?]\s*)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|object|self|static|string)\b(?=\s*\$)/i,
              alias: "type-hint",
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /(\)\s*:\s*(?:\?\s*)?)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|never|object|self|static|string|void)\b/i,
              alias: "return-type",
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /\b(?:array(?!\s*\()|bool|float|int|iterable|mixed|object|string|void)\b/i,
              alias: "type-declaration",
              greedy: true
            },
            {
              pattern: /(\|\s*)(?:false|null)\b|\b(?:false|null)(?=\s*\|)/i,
              alias: "type-declaration",
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /\b(?:parent|self|static)(?=\s*::)/i,
              alias: "static-context",
              greedy: true
            },
            {
              pattern: /(\byield\s+)from\b/i,
              lookbehind: true
            },
            /\bclass\b/i,
            {
              pattern: /((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\b/i,
              lookbehind: true
            }
          ],
          "argument-name": {
            pattern: /([(,]\s*)\b[a-z_]\w*(?=\s*:(?!:))/i,
            lookbehind: true
          },
          "class-name": [
            {
              pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i,
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,
              greedy: true
            },
            {
              pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,
              alias: "class-name-fully-qualified",
              greedy: true,
              lookbehind: true,
              inside: {
                "punctuation": /\\/
              }
            },
            {
              pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,
              alias: "class-name-fully-qualified",
              greedy: true,
              inside: {
                "punctuation": /\\/
              }
            },
            {
              pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
              alias: "class-name-fully-qualified",
              greedy: true,
              lookbehind: true,
              inside: {
                "punctuation": /\\/
              }
            },
            {
              pattern: /\b[a-z_]\w*(?=\s*\$)/i,
              alias: "type-declaration",
              greedy: true
            },
            {
              pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
              alias: ["class-name-fully-qualified", "type-declaration"],
              greedy: true,
              inside: {
                "punctuation": /\\/
              }
            },
            {
              pattern: /\b[a-z_]\w*(?=\s*::)/i,
              alias: "static-context",
              greedy: true
            },
            {
              pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,
              alias: ["class-name-fully-qualified", "static-context"],
              greedy: true,
              inside: {
                "punctuation": /\\/
              }
            },
            {
              pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,
              alias: "type-hint",
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
              alias: ["class-name-fully-qualified", "type-hint"],
              greedy: true,
              lookbehind: true,
              inside: {
                "punctuation": /\\/
              }
            },
            {
              pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,
              alias: "return-type",
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
              alias: ["class-name-fully-qualified", "return-type"],
              greedy: true,
              lookbehind: true,
              inside: {
                "punctuation": /\\/
              }
            }
          ],
          "constant": constant2,
          "function": {
            pattern: /(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,
            lookbehind: true,
            inside: {
              "punctuation": /\\/
            }
          },
          "property": {
            pattern: /(->\s*)\w+/,
            lookbehind: true
          },
          "number": number,
          "operator": operator,
          "punctuation": punctuation
        };
        var string_interpolation = {
          pattern: /\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,
          lookbehind: true,
          inside: Prism2.languages.php
        };
        var string2 = [
          {
            pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,
            alias: "nowdoc-string",
            greedy: true,
            inside: {
              "delimiter": {
                pattern: /^<<<'[^']+'|[a-z_]\w*;$/i,
                alias: "symbol",
                inside: {
                  "punctuation": /^<<<'?|[';]$/
                }
              }
            }
          },
          {
            pattern: /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,
            alias: "heredoc-string",
            greedy: true,
            inside: {
              "delimiter": {
                pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,
                alias: "symbol",
                inside: {
                  "punctuation": /^<<<"?|[";]$/
                }
              },
              "interpolation": string_interpolation
            }
          },
          {
            pattern: /`(?:\\[\s\S]|[^\\`])*`/,
            alias: "backtick-quoted-string",
            greedy: true
          },
          {
            pattern: /'(?:\\[\s\S]|[^\\'])*'/,
            alias: "single-quoted-string",
            greedy: true
          },
          {
            pattern: /"(?:\\[\s\S]|[^\\"])*"/,
            alias: "double-quoted-string",
            greedy: true,
            inside: {
              "interpolation": string_interpolation
            }
          }
        ];
        Prism2.languages.insertBefore("php", "variable", {
          "string": string2,
          "attribute": {
            pattern: /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,
            greedy: true,
            inside: {
              "attribute-content": {
                pattern: /^(#\[)[\s\S]+(?=\]$)/,
                lookbehind: true,
                inside: {
                  "comment": comment,
                  "string": string2,
                  "attribute-class-name": [
                    {
                      pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i,
                      alias: "class-name",
                      greedy: true,
                      lookbehind: true
                    },
                    {
                      pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i,
                      alias: [
                        "class-name",
                        "class-name-fully-qualified"
                      ],
                      greedy: true,
                      lookbehind: true,
                      inside: {
                        "punctuation": /\\/
                      }
                    }
                  ],
                  "constant": constant2,
                  "number": number,
                  "operator": operator,
                  "punctuation": punctuation
                }
              },
              "delimiter": {
                pattern: /^#\[|\]$/,
                alias: "punctuation"
              }
            }
          }
        });
        Prism2.hooks.add("before-tokenize", function(env) {
          if (!/<\?/.test(env.code)) {
            return;
          }
          var phpPattern = /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/g;
          Prism2.languages["markup-templating"].buildPlaceholders(env, "php", phpPattern);
        });
        Prism2.hooks.add("after-tokenize", function(env) {
          Prism2.languages["markup-templating"].tokenizePlaceholders(env, "php");
        });
      })(Prism);
      (function(Prism2) {
        var powershell = Prism2.languages.powershell = {
          "comment": [
            {
              pattern: /(^|[^`])<#[\s\S]*?#>/,
              lookbehind: true
            },
            {
              pattern: /(^|[^`])#.*/,
              lookbehind: true
            }
          ],
          "string": [
            {
              pattern: /"(?:`[\s\S]|[^`"])*"/,
              greedy: true,
              inside: null
            },
            {
              pattern: /'(?:[^']|'')*'/,
              greedy: true
            }
          ],
          "namespace": /\[[a-z](?:\[(?:\[[^\]]*\]|[^\[\]])*\]|[^\[\]])*\]/i,
          "boolean": /\$(?:false|true)\b/i,
          "variable": /\$\w+\b/,
          "function": [
            /\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\b/i,
            /\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\b/i
          ],
          "keyword": /\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\b/i,
          "operator": {
            pattern: /(^|\W)(?:!|-(?:b?(?:and|x?or)|as|(?:Not)?(?:Contains|In|Like|Match)|eq|ge|gt|is(?:Not)?|Join|le|lt|ne|not|Replace|sh[lr])\b|-[-=]?|\+[+=]?|[*\/%]=?)/i,
            lookbehind: true
          },
          "punctuation": /[|{}[\];(),.]/
        };
        powershell.string[0].inside = {
          "function": {
            pattern: /(^|[^`])\$\((?:\$\([^\r\n()]*\)|(?!\$\()[^\r\n)])*\)/,
            lookbehind: true,
            inside: powershell
          },
          "boolean": powershell.boolean,
          "variable": powershell.variable
        };
      })(Prism);
      Prism.languages.properties = {
        "comment": /^[ \t]*[#!].*$/m,
        "value": {
          pattern: /(^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+(?: *[=:] *(?! )| ))(?:\\(?:\r\n|[\s\S])|[^\\\r\n])+/m,
          lookbehind: true,
          alias: "attr-value"
        },
        "key": {
          pattern: /^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+(?= *[=:]| )/m,
          alias: "attr-name"
        },
        "punctuation": /[=:]/
      };
      (function(Prism2) {
        var builtinTypes = /\b(?:bool|bytes|double|s?fixed(?:32|64)|float|[su]?int(?:32|64)|string)\b/;
        Prism2.languages.protobuf = Prism2.languages.extend("clike", {
          "class-name": [
            {
              pattern: /(\b(?:enum|extend|message|service)\s+)[A-Za-z_]\w*(?=\s*\{)/,
              lookbehind: true
            },
            {
              pattern: /(\b(?:rpc\s+\w+|returns)\s*\(\s*(?:stream\s+)?)\.?[A-Za-z_]\w*(?:\.[A-Za-z_]\w*)*(?=\s*\))/,
              lookbehind: true
            }
          ],
          "keyword": /\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\s+\w)|service|stream|syntax|to)\b(?!\s*=\s*\d)/,
          "function": /\b[a-z_]\w*(?=\s*\()/i
        });
        Prism2.languages.insertBefore("protobuf", "operator", {
          "map": {
            pattern: /\bmap<\s*[\w.]+\s*,\s*[\w.]+\s*>(?=\s+[a-z_]\w*\s*[=;])/i,
            alias: "class-name",
            inside: {
              "punctuation": /[<>.,]/,
              "builtin": builtinTypes
            }
          },
          "builtin": builtinTypes,
          "positional-class-name": {
            pattern: /(?:\b|\B\.)[a-z_]\w*(?:\.[a-z_]\w*)*(?=\s+[a-z_]\w*\s*[=;])/i,
            alias: "class-name",
            inside: {
              "punctuation": /\./
            }
          },
          "annotation": {
            pattern: /(\[\s*)[a-z_]\w*(?=\s*=)/i,
            lookbehind: true
          }
        });
      })(Prism);
      Prism.languages.python = {
        "comment": {
          pattern: /(^|[^\\])#.*/,
          lookbehind: true,
          greedy: true
        },
        "string-interpolation": {
          pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
          greedy: true,
          inside: {
            "interpolation": {
              pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
              lookbehind: true,
              inside: {
                "format-spec": {
                  pattern: /(:)[^:(){}]+(?=\}$)/,
                  lookbehind: true
                },
                "conversion-option": {
                  pattern: /![sra](?=[:}]$)/,
                  alias: "punctuation"
                },
                rest: null
              }
            },
            "string": /[\s\S]+/
          }
        },
        "triple-quoted-string": {
          pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
          greedy: true,
          alias: "string"
        },
        "string": {
          pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
          greedy: true
        },
        "function": {
          pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
          lookbehind: true
        },
        "class-name": {
          pattern: /(\bclass\s+)\w+/i,
          lookbehind: true
        },
        "decorator": {
          pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
          lookbehind: true,
          alias: ["annotation", "punctuation"],
          inside: {
            "punctuation": /\./
          }
        },
        "keyword": /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
        "builtin": /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
        "boolean": /\b(?:False|None|True)\b/,
        "number": /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
        "operator": /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
        "punctuation": /[{}[\];(),.:]/
      };
      Prism.languages.python["string-interpolation"].inside["interpolation"].inside.rest = Prism.languages.python;
      Prism.languages.py = Prism.languages.python;
      Prism.languages.r = {
        "comment": /#.*/,
        "string": {
          pattern: /(['"])(?:\\.|(?!\1)[^\\\r\n])*\1/,
          greedy: true
        },
        "percent-operator": {
          pattern: /%[^%\s]*%/,
          alias: "operator"
        },
        "boolean": /\b(?:FALSE|TRUE)\b/,
        "ellipsis": /\.\.(?:\.|\d+)/,
        "number": [
          /\b(?:Inf|NaN)\b/,
          /(?:\b0x[\dA-Fa-f]+(?:\.\d*)?|\b\d+(?:\.\d*)?|\B\.\d+)(?:[EePp][+-]?\d+)?[iL]?/
        ],
        "keyword": /\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\b/,
        "operator": /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\|\|?|[+*\/^$@~]/,
        "punctuation": /[(){}\[\],;]/
      };
      (function(Prism2) {
        Prism2.languages.ruby = Prism2.languages.extend("clike", {
          "comment": {
            pattern: /#.*|^=begin\s[\s\S]*?^=end/m,
            greedy: true
          },
          "class-name": {
            pattern: /(\b(?:class|module)\s+|\bcatch\s+\()[\w.\\]+|\b[A-Z_]\w*(?=\s*\.\s*new\b)/,
            lookbehind: true,
            inside: {
              "punctuation": /[.\\]/
            }
          },
          "keyword": /\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/,
          "operator": /\.{2,3}|&\.|===|<?=>|[!=]?~|(?:&&|\|\||<<|>>|\*\*|[+\-*/%<>!^&|=])=?|[?:]/,
          "punctuation": /[(){}[\].,;]/
        });
        Prism2.languages.insertBefore("ruby", "operator", {
          "double-colon": {
            pattern: /::/,
            alias: "punctuation"
          }
        });
        var interpolation = {
          pattern: /((?:^|[^\\])(?:\\{2})*)#\{(?:[^{}]|\{[^{}]*\})*\}/,
          lookbehind: true,
          inside: {
            "content": {
              pattern: /^(#\{)[\s\S]+(?=\}$)/,
              lookbehind: true,
              inside: Prism2.languages.ruby
            },
            "delimiter": {
              pattern: /^#\{|\}$/,
              alias: "punctuation"
            }
          }
        };
        delete Prism2.languages.ruby.function;
        var percentExpression = "(?:" + [
          /([^a-zA-Z0-9\s{(\[<=])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
          /\((?:[^()\\]|\\[\s\S]|\((?:[^()\\]|\\[\s\S])*\))*\)/.source,
          /\{(?:[^{}\\]|\\[\s\S]|\{(?:[^{}\\]|\\[\s\S])*\})*\}/.source,
          /\[(?:[^\[\]\\]|\\[\s\S]|\[(?:[^\[\]\\]|\\[\s\S])*\])*\]/.source,
          /<(?:[^<>\\]|\\[\s\S]|<(?:[^<>\\]|\\[\s\S])*>)*>/.source
        ].join("|") + ")";
        var symbolName = /(?:"(?:\\.|[^"\\\r\n])*"|(?:\b[a-zA-Z_]\w*|[^\s\0-\x7F]+)[?!]?|\$.)/.source;
        Prism2.languages.insertBefore("ruby", "keyword", {
          "regex-literal": [
            {
              pattern: RegExp(/%r/.source + percentExpression + /[egimnosux]{0,6}/.source),
              greedy: true,
              inside: {
                "interpolation": interpolation,
                "regex": /[\s\S]+/
              }
            },
            {
              pattern: /(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,
              lookbehind: true,
              greedy: true,
              inside: {
                "interpolation": interpolation,
                "regex": /[\s\S]+/
              }
            }
          ],
          "variable": /[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,
          "symbol": [
            {
              pattern: RegExp(/(^|[^:]):/.source + symbolName),
              lookbehind: true,
              greedy: true
            },
            {
              pattern: RegExp(/([\r\n{(,][ \t]*)/.source + symbolName + /(?=:(?!:))/.source),
              lookbehind: true,
              greedy: true
            }
          ],
          "method-definition": {
            pattern: /(\bdef\s+)\w+(?:\s*\.\s*\w+)?/,
            lookbehind: true,
            inside: {
              "function": /\b\w+$/,
              "keyword": /^self\b/,
              "class-name": /^\w+/,
              "punctuation": /\./
            }
          }
        });
        Prism2.languages.insertBefore("ruby", "string", {
          "string-literal": [
            {
              pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),
              greedy: true,
              inside: {
                "interpolation": interpolation,
                "string": /[\s\S]+/
              }
            },
            {
              pattern: /("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,
              greedy: true,
              inside: {
                "interpolation": interpolation,
                "string": /[\s\S]+/
              }
            },
            {
              pattern: /<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
              alias: "heredoc-string",
              greedy: true,
              inside: {
                "delimiter": {
                  pattern: /^<<[-~]?[a-z_]\w*|\b[a-z_]\w*$/i,
                  inside: {
                    "symbol": /\b\w+/,
                    "punctuation": /^<<[-~]?/
                  }
                },
                "interpolation": interpolation,
                "string": /[\s\S]+/
              }
            },
            {
              pattern: /<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
              alias: "heredoc-string",
              greedy: true,
              inside: {
                "delimiter": {
                  pattern: /^<<[-~]?'[a-z_]\w*'|\b[a-z_]\w*$/i,
                  inside: {
                    "symbol": /\b\w+/,
                    "punctuation": /^<<[-~]?'|'$/
                  }
                },
                "string": /[\s\S]+/
              }
            }
          ],
          "command-literal": [
            {
              pattern: RegExp(/%x/.source + percentExpression),
              greedy: true,
              inside: {
                "interpolation": interpolation,
                "command": {
                  pattern: /[\s\S]+/,
                  alias: "string"
                }
              }
            },
            {
              pattern: /`(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|[^\\`#\r\n])*`/,
              greedy: true,
              inside: {
                "interpolation": interpolation,
                "command": {
                  pattern: /[\s\S]+/,
                  alias: "string"
                }
              }
            }
          ]
        });
        delete Prism2.languages.ruby.string;
        Prism2.languages.insertBefore("ruby", "number", {
          "builtin": /\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\b/,
          "constant": /\b[A-Z][A-Z0-9_]*(?:[?!]|\b)/
        });
        Prism2.languages.rb = Prism2.languages.ruby;
      })(Prism);
      (function(Prism2) {
        Prism2.languages.sass = Prism2.languages.extend("css", {
          "comment": {
            pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,
            lookbehind: true,
            greedy: true
          }
        });
        Prism2.languages.insertBefore("sass", "atrule", {
          "atrule-line": {
            pattern: /^(?:[ \t]*)[@+=].+/m,
            greedy: true,
            inside: {
              "atrule": /(?:@[\w-]+|[+=])/
            }
          }
        });
        delete Prism2.languages.sass.atrule;
        var variable = /\$[-\w]+|#\{\$[-\w]+\}/;
        var operator = [
          /[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/,
          {
            pattern: /(\s)-(?=\s)/,
            lookbehind: true
          }
        ];
        Prism2.languages.insertBefore("sass", "property", {
          "variable-line": {
            pattern: /^[ \t]*\$.+/m,
            greedy: true,
            inside: {
              "punctuation": /:/,
              "variable": variable,
              "operator": operator
            }
          },
          "property-line": {
            pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,
            greedy: true,
            inside: {
              "property": [
                /[^:\s]+(?=\s*:)/,
                {
                  pattern: /(:)[^:\s]+/,
                  lookbehind: true
                }
              ],
              "punctuation": /:/,
              "variable": variable,
              "operator": operator,
              "important": Prism2.languages.sass.important
            }
          }
        });
        delete Prism2.languages.sass.property;
        delete Prism2.languages.sass.important;
        Prism2.languages.insertBefore("sass", "punctuation", {
          "selector": {
            pattern: /^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,
            lookbehind: true,
            greedy: true
          }
        });
      })(Prism);
      Prism.languages.scala = Prism.languages.extend("java", {
        "triple-quoted-string": {
          pattern: /"""[\s\S]*?"""/,
          greedy: true,
          alias: "string"
        },
        "string": {
          pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
          greedy: true
        },
        "keyword": /<-|=>|\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\b/,
        "number": /\b0x(?:[\da-f]*\.)?[\da-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e\d+)?[dfl]?/i,
        "builtin": /\b(?:Any|AnyRef|AnyVal|Boolean|Byte|Char|Double|Float|Int|Long|Nothing|Short|String|Unit)\b/,
        "symbol": /'[^\d\s\\]\w*/
      });
      Prism.languages.insertBefore("scala", "triple-quoted-string", {
        "string-interpolation": {
          pattern: /\b[a-z]\w*(?:"""(?:[^$]|\$(?:[^{]|\{(?:[^{}]|\{[^{}]*\})*\}))*?"""|"(?:[^$"\r\n]|\$(?:[^{]|\{(?:[^{}]|\{[^{}]*\})*\}))*")/i,
          greedy: true,
          inside: {
            "id": {
              pattern: /^\w+/,
              greedy: true,
              alias: "function"
            },
            "escape": {
              pattern: /\\\$"|\$[$"]/,
              greedy: true,
              alias: "symbol"
            },
            "interpolation": {
              pattern: /\$(?:\w+|\{(?:[^{}]|\{[^{}]*\})*\})/,
              greedy: true,
              inside: {
                "punctuation": /^\$\{?|\}$/,
                "expression": {
                  pattern: /[\s\S]+/,
                  inside: Prism.languages.scala
                }
              }
            },
            "string": /[\s\S]+/
          }
        }
      });
      delete Prism.languages.scala["class-name"];
      delete Prism.languages.scala["function"];
      (function(Prism2) {
        Prism2.languages.scheme = {
          "comment": /;.*|#;\s*(?:\((?:[^()]|\([^()]*\))*\)|\[(?:[^\[\]]|\[[^\[\]]*\])*\])|#\|(?:[^#|]|#(?!\|)|\|(?!#)|#\|(?:[^#|]|#(?!\|)|\|(?!#))*\|#)*\|#/,
          "string": {
            pattern: /"(?:[^"\\]|\\.)*"/,
            greedy: true
          },
          "symbol": {
            pattern: /'[^()\[\]#'\s]+/,
            greedy: true
          },
          "char": {
            pattern: /#\\(?:[ux][a-fA-F\d]+\b|[-a-zA-Z]+\b|[\uD800-\uDBFF][\uDC00-\uDFFF]|\S)/,
            greedy: true
          },
          "lambda-parameter": [
            {
              pattern: /((?:^|[^'`#])[(\[]lambda\s+)(?:[^|()\[\]'\s]+|\|(?:[^\\|]|\\.)*\|)/,
              lookbehind: true
            },
            {
              pattern: /((?:^|[^'`#])[(\[]lambda\s+[(\[])[^()\[\]']+/,
              lookbehind: true
            }
          ],
          "keyword": {
            pattern: /((?:^|[^'`#])[(\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\*)?|let\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\[\]\s]|$)/,
            lookbehind: true
          },
          "builtin": {
            pattern: /((?:^|[^'`#])[(\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\?|boolean=?\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\?|\?|<\?|<=\?|=\?|>\?|>=\?)|close-(?:input-port|output-port|port)|complex\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\??|eq\?|equal\?|eqv\?|error|error-object(?:-irritants|-message|\?)|eval|even\?|exact(?:-integer-sqrt|-integer\?|\?)?|expt|features|file-error\?|floor(?:-quotient|-remainder|\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\??|input-port(?:-open\?|\?)|integer(?:->char|\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\?|newline|not|null\?|number(?:->string|\?)|numerator|odd\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\?|\?)|pair\?|peek-char|peek-u8|port\?|positive\?|procedure\?|quotient|raise|raise-continuable|rational\?|rationalize|read-(?:bytevector|bytevector!|char|error\?|line|string|u8)|real\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\?|<\?|<=\?|=\?|>\?|>=\?)?|substring|symbol(?:->string|\?|=\?)|syntax-error|textual-port\?|truncate(?:-quotient|-remainder|\/)?|u8-ready\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\?)(?=[()\[\]\s]|$)/,
            lookbehind: true
          },
          "operator": {
            pattern: /((?:^|[^'`#])[(\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\[\]\s]|$)/,
            lookbehind: true
          },
          "number": {
            pattern: RegExp(SortedBNF({
              "<ureal dec>": /\d+(?:\/\d+)|(?:\d+(?:\.\d*)?|\.\d+)(?:[esfdl][+-]?\d+)?/.source,
              "<real dec>": /[+-]?<ureal dec>|[+-](?:inf|nan)\.0/.source,
              "<imaginary dec>": /[+-](?:<ureal dec>|(?:inf|nan)\.0)?i/.source,
              "<complex dec>": /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,
              "<num dec>": /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,
              "<ureal box>": /[0-9a-f]+(?:\/[0-9a-f]+)?/.source,
              "<real box>": /[+-]?<ureal box>|[+-](?:inf|nan)\.0/.source,
              "<imaginary box>": /[+-](?:<ureal box>|(?:inf|nan)\.0)?i/.source,
              "<complex box>": /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,
              "<num box>": /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,
              "<number>": /(^|[()\[\]\s])(?:<num dec>|<num box>)(?=[()\[\]\s]|$)/.source
            }), "i"),
            lookbehind: true
          },
          "boolean": {
            pattern: /(^|[()\[\]\s])#(?:[ft]|false|true)(?=[()\[\]\s]|$)/,
            lookbehind: true
          },
          "function": {
            pattern: /((?:^|[^'`#])[(\[])(?:[^|()\[\]'\s]+|\|(?:[^\\|]|\\.)*\|)(?=[()\[\]\s]|$)/,
            lookbehind: true
          },
          "identifier": {
            pattern: /(^|[()\[\]\s])\|(?:[^\\|]|\\.)*\|(?=[()\[\]\s]|$)/,
            lookbehind: true,
            greedy: true
          },
          "punctuation": /[()\[\]']/
        };
        function SortedBNF(grammar) {
          for (var key in grammar) {
            grammar[key] = grammar[key].replace(/<[\w\s]+>/g, function(key2) {
              return "(?:" + grammar[key2].trim() + ")";
            });
          }
          return grammar[key];
        }
      })(Prism);
      Prism.languages.scss = Prism.languages.extend("css", {
        "comment": {
          pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
          lookbehind: true
        },
        "atrule": {
          pattern: /@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,
          inside: {
            "rule": /@[\w-]+/
          }
        },
        "url": /(?:[-a-z]+-)?url(?=\()/i,
        "selector": {
          pattern: /(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,
          inside: {
            "parent": {
              pattern: /&/,
              alias: "important"
            },
            "placeholder": /%[-\w]+/,
            "variable": /\$[-\w]+|#\{\$[-\w]+\}/
          }
        },
        "property": {
          pattern: /(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,
          inside: {
            "variable": /\$[-\w]+|#\{\$[-\w]+\}/
          }
        }
      });
      Prism.languages.insertBefore("scss", "atrule", {
        "keyword": [
          /@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i,
          {
            pattern: /( )(?:from|through)(?= )/,
            lookbehind: true
          }
        ]
      });
      Prism.languages.insertBefore("scss", "important", {
        "variable": /\$[-\w]+|#\{\$[-\w]+\}/
      });
      Prism.languages.insertBefore("scss", "function", {
        "module-modifier": {
          pattern: /\b(?:as|hide|show|with)\b/i,
          alias: "keyword"
        },
        "placeholder": {
          pattern: /%[-\w]+/,
          alias: "selector"
        },
        "statement": {
          pattern: /\B!(?:default|optional)\b/i,
          alias: "keyword"
        },
        "boolean": /\b(?:false|true)\b/,
        "null": {
          pattern: /\bnull\b/,
          alias: "keyword"
        },
        "operator": {
          pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,
          lookbehind: true
        }
      });
      Prism.languages.scss["atrule"].inside.rest = Prism.languages.scss;
      Prism.languages.sql = {
        "comment": {
          pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
          lookbehind: true
        },
        "variable": [
          {
            pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
            greedy: true
          },
          /@[\w.$]+/
        ],
        "string": {
          pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
          greedy: true,
          lookbehind: true
        },
        "identifier": {
          pattern: /(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,
          greedy: true,
          lookbehind: true,
          inside: {
            "punctuation": /^`|`$/
          }
        },
        "function": /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
        "keyword": /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
        "boolean": /\b(?:FALSE|NULL|TRUE)\b/i,
        "number": /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
        "operator": /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
        "punctuation": /[;[\]()`,.]/
      };
      Prism.languages.swift = {
        "comment": {
          pattern: /(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,
          lookbehind: true,
          greedy: true
        },
        "string-literal": [
          {
            pattern: RegExp(/(^|[^"#])/.source + "(?:" + /"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source + "|" + /"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source + ")" + /(?!["#])/.source),
            lookbehind: true,
            greedy: true,
            inside: {
              "interpolation": {
                pattern: /(\\\()(?:[^()]|\([^()]*\))*(?=\))/,
                lookbehind: true,
                inside: null
              },
              "interpolation-punctuation": {
                pattern: /^\)|\\\($/,
                alias: "punctuation"
              },
              "punctuation": /\\(?=[\r\n])/,
              "string": /[\s\S]+/
            }
          },
          {
            pattern: RegExp(/(^|[^"#])(#+)/.source + "(?:" + /"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source + "|" + /"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source + ")\\2"),
            lookbehind: true,
            greedy: true,
            inside: {
              "interpolation": {
                pattern: /(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,
                lookbehind: true,
                inside: null
              },
              "interpolation-punctuation": {
                pattern: /^\)|\\#+\($/,
                alias: "punctuation"
              },
              "string": /[\s\S]+/
            }
          }
        ],
        "directive": {
          pattern: RegExp(/#/.source + "(?:" + (/(?:elseif|if)\b/.source + "(?:[ 	]*" + /(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source + ")+") + "|" + /(?:else|endif)\b/.source + ")"),
          alias: "property",
          inside: {
            "directive-name": /^#\w+/,
            "boolean": /\b(?:false|true)\b/,
            "number": /\b\d+(?:\.\d+)*\b/,
            "operator": /!|&&|\|\||[<>]=?/,
            "punctuation": /[(),]/
          }
        },
        "literal": {
          pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,
          alias: "constant"
        },
        "other-directive": {
          pattern: /#\w+\b/,
          alias: "property"
        },
        "attribute": {
          pattern: /@\w+/,
          alias: "atrule"
        },
        "function-definition": {
          pattern: /(\bfunc\s+)\w+/,
          lookbehind: true,
          alias: "function"
        },
        "label": {
          pattern: /\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,
          lookbehind: true,
          alias: "important"
        },
        "keyword": /\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,
        "boolean": /\b(?:false|true)\b/,
        "nil": {
          pattern: /\bnil\b/,
          alias: "constant"
        },
        "short-argument": /\$\d+\b/,
        "omit": {
          pattern: /\b_\b/,
          alias: "keyword"
        },
        "number": /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,
        "class-name": /\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,
        "function": /\b[a-z_]\w*(?=\s*\()/i,
        "constant": /\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,
        "operator": /[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,
        "punctuation": /[{}[\]();,.:\\]/
      };
      Prism.languages.swift["string-literal"].forEach(function(rule) {
        rule.inside["interpolation"].inside = Prism.languages.swift;
      });
      (function(Prism2) {
        var typescript = Prism2.util.clone(Prism2.languages.typescript);
        Prism2.languages.tsx = Prism2.languages.extend("jsx", typescript);
        delete Prism2.languages.tsx["parameter"];
        delete Prism2.languages.tsx["literal-property"];
        var tag = Prism2.languages.tsx.tag;
        tag.pattern = RegExp(/(^|[^\w$]|(?=<\/))/.source + "(?:" + tag.pattern.source + ")", tag.pattern.flags);
        tag.lookbehind = true;
      })(Prism);
      (function(Prism2) {
        Prism2.languages.typescript = Prism2.languages.extend("javascript", {
          "class-name": {
            pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
            lookbehind: true,
            greedy: true,
            inside: null
          },
          "builtin": /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/
        });
        Prism2.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/, /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/, /\btype\b(?=\s*(?:[\{*]|$))/);
        delete Prism2.languages.typescript["parameter"];
        delete Prism2.languages.typescript["literal-property"];
        var typeInside = Prism2.languages.extend("typescript", {});
        delete typeInside["class-name"];
        Prism2.languages.typescript["class-name"].inside = typeInside;
        Prism2.languages.insertBefore("typescript", "function", {
          "decorator": {
            pattern: /@[$\w\xA0-\uFFFF]+/,
            inside: {
              "at": {
                pattern: /^@/,
                alias: "operator"
              },
              "function": /^[\s\S]+/
            }
          },
          "generic-function": {
            pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
            greedy: true,
            inside: {
              "function": /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
              "generic": {
                pattern: /<[\s\S]+/,
                alias: "class-name",
                inside: typeInside
              }
            }
          }
        });
        Prism2.languages.ts = Prism2.languages.typescript;
      })(Prism);
      Prism.languages.wasm = {
        "comment": [
          /\(;[\s\S]*?;\)/,
          {
            pattern: /;;.*/,
            greedy: true
          }
        ],
        "string": {
          pattern: /"(?:\\[\s\S]|[^"\\])*"/,
          greedy: true
        },
        "keyword": [
          {
            pattern: /\b(?:align|offset)=/,
            inside: {
              "operator": /=/
            }
          },
          {
            pattern: /\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,
            inside: {
              "punctuation": /\./
            }
          },
          /\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/
        ],
        "variable": /\$[\w!#$%&'*+\-./:<=>?@\\^`|~]+/,
        "number": /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,
        "punctuation": /[()]/
      };
      (function(Prism2) {
        var anchorOrAlias = /[*&][^\s[\]{},]+/;
        var tag = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/;
        var properties = "(?:" + tag.source + "(?:[ 	]+" + anchorOrAlias.source + ")?|" + anchorOrAlias.source + "(?:[ 	]+" + tag.source + ")?)";
        var plainKey = /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function() {
          return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source;
        });
        var string2 = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;
        function createValuePattern(value, flags) {
          flags = (flags || "").replace(/m/g, "") + "m";
          var pattern = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g, function() {
            return properties;
          }).replace(/<<value>>/g, function() {
            return value;
          });
          return RegExp(pattern, flags);
        }
        Prism2.languages.yaml = {
          "scalar": {
            pattern: RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g, function() {
              return properties;
            })),
            lookbehind: true,
            alias: "string"
          },
          "comment": /#.*/,
          "key": {
            pattern: RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g, function() {
              return properties;
            }).replace(/<<key>>/g, function() {
              return "(?:" + plainKey + "|" + string2 + ")";
            })),
            lookbehind: true,
            greedy: true,
            alias: "atrule"
          },
          "directive": {
            pattern: /(^[ \t]*)%.+/m,
            lookbehind: true,
            alias: "important"
          },
          "datetime": {
            pattern: createValuePattern(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),
            lookbehind: true,
            alias: "number"
          },
          "boolean": {
            pattern: createValuePattern(/false|true/.source, "i"),
            lookbehind: true,
            alias: "important"
          },
          "null": {
            pattern: createValuePattern(/null|~/.source, "i"),
            lookbehind: true,
            alias: "important"
          },
          "string": {
            pattern: createValuePattern(string2),
            lookbehind: true,
            greedy: true
          },
          "number": {
            pattern: createValuePattern(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source, "i"),
            lookbehind: true
          },
          "tag": tag,
          "important": anchorOrAlias,
          "punctuation": /---|[:[\]{}\-,|>?]|\.\.\./
        };
        Prism2.languages.yml = Prism2.languages.yaml;
      })(Prism);
      const decorateCodeLine = (editor) => {
        const code_block = getPlugin(editor, ELEMENT_CODE_BLOCK);
        const code_line = getPlugin(editor, ELEMENT_CODE_LINE);
        return ([node, path]) => {
          var _codeBlock$0$lang;
          const ranges = [];
          if (!code_block.options.syntax || node.type !== code_line.type) {
            return ranges;
          }
          const codeBlock = getParentNode(editor, path);
          if (!codeBlock) {
            return ranges;
          }
          let langName = (_codeBlock$0$lang = codeBlock[0].lang) !== null && _codeBlock$0$lang !== void 0 ? _codeBlock$0$lang : "";
          if (langName === "plain") {
            langName = "";
          }
          const lang2 = prism.exports.languages[langName];
          if (!lang2) {
            return ranges;
          }
          const text2 = getNodeString(node);
          const tokens2 = prism.exports.tokenize(text2, lang2);
          let offset2 = 0;
          for (const element of tokens2) {
            if (element instanceof prism.exports.Token) {
              ranges.push({
                anchor: {
                  path,
                  offset: offset2
                },
                focus: {
                  path,
                  offset: offset2 + element.length
                },
                tokenType: element.type,
                [ELEMENT_CODE_SYNTAX]: true
              });
            }
            offset2 += element.length;
          }
          return ranges;
        };
      };
      const deserializeHtmlCodeBlock = {
        rules: [{
          validNodeName: "PRE"
        }, {
          validNodeName: "P",
          validStyle: {
            fontFamily: "Consolas"
          }
        }],
        getNode: (el2) => {
          var _find, _el$textContent, _lines;
          const languageSelectorText = ((_find = [...el2.childNodes].find((node) => node.nodeName === "SELECT")) === null || _find === void 0 ? void 0 : _find.textContent) || "";
          const textContent = ((_el$textContent = el2.textContent) === null || _el$textContent === void 0 ? void 0 : _el$textContent.replace(languageSelectorText, "")) || "";
          let lines = textContent.split("\n");
          if (!((_lines = lines) !== null && _lines !== void 0 && _lines.length)) {
            lines = [textContent];
          }
          const codeLines = lines.map((line) => ({
            type: ELEMENT_CODE_LINE,
            children: [{
              text: line
            }]
          }));
          return {
            type: ELEMENT_CODE_BLOCK,
            children: codeLines
          };
        }
      };
      function unwrapExports$a(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$b(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$c = createCommonjsModule$b(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      var isHotkey$4 = unwrapExports$a(lib$c);
      lib$c.isHotkey;
      lib$c.isCodeHotkey;
      lib$c.isKeyHotkey;
      lib$c.parseHotkey;
      lib$c.compareHotkey;
      lib$c.toKeyCode;
      lib$c.toKeyName;
      const getCodeLineType = (editor) => getPluginType(editor, ELEMENT_CODE_LINE);
      const getCodeLineEntry = (editor, {
        at = editor.selection
      } = {}) => {
        if (at && someNode(editor, {
          at,
          match: {
            type: getCodeLineType(editor)
          }
        })) {
          const selectionParent = getParentNode(editor, at);
          if (!selectionParent)
            return;
          const [, parentPath] = selectionParent;
          const codeLine = getAboveNode(editor, {
            at,
            match: {
              type: getCodeLineType(editor)
            }
          }) || getParentNode(editor, parentPath);
          if (!codeLine)
            return;
          const [codeLineNode, codeLinePath] = codeLine;
          if (isElement(codeLineNode) && codeLineNode.type !== getCodeLineType(editor))
            return;
          const codeBlock = getParentNode(editor, codeLinePath);
          if (!codeBlock)
            return;
          return {
            codeBlock,
            codeLine
          };
        }
      };
      const indentCodeLine = (editor, {
        codeLine
      }) => {
        const [, codeLinePath] = codeLine;
        const codeLineStart = getStartPoint(editor, codeLinePath);
        if (!isExpanded(editor.selection)) {
          var _editor$selection;
          const cursor = (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.anchor;
          const range = getRange(editor, codeLineStart, cursor);
          const text2 = getEditorString(editor, range);
          if (/\S/.test(text2)) {
            insertText(editor, "  ", {
              at: editor.selection
            });
            return;
          }
        }
        insertText(editor, "  ", {
          at: codeLineStart
        });
      };
      const deleteStartSpace = (editor, {
        codeLine
      }) => {
        const [, codeLinePath] = codeLine;
        const codeLineStart = getStartPoint(editor, codeLinePath);
        const codeLineEnd = codeLineStart && getPointAfter(editor, codeLineStart);
        const spaceRange = codeLineEnd && getRange(editor, codeLineStart, codeLineEnd);
        const spaceText = getEditorString(editor, spaceRange);
        if (/\s/.test(spaceText)) {
          deleteText(editor, {
            at: spaceRange
          });
          return true;
        }
        return false;
      };
      const outdentCodeLine = (editor, {
        codeBlock,
        codeLine
      }) => {
        const deleted = deleteStartSpace(editor, {
          codeBlock,
          codeLine
        });
        deleted && deleteStartSpace(editor, {
          codeBlock,
          codeLine
        });
      };
      const onKeyDownCodeBlock = (editor) => (e2) => {
        const isTab = Hotkeys.isTab(editor, e2);
        const isUntab = Hotkeys.isUntab(editor, e2);
        if (isTab || isUntab) {
          const _codeLines = getNodeEntries(editor, {
            match: {
              type: getCodeLineType(editor)
            }
          });
          const codeLines = Array.from(_codeLines);
          if (codeLines.length) {
            e2.preventDefault();
            const [, firstLinePath] = codeLines[0];
            const codeBlock = getParentNode(editor, firstLinePath);
            if (!codeBlock)
              return;
            withoutNormalizing(editor, () => {
              for (const codeLine of codeLines) {
                if (isUntab) {
                  outdentCodeLine(editor, {
                    codeBlock,
                    codeLine
                  });
                }
                if (isTab) {
                  indentCodeLine(editor, {
                    codeBlock,
                    codeLine
                  });
                }
              }
            });
          }
        }
        if (isHotkey$4("mod+a", e2)) {
          const res = getCodeLineEntry(editor, {});
          if (!res)
            return;
          const {
            codeBlock
          } = res;
          const [, codeBlockPath] = codeBlock;
          select(editor, codeBlockPath);
          e2.preventDefault();
          e2.stopPropagation();
        }
      };
      const insertFragmentCodeBlock = (editor) => {
        const {
          insertFragment: _insertFragment
        } = editor;
        const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);
        const codeLineType = getPluginType(editor, ELEMENT_CODE_LINE);
        function convertNodeToCodeLine(node) {
          return {
            type: codeLineType,
            children: [{
              text: getNodeString(node)
            }]
          };
        }
        function extractCodeLinesFromCodeBlock(node) {
          return node.children;
        }
        return (fragment) => {
          const inCodeLine = findNode(editor, {
            match: {
              type: codeLineType
            }
          });
          if (!inCodeLine) {
            return _insertFragment(fragment);
          }
          return insertFragment(editor, fragment.flatMap((node) => {
            const element = node;
            return element.type === codeBlockType ? extractCodeLinesFromCodeBlock(element) : convertNodeToCodeLine(element);
          }));
        };
      };
      const getIndentDepth = (editor, {
        codeLine
      }) => {
        const [, codeLinePath] = codeLine;
        const text2 = getEditorString(editor, codeLinePath);
        return text2.search(/\S|$/);
      };
      const insertCodeLine = (editor, indentDepth = 0) => {
        if (editor.selection) {
          const indent = " ".repeat(indentDepth);
          insertElements(editor, {
            type: getCodeLineType(editor),
            children: [{
              text: indent
            }]
          });
        }
      };
      const withCodeBlock = (editor) => {
        const {
          insertBreak
        } = editor;
        const insertBreakCodeBlock = () => {
          if (!editor.selection)
            return;
          const res = getCodeLineEntry(editor, {});
          if (!res)
            return;
          const {
            codeBlock,
            codeLine
          } = res;
          const indentDepth = getIndentDepth(editor, {
            codeBlock,
            codeLine
          });
          insertCodeLine(editor, indentDepth);
          return true;
        };
        editor.insertBreak = () => {
          if (insertBreakCodeBlock())
            return;
          insertBreak();
        };
        editor.insertFragment = insertFragmentCodeBlock(editor);
        return editor;
      };
      const createCodeBlockPlugin$1 = createPluginFactory({
        key: ELEMENT_CODE_BLOCK,
        isElement: true,
        deserializeHtml: deserializeHtmlCodeBlock,
        handlers: {
          onKeyDown: onKeyDownCodeBlock
        },
        withOverrides: withCodeBlock,
        options: {
          hotkey: ["mod+opt+8", "mod+shift+8"],
          syntax: true,
          syntaxPopularFirst: false
        },
        then: (editor) => ({
          inject: {
            pluginsByKey: {
              [KEY_DESERIALIZE_HTML]: {
                editor: {
                  insertData: {
                    query: () => {
                      const code_line = getPlugin(editor, ELEMENT_CODE_LINE);
                      return !someNode(editor, {
                        match: {
                          type: code_line.type
                        }
                      });
                    }
                  }
                }
              }
            }
          }
        }),
        plugins: [{
          key: ELEMENT_CODE_LINE,
          isElement: true
        }, {
          key: ELEMENT_CODE_SYNTAX,
          isLeaf: true,
          decorate: decorateCodeLine
        }]
      });
      const ELEMENT_H1 = "h1";
      const ELEMENT_H2 = "h2";
      const ELEMENT_H3 = "h3";
      const ELEMENT_H4 = "h4";
      const ELEMENT_H5 = "h5";
      const ELEMENT_H6 = "h6";
      const KEYS_HEADING = [ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, ELEMENT_H4, ELEMENT_H5, ELEMENT_H6];
      const createHeadingPlugin = createPluginFactory({
        key: "heading",
        options: {
          levels: 6
        },
        then: (editor, {
          options: {
            levels
          } = {}
        }) => {
          const plugins = [];
          for (let level = 1; level <= levels; level++) {
            const key = KEYS_HEADING[level - 1];
            const plugin = {
              key,
              isElement: true,
              deserializeHtml: {
                rules: [{
                  validNodeName: `H${level}`
                }]
              },
              handlers: {
                onKeyDown: onKeyDownToggleElement
              },
              options: {}
            };
            if (level < 4) {
              plugin.options.hotkey = [`mod+opt+${level}`, `mod+shift+${level}`];
            }
            plugins.push(plugin);
          }
          return {
            plugins
          };
        }
      });
      const ELEMENT_PARAGRAPH = "p";
      const createParagraphPlugin = createPluginFactory({
        key: ELEMENT_PARAGRAPH,
        isElement: true,
        handlers: {
          onKeyDown: onKeyDownToggleElement
        },
        options: {
          hotkey: ["mod+opt+0", "mod+shift+0"]
        },
        deserializeHtml: {
          rules: [{
            validNodeName: "P"
          }],
          query: (el2) => el2.style.fontFamily !== "Consolas"
        }
      });
      createPluginFactory({
        key: "basicElements",
        plugins: [createBlockquotePlugin(), createCodeBlockPlugin$1(), createHeadingPlugin(), createParagraphPlugin()]
      });
      const MARK_BOLD$1 = "bold";
      const createBoldPlugin$1 = createPluginFactory({
        key: MARK_BOLD$1,
        isLeaf: true,
        deserializeHtml: {
          rules: [{
            validNodeName: ["STRONG", "B"]
          }, {
            validStyle: {
              fontWeight: ["600", "700", "bold"]
            }
          }],
          query: (el2) => !someHtmlElement(el2, (node) => node.style.fontWeight === "normal")
        },
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+b"
        }
      });
      const MARK_CODE$1 = "code";
      const createCodePlugin$1 = createPluginFactory({
        key: MARK_CODE$1,
        isLeaf: true,
        deserializeHtml: {
          rules: [{
            validNodeName: ["CODE"]
          }, {
            validStyle: {
              wordWrap: "break-word"
            }
          }, {
            validStyle: {
              fontFamily: "Consolas"
            }
          }],
          query(el2) {
            const blockAbove = findHtmlParentElement(el2, "P");
            if ((blockAbove === null || blockAbove === void 0 ? void 0 : blockAbove.style.fontFamily) === "Consolas")
              return false;
            return !findHtmlParentElement(el2, "PRE");
          }
        },
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+e"
        }
      });
      const MARK_ITALIC$1 = "italic";
      const createItalicPlugin$1 = createPluginFactory({
        key: MARK_ITALIC$1,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+i"
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["EM", "I"]
          }, {
            validStyle: {
              fontStyle: "italic"
            }
          }],
          query: (el2) => !someHtmlElement(el2, (node) => node.style.fontStyle === "normal")
        }
      });
      const MARK_STRIKETHROUGH$1 = "strikethrough";
      const createStrikethroughPlugin$1 = createPluginFactory({
        key: MARK_STRIKETHROUGH$1,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+shift+x"
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["S", "DEL", "STRIKE"]
          }, {
            validStyle: {
              textDecoration: "line-through"
            }
          }],
          query: (el2) => !someHtmlElement(el2, (node) => node.style.textDecoration === "none")
        }
      });
      const MARK_SUBSCRIPT$1$1 = "subscript";
      const MARK_SUPERSCRIPT$1$1 = "superscript";
      const createSubscriptPlugin$1 = createPluginFactory({
        key: MARK_SUBSCRIPT$1$1,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+,",
          clear: MARK_SUPERSCRIPT$1$1
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["SUB"]
          }, {
            validStyle: {
              verticalAlign: "sub"
            }
          }]
        }
      });
      const MARK_SUPERSCRIPT$2 = "superscript";
      const MARK_SUBSCRIPT$2 = "subscript";
      const createSuperscriptPlugin$1 = createPluginFactory({
        key: MARK_SUPERSCRIPT$2,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+.",
          clear: MARK_SUBSCRIPT$2
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["SUP"]
          }, {
            validStyle: {
              verticalAlign: "super"
            }
          }]
        }
      });
      const MARK_UNDERLINE$1 = "underline";
      const createUnderlinePlugin$1 = createPluginFactory({
        key: MARK_UNDERLINE$1,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+u"
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["U"]
          }, {
            validStyle: {
              textDecoration: ["underline"]
            }
          }],
          query: (el2) => !someHtmlElement(el2, (node) => node.style.textDecoration === "none")
        }
      });
      createPluginFactory({
        key: "basicMarks",
        plugins: [createBoldPlugin$1(), createCodePlugin$1(), createItalicPlugin$1(), createStrikethroughPlugin$1(), createSubscriptPlugin$1(), createSuperscriptPlugin$1(), createUnderlinePlugin$1()]
      });
      function unwrapExports$9(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$a(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$b = createCommonjsModule$a(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      var isHotkey$3 = unwrapExports$9(lib$b);
      lib$b.isHotkey;
      lib$b.isCodeHotkey;
      lib$b.isKeyHotkey;
      lib$b.parseHotkey;
      lib$b.compareHotkey;
      lib$b.toKeyCode;
      lib$b.toKeyName;
      const exitBreakAtEdges = (editor, {
        start,
        end
      }) => {
        let queryEdge = false;
        let isEdge2 = false;
        let isStart = false;
        if (start || end) {
          queryEdge = true;
          if (start && isSelectionAtBlockStart(editor)) {
            isEdge2 = true;
            isStart = true;
          }
          if (end && isSelectionAtBlockEnd(editor)) {
            isEdge2 = true;
          }
          if (isEdge2 && isExpanded(editor.selection)) {
            editor.deleteFragment();
          }
        }
        return {
          queryEdge,
          isEdge: isEdge2,
          isStart
        };
      };
      const exitBreak = (editor, {
        level = 0,
        defaultType = getPluginType(editor, ELEMENT_DEFAULT),
        query = {},
        before
      }) => {
        if (!editor.selection)
          return;
        const {
          queryEdge,
          isEdge: isEdge2,
          isStart
        } = exitBreakAtEdges(editor, query);
        if (isStart)
          before = true;
        if (queryEdge && !isEdge2)
          return;
        const selectionPath = getPath$1(editor, editor.selection);
        let insertPath;
        if (before) {
          insertPath = selectionPath.slice(0, level + 1);
        } else {
          insertPath = Path.next(selectionPath.slice(0, level + 1));
        }
        insertElements(editor, {
          type: defaultType,
          children: [{
            text: ""
          }]
        }, {
          at: insertPath,
          select: !isStart
        });
        return true;
      };
      const onKeyDownExitBreak = (editor, {
        options: {
          rules = []
        }
      }) => (event) => {
        const entry = getBlockAbove(editor);
        if (!entry)
          return;
        rules.forEach(({
          hotkey,
          ...rule
        }) => {
          if (isHotkey$3(hotkey, event) && queryNode(entry, rule.query)) {
            if (exitBreak(editor, rule)) {
              event.preventDefault();
              event.stopPropagation();
            }
          }
        });
      };
      const KEY_EXIT_BREAK = "exitBreak";
      const createExitBreakPlugin = createPluginFactory({
        key: KEY_EXIT_BREAK,
        handlers: {
          onKeyDown: onKeyDownExitBreak
        },
        options: {
          rules: [{
            hotkey: "mod+enter"
          }, {
            hotkey: "mod+shift+enter",
            before: true
          }]
        }
      });
      var propTypes$1 = { exports: {} };
      var ReactPropTypesSecret$3 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      var ReactPropTypesSecret_1$1 = ReactPropTypesSecret$3;
      var ReactPropTypesSecret$2 = ReactPropTypesSecret_1$1;
      function emptyFunction$1() {
      }
      function emptyFunctionWithReset$1() {
      }
      emptyFunctionWithReset$1.resetWarningCache = emptyFunction$1;
      var factoryWithThrowingShims$1 = function() {
        function shim(props, propName, componentName, location, propFullName, secret) {
          if (secret === ReactPropTypesSecret$2) {
            return;
          }
          var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
          err.name = "Invariant Violation";
          throw err;
        }
        shim.isRequired = shim;
        function getShim() {
          return shim;
        }
        var ReactPropTypes = {
          array: shim,
          bigint: shim,
          bool: shim,
          func: shim,
          number: shim,
          object: shim,
          string: shim,
          symbol: shim,
          any: shim,
          arrayOf: getShim,
          element: shim,
          elementType: shim,
          instanceOf: getShim,
          node: shim,
          objectOf: getShim,
          oneOf: getShim,
          oneOfType: getShim,
          shape: getShim,
          exact: getShim,
          checkPropTypes: emptyFunctionWithReset$1,
          resetWarningCache: emptyFunction$1
        };
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
      {
        propTypes$1.exports = factoryWithThrowingShims$1();
      }
      var PropTypes$1 = propTypes$1.exports;
      function __awaiter(thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve) {
            resolve(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e2) {
              reject(e2);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e2) {
              reject(e2);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      }
      function __generator(thisArg, body) {
        var _2 = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f2, y2, t2, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n2) {
          return function(v2) {
            return step([n2, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (g2 && (g2 = 0, op[0] && (_2 = 0)), _2)
            try {
              if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _2.label++;
                  return { value: op[1], done: false };
                case 5:
                  _2.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _2.ops.pop();
                  _2.trys.pop();
                  continue;
                default:
                  if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _2 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _2.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _2.label < t2[1]) {
                    _2.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _2.label < t2[2]) {
                    _2.label = t2[2];
                    _2.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _2.ops.pop();
                  _2.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _2);
            } catch (e2) {
              op = [6, e2];
              y2 = 0;
            } finally {
              f2 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      }
      function __read(o2, n2) {
        var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
        if (!m2)
          return o2;
        var i2 = m2.call(o2), r2, ar = [], e2;
        try {
          while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
            ar.push(r2.value);
        } catch (error) {
          e2 = { error };
        } finally {
          try {
            if (r2 && !r2.done && (m2 = i2["return"]))
              m2.call(i2);
          } finally {
            if (e2)
              throw e2.error;
          }
        }
        return ar;
      }
      function __spreadArray(to2, from2, pack) {
        if (pack || arguments.length === 2)
          for (var i2 = 0, l2 = from2.length, ar; i2 < l2; i2++) {
            if (ar || !(i2 in from2)) {
              if (!ar)
                ar = Array.prototype.slice.call(from2, 0, i2);
              ar[i2] = from2[i2];
            }
          }
        return to2.concat(ar || Array.prototype.slice.call(from2));
      }
      const createComboboxStore = (state) => createStore(`combobox-${state.id}`)(state);
      const comboboxStore = createStore("combobox")({
        activeId: null,
        byId: {},
        highlightedIndex: 0,
        items: [],
        filteredItems: [],
        targetRange: null,
        text: null
      }).extendActions((set2, get2) => ({
        setComboboxById: (state) => {
          if (get2.byId()[state.id])
            return;
          set2.state((draft) => {
            draft.byId[state.id] = createComboboxStore(state);
          });
        },
        open: (state) => {
          set2.mergeState(state);
        },
        reset: () => {
          set2.state((draft) => {
            draft.activeId = null;
            draft.highlightedIndex = 0;
            draft.items = [];
            draft.text = null;
            draft.targetRange = null;
          });
        }
      })).extendSelectors((state) => ({
        isOpen: () => !!state.activeId
      }));
      comboboxStore.use;
      comboboxStore.get;
      comboboxStore.set;
      function unwrapExports$8(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$9(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$a = createCommonjsModule$9(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      unwrapExports$8(lib$a);
      lib$a.isHotkey;
      lib$a.isCodeHotkey;
      lib$a.isKeyHotkey;
      lib$a.parseHotkey;
      lib$a.compareHotkey;
      lib$a.toKeyCode;
      lib$a.toKeyName;
      const ELEMENT_HR = "hr";
      const createHorizontalRulePlugin = createPluginFactory({
        key: ELEMENT_HR,
        isElement: true,
        isVoid: true,
        deserializeHtml: {
          rules: [{
            validNodeName: "HR"
          }]
        }
      });
      var __extends$3 = globalThis && globalThis.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __assign$4 = globalThis && globalThis.__assign || function() {
        __assign$4 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        return __assign$4.apply(this, arguments);
      };
      var rowSizeBase$1 = {
        width: "100%",
        height: "10px",
        top: "0px",
        left: "0px",
        cursor: "row-resize"
      };
      var colSizeBase$1 = {
        width: "10px",
        height: "100%",
        top: "0px",
        left: "0px",
        cursor: "col-resize"
      };
      var edgeBase$1 = {
        width: "20px",
        height: "20px",
        position: "absolute"
      };
      var styles$2 = {
        top: __assign$4(__assign$4({}, rowSizeBase$1), { top: "-5px" }),
        right: __assign$4(__assign$4({}, colSizeBase$1), { left: void 0, right: "-5px" }),
        bottom: __assign$4(__assign$4({}, rowSizeBase$1), { top: void 0, bottom: "-5px" }),
        left: __assign$4(__assign$4({}, colSizeBase$1), { left: "-5px" }),
        topRight: __assign$4(__assign$4({}, edgeBase$1), { right: "-10px", top: "-10px", cursor: "ne-resize" }),
        bottomRight: __assign$4(__assign$4({}, edgeBase$1), { right: "-10px", bottom: "-10px", cursor: "se-resize" }),
        bottomLeft: __assign$4(__assign$4({}, edgeBase$1), { left: "-10px", bottom: "-10px", cursor: "sw-resize" }),
        topLeft: __assign$4(__assign$4({}, edgeBase$1), { left: "-10px", top: "-10px", cursor: "nw-resize" })
      };
      var Resizer$1 = function(_super) {
        __extends$3(Resizer2, _super);
        function Resizer2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.onMouseDown = function(e2) {
            _this.props.onResizeStart(e2, _this.props.direction);
          };
          _this.onTouchStart = function(e2) {
            _this.props.onResizeStart(e2, _this.props.direction);
          };
          return _this;
        }
        Resizer2.prototype.render = function() {
          return react.exports.createElement("div", { className: this.props.className || "", style: __assign$4(__assign$4({ position: "absolute", userSelect: "none" }, styles$2[this.props.direction]), this.props.replaceStyles || {}), onMouseDown: this.onMouseDown, onTouchStart: this.onTouchStart }, this.props.children);
        };
        return Resizer2;
      }(react.exports.PureComponent);
      var __extends$2 = globalThis && globalThis.__extends || function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __assign$3 = globalThis && globalThis.__assign || function() {
        __assign$3 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        return __assign$3.apply(this, arguments);
      };
      var DEFAULT_SIZE$3 = {
        width: "auto",
        height: "auto"
      };
      var clamp$2 = function(n2, min2, max2) {
        return Math.max(Math.min(n2, max2), min2);
      };
      var snap$1 = function(n2, size) {
        return Math.round(n2 / size) * size;
      };
      var hasDirection$1 = function(dir, target) {
        return new RegExp(dir, "i").test(target);
      };
      var isTouchEvent$1 = function(event) {
        return Boolean(event.touches && event.touches.length);
      };
      var isMouseEvent$1 = function(event) {
        return Boolean((event.clientX || event.clientX === 0) && (event.clientY || event.clientY === 0));
      };
      var findClosestSnap$1 = function(n2, snapArray, snapGap) {
        if (snapGap === void 0) {
          snapGap = 0;
        }
        var closestGapIndex = snapArray.reduce(function(prev, curr, index2) {
          return Math.abs(curr - n2) < Math.abs(snapArray[prev] - n2) ? index2 : prev;
        }, 0);
        var gap = Math.abs(snapArray[closestGapIndex] - n2);
        return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n2;
      };
      var getStringSize$1 = function(n2) {
        n2 = n2.toString();
        if (n2 === "auto") {
          return n2;
        }
        if (n2.endsWith("px")) {
          return n2;
        }
        if (n2.endsWith("%")) {
          return n2;
        }
        if (n2.endsWith("vh")) {
          return n2;
        }
        if (n2.endsWith("vw")) {
          return n2;
        }
        if (n2.endsWith("vmax")) {
          return n2;
        }
        if (n2.endsWith("vmin")) {
          return n2;
        }
        return n2 + "px";
      };
      var getPixelSize$1 = function(size, parentSize, innerWidth, innerHeight) {
        if (size && typeof size === "string") {
          if (size.endsWith("px")) {
            return Number(size.replace("px", ""));
          }
          if (size.endsWith("%")) {
            var ratio = Number(size.replace("%", "")) / 100;
            return parentSize * ratio;
          }
          if (size.endsWith("vw")) {
            var ratio = Number(size.replace("vw", "")) / 100;
            return innerWidth * ratio;
          }
          if (size.endsWith("vh")) {
            var ratio = Number(size.replace("vh", "")) / 100;
            return innerHeight * ratio;
          }
        }
        return size;
      };
      var calculateNewMax$1 = function(parentSize, innerWidth, innerHeight, maxWidth, maxHeight, minWidth, minHeight) {
        maxWidth = getPixelSize$1(maxWidth, parentSize.width, innerWidth, innerHeight);
        maxHeight = getPixelSize$1(maxHeight, parentSize.height, innerWidth, innerHeight);
        minWidth = getPixelSize$1(minWidth, parentSize.width, innerWidth, innerHeight);
        minHeight = getPixelSize$1(minHeight, parentSize.height, innerWidth, innerHeight);
        return {
          maxWidth: typeof maxWidth === "undefined" ? void 0 : Number(maxWidth),
          maxHeight: typeof maxHeight === "undefined" ? void 0 : Number(maxHeight),
          minWidth: typeof minWidth === "undefined" ? void 0 : Number(minWidth),
          minHeight: typeof minHeight === "undefined" ? void 0 : Number(minHeight)
        };
      };
      var definedProps$1 = [
        "as",
        "style",
        "className",
        "grid",
        "snap",
        "bounds",
        "boundsByDirection",
        "size",
        "defaultSize",
        "minWidth",
        "minHeight",
        "maxWidth",
        "maxHeight",
        "lockAspectRatio",
        "lockAspectRatioExtraWidth",
        "lockAspectRatioExtraHeight",
        "enable",
        "handleStyles",
        "handleClasses",
        "handleWrapperStyle",
        "handleWrapperClass",
        "children",
        "onResizeStart",
        "onResize",
        "onResizeStop",
        "handleComponent",
        "scale",
        "resizeRatio",
        "snapGap"
      ];
      var baseClassName$1 = "__resizable_base__";
      (function(_super) {
        __extends$2(Resizable, _super);
        function Resizable(props) {
          var _this = _super.call(this, props) || this;
          _this.ratio = 1;
          _this.resizable = null;
          _this.parentLeft = 0;
          _this.parentTop = 0;
          _this.resizableLeft = 0;
          _this.resizableRight = 0;
          _this.resizableTop = 0;
          _this.resizableBottom = 0;
          _this.targetLeft = 0;
          _this.targetTop = 0;
          _this.appendBase = function() {
            if (!_this.resizable || !_this.window) {
              return null;
            }
            var parent2 = _this.parentNode;
            if (!parent2) {
              return null;
            }
            var element = _this.window.document.createElement("div");
            element.style.width = "100%";
            element.style.height = "100%";
            element.style.position = "absolute";
            element.style.transform = "scale(0, 0)";
            element.style.left = "0";
            element.style.flex = "0 0 100%";
            if (element.classList) {
              element.classList.add(baseClassName$1);
            } else {
              element.className += baseClassName$1;
            }
            parent2.appendChild(element);
            return element;
          };
          _this.removeBase = function(base) {
            var parent2 = _this.parentNode;
            if (!parent2) {
              return;
            }
            parent2.removeChild(base);
          };
          _this.ref = function(c2) {
            if (c2) {
              _this.resizable = c2;
            }
          };
          _this.state = {
            isResizing: false,
            width: typeof (_this.propsSize && _this.propsSize.width) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.width,
            height: typeof (_this.propsSize && _this.propsSize.height) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.height,
            direction: "right",
            original: {
              x: 0,
              y: 0,
              width: 0,
              height: 0
            },
            backgroundStyle: {
              height: "100%",
              width: "100%",
              backgroundColor: "rgba(0,0,0,0)",
              cursor: "auto",
              opacity: 0,
              position: "fixed",
              zIndex: 9999,
              top: "0",
              left: "0",
              bottom: "0",
              right: "0"
            },
            flexBasis: void 0
          };
          _this.onResizeStart = _this.onResizeStart.bind(_this);
          _this.onMouseMove = _this.onMouseMove.bind(_this);
          _this.onMouseUp = _this.onMouseUp.bind(_this);
          return _this;
        }
        Object.defineProperty(Resizable.prototype, "parentNode", {
          get: function() {
            if (!this.resizable) {
              return null;
            }
            return this.resizable.parentNode;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resizable.prototype, "window", {
          get: function() {
            if (!this.resizable) {
              return null;
            }
            if (!this.resizable.ownerDocument) {
              return null;
            }
            return this.resizable.ownerDocument.defaultView;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resizable.prototype, "propsSize", {
          get: function() {
            return this.props.size || this.props.defaultSize || DEFAULT_SIZE$3;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resizable.prototype, "size", {
          get: function() {
            var width = 0;
            var height = 0;
            if (this.resizable && this.window) {
              var orgWidth = this.resizable.offsetWidth;
              var orgHeight = this.resizable.offsetHeight;
              var orgPosition = this.resizable.style.position;
              if (orgPosition !== "relative") {
                this.resizable.style.position = "relative";
              }
              width = this.resizable.style.width !== "auto" ? this.resizable.offsetWidth : orgWidth;
              height = this.resizable.style.height !== "auto" ? this.resizable.offsetHeight : orgHeight;
              this.resizable.style.position = orgPosition;
            }
            return { width, height };
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resizable.prototype, "sizeStyle", {
          get: function() {
            var _this = this;
            var size = this.props.size;
            var getSize = function(key) {
              if (typeof _this.state[key] === "undefined" || _this.state[key] === "auto") {
                return "auto";
              }
              if (_this.propsSize && _this.propsSize[key] && _this.propsSize[key].toString().endsWith("%")) {
                if (_this.state[key].toString().endsWith("%")) {
                  return _this.state[key].toString();
                }
                var parentSize = _this.getParentSize();
                var value = Number(_this.state[key].toString().replace("px", ""));
                var percent = value / parentSize[key] * 100;
                return percent + "%";
              }
              return getStringSize$1(_this.state[key]);
            };
            var width = size && typeof size.width !== "undefined" && !this.state.isResizing ? getStringSize$1(size.width) : getSize("width");
            var height = size && typeof size.height !== "undefined" && !this.state.isResizing ? getStringSize$1(size.height) : getSize("height");
            return { width, height };
          },
          enumerable: false,
          configurable: true
        });
        Resizable.prototype.getParentSize = function() {
          if (!this.parentNode) {
            if (!this.window) {
              return { width: 0, height: 0 };
            }
            return { width: this.window.innerWidth, height: this.window.innerHeight };
          }
          var base = this.appendBase();
          if (!base) {
            return { width: 0, height: 0 };
          }
          var wrapChanged = false;
          var wrap2 = this.parentNode.style.flexWrap;
          if (wrap2 !== "wrap") {
            wrapChanged = true;
            this.parentNode.style.flexWrap = "wrap";
          }
          base.style.position = "relative";
          base.style.minWidth = "100%";
          base.style.minHeight = "100%";
          var size = {
            width: base.offsetWidth,
            height: base.offsetHeight
          };
          if (wrapChanged) {
            this.parentNode.style.flexWrap = wrap2;
          }
          this.removeBase(base);
          return size;
        };
        Resizable.prototype.bindEvents = function() {
          if (this.window) {
            this.window.addEventListener("mouseup", this.onMouseUp);
            this.window.addEventListener("mousemove", this.onMouseMove);
            this.window.addEventListener("mouseleave", this.onMouseUp);
            this.window.addEventListener("touchmove", this.onMouseMove, {
              capture: true,
              passive: false
            });
            this.window.addEventListener("touchend", this.onMouseUp);
          }
        };
        Resizable.prototype.unbindEvents = function() {
          if (this.window) {
            this.window.removeEventListener("mouseup", this.onMouseUp);
            this.window.removeEventListener("mousemove", this.onMouseMove);
            this.window.removeEventListener("mouseleave", this.onMouseUp);
            this.window.removeEventListener("touchmove", this.onMouseMove, true);
            this.window.removeEventListener("touchend", this.onMouseUp);
          }
        };
        Resizable.prototype.componentDidMount = function() {
          if (!this.resizable || !this.window) {
            return;
          }
          var computedStyle = this.window.getComputedStyle(this.resizable);
          this.setState({
            width: this.state.width || this.size.width,
            height: this.state.height || this.size.height,
            flexBasis: computedStyle.flexBasis !== "auto" ? computedStyle.flexBasis : void 0
          });
        };
        Resizable.prototype.componentWillUnmount = function() {
          if (this.window) {
            this.unbindEvents();
          }
        };
        Resizable.prototype.createSizeForCssProperty = function(newSize, kind) {
          var propsSize = this.propsSize && this.propsSize[kind];
          return this.state[kind] === "auto" && this.state.original[kind] === newSize && (typeof propsSize === "undefined" || propsSize === "auto") ? "auto" : newSize;
        };
        Resizable.prototype.calculateNewMaxFromBoundary = function(maxWidth, maxHeight) {
          var boundsByDirection = this.props.boundsByDirection;
          var direction = this.state.direction;
          var widthByDirection = boundsByDirection && hasDirection$1("left", direction);
          var heightByDirection = boundsByDirection && hasDirection$1("top", direction);
          var boundWidth;
          var boundHeight;
          if (this.props.bounds === "parent") {
            var parent_1 = this.parentNode;
            if (parent_1) {
              boundWidth = widthByDirection ? this.resizableRight - this.parentLeft : parent_1.offsetWidth + (this.parentLeft - this.resizableLeft);
              boundHeight = heightByDirection ? this.resizableBottom - this.parentTop : parent_1.offsetHeight + (this.parentTop - this.resizableTop);
            }
          } else if (this.props.bounds === "window") {
            if (this.window) {
              boundWidth = widthByDirection ? this.resizableRight : this.window.innerWidth - this.resizableLeft;
              boundHeight = heightByDirection ? this.resizableBottom : this.window.innerHeight - this.resizableTop;
            }
          } else if (this.props.bounds) {
            boundWidth = widthByDirection ? this.resizableRight - this.targetLeft : this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);
            boundHeight = heightByDirection ? this.resizableBottom - this.targetTop : this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);
          }
          if (boundWidth && Number.isFinite(boundWidth)) {
            maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
          }
          if (boundHeight && Number.isFinite(boundHeight)) {
            maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
          }
          return { maxWidth, maxHeight };
        };
        Resizable.prototype.calculateNewSizeFromDirection = function(clientX, clientY) {
          var scale = this.props.scale || 1;
          var resizeRatio = this.props.resizeRatio || 1;
          var _a = this.state, direction = _a.direction, original = _a.original;
          var _b = this.props, lockAspectRatio = _b.lockAspectRatio, lockAspectRatioExtraHeight = _b.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _b.lockAspectRatioExtraWidth;
          var newWidth = original.width;
          var newHeight = original.height;
          var extraHeight = lockAspectRatioExtraHeight || 0;
          var extraWidth = lockAspectRatioExtraWidth || 0;
          if (hasDirection$1("right", direction)) {
            newWidth = original.width + (clientX - original.x) * resizeRatio / scale;
            if (lockAspectRatio) {
              newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
            }
          }
          if (hasDirection$1("left", direction)) {
            newWidth = original.width - (clientX - original.x) * resizeRatio / scale;
            if (lockAspectRatio) {
              newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
            }
          }
          if (hasDirection$1("bottom", direction)) {
            newHeight = original.height + (clientY - original.y) * resizeRatio / scale;
            if (lockAspectRatio) {
              newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
            }
          }
          if (hasDirection$1("top", direction)) {
            newHeight = original.height - (clientY - original.y) * resizeRatio / scale;
            if (lockAspectRatio) {
              newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
            }
          }
          return { newWidth, newHeight };
        };
        Resizable.prototype.calculateNewSizeFromAspectRatio = function(newWidth, newHeight, max2, min2) {
          var _a = this.props, lockAspectRatio = _a.lockAspectRatio, lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;
          var computedMinWidth = typeof min2.width === "undefined" ? 10 : min2.width;
          var computedMaxWidth = typeof max2.width === "undefined" || max2.width < 0 ? newWidth : max2.width;
          var computedMinHeight = typeof min2.height === "undefined" ? 10 : min2.height;
          var computedMaxHeight = typeof max2.height === "undefined" || max2.height < 0 ? newHeight : max2.height;
          var extraHeight = lockAspectRatioExtraHeight || 0;
          var extraWidth = lockAspectRatioExtraWidth || 0;
          if (lockAspectRatio) {
            var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;
            var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;
            var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;
            var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;
            var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
            var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
            var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
            var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
            newWidth = clamp$2(newWidth, lockedMinWidth, lockedMaxWidth);
            newHeight = clamp$2(newHeight, lockedMinHeight, lockedMaxHeight);
          } else {
            newWidth = clamp$2(newWidth, computedMinWidth, computedMaxWidth);
            newHeight = clamp$2(newHeight, computedMinHeight, computedMaxHeight);
          }
          return { newWidth, newHeight };
        };
        Resizable.prototype.setBoundingClientRect = function() {
          if (this.props.bounds === "parent") {
            var parent_2 = this.parentNode;
            if (parent_2) {
              var parentRect = parent_2.getBoundingClientRect();
              this.parentLeft = parentRect.left;
              this.parentTop = parentRect.top;
            }
          }
          if (this.props.bounds && typeof this.props.bounds !== "string") {
            var targetRect = this.props.bounds.getBoundingClientRect();
            this.targetLeft = targetRect.left;
            this.targetTop = targetRect.top;
          }
          if (this.resizable) {
            var _a = this.resizable.getBoundingClientRect(), left = _a.left, top_1 = _a.top, right = _a.right, bottom = _a.bottom;
            this.resizableLeft = left;
            this.resizableRight = right;
            this.resizableTop = top_1;
            this.resizableBottom = bottom;
          }
        };
        Resizable.prototype.onResizeStart = function(event, direction) {
          if (!this.resizable || !this.window) {
            return;
          }
          var clientX = 0;
          var clientY = 0;
          if (event.nativeEvent && isMouseEvent$1(event.nativeEvent)) {
            clientX = event.nativeEvent.clientX;
            clientY = event.nativeEvent.clientY;
          } else if (event.nativeEvent && isTouchEvent$1(event.nativeEvent)) {
            clientX = event.nativeEvent.touches[0].clientX;
            clientY = event.nativeEvent.touches[0].clientY;
          }
          if (this.props.onResizeStart) {
            if (this.resizable) {
              var startResize = this.props.onResizeStart(event, direction, this.resizable);
              if (startResize === false) {
                return;
              }
            }
          }
          if (this.props.size) {
            if (typeof this.props.size.height !== "undefined" && this.props.size.height !== this.state.height) {
              this.setState({ height: this.props.size.height });
            }
            if (typeof this.props.size.width !== "undefined" && this.props.size.width !== this.state.width) {
              this.setState({ width: this.props.size.width });
            }
          }
          this.ratio = typeof this.props.lockAspectRatio === "number" ? this.props.lockAspectRatio : this.size.width / this.size.height;
          var flexBasis;
          var computedStyle = this.window.getComputedStyle(this.resizable);
          if (computedStyle.flexBasis !== "auto") {
            var parent_3 = this.parentNode;
            if (parent_3) {
              var dir = this.window.getComputedStyle(parent_3).flexDirection;
              this.flexDir = dir.startsWith("row") ? "row" : "column";
              flexBasis = computedStyle.flexBasis;
            }
          }
          this.setBoundingClientRect();
          this.bindEvents();
          var state = {
            original: {
              x: clientX,
              y: clientY,
              width: this.size.width,
              height: this.size.height
            },
            isResizing: true,
            backgroundStyle: __assign$3(__assign$3({}, this.state.backgroundStyle), { cursor: this.window.getComputedStyle(event.target).cursor || "auto" }),
            direction,
            flexBasis
          };
          this.setState(state);
        };
        Resizable.prototype.onMouseMove = function(event) {
          var _this = this;
          if (!this.state.isResizing || !this.resizable || !this.window) {
            return;
          }
          if (this.window.TouchEvent && isTouchEvent$1(event)) {
            try {
              event.preventDefault();
              event.stopPropagation();
            } catch (e2) {
            }
          }
          var _a = this.props, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, minWidth = _a.minWidth, minHeight = _a.minHeight;
          var clientX = isTouchEvent$1(event) ? event.touches[0].clientX : event.clientX;
          var clientY = isTouchEvent$1(event) ? event.touches[0].clientY : event.clientY;
          var _b = this.state, direction = _b.direction, original = _b.original, width = _b.width, height = _b.height;
          var parentSize = this.getParentSize();
          var max2 = calculateNewMax$1(parentSize, this.window.innerWidth, this.window.innerHeight, maxWidth, maxHeight, minWidth, minHeight);
          maxWidth = max2.maxWidth;
          maxHeight = max2.maxHeight;
          minWidth = max2.minWidth;
          minHeight = max2.minHeight;
          var _c = this.calculateNewSizeFromDirection(clientX, clientY), newHeight = _c.newHeight, newWidth = _c.newWidth;
          var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);
          if (this.props.snap && this.props.snap.x) {
            newWidth = findClosestSnap$1(newWidth, this.props.snap.x, this.props.snapGap);
          }
          if (this.props.snap && this.props.snap.y) {
            newHeight = findClosestSnap$1(newHeight, this.props.snap.y, this.props.snapGap);
          }
          var newSize = this.calculateNewSizeFromAspectRatio(newWidth, newHeight, { width: boundaryMax.maxWidth, height: boundaryMax.maxHeight }, { width: minWidth, height: minHeight });
          newWidth = newSize.newWidth;
          newHeight = newSize.newHeight;
          if (this.props.grid) {
            var newGridWidth = snap$1(newWidth, this.props.grid[0]);
            var newGridHeight = snap$1(newHeight, this.props.grid[1]);
            var gap = this.props.snapGap || 0;
            newWidth = gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;
            newHeight = gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;
          }
          var delta = {
            width: newWidth - original.width,
            height: newHeight - original.height
          };
          if (width && typeof width === "string") {
            if (width.endsWith("%")) {
              var percent = newWidth / parentSize.width * 100;
              newWidth = percent + "%";
            } else if (width.endsWith("vw")) {
              var vw = newWidth / this.window.innerWidth * 100;
              newWidth = vw + "vw";
            } else if (width.endsWith("vh")) {
              var vh2 = newWidth / this.window.innerHeight * 100;
              newWidth = vh2 + "vh";
            }
          }
          if (height && typeof height === "string") {
            if (height.endsWith("%")) {
              var percent = newHeight / parentSize.height * 100;
              newHeight = percent + "%";
            } else if (height.endsWith("vw")) {
              var vw = newHeight / this.window.innerWidth * 100;
              newHeight = vw + "vw";
            } else if (height.endsWith("vh")) {
              var vh2 = newHeight / this.window.innerHeight * 100;
              newHeight = vh2 + "vh";
            }
          }
          var newState = {
            width: this.createSizeForCssProperty(newWidth, "width"),
            height: this.createSizeForCssProperty(newHeight, "height")
          };
          if (this.flexDir === "row") {
            newState.flexBasis = newState.width;
          } else if (this.flexDir === "column") {
            newState.flexBasis = newState.height;
          }
          reactDom.exports.flushSync(function() {
            _this.setState(newState);
          });
          if (this.props.onResize) {
            this.props.onResize(event, direction, this.resizable, delta);
          }
        };
        Resizable.prototype.onMouseUp = function(event) {
          var _a = this.state, isResizing = _a.isResizing, direction = _a.direction, original = _a.original;
          if (!isResizing || !this.resizable) {
            return;
          }
          var delta = {
            width: this.size.width - original.width,
            height: this.size.height - original.height
          };
          if (this.props.onResizeStop) {
            this.props.onResizeStop(event, direction, this.resizable, delta);
          }
          if (this.props.size) {
            this.setState(this.props.size);
          }
          this.unbindEvents();
          this.setState({
            isResizing: false,
            backgroundStyle: __assign$3(__assign$3({}, this.state.backgroundStyle), { cursor: "auto" })
          });
        };
        Resizable.prototype.updateSize = function(size) {
          this.setState({ width: size.width, height: size.height });
        };
        Resizable.prototype.renderResizer = function() {
          var _this = this;
          var _a = this.props, enable = _a.enable, handleStyles = _a.handleStyles, handleClasses = _a.handleClasses, handleWrapperStyle = _a.handleWrapperStyle, handleWrapperClass = _a.handleWrapperClass, handleComponent = _a.handleComponent;
          if (!enable) {
            return null;
          }
          var resizers = Object.keys(enable).map(function(dir) {
            if (enable[dir] !== false) {
              return react.exports.createElement(Resizer$1, { key: dir, direction: dir, onResizeStart: _this.onResizeStart, replaceStyles: handleStyles && handleStyles[dir], className: handleClasses && handleClasses[dir] }, handleComponent && handleComponent[dir] ? handleComponent[dir] : null);
            }
            return null;
          });
          return react.exports.createElement("div", { className: handleWrapperClass, style: handleWrapperStyle }, resizers);
        };
        Resizable.prototype.render = function() {
          var _this = this;
          var extendsProps = Object.keys(this.props).reduce(function(acc, key) {
            if (definedProps$1.indexOf(key) !== -1) {
              return acc;
            }
            acc[key] = _this.props[key];
            return acc;
          }, {});
          var style = __assign$3(__assign$3(__assign$3({ position: "relative", userSelect: this.state.isResizing ? "none" : "auto" }, this.props.style), this.sizeStyle), { maxWidth: this.props.maxWidth, maxHeight: this.props.maxHeight, minWidth: this.props.minWidth, minHeight: this.props.minHeight, boxSizing: "border-box", flexShrink: 0 });
          if (this.state.flexBasis) {
            style.flexBasis = this.state.flexBasis;
          }
          var Wrapper = this.props.as || "div";
          return react.exports.createElement(Wrapper, __assign$3({ ref: this.ref, style, className: this.props.className }, extendsProps), this.state.isResizing && react.exports.createElement("div", { style: this.state.backgroundStyle }), this.props.children, this.renderResizer());
        };
        Resizable.defaultProps = {
          as: "div",
          onResizeStart: function() {
          },
          onResize: function() {
          },
          onResizeStop: function() {
          },
          enable: {
            top: true,
            right: true,
            bottom: true,
            left: true,
            topRight: true,
            bottomRight: true,
            bottomLeft: true,
            topLeft: true
          },
          style: {},
          grid: [1, 1],
          lockAspectRatio: false,
          lockAspectRatioExtraWidth: 0,
          lockAspectRatioExtraHeight: 0,
          scale: 1,
          resizeRatio: 1,
          snapGap: 0
        };
        return Resizable;
      })(react.exports.PureComponent);
      function unwrapExports$7(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$8(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$9 = createCommonjsModule$8(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      unwrapExports$7(lib$9);
      lib$9.isHotkey;
      lib$9.isCodeHotkey;
      lib$9.isKeyHotkey;
      lib$9.parseHotkey;
      lib$9.compareHotkey;
      lib$9.toKeyCode;
      lib$9.toKeyName;
      createAtomStore({
        width: 0
      }, {
        name: "image",
        scope: "img"
      });
      createStore("image")({
        focusEndCaptionPath: null,
        focusStartCaptionPath: null
      });
      let ListStyleType;
      (function(ListStyleType2) {
        ListStyleType2["Armenian"] = "armenian";
        ListStyleType2["Circle"] = "circle";
        ListStyleType2["CjkIdeographic"] = "cjk-ideographic";
        ListStyleType2["Decimal"] = "decimal";
        ListStyleType2["DecimalLeadingZero"] = "decimal-leading-zero";
        ListStyleType2["Disc"] = "disc";
        ListStyleType2["Georgian"] = "georgian";
        ListStyleType2["Hebrew"] = "hebrew";
        ListStyleType2["Hiragana"] = "hiragana";
        ListStyleType2["HiraganaIroha"] = "hiragana-iroha";
        ListStyleType2["Katakana"] = "katakana";
        ListStyleType2["KatakanaIroha"] = "katakana-iroha";
        ListStyleType2["LowerAlpha"] = "lower-alpha";
        ListStyleType2["LowerGreek"] = "lower-greek";
        ListStyleType2["LowerLatin"] = "lower-latin";
        ListStyleType2["LowerRoman"] = "lower-roman";
        ListStyleType2["None"] = "none";
        ListStyleType2["Square"] = "square";
        ListStyleType2["UpperAlpha"] = "upper-alpha";
        ListStyleType2["UpperLatin"] = "upper-latin";
        ListStyleType2["UpperRoman"] = "upper-roman";
        ListStyleType2["Initial"] = "initial";
        ListStyleType2["Inherit"] = "inherit";
      })(ListStyleType || (ListStyleType = {}));
      function unwrapExports$6(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$7(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$8 = createCommonjsModule$7(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      unwrapExports$6(lib$8);
      lib$8.isHotkey;
      lib$8.isCodeHotkey;
      lib$8.isKeyHotkey;
      lib$8.parseHotkey;
      lib$8.compareHotkey;
      lib$8.toKeyCode;
      lib$8.toKeyName;
      function unwrapExports$5(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$6(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$7 = createCommonjsModule$6(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      var isHotkey$2 = unwrapExports$5(lib$7);
      lib$7.isHotkey;
      lib$7.isCodeHotkey;
      lib$7.isKeyHotkey;
      lib$7.parseHotkey;
      lib$7.compareHotkey;
      lib$7.toKeyCode;
      lib$7.toKeyName;
      const SIMULATE_BACKSPACE = {
        key: "",
        which: 8
      };
      const onKeyDownResetNode = (editor, {
        options: {
          rules
        }
      }) => (event) => {
        let reset;
        if (editor.selection && isCollapsed(editor.selection)) {
          rules.forEach(({
            types,
            defaultType,
            hotkey,
            predicate,
            onReset
          }) => {
            if (hotkey && isHotkey$2(hotkey, event)) {
              if (predicate(editor) && someNode(editor, {
                match: {
                  type: types
                }
              })) {
                var _event$preventDefault;
                (_event$preventDefault = event.preventDefault) === null || _event$preventDefault === void 0 ? void 0 : _event$preventDefault.call(event);
                setElements(editor, {
                  type: defaultType
                });
                if (onReset) {
                  onReset(editor);
                }
                reset = true;
              }
            }
          });
        }
        return reset;
      };
      const KEY_RESET_NODE = "resetNode";
      const createResetNodePlugin = createPluginFactory({
        key: KEY_RESET_NODE,
        handlers: {
          onKeyDown: onKeyDownResetNode
        },
        options: {
          rules: []
        }
      });
      var isArray$h = Array.isArray;
      var isArray_1$2 = isArray$h;
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray_1$2(value) ? value : [value];
      }
      var castArray_1 = castArray;
      function unwrapExports$4(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$5(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$6 = createCommonjsModule$5(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      var isHotkey$1 = unwrapExports$4(lib$6);
      lib$6.isHotkey;
      lib$6.isCodeHotkey;
      lib$6.isKeyHotkey;
      lib$6.parseHotkey;
      lib$6.compareHotkey;
      lib$6.toKeyCode;
      lib$6.toKeyName;
      const isListNested = (editor, listPath) => {
        var _getParentNode;
        const listParentNode = (_getParentNode = getParentNode(editor, listPath)) === null || _getParentNode === void 0 ? void 0 : _getParentNode[0];
        return (listParentNode === null || listParentNode === void 0 ? void 0 : listParentNode.type) === getPluginType(editor, ELEMENT_LI);
      };
      const getUnorderedListType = (editor) => {
        return getPluginType(editor, ELEMENT_UL);
      };
      const getOrderedListType = (editor) => {
        return getPluginType(editor, ELEMENT_OL);
      };
      const getListTypes = (editor) => {
        return [getOrderedListType(editor), getUnorderedListType(editor)];
      };
      const getListItemType = (editor) => {
        return getPluginType(editor, ELEMENT_LI);
      };
      const getListItemContentType = (editor) => {
        return getPluginType(editor, ELEMENT_LIC);
      };
      const getHighestEmptyList = (editor, {
        diffListPath,
        liPath
      }) => {
        const list2 = getAboveNode(editor, {
          at: liPath,
          match: {
            type: getListTypes(editor)
          }
        });
        if (!list2)
          return;
        const [listNode, listPath] = list2;
        if (!diffListPath || !Path.equals(listPath, diffListPath)) {
          if (listNode.children.length < 2) {
            const liParent = getAboveNode(editor, {
              at: listPath,
              match: {
                type: getPluginType(editor, ELEMENT_LI)
              }
            });
            if (liParent) {
              return getHighestEmptyList(editor, {
                liPath: liParent[1],
                diffListPath
              }) || listPath;
            }
          }
          return liPath;
        }
      };
      const getListItemEntry = (editor, {
        at = editor.selection
      } = {}) => {
        const liType = getPluginType(editor, ELEMENT_LI);
        let _at;
        if (Range.isRange(at) && !isCollapsed(at)) {
          _at = at.focus.path;
        } else if (Range.isRange(at)) {
          _at = at.anchor.path;
        } else {
          _at = at;
        }
        if (_at) {
          const node = getNode(editor, _at);
          if (node) {
            const listItem = getAboveNode(editor, {
              at: _at,
              match: {
                type: liType
              }
            });
            if (listItem) {
              const list2 = getParentNode(editor, listItem[1]);
              return {
                list: list2,
                listItem
              };
            }
          }
        }
      };
      const getListRoot = (editor, at = editor.selection) => {
        if (!at)
          return;
        const parentList = getAboveNode(editor, {
          at,
          match: {
            type: [getPluginType(editor, ELEMENT_UL), getPluginType(editor, ELEMENT_OL)]
          }
        });
        if (parentList) {
          var _getListRoot;
          const [, parentListPath] = parentList;
          return (_getListRoot = getListRoot(editor, parentListPath)) !== null && _getListRoot !== void 0 ? _getListRoot : parentList;
        }
      };
      const hasListChild = (editor, node) => node.children.some((n2) => match(n2, [], {
        type: getListTypes(editor)
      }));
      const isAcrossListItems = (editor) => {
        const {
          selection
        } = editor;
        if (!selection || isCollapsed(selection)) {
          return false;
        }
        const isAcrossBlocks = isRangeAcrossBlocks(editor);
        if (!isAcrossBlocks)
          return false;
        return someNode(editor, {
          match: {
            type: getPluginType(editor, ELEMENT_LI)
          }
        });
      };
      const isListRoot = (editor, node) => isElement(node) && getListTypes(editor).includes(node.type);
      const moveListItemDown = (editor, {
        list: list2,
        listItem
      }) => {
        const [listNode] = list2;
        const [, listItemPath] = listItem;
        let previousListItemPath;
        try {
          previousListItemPath = Path.previous(listItemPath);
        } catch (e2) {
          return;
        }
        const previousSiblingItem = getNodeEntry(editor, previousListItemPath);
        if (previousSiblingItem) {
          const [previousNode, previousPath] = previousSiblingItem;
          const sublist = previousNode.children.find((n2) => match(n2, [], {
            type: getListTypes(editor)
          }));
          const newPath = previousPath.concat(sublist ? [1, sublist.children.length] : [1]);
          withoutNormalizing(editor, () => {
            if (!sublist) {
              wrapNodes(editor, {
                type: listNode.type,
                children: []
              }, {
                at: listItemPath
              });
            }
            moveNodes(editor, {
              at: listItemPath,
              to: newPath
            });
          });
        }
      };
      const moveListItemsToList = (editor, {
        fromList: fromList2,
        fromListItem,
        fromStartIndex,
        to: _to,
        toList,
        toListIndex = null,
        deleteFromList = true
      }) => {
        let fromListPath;
        let moved;
        withoutNormalizing(editor, () => {
          if (fromListItem) {
            const fromListItemSublist = findDescendant(editor, {
              at: fromListItem[1],
              match: {
                type: getListTypes(editor)
              }
            });
            if (!fromListItemSublist)
              return;
            fromListPath = fromListItemSublist === null || fromListItemSublist === void 0 ? void 0 : fromListItemSublist[1];
          } else if (fromList2) {
            fromListPath = fromList2[1];
          } else {
            return;
          }
          let to2 = null;
          if (_to)
            to2 = _to;
          if (toList) {
            if (toListIndex !== null)
              to2 = toList[1].concat([toListIndex]);
            else {
              const lastChildPath = getLastChildPath(toList);
              to2 = Path.next(lastChildPath);
            }
          }
          if (!to2)
            return;
          moved = moveChildren(editor, {
            at: fromListPath,
            to: to2,
            fromStartIndex
          });
          if (deleteFromList) {
            deleteText(editor, {
              at: fromListPath
            });
          }
        });
        return moved;
      };
      const unwrapList = (editor, {
        at
      } = {}) => {
        const ancestorListTypeCheck = () => {
          if (getAboveNode(editor, {
            match: {
              type: getListTypes(editor),
              at
            }
          })) {
            return true;
          }
          if (!at && editor.selection) {
            const commonNode = getCommonNode(editor, editor.selection.anchor.path, editor.selection.focus.path);
            if (isElement(commonNode[0]) && getListTypes(editor).includes(commonNode[0].type)) {
              return true;
            }
          }
          return false;
        };
        withoutNormalizing(editor, () => {
          do {
            setElements(editor, {
              type: getPluginType(editor, ELEMENT_DEFAULT)
            });
            unwrapNodes(editor, {
              at,
              match: {
                type: getPluginType(editor, ELEMENT_LI)
              },
              split: true
            });
            unwrapNodes(editor, {
              at,
              match: {
                type: [getPluginType(editor, ELEMENT_UL), getPluginType(editor, ELEMENT_OL)]
              },
              split: true
            });
          } while (ancestorListTypeCheck());
        });
      };
      const moveListItemUp = (editor, {
        list: list2,
        listItem
      }) => {
        const move = () => {
          const [listNode, listPath] = list2;
          const [liNode, liPath] = listItem;
          const liParent = getAboveNode(editor, {
            at: listPath,
            match: {
              type: getPluginType(editor, ELEMENT_LI)
            }
          });
          if (!liParent) {
            let toListPath2;
            try {
              toListPath2 = Path.next(listPath);
            } catch (err) {
              return;
            }
            const condA = hasListChild(editor, liNode);
            const condB = !isLastChild(list2, liPath);
            if (condA || condB) {
              insertElements(editor, {
                type: listNode.type,
                children: []
              }, {
                at: toListPath2
              });
            }
            if (condA) {
              const toListNode = getNode(editor, toListPath2);
              if (!toListNode)
                return;
              moveListItemsToList(editor, {
                fromListItem: listItem,
                toList: [toListNode, toListPath2]
              });
            }
            if (condB) {
              const toListNode = getNode(editor, toListPath2);
              if (!toListNode)
                return;
              moveListItemsToList(editor, {
                fromList: list2,
                fromStartIndex: liPath[liPath.length - 1] + 1,
                toList: [toListNode, toListPath2],
                deleteFromList: false
              });
            }
            unwrapList(editor, {
              at: liPath.concat(0)
            });
            return true;
          }
          const [, liParentPath] = liParent;
          const toListPath = liPath.concat([1]);
          if (!isLastChild(list2, liPath)) {
            if (!hasListChild(editor, liNode)) {
              insertElements(editor, {
                type: listNode.type,
                children: []
              }, {
                at: toListPath
              });
            }
            const toListNode = getNode(editor, toListPath);
            if (!toListNode)
              return;
            moveListItemsToList(editor, {
              fromListItem: liParent,
              toList: [toListNode, toListPath],
              fromStartIndex: liPath[liPath.length - 1] + 1,
              deleteFromList: false
            });
          }
          const movedUpLiPath = Path.next(liParentPath);
          moveNodes(editor, {
            at: liPath,
            to: movedUpLiPath
          });
          return true;
        };
        let moved = false;
        withoutNormalizing(editor, () => {
          moved = move();
        });
        return moved;
      };
      const removeFirstListItem = (editor, {
        list: list2,
        listItem
      }) => {
        const [, listPath] = list2;
        if (!isListNested(editor, listPath)) {
          moveListItemUp(editor, {
            list: list2,
            listItem
          });
          return true;
        }
        return false;
      };
      const moveListItems = (editor, {
        increase = true,
        at = (() => {
          var _editor$selection;
          return (_editor$selection = editor.selection) !== null && _editor$selection !== void 0 ? _editor$selection : void 0;
        })(),
        enableResetOnShiftTab
      } = {}) => {
        const _nodes = getNodeEntries(editor, {
          at,
          match: {
            type: getPluginType(editor, ELEMENT_LIC)
          }
        });
        const lics = Array.from(_nodes);
        if (!lics.length)
          return;
        const highestLicPaths = [];
        const highestLicPathRefs = [];
        lics.forEach((lic) => {
          const licPath = lic[1];
          const liPath = Path.parent(licPath);
          const isAncestor2 = highestLicPaths.some((path) => {
            const highestLiPath = Path.parent(path);
            return Path.isAncestor(highestLiPath, liPath);
          });
          if (!isAncestor2) {
            highestLicPaths.push(licPath);
            highestLicPathRefs.push(createPathRef(editor, licPath));
          }
        });
        const licPathRefsToMove = increase ? highestLicPathRefs : highestLicPathRefs.reverse();
        withoutNormalizing(editor, () => {
          licPathRefsToMove.forEach((licPathRef) => {
            const licPath = licPathRef.unref();
            if (!licPath)
              return;
            const listItem = getParentNode(editor, licPath);
            if (!listItem)
              return;
            const parentList = getParentNode(editor, listItem[1]);
            if (!parentList)
              return;
            if (increase) {
              moveListItemDown(editor, {
                list: parentList,
                listItem
              });
            } else if (isListNested(editor, parentList[1])) {
              moveListItemUp(editor, {
                list: parentList,
                listItem
              });
            } else if (enableResetOnShiftTab) {
              removeFirstListItem(editor, {
                list: parentList,
                listItem
              });
            }
          });
        });
      };
      const insertListItem = (editor) => {
        const liType = getPluginType(editor, ELEMENT_LI);
        const licType = getPluginType(editor, ELEMENT_LIC);
        if (!editor.selection) {
          return false;
        }
        const licEntry = getAboveNode(editor, {
          match: {
            type: licType
          }
        });
        if (!licEntry)
          return false;
        const [, paragraphPath] = licEntry;
        const listItemEntry = getParentNode(editor, paragraphPath);
        if (!listItemEntry)
          return false;
        const [listItemNode, listItemPath] = listItemEntry;
        if (listItemNode.type !== liType)
          return false;
        let success = false;
        withoutNormalizing(editor, () => {
          if (!Range.isCollapsed(editor.selection)) {
            deleteText(editor);
          }
          const isStart = isStartPoint(editor, editor.selection.focus, paragraphPath);
          const isEnd = isBlockTextEmptyAfterSelection(editor);
          const nextParagraphPath = Path.next(paragraphPath);
          const nextListItemPath = Path.next(listItemPath);
          if (isStart) {
            insertElements(editor, {
              type: liType,
              children: [{
                type: licType,
                children: [{
                  text: ""
                }]
              }]
            }, {
              at: listItemPath
            });
            success = true;
            return;
          }
          if (!isEnd) {
            withoutNormalizing(editor, () => {
              splitNodes(editor);
              wrapNodes(editor, {
                type: liType,
                children: []
              }, {
                at: nextParagraphPath
              });
              moveNodes(editor, {
                at: nextParagraphPath,
                to: nextListItemPath
              });
              select(editor, nextListItemPath);
              collapseSelection(editor, {
                edge: "start"
              });
            });
          } else {
            const marks = getMarks(editor) || {};
            insertElements(editor, {
              type: liType,
              children: [{
                type: licType,
                children: [{
                  text: "",
                  ...marks
                }]
              }]
            }, {
              at: nextListItemPath
            });
            select(editor, nextListItemPath);
          }
          if (listItemNode.children.length > 1) {
            moveNodes(editor, {
              at: nextParagraphPath,
              to: nextListItemPath.concat(1)
            });
          }
          success = true;
        });
        return success;
      };
      const moveListItemSublistItemsToListItemSublist = (editor, {
        fromListItem,
        toListItem,
        start
      }) => {
        const [, fromListItemPath] = fromListItem;
        const [, toListItemPath] = toListItem;
        let moved = 0;
        withoutNormalizing(editor, () => {
          const fromListItemSublist = findDescendant(editor, {
            at: fromListItemPath,
            match: {
              type: getListTypes(editor)
            }
          });
          if (!fromListItemSublist)
            return;
          const [, fromListItemSublistPath] = fromListItemSublist;
          const toListItemSublist = findDescendant(editor, {
            at: toListItemPath,
            match: {
              type: getListTypes(editor)
            }
          });
          let to2;
          if (!toListItemSublist) {
            const fromList2 = getParentNode(editor, fromListItemPath);
            if (!fromList2)
              return;
            const [fromListNode] = fromList2;
            const fromListType = fromListNode.type;
            const toListItemSublistPath = toListItemPath.concat([1]);
            insertElements(editor, {
              type: fromListType,
              children: []
            }, {
              at: toListItemSublistPath
            });
            to2 = toListItemSublistPath.concat([0]);
          } else if (start) {
            const [, toListItemSublistPath] = toListItemSublist;
            to2 = toListItemSublistPath.concat([0]);
          } else {
            to2 = Path.next(getLastChildPath(toListItemSublist));
          }
          moved = moveChildren(editor, {
            at: fromListItemSublistPath,
            to: to2
          });
          deleteText(editor, {
            at: fromListItemSublistPath
          });
        });
        return moved;
      };
      const removeListItem = (editor, {
        list: list2,
        listItem,
        reverse = true
      }) => {
        const [liNode, liPath] = listItem;
        if (isExpanded(editor.selection) || !hasListChild(editor, liNode)) {
          return false;
        }
        const previousLiPath = getPreviousPath(liPath);
        let success = false;
        withoutNormalizing(editor, () => {
          if (previousLiPath) {
            const previousLi = getNodeEntry(editor, previousLiPath);
            let tempLiPath = Path.next(liPath);
            insertElements(editor, {
              type: getPluginType(editor, ELEMENT_LI),
              children: [{
                type: getPluginType(editor, ELEMENT_LIC),
                children: [{
                  text: ""
                }]
              }]
            }, {
              at: tempLiPath
            });
            const tempLi = getNodeEntry(editor, tempLiPath);
            const tempLiPathRef = createPathRef(editor, tempLi[1]);
            moveListItemSublistItemsToListItemSublist(editor, {
              fromListItem: listItem,
              toListItem: tempLi
            });
            deleteMerge(editor, {
              reverse
            });
            tempLiPath = tempLiPathRef.unref();
            moveListItemSublistItemsToListItemSublist(editor, {
              fromListItem: [tempLi[0], tempLiPath],
              toListItem: previousLi
            });
            removeNodes(editor, {
              at: tempLiPath
            });
            success = true;
            return;
          }
          moveListItemsToList(editor, {
            fromListItem: listItem,
            toList: list2,
            toListIndex: 1
          });
        });
        return success;
      };
      const toggleList = (editor, {
        type
      }) => withoutNormalizing(editor, () => {
        if (!editor.selection) {
          return;
        }
        if (isCollapsed(editor.selection) || !isRangeAcrossBlocks(editor)) {
          const res = getListItemEntry(editor);
          if (res) {
            const {
              list: list2
            } = res;
            if (list2[0].type !== type) {
              setElements(editor, {
                type
              }, {
                at: editor.selection,
                match: (n2) => isElement(n2) && getListTypes(editor).includes(n2.type),
                mode: "lowest"
              });
            } else {
              unwrapList(editor);
            }
          } else {
            const list2 = {
              type,
              children: []
            };
            wrapNodes(editor, list2);
            const _nodes = getNodeEntries(editor, {
              match: {
                type: getPluginType(editor, ELEMENT_DEFAULT)
              }
            });
            const nodes = Array.from(_nodes);
            setElements(editor, {
              type: getPluginType(editor, ELEMENT_LIC)
            });
            const listItem = {
              type: getPluginType(editor, ELEMENT_LI),
              children: []
            };
            for (const [, path] of nodes) {
              wrapNodes(editor, listItem, {
                at: path
              });
            }
          }
        } else {
          const [startPoint, endPoint] = Range.edges(editor.selection);
          const commonEntry = getCommonNode(editor, startPoint.path, endPoint.path);
          if (getListTypes(editor).includes(commonEntry[0].type) || commonEntry[0].type === getPluginType(editor, ELEMENT_LI)) {
            if (commonEntry[0].type !== type) {
              const startList = findNode(editor, {
                at: Range.start(editor.selection),
                match: {
                  type: getListTypes(editor)
                },
                mode: "lowest"
              });
              const endList = findNode(editor, {
                at: Range.end(editor.selection),
                match: {
                  type: getListTypes(editor)
                },
                mode: "lowest"
              });
              const rangeLength = Math.min(startList[1].length, endList[1].length);
              setElements(editor, {
                type
              }, {
                at: editor.selection,
                match: (n2, path) => isElement(n2) && getListTypes(editor).includes(n2.type) && path.length >= rangeLength,
                mode: "all"
              });
            } else {
              unwrapList(editor);
            }
          } else {
            const rootPathLength = commonEntry[1].length;
            const _nodes = getNodeEntries(editor, {
              mode: "all"
            });
            const nodes = Array.from(_nodes).filter(([, path]) => path.length === rootPathLength + 1).reverse();
            nodes.forEach((n2) => {
              if (getListTypes(editor).includes(n2[0].type)) {
                setElements(editor, {
                  type
                }, {
                  at: n2[1],
                  match: (_n) => isElement(_n) && getListTypes(editor).includes(_n.type),
                  mode: "all"
                });
              } else {
                setElements(editor, {
                  type: getPluginType(editor, ELEMENT_LIC)
                }, {
                  at: n2[1]
                });
                const listItem = {
                  type: getPluginType(editor, ELEMENT_LI),
                  children: []
                };
                wrapNodes(editor, listItem, {
                  at: n2[1]
                });
                const list2 = {
                  type,
                  children: []
                };
                wrapNodes(editor, list2, {
                  at: n2[1]
                });
              }
            });
          }
        }
      });
      const onKeyDownList = (editor, {
        type,
        options: {
          hotkey,
          enableResetOnShiftTab
        }
      }) => (e2) => {
        const isTab = Hotkeys.isTab(editor, e2);
        const isUntab = Hotkeys.isUntab(editor, e2);
        let workRange = editor.selection;
        if (editor.selection && (isTab || isUntab)) {
          const {
            selection
          } = editor;
          if (!isCollapsed(editor.selection)) {
            const {
              anchor,
              focus
            } = Range.isBackward(selection) ? {
              anchor: selection.focus,
              focus: selection.anchor
            } : {
              anchor: selection.anchor,
              focus: selection.focus
            };
            anchor.offset = 0;
            const unHungRange = unhangRange(editor, {
              anchor,
              focus
            });
            if (unHungRange) {
              workRange = unHungRange;
              select(editor, unHungRange);
            }
          }
          const listSelected = someNode(editor, {
            match: {
              type: getPluginType(editor, ELEMENT_LIC)
            }
          });
          if (workRange && listSelected) {
            e2.preventDefault();
            moveListItems(editor, {
              at: workRange,
              increase: isTab,
              enableResetOnShiftTab
            });
            return true;
          }
        }
        if (!hotkey)
          return;
        const hotkeys = castArray_1(hotkey);
        for (const _hotkey of hotkeys) {
          if (isHotkey$1(_hotkey)(e2)) {
            toggleList(editor, {
              type
            });
          }
        }
      };
      const deleteBackwardList = (editor, unit) => {
        const res = getListItemEntry(editor, {});
        let moved = false;
        if (res) {
          const {
            list: list2,
            listItem
          } = res;
          if (isSelectionAtBlockStart(editor, {
            match: (node) => node.type === getPluginType(editor, ELEMENT_LI)
          })) {
            withoutNormalizing(editor, () => {
              moved = removeFirstListItem(editor, {
                list: list2,
                listItem
              });
              if (moved)
                return true;
              moved = removeListItem(editor, {
                list: list2,
                listItem
              });
              if (moved)
                return true;
              if (isFirstChild(listItem[1]) && !isListNested(editor, list2[1])) {
                onKeyDownResetNode(editor, mockPlugin({
                  options: {
                    rules: [{
                      types: [getPluginType(editor, ELEMENT_LI)],
                      defaultType: getPluginType(editor, ELEMENT_DEFAULT),
                      hotkey: "backspace",
                      predicate: () => isSelectionAtBlockStart(editor),
                      onReset: (e2) => unwrapList(e2)
                    }]
                  }
                }))(SIMULATE_BACKSPACE);
                moved = true;
                return;
              }
              deleteMerge(editor, {
                unit,
                reverse: true
              });
              moved = true;
            });
          }
        }
        return moved;
      };
      const selectionIsNotInAListHandler = (editor) => {
        const pointAfterSelection = getPointAfter(editor, editor.selection.focus.path);
        if (pointAfterSelection) {
          const nextSiblingListRes = getListItemEntry(editor, {
            at: pointAfterSelection
          });
          if (nextSiblingListRes) {
            const {
              listItem
            } = nextSiblingListRes;
            const parentBlockEntity = getBlockAbove(editor, {
              at: editor.selection.anchor
            });
            if (!getEditorString(editor, parentBlockEntity[1])) {
              removeNodes(editor);
              return true;
            }
            if (hasListChild(editor, listItem[0])) {
              const sublistRes = getListItemEntry(editor, {
                at: [...listItem[1], 1, 0, 0]
              });
              moveListItemUp(editor, sublistRes);
            }
          }
        }
        return false;
      };
      const selectionIsInAListHandler = (editor, res) => {
        const {
          listItem
        } = res;
        if (!hasListChild(editor, listItem[0])) {
          const liType = getPluginType(editor, ELEMENT_LI);
          const _nodes = getNodeEntries(editor, {
            at: listItem[1],
            mode: "lowest",
            match: (node, path) => {
              var _getNode;
              if (path.length === 0) {
                return false;
              }
              const isNodeLi = node.type === liType;
              const isSiblingOfNodeLi = ((_getNode = getNode(editor, Path.next(path))) === null || _getNode === void 0 ? void 0 : _getNode.type) === liType;
              return isNodeLi && isSiblingOfNodeLi;
            }
          });
          const liWithSiblings = Array.from(_nodes, (entry) => entry[1])[0];
          if (!liWithSiblings) {
            const pointAfterListItem = getPointAfter(editor, listItem[1]);
            if (pointAfterListItem) {
              const nextSiblingListRes = getListItemEntry(editor, {
                at: pointAfterListItem
              });
              if (nextSiblingListRes) {
                const listRoot = getListRoot(editor, listItem[1]);
                moveListItemsToList(editor, {
                  fromList: nextSiblingListRes.list,
                  toList: listRoot,
                  deleteFromList: true
                });
                return true;
              }
            }
            return false;
          }
          const siblingListItem = getNodeEntry(editor, Path.next(liWithSiblings));
          const siblingList = getParentNode(editor, siblingListItem[1]);
          if (siblingList && removeListItem(editor, {
            list: siblingList,
            listItem: siblingListItem,
            reverse: false
          })) {
            return true;
          }
          return false;
        }
        const nestedList = getNodeEntry(editor, Path.next([...listItem[1], 0]));
        const nestedListItem = getChildren(nestedList)[0];
        if (removeFirstListItem(editor, {
          list: nestedList,
          listItem: nestedListItem
        })) {
          return true;
        }
        if (removeListItem(editor, {
          list: nestedList,
          listItem: nestedListItem
        })) {
          return true;
        }
        return false;
      };
      const deleteForwardList = (editor) => {
        let skipDefaultDelete = false;
        if (!(editor !== null && editor !== void 0 && editor.selection)) {
          return skipDefaultDelete;
        }
        if (!isSelectionAtBlockEnd(editor)) {
          return skipDefaultDelete;
        }
        withoutNormalizing(editor, () => {
          const res = getListItemEntry(editor, {});
          if (!res) {
            skipDefaultDelete = selectionIsNotInAListHandler(editor);
            return;
          }
          skipDefaultDelete = selectionIsInAListHandler(editor, res);
        });
        return skipDefaultDelete;
      };
      const deleteFragmentList = (editor) => {
        let deleted = false;
        withoutNormalizing(editor, () => {
          if (!isAcrossListItems(editor))
            return;
          const end = getEndPoint(editor, editor.selection);
          const liEnd = getAboveNode(editor, {
            at: end,
            match: {
              type: getPluginType(editor, ELEMENT_LI)
            }
          });
          const liEndCanBeDeleted = liEnd && !hasListChild(editor, liEnd[0]);
          const liEndPathRef = liEndCanBeDeleted ? createPathRef(editor, liEnd[1]) : void 0;
          deleteMerge(editor);
          const start = getStartPoint(editor, editor.selection);
          const liStart = getAboveNode(editor, {
            at: start,
            match: {
              type: getPluginType(editor, ELEMENT_LI)
            }
          });
          if (liEndPathRef) {
            const liEndPath = liEndPathRef.unref();
            const listStart = liStart && getParentNode(editor, liStart[1]);
            const deletePath = getHighestEmptyList(editor, {
              liPath: liEndPath,
              diffListPath: listStart === null || listStart === void 0 ? void 0 : listStart[1]
            });
            if (deletePath) {
              removeNodes(editor, {
                at: deletePath
              });
            }
            deleted = true;
          }
        });
        return deleted;
      };
      const insertBreakList = (editor) => {
        if (!editor.selection)
          return;
        const res = getListItemEntry(editor, {});
        let moved;
        if (res) {
          const {
            list: list2,
            listItem
          } = res;
          if (isBlockAboveEmpty(editor)) {
            moved = moveListItemUp(editor, {
              list: list2,
              listItem
            });
            if (moved)
              return true;
          }
        }
        const didReset = onKeyDownResetNode(editor, mockPlugin({
          options: {
            rules: [{
              types: [getPluginType(editor, ELEMENT_LI)],
              defaultType: getPluginType(editor, ELEMENT_DEFAULT),
              predicate: () => !moved && isBlockAboveEmpty(editor),
              onReset: (_editor) => unwrapList(_editor)
            }]
          }
        }))(SIMULATE_BACKSPACE);
        if (didReset)
          return true;
        if (!moved) {
          const inserted = insertListItem(editor);
          if (inserted)
            return true;
        }
      };
      const insertFragmentList = (editor) => {
        const {
          insertFragment: _insertFragment
        } = editor;
        const listItemPlugin = getPlugin(editor, ELEMENT_LI);
        const listItemType = getListItemType(editor);
        const listItemContentType = getListItemContentType(editor);
        const getFirstAncestorOfType = (root2, entry, {
          type
        }) => {
          let ancestor = Path.parent(entry[1]);
          while (getNode(root2, ancestor).type !== type) {
            ancestor = Path.parent(ancestor);
          }
          return [getNode(root2, ancestor), ancestor];
        };
        const findListItemsWithContent = (first) => {
          let prev = null;
          let node = first;
          while (isListRoot(editor, node) || node.type === listItemType && node.children[0].type !== listItemContentType) {
            prev = node;
            [node] = node.children;
          }
          return prev ? prev.children : [node];
        };
        const trimList = (listRoot) => {
          if (!isListRoot(editor, listRoot)) {
            return [listRoot];
          }
          const _texts = getNodeTexts(listRoot);
          const textEntries = Array.from(_texts);
          const commonAncestorEntry = textEntries.reduce((commonAncestor, textEntry) => Path.isAncestor(commonAncestor[1], textEntry[1]) ? commonAncestor : getCommonNode(listRoot, textEntry[1], commonAncestor[1]), getFirstAncestorOfType(listRoot, textEntries[0], listItemPlugin));
          const [first, ...rest] = isListRoot(editor, commonAncestorEntry[0]) ? commonAncestorEntry[0].children : [commonAncestorEntry[0]];
          return [...findListItemsWithContent(first), ...rest];
        };
        const wrapNodeIntoListItem = (node) => {
          return node.type === listItemType ? node : {
            type: listItemType,
            children: [node]
          };
        };
        const isSingleLic = (fragment) => {
          const isFragmentOnlyListRoot = fragment.length === 1 && isListRoot(editor, fragment[0]);
          return isFragmentOnlyListRoot && [...getNodes({
            children: fragment
          })].filter((entry) => isElement(entry[0])).filter(([node]) => node.type === listItemContentType).length === 1;
        };
        const getTextAndListItemNodes = (fragment, liEntry, licEntry) => {
          const [, liPath] = liEntry;
          const [licNode, licPath] = licEntry;
          const isEmptyNode = !getNodeString(licNode);
          const [first, ...rest] = fragment.flatMap(trimList).map(wrapNodeIntoListItem);
          let textNode;
          let listItemNodes;
          if (isListRoot(editor, fragment[0])) {
            if (isSingleLic(fragment)) {
              textNode = first;
              listItemNodes = rest;
            } else if (isEmptyNode) {
              const li2 = getNode(editor, liPath);
              const [, ...currentSublists] = li2.children;
              const [newLic, ...newSublists] = first.children;
              insertElements(editor, newLic, {
                at: Path.next(licPath),
                select: true
              });
              removeNodes(editor, {
                at: licPath
              });
              if (newSublists !== null && newSublists !== void 0 && newSublists.length) {
                if (currentSublists !== null && currentSublists !== void 0 && currentSublists.length) {
                  const path = [...liPath, 1, 0];
                  insertElements(editor, newSublists[0].children, {
                    at: path,
                    select: true
                  });
                } else {
                  insertElements(editor, newSublists, {
                    at: Path.next(licPath),
                    select: true
                  });
                }
              }
              textNode = {
                text: ""
              };
              listItemNodes = rest;
            } else {
              textNode = {
                text: ""
              };
              listItemNodes = [first, ...rest];
            }
          } else {
            textNode = first;
            listItemNodes = rest;
          }
          return {
            textNode,
            listItemNodes
          };
        };
        return (fragment) => {
          let liEntry = findNode(editor, {
            match: {
              type: listItemType
            },
            mode: "lowest"
          });
          if (!liEntry) {
            return _insertFragment(isListRoot(editor, fragment[0]) ? [{
              text: ""
            }, ...fragment] : fragment);
          }
          insertFragment(editor, [{
            text: ""
          }]);
          liEntry = findNode(editor, {
            match: {
              type: listItemType
            },
            mode: "lowest"
          });
          const licEntry = findNode(editor, {
            match: {
              type: listItemContentType
            },
            mode: "lowest"
          });
          if (!licEntry) {
            return _insertFragment(isListRoot(editor, fragment[0]) ? [{
              text: ""
            }, ...fragment] : fragment);
          }
          const {
            textNode,
            listItemNodes
          } = getTextAndListItemNodes(fragment, liEntry, licEntry);
          insertFragment(editor, [textNode]);
          const [, liPath] = liEntry;
          return insertElements(editor, listItemNodes, {
            at: Path.next(liPath),
            select: true
          });
        };
      };
      const getDeepInlineChildren = (editor, {
        children
      }) => {
        const inlineChildren = [];
        for (const child of children) {
          if (isBlock(editor, child[0])) {
            inlineChildren.push(...getDeepInlineChildren(editor, {
              children: getChildren(child)
            }));
          } else {
            inlineChildren.push(child);
          }
        }
        return inlineChildren;
      };
      const normalizeListItem = (editor, {
        listItem,
        validLiChildrenTypes = []
      }) => {
        let changed = false;
        const allValidLiChildrenTypes = [getPluginType(editor, ELEMENT_UL), getPluginType(editor, ELEMENT_OL), getPluginType(editor, ELEMENT_LIC), ...validLiChildrenTypes];
        const [, liPath] = listItem;
        const liChildren = getChildren(listItem);
        const invalidLiChildrenPathRefs = liChildren.filter(([child]) => !allValidLiChildrenTypes.includes(child.type)).map(([, childPath]) => createPathRef(editor, childPath));
        const firstLiChild = liChildren[0];
        const [firstLiChildNode, firstLiChildPath] = firstLiChild !== null && firstLiChild !== void 0 ? firstLiChild : [];
        if (!firstLiChild || !isBlock(editor, firstLiChildNode)) {
          insertEmptyElement(editor, getPluginType(editor, ELEMENT_LIC), {
            at: liPath.concat([0])
          });
          return true;
        }
        if (isBlock(editor, firstLiChildNode) && !match(firstLiChildNode, [], {
          type: getPluginType(editor, ELEMENT_LIC)
        })) {
          if (match(firstLiChildNode, [], {
            type: getListTypes(editor)
          })) {
            const parent2 = getParentNode(editor, listItem[1]);
            const sublist = firstLiChild;
            const children = getChildren(firstLiChild).reverse();
            children.forEach((c2) => {
              moveListItemUp(editor, {
                list: sublist,
                listItem: c2
              });
            });
            removeNodes(editor, {
              at: [...parent2[1], 0]
            });
            return true;
          }
          if (validLiChildrenTypes.includes(firstLiChildNode.type)) {
            return true;
          }
          setElements(editor, {
            type: getPluginType(editor, ELEMENT_LIC)
          }, {
            at: firstLiChildPath
          });
          changed = true;
        }
        const licChildren = getChildren(firstLiChild);
        if (licChildren.length) {
          var _licChildren;
          const blockPathRefs = [];
          const inlineChildren = [];
          for (const licChild of licChildren) {
            if (!isBlock(editor, licChild[0])) {
              break;
            }
            blockPathRefs.push(createPathRef(editor, licChild[1]));
            inlineChildren.push(...getDeepInlineChildren(editor, {
              children: getChildren(licChild)
            }));
          }
          const to2 = Path.next((_licChildren = licChildren[licChildren.length - 1]) === null || _licChildren === void 0 ? void 0 : _licChildren[1]);
          inlineChildren.reverse().forEach(([, path]) => {
            moveNodes(editor, {
              at: path,
              to: to2
            });
          });
          blockPathRefs.forEach((pathRef) => {
            const path = pathRef.unref();
            path && removeNodes(editor, {
              at: path
            });
          });
          if (blockPathRefs.length) {
            changed = true;
          }
        }
        if (changed)
          return true;
        invalidLiChildrenPathRefs.reverse().forEach((ref) => {
          const path = ref.unref();
          path && moveNodes(editor, {
            at: path,
            to: firstLiChildPath.concat([0])
          });
        });
        return !!invalidLiChildrenPathRefs.length;
      };
      const normalizeNestedList = (editor, {
        nestedListItem
      }) => {
        const [, path] = nestedListItem;
        const parentNode = getParentNode(editor, path);
        const hasParentList = parentNode && match(parentNode[0], [], {
          type: getListTypes(editor)
        });
        if (!hasParentList) {
          return false;
        }
        let previousListItemPath;
        try {
          previousListItemPath = Path.previous(path);
        } catch (e2) {
          return false;
        }
        const previousSiblingItem = getNodeEntry(editor, previousListItemPath);
        if (previousSiblingItem) {
          const [, previousPath] = previousSiblingItem;
          const newPath = previousPath.concat([1]);
          moveNodes(editor, {
            at: path,
            to: newPath
          });
          return true;
        }
      };
      const normalizeList = (editor, {
        validLiChildrenTypes
      }) => {
        const {
          normalizeNode
        } = editor;
        const liType = getPluginType(editor, ELEMENT_LI);
        const licType = getPluginType(editor, ELEMENT_LIC);
        const defaultType = getPluginType(editor, ELEMENT_DEFAULT);
        return ([node, path]) => {
          if (!isElement(node)) {
            return normalizeNode([node, path]);
          }
          if (isListRoot(editor, node)) {
            const nonLiChild = getChildren([node, path]).find(([child]) => child.type !== liType);
            if (nonLiChild) {
              return wrapNodes(editor, {
                type: liType,
                children: []
              }, {
                at: nonLiChild[1]
              });
            }
          }
          if (match(node, [], {
            type: getListTypes(editor)
          })) {
            if (!node.children.length || !node.children.find((item) => item.type === liType)) {
              return removeNodes(editor, {
                at: path
              });
            }
            const nextPath = Path.next(path);
            const nextNode = getNode(editor, nextPath);
            if ((nextNode === null || nextNode === void 0 ? void 0 : nextNode.type) === node.type) {
              moveListItemsToList(editor, {
                fromList: [nextNode, nextPath],
                toList: [node, path],
                deleteFromList: true
              });
            }
            const prevPath = getPreviousPath(path);
            const prevNode = getNode(editor, prevPath);
            if ((prevNode === null || prevNode === void 0 ? void 0 : prevNode.type) === node.type) {
              editor.normalizeNode([prevNode, prevPath]);
              return;
            }
            if (normalizeNestedList(editor, {
              nestedListItem: [node, path]
            })) {
              return;
            }
          }
          if (node.type === getPluginType(editor, ELEMENT_LI)) {
            if (normalizeListItem(editor, {
              listItem: [node, path],
              validLiChildrenTypes
            })) {
              return;
            }
          }
          if (node.type === licType && licType !== defaultType) {
            var _getParentNode;
            if (((_getParentNode = getParentNode(editor, path)) === null || _getParentNode === void 0 ? void 0 : _getParentNode[0].type) !== liType) {
              setElements(editor, {
                type: defaultType
              }, {
                at: path
              });
              return;
            }
          }
          normalizeNode([node, path]);
        };
      };
      const withList = (editor, {
        options: {
          validLiChildrenTypes
        }
      }) => {
        const {
          insertBreak,
          deleteBackward: deleteBackward2,
          deleteForward,
          deleteFragment
        } = editor;
        editor.insertBreak = () => {
          if (insertBreakList(editor))
            return;
          insertBreak();
        };
        editor.deleteBackward = (unit) => {
          if (deleteBackwardList(editor, unit))
            return;
          deleteBackward2(unit);
        };
        editor.deleteForward = (unit) => {
          if (deleteForwardList(editor))
            return;
          deleteForward(unit);
        };
        editor.deleteFragment = () => {
          if (deleteFragmentList(editor))
            return;
          deleteFragment();
        };
        editor.insertFragment = insertFragmentList(editor);
        editor.normalizeNode = normalizeList(editor, {
          validLiChildrenTypes
        });
        return editor;
      };
      const ELEMENT_UL = "ul";
      const ELEMENT_OL = "ol";
      const ELEMENT_LI = "li";
      const ELEMENT_LIC = "lic";
      const createListPlugin = createPluginFactory({
        key: "list",
        plugins: [{
          key: ELEMENT_UL,
          isElement: true,
          handlers: {
            onKeyDown: onKeyDownList
          },
          withOverrides: withList,
          deserializeHtml: {
            rules: [{
              validNodeName: "UL"
            }]
          }
        }, {
          key: ELEMENT_OL,
          isElement: true,
          handlers: {
            onKeyDown: onKeyDownList
          },
          deserializeHtml: {
            rules: [{
              validNodeName: "OL"
            }]
          }
        }, {
          key: ELEMENT_LI,
          isElement: true,
          deserializeHtml: {
            rules: [{
              validNodeName: "LI"
            }]
          },
          then: (editor, {
            type
          }) => ({
            inject: {
              pluginsByKey: {
                [KEY_DESERIALIZE_HTML]: {
                  editor: {
                    insertData: {
                      preInsert: () => {
                        return someNode(editor, {
                          match: {
                            type
                          }
                        });
                      }
                    }
                  }
                }
              }
            }
          })
        }, {
          key: ELEMENT_LIC,
          isElement: true
        }]
      });
      const ELEMENT_TODO_LI = "action_item";
      function unwrapExports$3(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$4(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$5 = createCommonjsModule$4(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      unwrapExports$3(lib$5);
      lib$5.isHotkey;
      lib$5.isCodeHotkey;
      lib$5.isKeyHotkey;
      lib$5.parseHotkey;
      lib$5.compareHotkey;
      lib$5.toKeyCode;
      lib$5.toKeyName;
      function listCacheClear$3() {
        this.__data__ = [];
        this.size = 0;
      }
      var _listCacheClear$1 = listCacheClear$3;
      function eq$5(value, other) {
        return value === other || value !== value && other !== other;
      }
      var eq_1$1 = eq$5;
      function assocIndexOf$6(array, key) {
        var length = array.length;
        while (length--) {
          if (eq_1$1(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      var _assocIndexOf$1 = assocIndexOf$6;
      var arrayProto$2 = Array.prototype;
      var splice$4 = arrayProto$2.splice;
      function listCacheDelete$3(key) {
        var data = this.__data__, index2 = _assocIndexOf$1(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice$4.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      var _listCacheDelete$1 = listCacheDelete$3;
      function listCacheGet$3(key) {
        var data = this.__data__, index2 = _assocIndexOf$1(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      var _listCacheGet$1 = listCacheGet$3;
      function listCacheHas$3(key) {
        return _assocIndexOf$1(this.__data__, key) > -1;
      }
      var _listCacheHas$1 = listCacheHas$3;
      function listCacheSet$3(key, value) {
        var data = this.__data__, index2 = _assocIndexOf$1(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      var _listCacheSet$1 = listCacheSet$3;
      function ListCache$6(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache$6.prototype.clear = _listCacheClear$1;
      ListCache$6.prototype["delete"] = _listCacheDelete$1;
      ListCache$6.prototype.get = _listCacheGet$1;
      ListCache$6.prototype.has = _listCacheHas$1;
      ListCache$6.prototype.set = _listCacheSet$1;
      var _ListCache$1 = ListCache$6;
      function stackClear$3() {
        this.__data__ = new _ListCache$1();
        this.size = 0;
      }
      var _stackClear$1 = stackClear$3;
      function stackDelete$3(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      var _stackDelete$1 = stackDelete$3;
      function stackGet$3(key) {
        return this.__data__.get(key);
      }
      var _stackGet$1 = stackGet$3;
      function stackHas$3(key) {
        return this.__data__.has(key);
      }
      var _stackHas$1 = stackHas$3;
      var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function createCommonjsModule$3(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var freeGlobal$3 = typeof commonjsGlobal$1 == "object" && commonjsGlobal$1 && commonjsGlobal$1.Object === Object && commonjsGlobal$1;
      var _freeGlobal$1 = freeGlobal$3;
      var freeSelf$2 = typeof self == "object" && self && self.Object === Object && self;
      var root$a = _freeGlobal$1 || freeSelf$2 || Function("return this")();
      var _root$1 = root$a;
      var Symbol$6 = _root$1.Symbol;
      var _Symbol$1 = Symbol$6;
      var objectProto$c$2 = Object.prototype;
      var hasOwnProperty$9$2 = objectProto$c$2.hasOwnProperty;
      var nativeObjectToString$1$2 = objectProto$c$2.toString;
      var symToStringTag$1$2 = _Symbol$1 ? _Symbol$1.toStringTag : void 0;
      function getRawTag$2(value) {
        var isOwn = hasOwnProperty$9$2.call(value, symToStringTag$1$2), tag = value[symToStringTag$1$2];
        try {
          value[symToStringTag$1$2] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString$1$2.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag$1$2] = tag;
          } else {
            delete value[symToStringTag$1$2];
          }
        }
        return result;
      }
      var _getRawTag$1 = getRawTag$2;
      var objectProto$b$2 = Object.prototype;
      var nativeObjectToString$3 = objectProto$b$2.toString;
      function objectToString$2(value) {
        return nativeObjectToString$3.call(value);
      }
      var _objectToString$1 = objectToString$2;
      var nullTag$2 = "[object Null]", undefinedTag$2 = "[object Undefined]";
      var symToStringTag$3 = _Symbol$1 ? _Symbol$1.toStringTag : void 0;
      function baseGetTag$8(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag$2 : nullTag$2;
        }
        return symToStringTag$3 && symToStringTag$3 in Object(value) ? _getRawTag$1(value) : _objectToString$1(value);
      }
      var _baseGetTag$1 = baseGetTag$8;
      function isObject$c(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      var isObject_1$1 = isObject$c;
      var asyncTag$3 = "[object AsyncFunction]", funcTag$2$2 = "[object Function]", genTag$1$2 = "[object GeneratorFunction]", proxyTag$3 = "[object Proxy]";
      function isFunction$7(value) {
        if (!isObject_1$1(value)) {
          return false;
        }
        var tag = _baseGetTag$1(value);
        return tag == funcTag$2$2 || tag == genTag$1$2 || tag == asyncTag$3 || tag == proxyTag$3;
      }
      var isFunction_1$2 = isFunction$7;
      var coreJsData$5 = _root$1["__core-js_shared__"];
      var _coreJsData$2 = coreJsData$5;
      var maskSrcKey$3 = function() {
        var uid2 = /[^.]+$/.exec(_coreJsData$2 && _coreJsData$2.keys && _coreJsData$2.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      function isMasked$4(func) {
        return !!maskSrcKey$3 && maskSrcKey$3 in func;
      }
      var _isMasked$2 = isMasked$4;
      var funcProto$1$2 = Function.prototype;
      var funcToString$1$2 = funcProto$1$2.toString;
      function toSource$5(func) {
        if (func != null) {
          try {
            return funcToString$1$2.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      var _toSource$2 = toSource$5;
      var reRegExpChar$3 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor$3 = /^\[object .+?Constructor\]$/;
      var funcProto$7 = Function.prototype, objectProto$a$2 = Object.prototype;
      var funcToString$7 = funcProto$7.toString;
      var hasOwnProperty$8$2 = objectProto$a$2.hasOwnProperty;
      var reIsNative$3 = RegExp("^" + funcToString$7.call(hasOwnProperty$8$2).replace(reRegExpChar$3, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative$4(value) {
        if (!isObject_1$1(value) || _isMasked$2(value)) {
          return false;
        }
        var pattern = isFunction_1$2(value) ? reIsNative$3 : reIsHostCtor$3;
        return pattern.test(_toSource$2(value));
      }
      var _baseIsNative$2 = baseIsNative$4;
      function getValue$4(object, key) {
        return object == null ? void 0 : object[key];
      }
      var _getValue$2 = getValue$4;
      function getNative$a(object, key) {
        var value = _getValue$2(object, key);
        return _baseIsNative$2(value) ? value : void 0;
      }
      var _getNative$2 = getNative$a;
      var Map$8 = _getNative$2(_root$1, "Map");
      var _Map$2 = Map$8;
      var nativeCreate$7 = _getNative$2(Object, "create");
      var _nativeCreate$1 = nativeCreate$7;
      function hashClear$3() {
        this.__data__ = _nativeCreate$1 ? _nativeCreate$1(null) : {};
        this.size = 0;
      }
      var _hashClear$1 = hashClear$3;
      function hashDelete$3(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      var _hashDelete$1 = hashDelete$3;
      var HASH_UNDEFINED$1$1 = "__lodash_hash_undefined__";
      var objectProto$9$1 = Object.prototype;
      var hasOwnProperty$7$1 = objectProto$9$1.hasOwnProperty;
      function hashGet$3(key) {
        var data = this.__data__;
        if (_nativeCreate$1) {
          var result = data[key];
          return result === HASH_UNDEFINED$1$1 ? void 0 : result;
        }
        return hasOwnProperty$7$1.call(data, key) ? data[key] : void 0;
      }
      var _hashGet$1 = hashGet$3;
      var objectProto$8$1 = Object.prototype;
      var hasOwnProperty$6$1 = objectProto$8$1.hasOwnProperty;
      function hashHas$3(key) {
        var data = this.__data__;
        return _nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$6$1.call(data, key);
      }
      var _hashHas$1 = hashHas$3;
      var HASH_UNDEFINED$6 = "__lodash_hash_undefined__";
      function hashSet$3(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = _nativeCreate$1 && value === void 0 ? HASH_UNDEFINED$6 : value;
        return this;
      }
      var _hashSet$1 = hashSet$3;
      function Hash$3(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash$3.prototype.clear = _hashClear$1;
      Hash$3.prototype["delete"] = _hashDelete$1;
      Hash$3.prototype.get = _hashGet$1;
      Hash$3.prototype.has = _hashHas$1;
      Hash$3.prototype.set = _hashSet$1;
      var _Hash$1 = Hash$3;
      function mapCacheClear$3() {
        this.size = 0;
        this.__data__ = {
          "hash": new _Hash$1(),
          "map": new (_Map$2 || _ListCache$1)(),
          "string": new _Hash$1()
        };
      }
      var _mapCacheClear$1 = mapCacheClear$3;
      function isKeyable$3(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      var _isKeyable$1 = isKeyable$3;
      function getMapData$6(map2, key) {
        var data = map2.__data__;
        return _isKeyable$1(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      var _getMapData$1 = getMapData$6;
      function mapCacheDelete$3(key) {
        var result = _getMapData$1(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      var _mapCacheDelete$1 = mapCacheDelete$3;
      function mapCacheGet$3(key) {
        return _getMapData$1(this, key).get(key);
      }
      var _mapCacheGet$1 = mapCacheGet$3;
      function mapCacheHas$3(key) {
        return _getMapData$1(this, key).has(key);
      }
      var _mapCacheHas$1 = mapCacheHas$3;
      function mapCacheSet$3(key, value) {
        var data = _getMapData$1(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      var _mapCacheSet$1 = mapCacheSet$3;
      function MapCache$5(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache$5.prototype.clear = _mapCacheClear$1;
      MapCache$5.prototype["delete"] = _mapCacheDelete$1;
      MapCache$5.prototype.get = _mapCacheGet$1;
      MapCache$5.prototype.has = _mapCacheHas$1;
      MapCache$5.prototype.set = _mapCacheSet$1;
      var _MapCache$1 = MapCache$5;
      var LARGE_ARRAY_SIZE$2 = 200;
      function stackSet$3(key, value) {
        var data = this.__data__;
        if (data instanceof _ListCache$1) {
          var pairs = data.__data__;
          if (!_Map$2 || pairs.length < LARGE_ARRAY_SIZE$2 - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new _MapCache$1(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      var _stackSet$1 = stackSet$3;
      function Stack$5(entries) {
        var data = this.__data__ = new _ListCache$1(entries);
        this.size = data.size;
      }
      Stack$5.prototype.clear = _stackClear$1;
      Stack$5.prototype["delete"] = _stackDelete$1;
      Stack$5.prototype.get = _stackGet$1;
      Stack$5.prototype.has = _stackHas$1;
      Stack$5.prototype.set = _stackSet$1;
      var _Stack$1 = Stack$5;
      function arrayEach$3(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (iteratee(array[index2], index2, array) === false) {
            break;
          }
        }
        return array;
      }
      var _arrayEach$1 = arrayEach$3;
      var defineProperty$5 = function() {
        try {
          var func = _getNative$2(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      }();
      var _defineProperty$6 = defineProperty$5;
      function baseAssignValue$4(object, key, value) {
        if (key == "__proto__" && _defineProperty$6) {
          _defineProperty$6(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      var _baseAssignValue$1 = baseAssignValue$4;
      var objectProto$7$1 = Object.prototype;
      var hasOwnProperty$5$1 = objectProto$7$1.hasOwnProperty;
      function assignValue$4(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty$5$1.call(object, key) && eq_1$1(objValue, value)) || value === void 0 && !(key in object)) {
          _baseAssignValue$1(object, key, value);
        }
      }
      var _assignValue$1 = assignValue$4;
      function copyObject$6(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index2 = -1, length = props.length;
        while (++index2 < length) {
          var key = props[index2];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            _baseAssignValue$1(object, key, newValue);
          } else {
            _assignValue$1(object, key, newValue);
          }
        }
        return object;
      }
      var _copyObject$1 = copyObject$6;
      function baseTimes$3(n2, iteratee) {
        var index2 = -1, result = Array(n2);
        while (++index2 < n2) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      var _baseTimes$1 = baseTimes$3;
      function isObjectLike$a(value) {
        return value != null && typeof value == "object";
      }
      var isObjectLike_1$1 = isObjectLike$a;
      var argsTag$2$2 = "[object Arguments]";
      function baseIsArguments$4(value) {
        return isObjectLike_1$1(value) && _baseGetTag$1(value) == argsTag$2$2;
      }
      var _baseIsArguments$2 = baseIsArguments$4;
      var objectProto$6$2 = Object.prototype;
      var hasOwnProperty$4$2 = objectProto$6$2.hasOwnProperty;
      var propertyIsEnumerable$1$2 = objectProto$6$2.propertyIsEnumerable;
      var isArguments$5 = _baseIsArguments$2(function() {
        return arguments;
      }()) ? _baseIsArguments$2 : function(value) {
        return isObjectLike_1$1(value) && hasOwnProperty$4$2.call(value, "callee") && !propertyIsEnumerable$1$2.call(value, "callee");
      };
      var isArguments_1$1 = isArguments$5;
      var isArray$g = Array.isArray;
      var isArray_1$1 = isArray$g;
      function stubFalse$3() {
        return false;
      }
      var stubFalse_1$2 = stubFalse$3;
      var isBuffer_1 = createCommonjsModule$3(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? _root$1.Buffer : void 0;
        var nativeIsBuffer2 = Buffer22 ? Buffer22.isBuffer : void 0;
        var isBuffer2 = nativeIsBuffer2 || stubFalse_1$2;
        module2.exports = isBuffer2;
      });
      var MAX_SAFE_INTEGER$1$1 = 9007199254740991;
      var reIsUint$2 = /^(?:0|[1-9]\d*)$/;
      function isIndex$4(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER$1$1 : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint$2.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      var _isIndex$1 = isIndex$4;
      var MAX_SAFE_INTEGER$4 = 9007199254740991;
      function isLength$5(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$4;
      }
      var isLength_1$1 = isLength$5;
      var argsTag$1$1 = "[object Arguments]", arrayTag$1$1 = "[object Array]", boolTag$2$1 = "[object Boolean]", dateTag$2$1 = "[object Date]", errorTag$1$1 = "[object Error]", funcTag$1$1 = "[object Function]", mapTag$4$1 = "[object Map]", numberTag$2$1 = "[object Number]", objectTag$2$1 = "[object Object]", regexpTag$2$1 = "[object RegExp]", setTag$4$1 = "[object Set]", stringTag$2$1 = "[object String]", weakMapTag$2$1 = "[object WeakMap]";
      var arrayBufferTag$2$1 = "[object ArrayBuffer]", dataViewTag$3$1 = "[object DataView]", float32Tag$2$1 = "[object Float32Array]", float64Tag$2$1 = "[object Float64Array]", int8Tag$2$1 = "[object Int8Array]", int16Tag$2$1 = "[object Int16Array]", int32Tag$2$1 = "[object Int32Array]", uint8Tag$2$1 = "[object Uint8Array]", uint8ClampedTag$2$1 = "[object Uint8ClampedArray]", uint16Tag$2$1 = "[object Uint16Array]", uint32Tag$2$1 = "[object Uint32Array]";
      var typedArrayTags$2 = {};
      typedArrayTags$2[float32Tag$2$1] = typedArrayTags$2[float64Tag$2$1] = typedArrayTags$2[int8Tag$2$1] = typedArrayTags$2[int16Tag$2$1] = typedArrayTags$2[int32Tag$2$1] = typedArrayTags$2[uint8Tag$2$1] = typedArrayTags$2[uint8ClampedTag$2$1] = typedArrayTags$2[uint16Tag$2$1] = typedArrayTags$2[uint32Tag$2$1] = true;
      typedArrayTags$2[argsTag$1$1] = typedArrayTags$2[arrayTag$1$1] = typedArrayTags$2[arrayBufferTag$2$1] = typedArrayTags$2[boolTag$2$1] = typedArrayTags$2[dataViewTag$3$1] = typedArrayTags$2[dateTag$2$1] = typedArrayTags$2[errorTag$1$1] = typedArrayTags$2[funcTag$1$1] = typedArrayTags$2[mapTag$4$1] = typedArrayTags$2[numberTag$2$1] = typedArrayTags$2[objectTag$2$1] = typedArrayTags$2[regexpTag$2$1] = typedArrayTags$2[setTag$4$1] = typedArrayTags$2[stringTag$2$1] = typedArrayTags$2[weakMapTag$2$1] = false;
      function baseIsTypedArray$3(value) {
        return isObjectLike_1$1(value) && isLength_1$1(value.length) && !!typedArrayTags$2[_baseGetTag$1(value)];
      }
      var _baseIsTypedArray$1 = baseIsTypedArray$3;
      function baseUnary$5(func) {
        return function(value) {
          return func(value);
        };
      }
      var _baseUnary$1 = baseUnary$5;
      var _nodeUtil$2 = createCommonjsModule$3(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var freeProcess2 = moduleExports2 && _freeGlobal$1.process;
        var nodeUtil2 = function() {
          try {
            var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
          } catch (e2) {
          }
        }();
        module2.exports = nodeUtil2;
      });
      var nodeIsTypedArray$2 = _nodeUtil$2 && _nodeUtil$2.isTypedArray;
      var isTypedArray$5 = nodeIsTypedArray$2 ? _baseUnary$1(nodeIsTypedArray$2) : _baseIsTypedArray$1;
      var isTypedArray_1$1 = isTypedArray$5;
      var objectProto$5$1 = Object.prototype;
      var hasOwnProperty$3$1 = objectProto$5$1.hasOwnProperty;
      function arrayLikeKeys$4(value, inherited) {
        var isArr = isArray_1$1(value), isArg = !isArr && isArguments_1$1(value), isBuff = !isArr && !isArg && isBuffer_1(value), isType2 = !isArr && !isArg && !isBuff && isTypedArray_1$1(value), skipIndexes = isArr || isArg || isBuff || isType2, result = skipIndexes ? _baseTimes$1(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty$3$1.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || _isIndex$1(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      var _arrayLikeKeys$1 = arrayLikeKeys$4;
      var objectProto$4$1 = Object.prototype;
      function isPrototype$5(value) {
        var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$4$1;
        return value === proto2;
      }
      var _isPrototype$1 = isPrototype$5;
      function overArg$4(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      var _overArg$1 = overArg$4;
      var nativeKeys$4 = _overArg$1(Object.keys, Object);
      var _nativeKeys$1 = nativeKeys$4;
      var objectProto$3$1 = Object.prototype;
      var hasOwnProperty$2$1 = objectProto$3$1.hasOwnProperty;
      function baseKeys$3(object) {
        if (!_isPrototype$1(object)) {
          return _nativeKeys$1(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty$2$1.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      var _baseKeys$1 = baseKeys$3;
      function isArrayLike$6(value) {
        return value != null && isLength_1$1(value.length) && !isFunction_1$2(value);
      }
      var isArrayLike_1$1 = isArrayLike$6;
      function keys$9(object) {
        return isArrayLike_1$1(object) ? _arrayLikeKeys$1(object) : _baseKeys$1(object);
      }
      var keys_1$1 = keys$9;
      function baseAssign$2(object, source) {
        return object && _copyObject$1(source, keys_1$1(source), object);
      }
      var _baseAssign$1 = baseAssign$2;
      function nativeKeysIn$3(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      var _nativeKeysIn$1 = nativeKeysIn$3;
      var objectProto$2$1 = Object.prototype;
      var hasOwnProperty$1$1 = objectProto$2$1.hasOwnProperty;
      function baseKeysIn$3(object) {
        if (!isObject_1$1(object)) {
          return _nativeKeysIn$1(object);
        }
        var isProto = _isPrototype$1(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty$1$1.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      var _baseKeysIn$1 = baseKeysIn$3;
      function keysIn$5(object) {
        return isArrayLike_1$1(object) ? _arrayLikeKeys$1(object, true) : _baseKeysIn$1(object);
      }
      var keysIn_1$1 = keysIn$5;
      function baseAssignIn$2(object, source) {
        return object && _copyObject$1(source, keysIn_1$1(source), object);
      }
      var _baseAssignIn$1 = baseAssignIn$2;
      var _cloneBuffer$1 = createCommonjsModule$3(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? _root$1.Buffer : void 0, allocUnsafe2 = Buffer22 ? Buffer22.allocUnsafe : void 0;
        function cloneBuffer2(buffer2, isDeep) {
          if (isDeep) {
            return buffer2.slice();
          }
          var length = buffer2.length, result = allocUnsafe2 ? allocUnsafe2(length) : new buffer2.constructor(length);
          buffer2.copy(result);
          return result;
        }
        module2.exports = cloneBuffer2;
      });
      function copyArray$3(source, array) {
        var index2 = -1, length = source.length;
        array || (array = Array(length));
        while (++index2 < length) {
          array[index2] = source[index2];
        }
        return array;
      }
      var _copyArray$1 = copyArray$3;
      function arrayFilter$3(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array[index2];
          if (predicate(value, index2, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      var _arrayFilter$1 = arrayFilter$3;
      function stubArray$4() {
        return [];
      }
      var stubArray_1$1 = stubArray$4;
      var objectProto$1$1 = Object.prototype;
      var propertyIsEnumerable$4 = objectProto$1$1.propertyIsEnumerable;
      var nativeGetSymbols$1$1 = Object.getOwnPropertySymbols;
      var getSymbols$6 = !nativeGetSymbols$1$1 ? stubArray_1$1 : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return _arrayFilter$1(nativeGetSymbols$1$1(object), function(symbol) {
          return propertyIsEnumerable$4.call(object, symbol);
        });
      };
      var _getSymbols$1 = getSymbols$6;
      function copySymbols$2(source, object) {
        return _copyObject$1(source, _getSymbols$1(source), object);
      }
      var _copySymbols$1 = copySymbols$2;
      function arrayPush$4(array, values2) {
        var index2 = -1, length = values2.length, offset2 = array.length;
        while (++index2 < length) {
          array[offset2 + index2] = values2[index2];
        }
        return array;
      }
      var _arrayPush$1 = arrayPush$4;
      var getPrototype$6 = _overArg$1(Object.getPrototypeOf, Object);
      var _getPrototype$1 = getPrototype$6;
      var nativeGetSymbols$3 = Object.getOwnPropertySymbols;
      var getSymbolsIn$3 = !nativeGetSymbols$3 ? stubArray_1$1 : function(object) {
        var result = [];
        while (object) {
          _arrayPush$1(result, _getSymbols$1(object));
          object = _getPrototype$1(object);
        }
        return result;
      };
      var _getSymbolsIn$1 = getSymbolsIn$3;
      function copySymbolsIn$2(source, object) {
        return _copyObject$1(source, _getSymbolsIn$1(source), object);
      }
      var _copySymbolsIn$1 = copySymbolsIn$2;
      function baseGetAllKeys$4(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray_1$1(object) ? result : _arrayPush$1(result, symbolsFunc(object));
      }
      var _baseGetAllKeys$1 = baseGetAllKeys$4;
      function getAllKeys$4(object) {
        return _baseGetAllKeys$1(object, keys_1$1, _getSymbols$1);
      }
      var _getAllKeys$1 = getAllKeys$4;
      function getAllKeysIn$2(object) {
        return _baseGetAllKeys$1(object, keysIn_1$1, _getSymbolsIn$1);
      }
      var _getAllKeysIn$1 = getAllKeysIn$2;
      var DataView$5 = _getNative$2(_root$1, "DataView");
      var _DataView$2 = DataView$5;
      var Promise$1$2 = _getNative$2(_root$1, "Promise");
      var _Promise$2 = Promise$1$2;
      var Set$6 = _getNative$2(_root$1, "Set");
      var _Set$2 = Set$6;
      var WeakMap$6 = _getNative$2(_root$1, "WeakMap");
      var _WeakMap$2 = WeakMap$6;
      var mapTag$3$2 = "[object Map]", objectTag$1$2 = "[object Object]", promiseTag$3 = "[object Promise]", setTag$3$2 = "[object Set]", weakMapTag$1$2 = "[object WeakMap]";
      var dataViewTag$2$2 = "[object DataView]";
      var dataViewCtorString$3 = _toSource$2(_DataView$2), mapCtorString$3 = _toSource$2(_Map$2), promiseCtorString$3 = _toSource$2(_Promise$2), setCtorString$3 = _toSource$2(_Set$2), weakMapCtorString$3 = _toSource$2(_WeakMap$2);
      var getTag$8 = _baseGetTag$1;
      if (_DataView$2 && getTag$8(new _DataView$2(new ArrayBuffer(1))) != dataViewTag$2$2 || _Map$2 && getTag$8(new _Map$2()) != mapTag$3$2 || _Promise$2 && getTag$8(_Promise$2.resolve()) != promiseTag$3 || _Set$2 && getTag$8(new _Set$2()) != setTag$3$2 || _WeakMap$2 && getTag$8(new _WeakMap$2()) != weakMapTag$1$2) {
        getTag$8 = function(value) {
          var result = _baseGetTag$1(value), Ctor = result == objectTag$1$2 ? value.constructor : void 0, ctorString = Ctor ? _toSource$2(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString$3:
                return dataViewTag$2$2;
              case mapCtorString$3:
                return mapTag$3$2;
              case promiseCtorString$3:
                return promiseTag$3;
              case setCtorString$3:
                return setTag$3$2;
              case weakMapCtorString$3:
                return weakMapTag$1$2;
            }
          }
          return result;
        };
      }
      var _getTag$1 = getTag$8;
      var objectProto$t = Object.prototype;
      var hasOwnProperty$q = objectProto$t.hasOwnProperty;
      function initCloneArray$2(array) {
        var length = array.length, result = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty$q.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      var _initCloneArray$1 = initCloneArray$2;
      var Uint8Array$5 = _root$1.Uint8Array;
      var _Uint8Array$1 = Uint8Array$5;
      function cloneArrayBuffer$5(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new _Uint8Array$1(result).set(new _Uint8Array$1(arrayBuffer));
        return result;
      }
      var _cloneArrayBuffer$1 = cloneArrayBuffer$5;
      function cloneDataView$2(dataView, isDeep) {
        var buffer2 = isDeep ? _cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer2, dataView.byteOffset, dataView.byteLength);
      }
      var _cloneDataView$1 = cloneDataView$2;
      var reFlags$1 = /\w*$/;
      function cloneRegExp$2(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags$1.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      var _cloneRegExp$1 = cloneRegExp$2;
      var symbolProto$6 = _Symbol$1 ? _Symbol$1.prototype : void 0, symbolValueOf$3 = symbolProto$6 ? symbolProto$6.valueOf : void 0;
      function cloneSymbol$2(symbol) {
        return symbolValueOf$3 ? Object(symbolValueOf$3.call(symbol)) : {};
      }
      var _cloneSymbol$1 = cloneSymbol$2;
      function cloneTypedArray$3(typedArray, isDeep) {
        var buffer2 = isDeep ? _cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
      }
      var _cloneTypedArray$1 = cloneTypedArray$3;
      var boolTag$1$1 = "[object Boolean]", dateTag$1$1 = "[object Date]", mapTag$2$1 = "[object Map]", numberTag$1$1 = "[object Number]", regexpTag$1$1 = "[object RegExp]", setTag$2$1 = "[object Set]", stringTag$1$1 = "[object String]", symbolTag$1$1 = "[object Symbol]";
      var arrayBufferTag$1$1 = "[object ArrayBuffer]", dataViewTag$1$1 = "[object DataView]", float32Tag$1$1 = "[object Float32Array]", float64Tag$1$1 = "[object Float64Array]", int8Tag$1$1 = "[object Int8Array]", int16Tag$1$1 = "[object Int16Array]", int32Tag$1$1 = "[object Int32Array]", uint8Tag$1$1 = "[object Uint8Array]", uint8ClampedTag$1$1 = "[object Uint8ClampedArray]", uint16Tag$1$1 = "[object Uint16Array]", uint32Tag$1$1 = "[object Uint32Array]";
      function initCloneByTag$2(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag$1$1:
            return _cloneArrayBuffer$1(object);
          case boolTag$1$1:
          case dateTag$1$1:
            return new Ctor(+object);
          case dataViewTag$1$1:
            return _cloneDataView$1(object, isDeep);
          case float32Tag$1$1:
          case float64Tag$1$1:
          case int8Tag$1$1:
          case int16Tag$1$1:
          case int32Tag$1$1:
          case uint8Tag$1$1:
          case uint8ClampedTag$1$1:
          case uint16Tag$1$1:
          case uint32Tag$1$1:
            return _cloneTypedArray$1(object, isDeep);
          case mapTag$2$1:
            return new Ctor();
          case numberTag$1$1:
          case stringTag$1$1:
            return new Ctor(object);
          case regexpTag$1$1:
            return _cloneRegExp$1(object);
          case setTag$2$1:
            return new Ctor();
          case symbolTag$1$1:
            return _cloneSymbol$1(object);
        }
      }
      var _initCloneByTag$1 = initCloneByTag$2;
      var objectCreate$2 = Object.create;
      var baseCreate$4 = function() {
        function object() {
        }
        return function(proto2) {
          if (!isObject_1$1(proto2)) {
            return {};
          }
          if (objectCreate$2) {
            return objectCreate$2(proto2);
          }
          object.prototype = proto2;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      var _baseCreate$1 = baseCreate$4;
      function initCloneObject$3(object) {
        return typeof object.constructor == "function" && !_isPrototype$1(object) ? _baseCreate$1(_getPrototype$1(object)) : {};
      }
      var _initCloneObject$1 = initCloneObject$3;
      var mapTag$1$1 = "[object Map]";
      function baseIsMap$2(value) {
        return isObjectLike_1$1(value) && _getTag$1(value) == mapTag$1$1;
      }
      var _baseIsMap$1 = baseIsMap$2;
      var nodeIsMap$1 = _nodeUtil$2 && _nodeUtil$2.isMap;
      var isMap$2 = nodeIsMap$1 ? _baseUnary$1(nodeIsMap$1) : _baseIsMap$1;
      var isMap_1$1 = isMap$2;
      var setTag$1$1 = "[object Set]";
      function baseIsSet$2(value) {
        return isObjectLike_1$1(value) && _getTag$1(value) == setTag$1$1;
      }
      var _baseIsSet$1 = baseIsSet$2;
      var nodeIsSet$1 = _nodeUtil$2 && _nodeUtil$2.isSet;
      var isSet$2 = nodeIsSet$1 ? _baseUnary$1(nodeIsSet$1) : _baseIsSet$1;
      var isSet_1$1 = isSet$2;
      var CLONE_DEEP_FLAG$1$1 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$1$1 = 4;
      var argsTag$7 = "[object Arguments]", arrayTag$5 = "[object Array]", boolTag$6 = "[object Boolean]", dateTag$6 = "[object Date]", errorTag$5 = "[object Error]", funcTag$5 = "[object Function]", genTag$3 = "[object GeneratorFunction]", mapTag$9 = "[object Map]", numberTag$6 = "[object Number]", objectTag$9 = "[object Object]", regexpTag$6 = "[object RegExp]", setTag$9 = "[object Set]", stringTag$7 = "[object String]", symbolTag$5 = "[object Symbol]", weakMapTag$5 = "[object WeakMap]";
      var arrayBufferTag$6 = "[object ArrayBuffer]", dataViewTag$8 = "[object DataView]", float32Tag$4 = "[object Float32Array]", float64Tag$4 = "[object Float64Array]", int8Tag$4 = "[object Int8Array]", int16Tag$4 = "[object Int16Array]", int32Tag$4 = "[object Int32Array]", uint8Tag$4 = "[object Uint8Array]", uint8ClampedTag$4 = "[object Uint8ClampedArray]", uint16Tag$4 = "[object Uint16Array]", uint32Tag$4 = "[object Uint32Array]";
      var cloneableTags$1 = {};
      cloneableTags$1[argsTag$7] = cloneableTags$1[arrayTag$5] = cloneableTags$1[arrayBufferTag$6] = cloneableTags$1[dataViewTag$8] = cloneableTags$1[boolTag$6] = cloneableTags$1[dateTag$6] = cloneableTags$1[float32Tag$4] = cloneableTags$1[float64Tag$4] = cloneableTags$1[int8Tag$4] = cloneableTags$1[int16Tag$4] = cloneableTags$1[int32Tag$4] = cloneableTags$1[mapTag$9] = cloneableTags$1[numberTag$6] = cloneableTags$1[objectTag$9] = cloneableTags$1[regexpTag$6] = cloneableTags$1[setTag$9] = cloneableTags$1[stringTag$7] = cloneableTags$1[symbolTag$5] = cloneableTags$1[uint8Tag$4] = cloneableTags$1[uint8ClampedTag$4] = cloneableTags$1[uint16Tag$4] = cloneableTags$1[uint32Tag$4] = true;
      cloneableTags$1[errorTag$5] = cloneableTags$1[funcTag$5] = cloneableTags$1[weakMapTag$5] = false;
      function baseClone$2(value, bitmask, customizer, key, object, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG$1$1, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$1$1;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject_1$1(value)) {
          return value;
        }
        var isArr = isArray_1$1(value);
        if (isArr) {
          result = _initCloneArray$1(value);
          if (!isDeep) {
            return _copyArray$1(value, result);
          }
        } else {
          var tag = _getTag$1(value), isFunc = tag == funcTag$5 || tag == genTag$3;
          if (isBuffer_1(value)) {
            return _cloneBuffer$1(value, isDeep);
          }
          if (tag == objectTag$9 || tag == argsTag$7 || isFunc && !object) {
            result = isFlat || isFunc ? {} : _initCloneObject$1(value);
            if (!isDeep) {
              return isFlat ? _copySymbolsIn$1(value, _baseAssignIn$1(result, value)) : _copySymbols$1(value, _baseAssign$1(result, value));
            }
          } else {
            if (!cloneableTags$1[tag]) {
              return object ? value : {};
            }
            result = _initCloneByTag$1(value, tag, isDeep);
          }
        }
        stack || (stack = new _Stack$1());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet_1$1(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap_1$1(value)) {
          value.forEach(function(subValue, key2) {
            result.set(key2, baseClone$2(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? _getAllKeysIn$1 : _getAllKeys$1 : isFlat ? keysIn_1$1 : keys_1$1;
        var props = isArr ? void 0 : keysFunc(value);
        _arrayEach$1(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          _assignValue$1(result, key2, baseClone$2(subValue, bitmask, customizer, key2, value, stack));
        });
        return result;
      }
      var _baseClone$1 = baseClone$2;
      var CLONE_DEEP_FLAG$2 = 1, CLONE_SYMBOLS_FLAG$2 = 4;
      function cloneDeep$1(value) {
        return _baseClone$1(value, CLONE_DEEP_FLAG$2 | CLONE_SYMBOLS_FLAG$2);
      }
      var cloneDeep_1$1 = cloneDeep$1;
      const withNodeId = (editor, {
        options: {
          idKey = "",
          idCreator,
          filterText,
          filter,
          reuseId,
          allow,
          exclude
        }
      }) => {
        const {
          apply: apply2
        } = editor;
        const idPropsCreator = () => ({
          [idKey]: idCreator()
        });
        const filterNode = (nodeEntry) => {
          var _nodeEntry$;
          return filter(nodeEntry) && (!filterText || ((_nodeEntry$ = nodeEntry[0]) === null || _nodeEntry$ === void 0 ? void 0 : _nodeEntry$.type) !== void 0);
        };
        const query = {
          filter: filterNode,
          allow,
          exclude
        };
        editor.apply = (operation) => {
          if (operation.type === "insert_node") {
            const node = cloneDeep_1$1(operation.node);
            if (!reuseId || someNode(editor, {
              match: {
                [idKey]: node[idKey]
              },
              at: []
            })) {
              delete node[idKey];
            }
            defaultsDeepToNodes({
              node,
              source: idPropsCreator,
              query
            });
            return apply2({
              ...operation,
              node
            });
          }
          if (operation.type === "split_node") {
            const node = operation.properties;
            if (queryNode([node, []], query)) {
              let id2 = operation.properties[idKey];
              if (!reuseId || id2 === void 0 || someNode(editor, {
                match: {
                  [idKey]: id2
                },
                at: []
              })) {
                id2 = idCreator();
              }
              return apply2({
                ...operation,
                properties: {
                  ...operation.properties,
                  [idKey]: id2
                }
              });
            }
          }
          return apply2(operation);
        };
        return editor;
      };
      const KEY_NODE_ID = "nodeId";
      const createNodeIdPlugin = createPluginFactory({
        key: KEY_NODE_ID,
        withOverrides: withNodeId,
        options: {
          idKey: "id",
          idCreator: () => Date.now(),
          filterText: true,
          filter: () => true
        }
      });
      var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function unwrapExports$2(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$2(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$4 = createCommonjsModule$2(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, { byKey: true }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      unwrapExports$2(lib$4);
      lib$4.isHotkey;
      lib$4.isCodeHotkey;
      lib$4.isKeyHotkey;
      lib$4.parseHotkey;
      lib$4.compareHotkey;
      lib$4.toKeyCode;
      lib$4.toKeyName;
      var freeGlobal$2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var _freeGlobal = freeGlobal$2;
      var freeSelf$1 = typeof self == "object" && self && self.Object === Object && self;
      var root$9 = _freeGlobal || freeSelf$1 || Function("return this")();
      var _root = root$9;
      var Symbol$1$1 = _root.Symbol;
      var _Symbol = Symbol$1$1;
      var objectProto$c$1 = Object.prototype;
      var hasOwnProperty$9$1 = objectProto$c$1.hasOwnProperty;
      var nativeObjectToString$1$1 = objectProto$c$1.toString;
      var symToStringTag$1$1 = _Symbol ? _Symbol.toStringTag : void 0;
      function getRawTag$1(value) {
        var isOwn = hasOwnProperty$9$1.call(value, symToStringTag$1$1), tag = value[symToStringTag$1$1];
        try {
          value[symToStringTag$1$1] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString$1$1.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag$1$1] = tag;
          } else {
            delete value[symToStringTag$1$1];
          }
        }
        return result;
      }
      var _getRawTag = getRawTag$1;
      var objectProto$b$1 = Object.prototype;
      var nativeObjectToString$2 = objectProto$b$1.toString;
      function objectToString$1(value) {
        return nativeObjectToString$2.call(value);
      }
      var _objectToString = objectToString$1;
      var nullTag$1 = "[object Null]", undefinedTag$1 = "[object Undefined]";
      var symToStringTag$2 = _Symbol ? _Symbol.toStringTag : void 0;
      function baseGetTag$7(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag$1 : nullTag$1;
        }
        return symToStringTag$2 && symToStringTag$2 in Object(value) ? _getRawTag(value) : _objectToString(value);
      }
      var _baseGetTag = baseGetTag$7;
      function isObject$b(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      var isObject_1 = isObject$b;
      var asyncTag$2 = "[object AsyncFunction]", funcTag$2$1 = "[object Function]", genTag$1$1 = "[object GeneratorFunction]", proxyTag$2 = "[object Proxy]";
      function isFunction$6(value) {
        if (!isObject_1(value)) {
          return false;
        }
        var tag = _baseGetTag(value);
        return tag == funcTag$2$1 || tag == genTag$1$1 || tag == asyncTag$2 || tag == proxyTag$2;
      }
      var isFunction_1$1 = isFunction$6;
      var coreJsData$4 = _root["__core-js_shared__"];
      var _coreJsData$1 = coreJsData$4;
      var maskSrcKey$2 = function() {
        var uid2 = /[^.]+$/.exec(_coreJsData$1 && _coreJsData$1.keys && _coreJsData$1.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      function isMasked$3(func) {
        return !!maskSrcKey$2 && maskSrcKey$2 in func;
      }
      var _isMasked$1 = isMasked$3;
      var funcProto$1$1 = Function.prototype;
      var funcToString$1$1 = funcProto$1$1.toString;
      function toSource$4(func) {
        if (func != null) {
          try {
            return funcToString$1$1.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      var _toSource$1 = toSource$4;
      var reRegExpChar$2 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor$2 = /^\[object .+?Constructor\]$/;
      var funcProto$6 = Function.prototype, objectProto$a$1 = Object.prototype;
      var funcToString$6 = funcProto$6.toString;
      var hasOwnProperty$8$1 = objectProto$a$1.hasOwnProperty;
      var reIsNative$2 = RegExp("^" + funcToString$6.call(hasOwnProperty$8$1).replace(reRegExpChar$2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative$3(value) {
        if (!isObject_1(value) || _isMasked$1(value)) {
          return false;
        }
        var pattern = isFunction_1$1(value) ? reIsNative$2 : reIsHostCtor$2;
        return pattern.test(_toSource$1(value));
      }
      var _baseIsNative$1 = baseIsNative$3;
      function getValue$3(object, key) {
        return object == null ? void 0 : object[key];
      }
      var _getValue$1 = getValue$3;
      function getNative$9(object, key) {
        var value = _getValue$1(object, key);
        return _baseIsNative$1(value) ? value : void 0;
      }
      var _getNative$1 = getNative$9;
      var Map$7 = _getNative$1(_root, "Map");
      var _Map$1 = Map$7;
      _getNative$1(Object, "create");
      (function() {
        try {
          var func = _getNative$1(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      })();
      function isObjectLike$9(value) {
        return value != null && typeof value == "object";
      }
      var isObjectLike_1 = isObjectLike$9;
      var argsTag$2$1 = "[object Arguments]";
      function baseIsArguments$3(value) {
        return isObjectLike_1(value) && _baseGetTag(value) == argsTag$2$1;
      }
      var _baseIsArguments$1 = baseIsArguments$3;
      var objectProto$6$1 = Object.prototype;
      var hasOwnProperty$4$1 = objectProto$6$1.hasOwnProperty;
      var propertyIsEnumerable$1$1 = objectProto$6$1.propertyIsEnumerable;
      _baseIsArguments$1(function() {
        return arguments;
      }()) ? _baseIsArguments$1 : function(value) {
        return isObjectLike_1(value) && hasOwnProperty$4$1.call(value, "callee") && !propertyIsEnumerable$1$1.call(value, "callee");
      };
      function stubFalse$2() {
        return false;
      }
      var stubFalse_1$1 = stubFalse$2;
      createCommonjsModule$2(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? _root.Buffer : void 0;
        var nativeIsBuffer2 = Buffer22 ? Buffer22.isBuffer : void 0;
        var isBuffer2 = nativeIsBuffer2 || stubFalse_1$1;
        module2.exports = isBuffer2;
      });
      var _nodeUtil$1 = createCommonjsModule$2(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var freeProcess2 = moduleExports2 && _freeGlobal.process;
        var nodeUtil2 = function() {
          try {
            var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
          } catch (e2) {
          }
        }();
        module2.exports = nodeUtil2;
      });
      _nodeUtil$1 && _nodeUtil$1.isTypedArray;
      createCommonjsModule$2(function(module2, exports3) {
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? _root.Buffer : void 0, allocUnsafe2 = Buffer22 ? Buffer22.allocUnsafe : void 0;
        function cloneBuffer2(buffer2, isDeep) {
          if (isDeep) {
            return buffer2.slice();
          }
          var length = buffer2.length, result = allocUnsafe2 ? allocUnsafe2(length) : new buffer2.constructor(length);
          buffer2.copy(result);
          return result;
        }
        module2.exports = cloneBuffer2;
      });
      var DataView$4 = _getNative$1(_root, "DataView");
      var _DataView$1 = DataView$4;
      var Promise$1$1 = _getNative$1(_root, "Promise");
      var _Promise$1 = Promise$1$1;
      var Set$5 = _getNative$1(_root, "Set");
      var _Set$1 = Set$5;
      var WeakMap$5 = _getNative$1(_root, "WeakMap");
      var _WeakMap$1 = WeakMap$5;
      var mapTag$3$1 = "[object Map]", objectTag$1$1 = "[object Object]", promiseTag$2 = "[object Promise]", setTag$3$1 = "[object Set]", weakMapTag$1$1 = "[object WeakMap]";
      var dataViewTag$2$1 = "[object DataView]";
      var dataViewCtorString$2 = _toSource$1(_DataView$1), mapCtorString$2 = _toSource$1(_Map$1), promiseCtorString$2 = _toSource$1(_Promise$1), setCtorString$2 = _toSource$1(_Set$1), weakMapCtorString$2 = _toSource$1(_WeakMap$1);
      var getTag$7 = _baseGetTag;
      if (_DataView$1 && getTag$7(new _DataView$1(new ArrayBuffer(1))) != dataViewTag$2$1 || _Map$1 && getTag$7(new _Map$1()) != mapTag$3$1 || _Promise$1 && getTag$7(_Promise$1.resolve()) != promiseTag$2 || _Set$1 && getTag$7(new _Set$1()) != setTag$3$1 || _WeakMap$1 && getTag$7(new _WeakMap$1()) != weakMapTag$1$1) {
        getTag$7 = function(value) {
          var result = _baseGetTag(value), Ctor = result == objectTag$1$1 ? value.constructor : void 0, ctorString = Ctor ? _toSource$1(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString$2:
                return dataViewTag$2$1;
              case mapCtorString$2:
                return mapTag$3$1;
              case promiseCtorString$2:
                return promiseTag$2;
              case setCtorString$2:
                return setTag$3$1;
              case weakMapCtorString$2:
                return weakMapTag$1$1;
            }
          }
          return result;
        };
      }
      _root.Uint8Array;
      var symbolProto$5 = _Symbol ? _Symbol.prototype : void 0;
      symbolProto$5 ? symbolProto$5.valueOf : void 0;
      _nodeUtil$1 && _nodeUtil$1.isMap;
      _nodeUtil$1 && _nodeUtil$1.isSet;
      var papaparse_min = { exports: {} };
      (function(module2, exports3) {
        !function(e2, t2) {
          module2.exports = t2();
        }(commonjsGlobal$4, function s2() {
          var f2 = typeof self != "undefined" ? self : typeof window != "undefined" ? window : f2 !== void 0 ? f2 : {};
          var n2 = !f2.document && !!f2.postMessage, o2 = n2 && /blob:/i.test((f2.location || {}).protocol), a2 = {}, h2 = 0, b2 = { parse: function(e2, t2) {
            var i3 = (t2 = t2 || {}).dynamicTyping || false;
            M2(i3) && (t2.dynamicTypingFunction = i3, i3 = {});
            if (t2.dynamicTyping = i3, t2.transform = !!M2(t2.transform) && t2.transform, t2.worker && b2.WORKERS_SUPPORTED) {
              var r2 = function() {
                if (!b2.WORKERS_SUPPORTED)
                  return false;
                var e3 = (i4 = f2.URL || f2.webkitURL || null, r3 = s2.toString(), b2.BLOB_URL || (b2.BLOB_URL = i4.createObjectURL(new Blob(["(", r3, ")();"], { type: "text/javascript" })))), t3 = new f2.Worker(e3);
                var i4, r3;
                return t3.onmessage = _2, t3.id = h2++, a2[t3.id] = t3;
              }();
              return r2.userStep = t2.step, r2.userChunk = t2.chunk, r2.userComplete = t2.complete, r2.userError = t2.error, t2.step = M2(t2.step), t2.chunk = M2(t2.chunk), t2.complete = M2(t2.complete), t2.error = M2(t2.error), delete t2.worker, void r2.postMessage({ input: e2, config: t2, workerId: r2.id });
            }
            var n3 = null;
            b2.NODE_STREAM_INPUT, typeof e2 == "string" ? n3 = t2.download ? new l2(t2) : new p2(t2) : e2.readable === true && M2(e2.read) && M2(e2.on) ? n3 = new g2(t2) : (f2.File && e2 instanceof File || e2 instanceof Object) && (n3 = new c2(t2));
            return n3.stream(e2);
          }, unparse: function(e2, t2) {
            var n3 = false, _3 = true, m3 = ",", y3 = "\r\n", s3 = '"', a3 = s3 + s3, i3 = false, r2 = null, o3 = false;
            !function() {
              if (typeof t2 != "object")
                return;
              typeof t2.delimiter != "string" || b2.BAD_DELIMITERS.filter(function(e3) {
                return t2.delimiter.indexOf(e3) !== -1;
              }).length || (m3 = t2.delimiter);
              (typeof t2.quotes == "boolean" || typeof t2.quotes == "function" || Array.isArray(t2.quotes)) && (n3 = t2.quotes);
              typeof t2.skipEmptyLines != "boolean" && typeof t2.skipEmptyLines != "string" || (i3 = t2.skipEmptyLines);
              typeof t2.newline == "string" && (y3 = t2.newline);
              typeof t2.quoteChar == "string" && (s3 = t2.quoteChar);
              typeof t2.header == "boolean" && (_3 = t2.header);
              if (Array.isArray(t2.columns)) {
                if (t2.columns.length === 0)
                  throw new Error("Option columns is empty");
                r2 = t2.columns;
              }
              t2.escapeChar !== void 0 && (a3 = t2.escapeChar + s3);
              (typeof t2.escapeFormulae == "boolean" || t2.escapeFormulae instanceof RegExp) && (o3 = t2.escapeFormulae instanceof RegExp ? t2.escapeFormulae : /^[=+\-@\t\r].*$/);
            }();
            var h3 = new RegExp(j2(s3), "g");
            typeof e2 == "string" && (e2 = JSON.parse(e2));
            if (Array.isArray(e2)) {
              if (!e2.length || Array.isArray(e2[0]))
                return u3(null, e2, i3);
              if (typeof e2[0] == "object")
                return u3(r2 || Object.keys(e2[0]), e2, i3);
            } else if (typeof e2 == "object")
              return typeof e2.data == "string" && (e2.data = JSON.parse(e2.data)), Array.isArray(e2.data) && (e2.fields || (e2.fields = e2.meta && e2.meta.fields || r2), e2.fields || (e2.fields = Array.isArray(e2.data[0]) ? e2.fields : typeof e2.data[0] == "object" ? Object.keys(e2.data[0]) : []), Array.isArray(e2.data[0]) || typeof e2.data[0] == "object" || (e2.data = [e2.data])), u3(e2.fields || [], e2.data || [], i3);
            throw new Error("Unable to serialize unrecognized input");
            function u3(e3, t3, i4) {
              var r3 = "";
              typeof e3 == "string" && (e3 = JSON.parse(e3)), typeof t3 == "string" && (t3 = JSON.parse(t3));
              var n4 = Array.isArray(e3) && 0 < e3.length, s4 = !Array.isArray(t3[0]);
              if (n4 && _3) {
                for (var a4 = 0; a4 < e3.length; a4++)
                  0 < a4 && (r3 += m3), r3 += v3(e3[a4], a4);
                0 < t3.length && (r3 += y3);
              }
              for (var o4 = 0; o4 < t3.length; o4++) {
                var h4 = n4 ? e3.length : t3[o4].length, u4 = false, f3 = n4 ? Object.keys(t3[o4]).length === 0 : t3[o4].length === 0;
                if (i4 && !n4 && (u4 = i4 === "greedy" ? t3[o4].join("").trim() === "" : t3[o4].length === 1 && t3[o4][0].length === 0), i4 === "greedy" && n4) {
                  for (var d3 = [], l3 = 0; l3 < h4; l3++) {
                    var c3 = s4 ? e3[l3] : l3;
                    d3.push(t3[o4][c3]);
                  }
                  u4 = d3.join("").trim() === "";
                }
                if (!u4) {
                  for (var p3 = 0; p3 < h4; p3++) {
                    0 < p3 && !f3 && (r3 += m3);
                    var g3 = n4 && s4 ? e3[p3] : p3;
                    r3 += v3(t3[o4][g3], p3);
                  }
                  o4 < t3.length - 1 && (!i4 || 0 < h4 && !f3) && (r3 += y3);
                }
              }
              return r3;
            }
            function v3(e3, t3) {
              if (e3 == null)
                return "";
              if (e3.constructor === Date)
                return JSON.stringify(e3).slice(1, 25);
              var i4 = false;
              o3 && typeof e3 == "string" && o3.test(e3) && (e3 = "'" + e3, i4 = true);
              var r3 = e3.toString().replace(h3, a3);
              return (i4 = i4 || n3 === true || typeof n3 == "function" && n3(e3, t3) || Array.isArray(n3) && n3[t3] || function(e4, t4) {
                for (var i5 = 0; i5 < t4.length; i5++)
                  if (-1 < e4.indexOf(t4[i5]))
                    return true;
                return false;
              }(r3, b2.BAD_DELIMITERS) || -1 < r3.indexOf(m3) || r3.charAt(0) === " " || r3.charAt(r3.length - 1) === " ") ? s3 + r3 + s3 : r3;
            }
          } };
          if (b2.RECORD_SEP = String.fromCharCode(30), b2.UNIT_SEP = String.fromCharCode(31), b2.BYTE_ORDER_MARK = "\uFEFF", b2.BAD_DELIMITERS = ["\r", "\n", '"', b2.BYTE_ORDER_MARK], b2.WORKERS_SUPPORTED = !n2 && !!f2.Worker, b2.NODE_STREAM_INPUT = 1, b2.LocalChunkSize = 10485760, b2.RemoteChunkSize = 5242880, b2.DefaultDelimiter = ",", b2.Parser = E2, b2.ParserHandle = i2, b2.NetworkStreamer = l2, b2.FileStreamer = c2, b2.StringStreamer = p2, b2.ReadableStreamStreamer = g2, f2.jQuery) {
            var d2 = f2.jQuery;
            d2.fn.parse = function(o3) {
              var i3 = o3.config || {}, h3 = [];
              return this.each(function(e3) {
                if (!(d2(this).prop("tagName").toUpperCase() === "INPUT" && d2(this).attr("type").toLowerCase() === "file" && f2.FileReader) || !this.files || this.files.length === 0)
                  return true;
                for (var t2 = 0; t2 < this.files.length; t2++)
                  h3.push({ file: this.files[t2], inputElem: this, instanceConfig: d2.extend({}, i3) });
              }), e2(), this;
              function e2() {
                if (h3.length !== 0) {
                  var e3, t2, i4, r2, n3 = h3[0];
                  if (M2(o3.before)) {
                    var s3 = o3.before(n3.file, n3.inputElem);
                    if (typeof s3 == "object") {
                      if (s3.action === "abort")
                        return e3 = "AbortError", t2 = n3.file, i4 = n3.inputElem, r2 = s3.reason, void (M2(o3.error) && o3.error({ name: e3 }, t2, i4, r2));
                      if (s3.action === "skip")
                        return void u3();
                      typeof s3.config == "object" && (n3.instanceConfig = d2.extend(n3.instanceConfig, s3.config));
                    } else if (s3 === "skip")
                      return void u3();
                  }
                  var a3 = n3.instanceConfig.complete;
                  n3.instanceConfig.complete = function(e4) {
                    M2(a3) && a3(e4, n3.file, n3.inputElem), u3();
                  }, b2.parse(n3.file, n3.instanceConfig);
                } else
                  M2(o3.complete) && o3.complete();
              }
              function u3() {
                h3.splice(0, 1), e2();
              }
            };
          }
          function u2(e2) {
            this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, function(e3) {
              var t2 = w2(e3);
              t2.chunkSize = parseInt(t2.chunkSize), e3.step || e3.chunk || (t2.chunkSize = null);
              this._handle = new i2(t2), (this._handle.streamer = this)._config = t2;
            }.call(this, e2), this.parseChunk = function(e3, t2) {
              if (this.isFirstChunk && M2(this._config.beforeFirstChunk)) {
                var i3 = this._config.beforeFirstChunk(e3);
                i3 !== void 0 && (e3 = i3);
              }
              this.isFirstChunk = false, this._halted = false;
              var r2 = this._partialLine + e3;
              this._partialLine = "";
              var n3 = this._handle.parse(r2, this._baseIndex, !this._finished);
              if (!this._handle.paused() && !this._handle.aborted()) {
                var s3 = n3.meta.cursor;
                this._finished || (this._partialLine = r2.substring(s3 - this._baseIndex), this._baseIndex = s3), n3 && n3.data && (this._rowCount += n3.data.length);
                var a3 = this._finished || this._config.preview && this._rowCount >= this._config.preview;
                if (o2)
                  f2.postMessage({ results: n3, workerId: b2.WORKER_ID, finished: a3 });
                else if (M2(this._config.chunk) && !t2) {
                  if (this._config.chunk(n3, this._handle), this._handle.paused() || this._handle.aborted())
                    return void (this._halted = true);
                  n3 = void 0, this._completeResults = void 0;
                }
                return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(n3.data), this._completeResults.errors = this._completeResults.errors.concat(n3.errors), this._completeResults.meta = n3.meta), this._completed || !a3 || !M2(this._config.complete) || n3 && n3.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), a3 || n3 && n3.meta.paused || this._nextChunk(), n3;
              }
              this._halted = true;
            }, this._sendError = function(e3) {
              M2(this._config.error) ? this._config.error(e3) : o2 && this._config.error && f2.postMessage({ workerId: b2.WORKER_ID, error: e3, finished: false });
            };
          }
          function l2(e2) {
            var r2;
            (e2 = e2 || {}).chunkSize || (e2.chunkSize = b2.RemoteChunkSize), u2.call(this, e2), this._nextChunk = n2 ? function() {
              this._readChunk(), this._chunkLoaded();
            } : function() {
              this._readChunk();
            }, this.stream = function(e3) {
              this._input = e3, this._nextChunk();
            }, this._readChunk = function() {
              if (this._finished)
                this._chunkLoaded();
              else {
                if (r2 = new XMLHttpRequest(), this._config.withCredentials && (r2.withCredentials = this._config.withCredentials), n2 || (r2.onload = v2(this._chunkLoaded, this), r2.onerror = v2(this._chunkError, this)), r2.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n2), this._config.downloadRequestHeaders) {
                  var e3 = this._config.downloadRequestHeaders;
                  for (var t2 in e3)
                    r2.setRequestHeader(t2, e3[t2]);
                }
                if (this._config.chunkSize) {
                  var i3 = this._start + this._config.chunkSize - 1;
                  r2.setRequestHeader("Range", "bytes=" + this._start + "-" + i3);
                }
                try {
                  r2.send(this._config.downloadRequestBody);
                } catch (e4) {
                  this._chunkError(e4.message);
                }
                n2 && r2.status === 0 && this._chunkError();
              }
            }, this._chunkLoaded = function() {
              r2.readyState === 4 && (r2.status < 200 || 400 <= r2.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : r2.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(e3) {
                var t2 = e3.getResponseHeader("Content-Range");
                if (t2 === null)
                  return -1;
                return parseInt(t2.substring(t2.lastIndexOf("/") + 1));
              }(r2), this.parseChunk(r2.responseText)));
            }, this._chunkError = function(e3) {
              var t2 = r2.statusText || e3;
              this._sendError(new Error(t2));
            };
          }
          function c2(e2) {
            var r2, n3;
            (e2 = e2 || {}).chunkSize || (e2.chunkSize = b2.LocalChunkSize), u2.call(this, e2);
            var s3 = typeof FileReader != "undefined";
            this.stream = function(e3) {
              this._input = e3, n3 = e3.slice || e3.webkitSlice || e3.mozSlice, s3 ? ((r2 = new FileReader()).onload = v2(this._chunkLoaded, this), r2.onerror = v2(this._chunkError, this)) : r2 = new FileReaderSync(), this._nextChunk();
            }, this._nextChunk = function() {
              this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
            }, this._readChunk = function() {
              var e3 = this._input;
              if (this._config.chunkSize) {
                var t2 = Math.min(this._start + this._config.chunkSize, this._input.size);
                e3 = n3.call(e3, this._start, t2);
              }
              var i3 = r2.readAsText(e3, this._config.encoding);
              s3 || this._chunkLoaded({ target: { result: i3 } });
            }, this._chunkLoaded = function(e3) {
              this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e3.target.result);
            }, this._chunkError = function() {
              this._sendError(r2.error);
            };
          }
          function p2(e2) {
            var i3;
            u2.call(this, e2 = e2 || {}), this.stream = function(e3) {
              return i3 = e3, this._nextChunk();
            }, this._nextChunk = function() {
              if (!this._finished) {
                var e3, t2 = this._config.chunkSize;
                return t2 ? (e3 = i3.substring(0, t2), i3 = i3.substring(t2)) : (e3 = i3, i3 = ""), this._finished = !i3, this.parseChunk(e3);
              }
            };
          }
          function g2(e2) {
            u2.call(this, e2 = e2 || {});
            var t2 = [], i3 = true, r2 = false;
            this.pause = function() {
              u2.prototype.pause.apply(this, arguments), this._input.pause();
            }, this.resume = function() {
              u2.prototype.resume.apply(this, arguments), this._input.resume();
            }, this.stream = function(e3) {
              this._input = e3, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
            }, this._checkIsFinished = function() {
              r2 && t2.length === 1 && (this._finished = true);
            }, this._nextChunk = function() {
              this._checkIsFinished(), t2.length ? this.parseChunk(t2.shift()) : i3 = true;
            }, this._streamData = v2(function(e3) {
              try {
                t2.push(typeof e3 == "string" ? e3 : e3.toString(this._config.encoding)), i3 && (i3 = false, this._checkIsFinished(), this.parseChunk(t2.shift()));
              } catch (e4) {
                this._streamError(e4);
              }
            }, this), this._streamError = v2(function(e3) {
              this._streamCleanUp(), this._sendError(e3);
            }, this), this._streamEnd = v2(function() {
              this._streamCleanUp(), r2 = true, this._streamData("");
            }, this), this._streamCleanUp = v2(function() {
              this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
            }, this);
          }
          function i2(m3) {
            var a3, o3, h3, r2 = Math.pow(2, 53), n3 = -r2, s3 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, u3 = /^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/, t2 = this, i3 = 0, f3 = 0, d3 = false, e2 = false, l3 = [], c3 = { data: [], errors: [], meta: {} };
            if (M2(m3.step)) {
              var p3 = m3.step;
              m3.step = function(e3) {
                if (c3 = e3, _3())
                  g3();
                else {
                  if (g3(), c3.data.length === 0)
                    return;
                  i3 += e3.data.length, m3.preview && i3 > m3.preview ? o3.abort() : (c3.data = c3.data[0], p3(c3, t2));
                }
              };
            }
            function y3(e3) {
              return m3.skipEmptyLines === "greedy" ? e3.join("").trim() === "" : e3.length === 1 && e3[0].length === 0;
            }
            function g3() {
              return c3 && h3 && (k2("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + b2.DefaultDelimiter + "'"), h3 = false), m3.skipEmptyLines && (c3.data = c3.data.filter(function(e3) {
                return !y3(e3);
              })), _3() && function() {
                if (!c3)
                  return;
                function e3(e4, t4) {
                  M2(m3.transformHeader) && (e4 = m3.transformHeader(e4, t4)), l3.push(e4);
                }
                if (Array.isArray(c3.data[0])) {
                  for (var t3 = 0; _3() && t3 < c3.data.length; t3++)
                    c3.data[t3].forEach(e3);
                  c3.data.splice(0, 1);
                } else
                  c3.data.forEach(e3);
              }(), function() {
                if (!c3 || !m3.header && !m3.dynamicTyping && !m3.transform)
                  return c3;
                function e3(e4, t4) {
                  var i4, r3 = m3.header ? {} : [];
                  for (i4 = 0; i4 < e4.length; i4++) {
                    var n4 = i4, s4 = e4[i4];
                    m3.header && (n4 = i4 >= l3.length ? "__parsed_extra" : l3[i4]), m3.transform && (s4 = m3.transform(s4, n4)), s4 = v3(n4, s4), n4 === "__parsed_extra" ? (r3[n4] = r3[n4] || [], r3[n4].push(s4)) : r3[n4] = s4;
                  }
                  return m3.header && (i4 > l3.length ? k2("FieldMismatch", "TooManyFields", "Too many fields: expected " + l3.length + " fields but parsed " + i4, f3 + t4) : i4 < l3.length && k2("FieldMismatch", "TooFewFields", "Too few fields: expected " + l3.length + " fields but parsed " + i4, f3 + t4)), r3;
                }
                var t3 = 1;
                !c3.data.length || Array.isArray(c3.data[0]) ? (c3.data = c3.data.map(e3), t3 = c3.data.length) : c3.data = e3(c3.data, 0);
                m3.header && c3.meta && (c3.meta.fields = l3);
                return f3 += t3, c3;
              }();
            }
            function _3() {
              return m3.header && l3.length === 0;
            }
            function v3(e3, t3) {
              return i4 = e3, m3.dynamicTypingFunction && m3.dynamicTyping[i4] === void 0 && (m3.dynamicTyping[i4] = m3.dynamicTypingFunction(i4)), (m3.dynamicTyping[i4] || m3.dynamicTyping) === true ? t3 === "true" || t3 === "TRUE" || t3 !== "false" && t3 !== "FALSE" && (function(e4) {
                if (s3.test(e4)) {
                  var t4 = parseFloat(e4);
                  if (n3 < t4 && t4 < r2)
                    return true;
                }
                return false;
              }(t3) ? parseFloat(t3) : u3.test(t3) ? new Date(t3) : t3 === "" ? null : t3) : t3;
              var i4;
            }
            function k2(e3, t3, i4, r3) {
              var n4 = { type: e3, code: t3, message: i4 };
              r3 !== void 0 && (n4.row = r3), c3.errors.push(n4);
            }
            this.parse = function(e3, t3, i4) {
              var r3 = m3.quoteChar || '"';
              if (m3.newline || (m3.newline = function(e4, t4) {
                e4 = e4.substring(0, 1048576);
                var i5 = new RegExp(j2(t4) + "([^]*?)" + j2(t4), "gm"), r4 = (e4 = e4.replace(i5, "")).split("\r"), n5 = e4.split("\n"), s5 = 1 < n5.length && n5[0].length < r4[0].length;
                if (r4.length === 1 || s5)
                  return "\n";
                for (var a4 = 0, o4 = 0; o4 < r4.length; o4++)
                  r4[o4][0] === "\n" && a4++;
                return a4 >= r4.length / 2 ? "\r\n" : "\r";
              }(e3, r3)), h3 = false, m3.delimiter)
                M2(m3.delimiter) && (m3.delimiter = m3.delimiter(e3), c3.meta.delimiter = m3.delimiter);
              else {
                var n4 = function(e4, t4, i5, r4, n5) {
                  var s5, a4, o4, h4;
                  n5 = n5 || [",", "	", "|", ";", b2.RECORD_SEP, b2.UNIT_SEP];
                  for (var u4 = 0; u4 < n5.length; u4++) {
                    var f4 = n5[u4], d4 = 0, l4 = 0, c4 = 0;
                    o4 = void 0;
                    for (var p4 = new E2({ comments: r4, delimiter: f4, newline: t4, preview: 10 }).parse(e4), g4 = 0; g4 < p4.data.length; g4++)
                      if (i5 && y3(p4.data[g4]))
                        c4++;
                      else {
                        var _4 = p4.data[g4].length;
                        l4 += _4, o4 !== void 0 ? 0 < _4 && (d4 += Math.abs(_4 - o4), o4 = _4) : o4 = _4;
                      }
                    0 < p4.data.length && (l4 /= p4.data.length - c4), (a4 === void 0 || d4 <= a4) && (h4 === void 0 || h4 < l4) && 1.99 < l4 && (a4 = d4, s5 = f4, h4 = l4);
                  }
                  return { successful: !!(m3.delimiter = s5), bestDelimiter: s5 };
                }(e3, m3.newline, m3.skipEmptyLines, m3.comments, m3.delimitersToGuess);
                n4.successful ? m3.delimiter = n4.bestDelimiter : (h3 = true, m3.delimiter = b2.DefaultDelimiter), c3.meta.delimiter = m3.delimiter;
              }
              var s4 = w2(m3);
              return m3.preview && m3.header && s4.preview++, a3 = e3, o3 = new E2(s4), c3 = o3.parse(a3, t3, i4), g3(), d3 ? { meta: { paused: true } } : c3 || { meta: { paused: false } };
            }, this.paused = function() {
              return d3;
            }, this.pause = function() {
              d3 = true, o3.abort(), a3 = M2(m3.chunk) ? "" : a3.substring(o3.getCharIndex());
            }, this.resume = function() {
              t2.streamer._halted ? (d3 = false, t2.streamer.parseChunk(a3, true)) : setTimeout(t2.resume, 3);
            }, this.aborted = function() {
              return e2;
            }, this.abort = function() {
              e2 = true, o3.abort(), c3.meta.aborted = true, M2(m3.complete) && m3.complete(c3), a3 = "";
            };
          }
          function j2(e2) {
            return e2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
          }
          function E2(e2) {
            var S2, O2 = (e2 = e2 || {}).delimiter, x2 = e2.newline, I2 = e2.comments, T2 = e2.step, D2 = e2.preview, A2 = e2.fastMode, L2 = S2 = e2.quoteChar === void 0 || e2.quoteChar === null ? '"' : e2.quoteChar;
            if (e2.escapeChar !== void 0 && (L2 = e2.escapeChar), (typeof O2 != "string" || -1 < b2.BAD_DELIMITERS.indexOf(O2)) && (O2 = ","), I2 === O2)
              throw new Error("Comment character same as delimiter");
            I2 === true ? I2 = "#" : (typeof I2 != "string" || -1 < b2.BAD_DELIMITERS.indexOf(I2)) && (I2 = false), x2 !== "\n" && x2 !== "\r" && x2 !== "\r\n" && (x2 = "\n");
            var F2 = 0, z2 = false;
            this.parse = function(r2, t2, i3) {
              if (typeof r2 != "string")
                throw new Error("Input must be a string");
              var n3 = r2.length, e3 = O2.length, s3 = x2.length, a3 = I2.length, o3 = M2(T2), h3 = [], u3 = [], f3 = [], d3 = F2 = 0;
              if (!r2)
                return C2();
              if (A2 || A2 !== false && r2.indexOf(S2) === -1) {
                for (var l3 = r2.split(x2), c3 = 0; c3 < l3.length; c3++) {
                  if (f3 = l3[c3], F2 += f3.length, c3 !== l3.length - 1)
                    F2 += x2.length;
                  else if (i3)
                    return C2();
                  if (!I2 || f3.substring(0, a3) !== I2) {
                    if (o3) {
                      if (h3 = [], k2(f3.split(O2)), R2(), z2)
                        return C2();
                    } else
                      k2(f3.split(O2));
                    if (D2 && D2 <= c3)
                      return h3 = h3.slice(0, D2), C2(true);
                  }
                }
                return C2();
              }
              for (var p3 = r2.indexOf(O2, F2), g3 = r2.indexOf(x2, F2), _3 = new RegExp(j2(L2) + j2(S2), "g"), m3 = r2.indexOf(S2, F2); ; )
                if (r2[F2] !== S2)
                  if (I2 && f3.length === 0 && r2.substring(F2, F2 + a3) === I2) {
                    if (g3 === -1)
                      return C2();
                    F2 = g3 + s3, g3 = r2.indexOf(x2, F2), p3 = r2.indexOf(O2, F2);
                  } else if (p3 !== -1 && (p3 < g3 || g3 === -1))
                    f3.push(r2.substring(F2, p3)), F2 = p3 + e3, p3 = r2.indexOf(O2, F2);
                  else {
                    if (g3 === -1)
                      break;
                    if (f3.push(r2.substring(F2, g3)), w3(g3 + s3), o3 && (R2(), z2))
                      return C2();
                    if (D2 && h3.length >= D2)
                      return C2(true);
                  }
                else
                  for (m3 = F2, F2++; ; ) {
                    if ((m3 = r2.indexOf(S2, m3 + 1)) === -1)
                      return i3 || u3.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: h3.length, index: F2 }), E3();
                    if (m3 === n3 - 1)
                      return E3(r2.substring(F2, m3).replace(_3, S2));
                    if (S2 !== L2 || r2[m3 + 1] !== L2) {
                      if (S2 === L2 || m3 === 0 || r2[m3 - 1] !== L2) {
                        p3 !== -1 && p3 < m3 + 1 && (p3 = r2.indexOf(O2, m3 + 1)), g3 !== -1 && g3 < m3 + 1 && (g3 = r2.indexOf(x2, m3 + 1));
                        var y3 = b3(g3 === -1 ? p3 : Math.min(p3, g3));
                        if (r2.substr(m3 + 1 + y3, e3) === O2) {
                          f3.push(r2.substring(F2, m3).replace(_3, S2)), r2[F2 = m3 + 1 + y3 + e3] !== S2 && (m3 = r2.indexOf(S2, F2)), p3 = r2.indexOf(O2, F2), g3 = r2.indexOf(x2, F2);
                          break;
                        }
                        var v3 = b3(g3);
                        if (r2.substring(m3 + 1 + v3, m3 + 1 + v3 + s3) === x2) {
                          if (f3.push(r2.substring(F2, m3).replace(_3, S2)), w3(m3 + 1 + v3 + s3), p3 = r2.indexOf(O2, F2), m3 = r2.indexOf(S2, F2), o3 && (R2(), z2))
                            return C2();
                          if (D2 && h3.length >= D2)
                            return C2(true);
                          break;
                        }
                        u3.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: h3.length, index: F2 }), m3++;
                      }
                    } else
                      m3++;
                  }
              return E3();
              function k2(e4) {
                h3.push(e4), d3 = F2;
              }
              function b3(e4) {
                var t3 = 0;
                if (e4 !== -1) {
                  var i4 = r2.substring(m3 + 1, e4);
                  i4 && i4.trim() === "" && (t3 = i4.length);
                }
                return t3;
              }
              function E3(e4) {
                return i3 || (e4 === void 0 && (e4 = r2.substring(F2)), f3.push(e4), F2 = n3, k2(f3), o3 && R2()), C2();
              }
              function w3(e4) {
                F2 = e4, k2(f3), f3 = [], g3 = r2.indexOf(x2, F2);
              }
              function C2(e4) {
                return { data: h3, errors: u3, meta: { delimiter: O2, linebreak: x2, aborted: z2, truncated: !!e4, cursor: d3 + (t2 || 0) } };
              }
              function R2() {
                T2(C2()), h3 = [], u3 = [];
              }
            }, this.abort = function() {
              z2 = true;
            }, this.getCharIndex = function() {
              return F2;
            };
          }
          function _2(e2) {
            var t2 = e2.data, i3 = a2[t2.workerId], r2 = false;
            if (t2.error)
              i3.userError(t2.error, t2.file);
            else if (t2.results && t2.results.data) {
              var n3 = { abort: function() {
                r2 = true, m2(t2.workerId, { data: [], errors: [], meta: { aborted: true } });
              }, pause: y2, resume: y2 };
              if (M2(i3.userStep)) {
                for (var s3 = 0; s3 < t2.results.data.length && (i3.userStep({ data: t2.results.data[s3], errors: t2.results.errors, meta: t2.results.meta }, n3), !r2); s3++)
                  ;
                delete t2.results;
              } else
                M2(i3.userChunk) && (i3.userChunk(t2.results, n3, t2.file), delete t2.results);
            }
            t2.finished && !r2 && m2(t2.workerId, t2.results);
          }
          function m2(e2, t2) {
            var i3 = a2[e2];
            M2(i3.userComplete) && i3.userComplete(t2), i3.terminate(), delete a2[e2];
          }
          function y2() {
            throw new Error("Not implemented.");
          }
          function w2(e2) {
            if (typeof e2 != "object" || e2 === null)
              return e2;
            var t2 = Array.isArray(e2) ? [] : {};
            for (var i3 in e2)
              t2[i3] = w2(e2[i3]);
            return t2;
          }
          function v2(e2, t2) {
            return function() {
              e2.apply(t2, arguments);
            };
          }
          function M2(e2) {
            return typeof e2 == "function";
          }
          return o2 && (f2.onmessage = function(e2) {
            var t2 = e2.data;
            b2.WORKER_ID === void 0 && t2 && (b2.WORKER_ID = t2.workerId);
            if (typeof t2.input == "string")
              f2.postMessage({ workerId: b2.WORKER_ID, results: b2.parse(t2.input, t2.config), finished: true });
            else if (f2.File && t2.input instanceof File || t2.input instanceof Object) {
              var i3 = b2.parse(t2.input, t2.config);
              i3 && f2.postMessage({ workerId: b2.WORKER_ID, results: i3, finished: true });
            }
          }), (l2.prototype = Object.create(u2.prototype)).constructor = l2, (c2.prototype = Object.create(u2.prototype)).constructor = c2, (p2.prototype = Object.create(p2.prototype)).constructor = p2, (g2.prototype = Object.create(u2.prototype)).constructor = g2, b2;
        });
      })(papaparse_min);
      function unwrapExports$1(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule$1(fn2, module2) {
        return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
      }
      var assertString_1 = createCommonjsModule$1(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.default = assertString;
        function _typeof(obj) {
          "@babel/helpers - typeof";
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof2(obj2) {
              return typeof obj2;
            };
          } else {
            _typeof = function _typeof2(obj2) {
              return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
            };
          }
          return _typeof(obj);
        }
        function assertString(input) {
          var isString2 = typeof input === "string" || input instanceof String;
          if (!isString2) {
            var invalidType = _typeof(input);
            if (input === null)
              invalidType = "null";
            else if (invalidType === "object")
              invalidType = input.constructor.name;
            throw new TypeError("Expected a string but received a ".concat(invalidType));
          }
        }
        module2.exports = exports3.default;
        module2.exports.default = exports3.default;
      });
      unwrapExports$1(assertString_1);
      var merge_1 = createCommonjsModule$1(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.default = merge2;
        function merge2() {
          var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var defaults2 = arguments.length > 1 ? arguments[1] : void 0;
          for (var key in defaults2) {
            if (typeof obj[key] === "undefined") {
              obj[key] = defaults2[key];
            }
          }
          return obj;
        }
        module2.exports = exports3.default;
        module2.exports.default = exports3.default;
      });
      unwrapExports$1(merge_1);
      var isFQDN_1 = createCommonjsModule$1(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.default = isFQDN;
        var _assertString = _interopRequireDefault2(assertString_1);
        var _merge = _interopRequireDefault2(merge_1);
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        var default_fqdn_options = {
          require_tld: true,
          allow_underscores: false,
          allow_trailing_dot: false,
          allow_numeric_tld: false,
          allow_wildcard: false
        };
        function isFQDN(str, options) {
          (0, _assertString.default)(str);
          options = (0, _merge.default)(options, default_fqdn_options);
          if (options.allow_trailing_dot && str[str.length - 1] === ".") {
            str = str.substring(0, str.length - 1);
          }
          if (options.allow_wildcard === true && str.indexOf("*.") === 0) {
            str = str.substring(2);
          }
          var parts = str.split(".");
          var tld = parts[parts.length - 1];
          if (options.require_tld) {
            if (parts.length < 2) {
              return false;
            }
            if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
              return false;
            }
            if (/\s/.test(tld)) {
              return false;
            }
          }
          if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
            return false;
          }
          return parts.every(function(part) {
            if (part.length > 63) {
              return false;
            }
            if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
              return false;
            }
            if (/[\uff01-\uff5e]/.test(part)) {
              return false;
            }
            if (/^-|-$/.test(part)) {
              return false;
            }
            if (!options.allow_underscores && /_/.test(part)) {
              return false;
            }
            return true;
          });
        }
        module2.exports = exports3.default;
        module2.exports.default = exports3.default;
      });
      unwrapExports$1(isFQDN_1);
      var isIP_1 = createCommonjsModule$1(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.default = isIP;
        var _assertString = _interopRequireDefault2(assertString_1);
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        var IPv4SegmentFormat = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
        var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
        var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
        var IPv6SegmentFormat = "(?:[0-9a-fA-F]{1,4})";
        var IPv6AddressRegExp = new RegExp("^(" + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ")(%[0-9a-zA-Z-.:]{1,})?$");
        function isIP(str) {
          var version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
          (0, _assertString.default)(str);
          version = String(version);
          if (!version) {
            return isIP(str, 4) || isIP(str, 6);
          }
          if (version === "4") {
            if (!IPv4AddressRegExp.test(str)) {
              return false;
            }
            var parts = str.split(".").sort(function(a2, b2) {
              return a2 - b2;
            });
            return parts[3] <= 255;
          }
          if (version === "6") {
            return !!IPv6AddressRegExp.test(str);
          }
          return false;
        }
        module2.exports = exports3.default;
        module2.exports.default = exports3.default;
      });
      unwrapExports$1(isIP_1);
      var isURL_1 = createCommonjsModule$1(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3.default = isURL;
        var _assertString = _interopRequireDefault2(assertString_1);
        var _isFQDN = _interopRequireDefault2(isFQDN_1);
        var _isIP = _interopRequireDefault2(isIP_1);
        var _merge = _interopRequireDefault2(merge_1);
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        function _slicedToArray2(arr, i2) {
          return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
        }
        function _nonIterableRest2() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _unsupportedIterableToArray2(o2, minLen) {
          if (!o2)
            return;
          if (typeof o2 === "string")
            return _arrayLikeToArray2(o2, minLen);
          var n2 = Object.prototype.toString.call(o2).slice(8, -1);
          if (n2 === "Object" && o2.constructor)
            n2 = o2.constructor.name;
          if (n2 === "Map" || n2 === "Set")
            return Array.from(o2);
          if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
            return _arrayLikeToArray2(o2, minLen);
        }
        function _arrayLikeToArray2(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
            arr2[i2] = arr[i2];
          }
          return arr2;
        }
        function _iterableToArrayLimit2(arr, i2) {
          if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
            return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i2 && _arr.length === i2)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null)
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles2(arr) {
          if (Array.isArray(arr))
            return arr;
        }
        var default_url_options = {
          protocols: ["http", "https", "ftp"],
          require_tld: true,
          require_protocol: false,
          require_host: true,
          require_port: false,
          require_valid_protocol: true,
          allow_underscores: false,
          allow_trailing_dot: false,
          allow_protocol_relative_urls: false,
          allow_fragments: true,
          allow_query_components: true,
          validate_length: true
        };
        var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
        function isRegExp(obj) {
          return Object.prototype.toString.call(obj) === "[object RegExp]";
        }
        function checkHost(host, matches) {
          for (var i2 = 0; i2 < matches.length; i2++) {
            var match5 = matches[i2];
            if (host === match5 || isRegExp(match5) && match5.test(host)) {
              return true;
            }
          }
          return false;
        }
        function isURL(url, options) {
          (0, _assertString.default)(url);
          if (!url || /[\s<>]/.test(url)) {
            return false;
          }
          if (url.indexOf("mailto:") === 0) {
            return false;
          }
          options = (0, _merge.default)(options, default_url_options);
          if (options.validate_length && url.length >= 2083) {
            return false;
          }
          if (!options.allow_fragments && url.includes("#")) {
            return false;
          }
          if (!options.allow_query_components && (url.includes("?") || url.includes("&"))) {
            return false;
          }
          var protocol, auth, host, hostname, port, port_str, split, ipv6;
          split = url.split("#");
          url = split.shift();
          split = url.split("?");
          url = split.shift();
          split = url.split("://");
          if (split.length > 1) {
            protocol = split.shift().toLowerCase();
            if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
              return false;
            }
          } else if (options.require_protocol) {
            return false;
          } else if (url.substr(0, 2) === "//") {
            if (!options.allow_protocol_relative_urls) {
              return false;
            }
            split[0] = url.substr(2);
          }
          url = split.join("://");
          if (url === "") {
            return false;
          }
          split = url.split("/");
          url = split.shift();
          if (url === "" && !options.require_host) {
            return true;
          }
          split = url.split("@");
          if (split.length > 1) {
            if (options.disallow_auth) {
              return false;
            }
            if (split[0] === "") {
              return false;
            }
            auth = split.shift();
            if (auth.indexOf(":") >= 0 && auth.split(":").length > 2) {
              return false;
            }
            var _auth$split = auth.split(":"), _auth$split2 = _slicedToArray2(_auth$split, 2), user = _auth$split2[0], password = _auth$split2[1];
            if (user === "" && password === "") {
              return false;
            }
          }
          hostname = split.join("@");
          port_str = null;
          ipv6 = null;
          var ipv6_match = hostname.match(wrapped_ipv6);
          if (ipv6_match) {
            host = "";
            ipv6 = ipv6_match[1];
            port_str = ipv6_match[2] || null;
          } else {
            split = hostname.split(":");
            host = split.shift();
            if (split.length) {
              port_str = split.join(":");
            }
          }
          if (port_str !== null && port_str.length > 0) {
            port = parseInt(port_str, 10);
            if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
              return false;
            }
          } else if (options.require_port) {
            return false;
          }
          if (options.host_whitelist) {
            return checkHost(host, options.host_whitelist);
          }
          if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
            return false;
          }
          host = host || ipv6;
          if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
            return false;
          }
          return true;
        }
        module2.exports = exports3.default;
        module2.exports.default = exports3.default;
      });
      unwrapExports$1(isURL_1);
      var reactDomServer_browser_production_min = {};
      var l = objectAssign, m = react.exports;
      function p$1(a2) {
        for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
          b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
        return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var q = 60106, r = 60107, u = 60108, z = 60114, B = 60109, aa = 60110, ba = 60112, D = 60113, ca = 60120, da = 60115, ea = 60116, fa = 60121, ha = 60117, ia = 60119, ja = 60129, ka = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var E = Symbol.for;
        q = E("react.portal");
        r = E("react.fragment");
        u = E("react.strict_mode");
        z = E("react.profiler");
        B = E("react.provider");
        aa = E("react.context");
        ba = E("react.forward_ref");
        D = E("react.suspense");
        ca = E("react.suspense_list");
        da = E("react.memo");
        ea = E("react.lazy");
        fa = E("react.block");
        ha = E("react.fundamental");
        ia = E("react.scope");
        ja = E("react.debug_trace_mode");
        ka = E("react.legacy_hidden");
      }
      function F(a2) {
        if (a2 == null)
          return null;
        if (typeof a2 === "function")
          return a2.displayName || a2.name || null;
        if (typeof a2 === "string")
          return a2;
        switch (a2) {
          case r:
            return "Fragment";
          case q:
            return "Portal";
          case z:
            return "Profiler";
          case u:
            return "StrictMode";
          case D:
            return "Suspense";
          case ca:
            return "SuspenseList";
        }
        if (typeof a2 === "object")
          switch (a2.$$typeof) {
            case aa:
              return (a2.displayName || "Context") + ".Consumer";
            case B:
              return (a2._context.displayName || "Context") + ".Provider";
            case ba:
              var b2 = a2.render;
              b2 = b2.displayName || b2.name || "";
              return a2.displayName || (b2 !== "" ? "ForwardRef(" + b2 + ")" : "ForwardRef");
            case da:
              return F(a2.type);
            case fa:
              return F(a2._render);
            case ea:
              b2 = a2._payload;
              a2 = a2._init;
              try {
                return F(a2(b2));
              } catch (c2) {
              }
          }
        return null;
      }
      var la = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, ma = {};
      function I(a2, b2) {
        for (var c2 = a2._threadCount | 0; c2 <= b2; c2++)
          a2[c2] = a2._currentValue2, a2._threadCount = c2 + 1;
      }
      function na(a2, b2, c2, d2) {
        if (d2 && (d2 = a2.contextType, typeof d2 === "object" && d2 !== null))
          return I(d2, c2), d2[c2];
        if (a2 = a2.contextTypes) {
          c2 = {};
          for (var f2 in a2)
            c2[f2] = b2[f2];
          b2 = c2;
        } else
          b2 = ma;
        return b2;
      }
      for (var J = new Uint16Array(16), K = 0; 15 > K; K++)
        J[K] = K + 1;
      J[15] = 0;
      var oa = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, pa = Object.prototype.hasOwnProperty, qa = {}, ra = {};
      function sa(a2) {
        if (pa.call(ra, a2))
          return true;
        if (pa.call(qa, a2))
          return false;
        if (oa.test(a2))
          return ra[a2] = true;
        qa[a2] = true;
        return false;
      }
      function ta(a2, b2, c2, d2) {
        if (c2 !== null && c2.type === 0)
          return false;
        switch (typeof b2) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            if (d2)
              return false;
            if (c2 !== null)
              return !c2.acceptsBooleans;
            a2 = a2.toLowerCase().slice(0, 5);
            return a2 !== "data-" && a2 !== "aria-";
          default:
            return false;
        }
      }
      function ua(a2, b2, c2, d2) {
        if (b2 === null || typeof b2 === "undefined" || ta(a2, b2, c2, d2))
          return true;
        if (d2)
          return false;
        if (c2 !== null)
          switch (c2.type) {
            case 3:
              return !b2;
            case 4:
              return b2 === false;
            case 5:
              return isNaN(b2);
            case 6:
              return isNaN(b2) || 1 > b2;
          }
        return false;
      }
      function M(a2, b2, c2, d2, f2, h2, t2) {
        this.acceptsBooleans = b2 === 2 || b2 === 3 || b2 === 4;
        this.attributeName = d2;
        this.attributeNamespace = f2;
        this.mustUseProperty = c2;
        this.propertyName = a2;
        this.type = b2;
        this.sanitizeURL = h2;
        this.removeEmptyString = t2;
      }
      var N = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a2) {
        N[a2] = new M(a2, 0, false, a2, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a2) {
        var b2 = a2[0];
        N[b2] = new M(b2, 1, false, a2[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a2) {
        N[a2] = new M(a2, 2, false, a2.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a2) {
        N[a2] = new M(a2, 2, false, a2, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a2) {
        N[a2] = new M(a2, 3, false, a2.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(a2) {
        N[a2] = new M(a2, 3, true, a2, null, false, false);
      });
      ["capture", "download"].forEach(function(a2) {
        N[a2] = new M(a2, 4, false, a2, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(a2) {
        N[a2] = new M(a2, 6, false, a2, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(a2) {
        N[a2] = new M(a2, 5, false, a2.toLowerCase(), null, false, false);
      });
      var va = /[\-:]([a-z])/g;
      function wa(a2) {
        return a2[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a2) {
        var b2 = a2.replace(va, wa);
        N[b2] = new M(b2, 1, false, a2, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a2) {
        var b2 = a2.replace(va, wa);
        N[b2] = new M(b2, 1, false, a2, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(a2) {
        var b2 = a2.replace(va, wa);
        N[b2] = new M(b2, 1, false, a2, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(a2) {
        N[a2] = new M(a2, 1, false, a2.toLowerCase(), null, false, false);
      });
      N.xlinkHref = new M("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(a2) {
        N[a2] = new M(a2, 1, false, a2.toLowerCase(), null, true, true);
      });
      var xa = /["'&<>]/;
      function O(a2) {
        if (typeof a2 === "boolean" || typeof a2 === "number")
          return "" + a2;
        a2 = "" + a2;
        var b2 = xa.exec(a2);
        if (b2) {
          var c2 = "", d2, f2 = 0;
          for (d2 = b2.index; d2 < a2.length; d2++) {
            switch (a2.charCodeAt(d2)) {
              case 34:
                b2 = "&quot;";
                break;
              case 38:
                b2 = "&amp;";
                break;
              case 39:
                b2 = "&#x27;";
                break;
              case 60:
                b2 = "&lt;";
                break;
              case 62:
                b2 = "&gt;";
                break;
              default:
                continue;
            }
            f2 !== d2 && (c2 += a2.substring(f2, d2));
            f2 = d2 + 1;
            c2 += b2;
          }
          a2 = f2 !== d2 ? c2 + a2.substring(f2, d2) : c2;
        }
        return a2;
      }
      function ya(a2, b2) {
        var c2 = N.hasOwnProperty(a2) ? N[a2] : null;
        var d2;
        if (d2 = a2 !== "style")
          d2 = c2 !== null ? c2.type === 0 : !(2 < a2.length) || a2[0] !== "o" && a2[0] !== "O" || a2[1] !== "n" && a2[1] !== "N" ? false : true;
        if (d2 || ua(a2, b2, c2, false))
          return "";
        if (c2 !== null) {
          a2 = c2.attributeName;
          d2 = c2.type;
          if (d2 === 3 || d2 === 4 && b2 === true)
            return a2 + '=""';
          c2.sanitizeURL && (b2 = "" + b2);
          return a2 + '="' + (O(b2) + '"');
        }
        return sa(a2) ? a2 + '="' + (O(b2) + '"') : "";
      }
      function za(a2, b2) {
        return a2 === b2 && (a2 !== 0 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
      }
      var Aa = typeof Object.is === "function" ? Object.is : za, P = null, Q = null, R = null, S = false, T = false, U = null, V = 0;
      function W() {
        if (P === null)
          throw Error(p$1(321));
        return P;
      }
      function Ba() {
        if (0 < V)
          throw Error(p$1(312));
        return { memoizedState: null, queue: null, next: null };
      }
      function Ca() {
        R === null ? Q === null ? (S = false, Q = R = Ba()) : (S = true, R = Q) : R.next === null ? (S = false, R = R.next = Ba()) : (S = true, R = R.next);
        return R;
      }
      function Da(a2, b2, c2, d2) {
        for (; T; )
          T = false, V += 1, R = null, c2 = a2(b2, d2);
        Ea();
        return c2;
      }
      function Ea() {
        P = null;
        T = false;
        Q = null;
        V = 0;
        R = U = null;
      }
      function Fa(a2, b2) {
        return typeof b2 === "function" ? b2(a2) : b2;
      }
      function Ga(a2, b2, c2) {
        P = W();
        R = Ca();
        if (S) {
          var d2 = R.queue;
          b2 = d2.dispatch;
          if (U !== null && (c2 = U.get(d2), c2 !== void 0)) {
            U.delete(d2);
            d2 = R.memoizedState;
            do
              d2 = a2(d2, c2.action), c2 = c2.next;
            while (c2 !== null);
            R.memoizedState = d2;
            return [d2, b2];
          }
          return [R.memoizedState, b2];
        }
        a2 = a2 === Fa ? typeof b2 === "function" ? b2() : b2 : c2 !== void 0 ? c2(b2) : b2;
        R.memoizedState = a2;
        a2 = R.queue = { last: null, dispatch: null };
        a2 = a2.dispatch = Ha.bind(null, P, a2);
        return [R.memoizedState, a2];
      }
      function Ia(a2, b2) {
        P = W();
        R = Ca();
        b2 = b2 === void 0 ? null : b2;
        if (R !== null) {
          var c2 = R.memoizedState;
          if (c2 !== null && b2 !== null) {
            var d2 = c2[1];
            a:
              if (d2 === null)
                d2 = false;
              else {
                for (var f2 = 0; f2 < d2.length && f2 < b2.length; f2++)
                  if (!Aa(b2[f2], d2[f2])) {
                    d2 = false;
                    break a;
                  }
                d2 = true;
              }
            if (d2)
              return c2[0];
          }
        }
        a2 = a2();
        R.memoizedState = [a2, b2];
        return a2;
      }
      function Ha(a2, b2, c2) {
        if (!(25 > V))
          throw Error(p$1(301));
        if (a2 === P)
          if (T = true, a2 = { action: c2, next: null }, U === null && (U = /* @__PURE__ */ new Map()), c2 = U.get(b2), c2 === void 0)
            U.set(b2, a2);
          else {
            for (b2 = c2; b2.next !== null; )
              b2 = b2.next;
            b2.next = a2;
          }
      }
      function Ja() {
      }
      var X = null, Ka = { readContext: function(a2) {
        var b2 = X.threadID;
        I(a2, b2);
        return a2[b2];
      }, useContext: function(a2) {
        W();
        var b2 = X.threadID;
        I(a2, b2);
        return a2[b2];
      }, useMemo: Ia, useReducer: Ga, useRef: function(a2) {
        P = W();
        R = Ca();
        var b2 = R.memoizedState;
        return b2 === null ? (a2 = { current: a2 }, R.memoizedState = a2) : b2;
      }, useState: function(a2) {
        return Ga(Fa, a2);
      }, useLayoutEffect: function() {
      }, useCallback: function(a2, b2) {
        return Ia(function() {
          return a2;
        }, b2);
      }, useImperativeHandle: Ja, useEffect: Ja, useDebugValue: Ja, useDeferredValue: function(a2) {
        W();
        return a2;
      }, useTransition: function() {
        W();
        return [function(a2) {
          a2();
        }, false];
      }, useOpaqueIdentifier: function() {
        return (X.identifierPrefix || "") + "R:" + (X.uniqueID++).toString(36);
      }, useMutableSource: function(a2, b2) {
        W();
        return b2(a2._source);
      } }, La = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
      function Ma(a2) {
        switch (a2) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      var Na = { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true }, Oa = l({ menuitem: true }, Na), Y = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      }, Pa = ["Webkit", "ms", "Moz", "O"];
      Object.keys(Y).forEach(function(a2) {
        Pa.forEach(function(b2) {
          b2 = b2 + a2.charAt(0).toUpperCase() + a2.substring(1);
          Y[b2] = Y[a2];
        });
      });
      var Qa = /([A-Z])/g, Ra = /^ms-/, Z = m.Children.toArray, Sa = la.ReactCurrentDispatcher, Ta = { listing: true, pre: true, textarea: true }, Ua = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, Va = {}, Wa = {};
      function Xa(a2) {
        if (a2 === void 0 || a2 === null)
          return a2;
        var b2 = "";
        m.Children.forEach(a2, function(a3) {
          a3 != null && (b2 += a3);
        });
        return b2;
      }
      var Ya = Object.prototype.hasOwnProperty, Za = { children: null, dangerouslySetInnerHTML: null, suppressContentEditableWarning: null, suppressHydrationWarning: null };
      function $a(a2, b2) {
        if (a2 === void 0)
          throw Error(p$1(152, F(b2) || "Component"));
      }
      function ab(a2, b2, c2) {
        function d2(d3, h3) {
          var e2 = h3.prototype && h3.prototype.isReactComponent, f3 = na(h3, b2, c2, e2), t2 = [], g2 = false, n2 = { isMounted: function() {
            return false;
          }, enqueueForceUpdate: function() {
            if (t2 === null)
              return null;
          }, enqueueReplaceState: function(a3, c3) {
            g2 = true;
            t2 = [c3];
          }, enqueueSetState: function(a3, c3) {
            if (t2 === null)
              return null;
            t2.push(c3);
          } };
          if (e2) {
            if (e2 = new h3(d3.props, f3, n2), typeof h3.getDerivedStateFromProps === "function") {
              var k2 = h3.getDerivedStateFromProps.call(null, d3.props, e2.state);
              k2 != null && (e2.state = l({}, e2.state, k2));
            }
          } else if (P = {}, e2 = h3(d3.props, f3, n2), e2 = Da(h3, d3.props, e2, f3), e2 == null || e2.render == null) {
            a2 = e2;
            $a(a2, h3);
            return;
          }
          e2.props = d3.props;
          e2.context = f3;
          e2.updater = n2;
          n2 = e2.state;
          n2 === void 0 && (e2.state = n2 = null);
          if (typeof e2.UNSAFE_componentWillMount === "function" || typeof e2.componentWillMount === "function")
            if (typeof e2.componentWillMount === "function" && typeof h3.getDerivedStateFromProps !== "function" && e2.componentWillMount(), typeof e2.UNSAFE_componentWillMount === "function" && typeof h3.getDerivedStateFromProps !== "function" && e2.UNSAFE_componentWillMount(), t2.length) {
              n2 = t2;
              var v2 = g2;
              t2 = null;
              g2 = false;
              if (v2 && n2.length === 1)
                e2.state = n2[0];
              else {
                k2 = v2 ? n2[0] : e2.state;
                var H2 = true;
                for (v2 = v2 ? 1 : 0; v2 < n2.length; v2++) {
                  var x2 = n2[v2];
                  x2 = typeof x2 === "function" ? x2.call(e2, k2, d3.props, f3) : x2;
                  x2 != null && (H2 ? (H2 = false, k2 = l({}, k2, x2)) : l(k2, x2));
                }
                e2.state = k2;
              }
            } else
              t2 = null;
          a2 = e2.render();
          $a(a2, h3);
          if (typeof e2.getChildContext === "function" && (d3 = h3.childContextTypes, typeof d3 === "object")) {
            var y2 = e2.getChildContext();
            for (var A2 in y2)
              if (!(A2 in d3))
                throw Error(p$1(108, F(h3) || "Unknown", A2));
          }
          y2 && (b2 = l({}, b2, y2));
        }
        for (; m.isValidElement(a2); ) {
          var f2 = a2, h2 = f2.type;
          if (typeof h2 !== "function")
            break;
          d2(f2, h2);
        }
        return { child: a2, context: b2 };
      }
      var bb = function() {
        function a2(a3, b3, f2) {
          m.isValidElement(a3) ? a3.type !== r ? a3 = [a3] : (a3 = a3.props.children, a3 = m.isValidElement(a3) ? [a3] : Z(a3)) : a3 = Z(a3);
          a3 = { type: null, domNamespace: La.html, children: a3, childIndex: 0, context: ma, footer: "" };
          var c2 = J[0];
          if (c2 === 0) {
            var d2 = J;
            c2 = d2.length;
            var g2 = 2 * c2;
            if (!(65536 >= g2))
              throw Error(p$1(304));
            var e2 = new Uint16Array(g2);
            e2.set(d2);
            J = e2;
            J[0] = c2 + 1;
            for (d2 = c2; d2 < g2 - 1; d2++)
              J[d2] = d2 + 1;
            J[g2 - 1] = 0;
          } else
            J[0] = J[c2];
          this.threadID = c2;
          this.stack = [a3];
          this.exhausted = false;
          this.currentSelectValue = null;
          this.previousWasTextNode = false;
          this.makeStaticMarkup = b3;
          this.suspenseDepth = 0;
          this.contextIndex = -1;
          this.contextStack = [];
          this.contextValueStack = [];
          this.uniqueID = 0;
          this.identifierPrefix = f2 && f2.identifierPrefix || "";
        }
        var b2 = a2.prototype;
        b2.destroy = function() {
          if (!this.exhausted) {
            this.exhausted = true;
            this.clearProviders();
            var a3 = this.threadID;
            J[a3] = J[0];
            J[0] = a3;
          }
        };
        b2.pushProvider = function(a3) {
          var b3 = ++this.contextIndex, c2 = a3.type._context, h2 = this.threadID;
          I(c2, h2);
          var t2 = c2[h2];
          this.contextStack[b3] = c2;
          this.contextValueStack[b3] = t2;
          c2[h2] = a3.props.value;
        };
        b2.popProvider = function() {
          var a3 = this.contextIndex, b3 = this.contextStack[a3], f2 = this.contextValueStack[a3];
          this.contextStack[a3] = null;
          this.contextValueStack[a3] = null;
          this.contextIndex--;
          b3[this.threadID] = f2;
        };
        b2.clearProviders = function() {
          for (var a3 = this.contextIndex; 0 <= a3; a3--)
            this.contextStack[a3][this.threadID] = this.contextValueStack[a3];
        };
        b2.read = function(a3) {
          if (this.exhausted)
            return null;
          var b3 = X;
          X = this;
          var c2 = Sa.current;
          Sa.current = Ka;
          try {
            for (var h2 = [""], t2 = false; h2[0].length < a3; ) {
              if (this.stack.length === 0) {
                this.exhausted = true;
                var g2 = this.threadID;
                J[g2] = J[0];
                J[0] = g2;
                break;
              }
              var e2 = this.stack[this.stack.length - 1];
              if (t2 || e2.childIndex >= e2.children.length) {
                var L2 = e2.footer;
                L2 !== "" && (this.previousWasTextNode = false);
                this.stack.pop();
                if (e2.type === "select")
                  this.currentSelectValue = null;
                else if (e2.type != null && e2.type.type != null && e2.type.type.$$typeof === B)
                  this.popProvider(e2.type);
                else if (e2.type === D) {
                  this.suspenseDepth--;
                  var G2 = h2.pop();
                  if (t2) {
                    t2 = false;
                    var C2 = e2.fallbackFrame;
                    if (!C2)
                      throw Error(p$1(303));
                    this.stack.push(C2);
                    h2[this.suspenseDepth] += "<!--$!-->";
                    continue;
                  } else
                    h2[this.suspenseDepth] += G2;
                }
                h2[this.suspenseDepth] += L2;
              } else {
                var n2 = e2.children[e2.childIndex++], k2 = "";
                try {
                  k2 += this.render(n2, e2.context, e2.domNamespace);
                } catch (v2) {
                  if (v2 != null && typeof v2.then === "function")
                    throw Error(p$1(294));
                  throw v2;
                } finally {
                }
                h2.length <= this.suspenseDepth && h2.push("");
                h2[this.suspenseDepth] += k2;
              }
            }
            return h2[0];
          } finally {
            Sa.current = c2, X = b3, Ea();
          }
        };
        b2.render = function(a3, b3, f2) {
          if (typeof a3 === "string" || typeof a3 === "number") {
            f2 = "" + a3;
            if (f2 === "")
              return "";
            if (this.makeStaticMarkup)
              return O(f2);
            if (this.previousWasTextNode)
              return "<!-- -->" + O(f2);
            this.previousWasTextNode = true;
            return O(f2);
          }
          b3 = ab(a3, b3, this.threadID);
          a3 = b3.child;
          b3 = b3.context;
          if (a3 === null || a3 === false)
            return "";
          if (!m.isValidElement(a3)) {
            if (a3 != null && a3.$$typeof != null) {
              f2 = a3.$$typeof;
              if (f2 === q)
                throw Error(p$1(257));
              throw Error(p$1(258, f2.toString()));
            }
            a3 = Z(a3);
            this.stack.push({ type: null, domNamespace: f2, children: a3, childIndex: 0, context: b3, footer: "" });
            return "";
          }
          var c2 = a3.type;
          if (typeof c2 === "string")
            return this.renderDOM(a3, b3, f2);
          switch (c2) {
            case ka:
            case ja:
            case u:
            case z:
            case ca:
            case r:
              return a3 = Z(a3.props.children), this.stack.push({
                type: null,
                domNamespace: f2,
                children: a3,
                childIndex: 0,
                context: b3,
                footer: ""
              }), "";
            case D:
              throw Error(p$1(294));
            case ia:
              throw Error(p$1(343));
          }
          if (typeof c2 === "object" && c2 !== null)
            switch (c2.$$typeof) {
              case ba:
                P = {};
                var d2 = c2.render(a3.props, a3.ref);
                d2 = Da(c2.render, a3.props, d2, a3.ref);
                d2 = Z(d2);
                this.stack.push({ type: null, domNamespace: f2, children: d2, childIndex: 0, context: b3, footer: "" });
                return "";
              case da:
                return a3 = [m.createElement(c2.type, l({ ref: a3.ref }, a3.props))], this.stack.push({ type: null, domNamespace: f2, children: a3, childIndex: 0, context: b3, footer: "" }), "";
              case B:
                return c2 = Z(a3.props.children), f2 = { type: a3, domNamespace: f2, children: c2, childIndex: 0, context: b3, footer: "" }, this.pushProvider(a3), this.stack.push(f2), "";
              case aa:
                c2 = a3.type;
                d2 = a3.props;
                var g2 = this.threadID;
                I(c2, g2);
                c2 = Z(d2.children(c2[g2]));
                this.stack.push({ type: a3, domNamespace: f2, children: c2, childIndex: 0, context: b3, footer: "" });
                return "";
              case ha:
                throw Error(p$1(338));
              case ea:
                return c2 = a3.type, d2 = c2._init, c2 = d2(c2._payload), a3 = [m.createElement(c2, l({ ref: a3.ref }, a3.props))], this.stack.push({
                  type: null,
                  domNamespace: f2,
                  children: a3,
                  childIndex: 0,
                  context: b3,
                  footer: ""
                }), "";
            }
          throw Error(p$1(130, c2 == null ? c2 : typeof c2, ""));
        };
        b2.renderDOM = function(a3, b3, f2) {
          var c2 = a3.type.toLowerCase();
          if (!Va.hasOwnProperty(c2)) {
            if (!Ua.test(c2))
              throw Error(p$1(65, c2));
            Va[c2] = true;
          }
          var d2 = a3.props;
          if (c2 === "input")
            d2 = l({ type: void 0 }, d2, { defaultChecked: void 0, defaultValue: void 0, value: d2.value != null ? d2.value : d2.defaultValue, checked: d2.checked != null ? d2.checked : d2.defaultChecked });
          else if (c2 === "textarea") {
            var g2 = d2.value;
            if (g2 == null) {
              g2 = d2.defaultValue;
              var e2 = d2.children;
              if (e2 != null) {
                if (g2 != null)
                  throw Error(p$1(92));
                if (Array.isArray(e2)) {
                  if (!(1 >= e2.length))
                    throw Error(p$1(93));
                  e2 = e2[0];
                }
                g2 = "" + e2;
              }
              g2 == null && (g2 = "");
            }
            d2 = l({}, d2, { value: void 0, children: "" + g2 });
          } else if (c2 === "select")
            this.currentSelectValue = d2.value != null ? d2.value : d2.defaultValue, d2 = l({}, d2, { value: void 0 });
          else if (c2 === "option") {
            e2 = this.currentSelectValue;
            var L2 = Xa(d2.children);
            if (e2 != null) {
              var G2 = d2.value != null ? d2.value + "" : L2;
              g2 = false;
              if (Array.isArray(e2))
                for (var C2 = 0; C2 < e2.length; C2++) {
                  if ("" + e2[C2] === G2) {
                    g2 = true;
                    break;
                  }
                }
              else
                g2 = "" + e2 === G2;
              d2 = l({ selected: void 0, children: void 0 }, d2, { selected: g2, children: L2 });
            }
          }
          if (g2 = d2) {
            if (Oa[c2] && (g2.children != null || g2.dangerouslySetInnerHTML != null))
              throw Error(p$1(137, c2));
            if (g2.dangerouslySetInnerHTML != null) {
              if (g2.children != null)
                throw Error(p$1(60));
              if (!(typeof g2.dangerouslySetInnerHTML === "object" && "__html" in g2.dangerouslySetInnerHTML))
                throw Error(p$1(61));
            }
            if (g2.style != null && typeof g2.style !== "object")
              throw Error(p$1(62));
          }
          g2 = d2;
          e2 = this.makeStaticMarkup;
          L2 = this.stack.length === 1;
          G2 = "<" + a3.type;
          b:
            if (c2.indexOf("-") === -1)
              C2 = typeof g2.is === "string";
            else
              switch (c2) {
                case "annotation-xml":
                case "color-profile":
                case "font-face":
                case "font-face-src":
                case "font-face-uri":
                case "font-face-format":
                case "font-face-name":
                case "missing-glyph":
                  C2 = false;
                  break b;
                default:
                  C2 = true;
              }
          for (w2 in g2)
            if (Ya.call(g2, w2)) {
              var n2 = g2[w2];
              if (n2 != null) {
                if (w2 === "style") {
                  var k2 = void 0, v2 = "", H2 = "";
                  for (k2 in n2)
                    if (n2.hasOwnProperty(k2)) {
                      var x2 = k2.indexOf("--") === 0, y2 = n2[k2];
                      if (y2 != null) {
                        if (x2)
                          var A2 = k2;
                        else if (A2 = k2, Wa.hasOwnProperty(A2))
                          A2 = Wa[A2];
                        else {
                          var cb2 = A2.replace(Qa, "-$1").toLowerCase().replace(Ra, "-ms-");
                          A2 = Wa[A2] = cb2;
                        }
                        v2 += H2 + A2 + ":";
                        H2 = k2;
                        x2 = y2 == null || typeof y2 === "boolean" || y2 === "" ? "" : x2 || typeof y2 !== "number" || y2 === 0 || Y.hasOwnProperty(H2) && Y[H2] ? ("" + y2).trim() : y2 + "px";
                        v2 += x2;
                        H2 = ";";
                      }
                    }
                  n2 = v2 || null;
                }
                k2 = null;
                C2 ? Za.hasOwnProperty(w2) || (k2 = w2, k2 = sa(k2) && n2 != null ? k2 + '="' + (O(n2) + '"') : "") : k2 = ya(w2, n2);
                k2 && (G2 += " " + k2);
              }
            }
          e2 || L2 && (G2 += ' data-reactroot=""');
          var w2 = G2;
          g2 = "";
          Na.hasOwnProperty(c2) ? w2 += "/>" : (w2 += ">", g2 = "</" + a3.type + ">");
          a: {
            e2 = d2.dangerouslySetInnerHTML;
            if (e2 != null) {
              if (e2.__html != null) {
                e2 = e2.__html;
                break a;
              }
            } else if (e2 = d2.children, typeof e2 === "string" || typeof e2 === "number") {
              e2 = O(e2);
              break a;
            }
            e2 = null;
          }
          e2 != null ? (d2 = [], Ta.hasOwnProperty(c2) && e2.charAt(0) === "\n" && (w2 += "\n"), w2 += e2) : d2 = Z(d2.children);
          a3 = a3.type;
          f2 = f2 == null || f2 === "http://www.w3.org/1999/xhtml" ? Ma(a3) : f2 === "http://www.w3.org/2000/svg" && a3 === "foreignObject" ? "http://www.w3.org/1999/xhtml" : f2;
          this.stack.push({ domNamespace: f2, type: c2, children: d2, childIndex: 0, context: b3, footer: g2 });
          this.previousWasTextNode = false;
          return w2;
        };
        return a2;
      }();
      reactDomServer_browser_production_min.renderToNodeStream = function() {
        throw Error(p$1(207));
      };
      reactDomServer_browser_production_min.renderToStaticMarkup = function(a2, b2) {
        a2 = new bb(a2, true, b2);
        try {
          return a2.read(Infinity);
        } finally {
          a2.destroy();
        }
      };
      reactDomServer_browser_production_min.renderToStaticNodeStream = function() {
        throw Error(p$1(208));
      };
      reactDomServer_browser_production_min.renderToString = function(a2, b2) {
        a2 = new bb(a2, false, b2);
        try {
          return a2.read(Infinity);
        } finally {
          a2.destroy();
        }
      };
      reactDomServer_browser_production_min.version = "17.0.2";
      var assign$3 = Object.assign;
      var assign_1 = assign$3;
      function normalizeIdentifier$2(value) {
        return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
      }
      var normalizeIdentifier_1 = normalizeIdentifier$2;
      var fromCharCode$2 = String.fromCharCode;
      var fromCharCode_1 = fromCharCode$2;
      var content$2 = {};
      function markdownLineEnding$i(code) {
        return code < -2;
      }
      var markdownLineEnding_1 = markdownLineEnding$i;
      function markdownSpace$9(code) {
        return code === -2 || code === -1 || code === 32;
      }
      var markdownSpace_1 = markdownSpace$9;
      var markdownSpace$8 = markdownSpace_1;
      function spaceFactory(effects, ok2, type, max2) {
        var limit = max2 ? max2 - 1 : Infinity;
        var size = 0;
        return start;
        function start(code) {
          if (markdownSpace$8(code)) {
            effects.enter(type);
            return prefix(code);
          }
          return ok2(code);
        }
        function prefix(code) {
          if (markdownSpace$8(code) && size++ < limit) {
            effects.consume(code);
            return prefix;
          }
          effects.exit(type);
          return ok2(code);
        }
      }
      var factorySpace$h = spaceFactory;
      Object.defineProperty(content$2, "__esModule", { value: true });
      var markdownLineEnding$h = markdownLineEnding_1;
      var factorySpace$g = factorySpace$h;
      var tokenize$2 = initializeContent;
      function initializeContent(effects) {
        var contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
        var previous2;
        return contentStart;
        function afterContentStartConstruct(code) {
          if (code === null) {
            effects.consume(code);
            return;
          }
          effects.enter("lineEnding");
          effects.consume(code);
          effects.exit("lineEnding");
          return factorySpace$g(effects, contentStart, "linePrefix");
        }
        function paragraphInitial(code) {
          effects.enter("paragraph");
          return lineStart(code);
        }
        function lineStart(code) {
          var token2 = effects.enter("chunkText", {
            contentType: "text",
            previous: previous2
          });
          if (previous2) {
            previous2.next = token2;
          }
          previous2 = token2;
          return data(code);
        }
        function data(code) {
          if (code === null) {
            effects.exit("chunkText");
            effects.exit("paragraph");
            effects.consume(code);
            return;
          }
          if (markdownLineEnding$h(code)) {
            effects.consume(code);
            effects.exit("chunkText");
            return lineStart;
          }
          effects.consume(code);
          return data;
        }
      }
      content$2.tokenize = tokenize$2;
      var document$2 = {};
      var markdownLineEnding$g = markdownLineEnding_1;
      var factorySpace$f = factorySpace$h;
      var partialBlankLine$4 = {
        tokenize: tokenizePartialBlankLine,
        partial: true
      };
      function tokenizePartialBlankLine(effects, ok2, nok) {
        return factorySpace$f(effects, afterWhitespace, "linePrefix");
        function afterWhitespace(code) {
          return code === null || markdownLineEnding$g(code) ? ok2(code) : nok(code);
        }
      }
      var partialBlankLine_1 = partialBlankLine$4;
      Object.defineProperty(document$2, "__esModule", { value: true });
      var markdownLineEnding$f = markdownLineEnding_1;
      var factorySpace$e = factorySpace$h;
      var partialBlankLine$3 = partialBlankLine_1;
      var tokenize$1 = initializeDocument;
      var containerConstruct = {
        tokenize: tokenizeContainer
      };
      var lazyFlowConstruct = {
        tokenize: tokenizeLazyFlow
      };
      function initializeDocument(effects) {
        var self2 = this;
        var stack = [];
        var continued = 0;
        var inspectConstruct = {
          tokenize: tokenizeInspect,
          partial: true
        };
        var inspectResult;
        var childFlow;
        var childToken;
        return start;
        function start(code) {
          if (continued < stack.length) {
            self2.containerState = stack[continued][1];
            return effects.attempt(stack[continued][0].continuation, documentContinue, documentContinued)(code);
          }
          return documentContinued(code);
        }
        function documentContinue(code) {
          continued++;
          return start(code);
        }
        function documentContinued(code) {
          if (inspectResult && inspectResult.flowContinue) {
            return flowStart(code);
          }
          self2.interrupt = childFlow && childFlow.currentConstruct && childFlow.currentConstruct.interruptible;
          self2.containerState = {};
          return effects.attempt(containerConstruct, containerContinue, flowStart)(code);
        }
        function containerContinue(code) {
          stack.push([self2.currentConstruct, self2.containerState]);
          self2.containerState = void 0;
          return documentContinued(code);
        }
        function flowStart(code) {
          if (code === null) {
            exitContainers(0, true);
            effects.consume(code);
            return;
          }
          childFlow = childFlow || self2.parser.flow(self2.now());
          effects.enter("chunkFlow", {
            contentType: "flow",
            previous: childToken,
            _tokenizer: childFlow
          });
          return flowContinue(code);
        }
        function flowContinue(code) {
          if (code === null) {
            continueFlow(effects.exit("chunkFlow"));
            return flowStart(code);
          }
          if (markdownLineEnding$f(code)) {
            effects.consume(code);
            continueFlow(effects.exit("chunkFlow"));
            return effects.check(inspectConstruct, documentAfterPeek);
          }
          effects.consume(code);
          return flowContinue;
        }
        function documentAfterPeek(code) {
          exitContainers(inspectResult.continued, inspectResult && inspectResult.flowEnd);
          continued = 0;
          return start(code);
        }
        function continueFlow(token2) {
          if (childToken)
            childToken.next = token2;
          childToken = token2;
          childFlow.lazy = inspectResult && inspectResult.lazy;
          childFlow.defineSkip(token2.start);
          childFlow.write(self2.sliceStream(token2));
        }
        function exitContainers(size, end) {
          var index2 = stack.length;
          if (childFlow && end) {
            childFlow.write([null]);
            childToken = childFlow = void 0;
          }
          while (index2-- > size) {
            self2.containerState = stack[index2][1];
            stack[index2][0].exit.call(self2, effects);
          }
          stack.length = size;
        }
        function tokenizeInspect(effects2, ok2) {
          var subcontinued = 0;
          inspectResult = {};
          return inspectStart;
          function inspectStart(code) {
            if (subcontinued < stack.length) {
              self2.containerState = stack[subcontinued][1];
              return effects2.attempt(stack[subcontinued][0].continuation, inspectContinue, inspectLess)(code);
            }
            if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
              inspectResult.flowContinue = true;
              return inspectDone(code);
            }
            self2.interrupt = childFlow.currentConstruct && childFlow.currentConstruct.interruptible;
            self2.containerState = {};
            return effects2.attempt(containerConstruct, inspectFlowEnd, inspectDone)(code);
          }
          function inspectContinue(code) {
            subcontinued++;
            return self2.containerState._closeFlow ? inspectFlowEnd(code) : inspectStart(code);
          }
          function inspectLess(code) {
            if (childFlow.currentConstruct && childFlow.currentConstruct.lazy) {
              self2.containerState = {};
              return effects2.attempt(containerConstruct, inspectFlowEnd, effects2.attempt(lazyFlowConstruct, inspectFlowEnd, effects2.check(partialBlankLine$3, inspectFlowEnd, inspectLazy)))(code);
            }
            return inspectFlowEnd(code);
          }
          function inspectLazy(code) {
            subcontinued = stack.length;
            inspectResult.lazy = true;
            inspectResult.flowContinue = true;
            return inspectDone(code);
          }
          function inspectFlowEnd(code) {
            inspectResult.flowEnd = true;
            return inspectDone(code);
          }
          function inspectDone(code) {
            inspectResult.continued = subcontinued;
            self2.interrupt = self2.containerState = void 0;
            return ok2(code);
          }
        }
      }
      function tokenizeContainer(effects, ok2, nok) {
        return factorySpace$e(effects, effects.attempt(this.parser.constructs.document, ok2, nok), "linePrefix", this.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4);
      }
      function tokenizeLazyFlow(effects, ok2, nok) {
        return factorySpace$e(effects, effects.lazy(this.parser.constructs.flow, ok2, nok), "linePrefix", this.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4);
      }
      document$2.tokenize = tokenize$1;
      var flow$1 = {};
      function sizeChunks$2(chunks) {
        var index2 = -1;
        var size = 0;
        while (++index2 < chunks.length) {
          size += typeof chunks[index2] === "string" ? chunks[index2].length : 1;
        }
        return size;
      }
      var sizeChunks_1 = sizeChunks$2;
      var sizeChunks$1 = sizeChunks_1;
      function prefixSize$4(events, type) {
        var tail = events[events.length - 1];
        if (!tail || tail[1].type !== type)
          return 0;
        return sizeChunks$1(tail[2].sliceStream(tail[1]));
      }
      var prefixSize_1 = prefixSize$4;
      var splice$3 = [].splice;
      var splice_1 = splice$3;
      var splice$2 = splice_1;
      function chunkedSplice$6(list2, start, remove, items) {
        var end = list2.length;
        var chunkStart = 0;
        var parameters;
        if (start < 0) {
          start = -start > end ? 0 : end + start;
        } else {
          start = start > end ? end : start;
        }
        remove = remove > 0 ? remove : 0;
        if (items.length < 1e4) {
          parameters = Array.from(items);
          parameters.unshift(start, remove);
          splice$2.apply(list2, parameters);
        } else {
          if (remove)
            splice$2.apply(list2, [start, remove]);
          while (chunkStart < items.length) {
            parameters = items.slice(chunkStart, chunkStart + 1e4);
            parameters.unshift(start, 0);
            splice$2.apply(list2, parameters);
            chunkStart += 1e4;
            start += 1e4;
          }
        }
      }
      var chunkedSplice_1 = chunkedSplice$6;
      var assign$2 = assign_1;
      function shallow$5(object) {
        return assign$2({}, object);
      }
      var shallow_1 = shallow$5;
      var assign$1 = assign_1;
      var chunkedSplice$5 = chunkedSplice_1;
      var shallow$4 = shallow_1;
      function subtokenize$1(events) {
        var jumps = {};
        var index2 = -1;
        var event;
        var lineIndex;
        var otherIndex;
        var otherEvent;
        var parameters;
        var subevents;
        var more;
        while (++index2 < events.length) {
          while (index2 in jumps) {
            index2 = jumps[index2];
          }
          event = events[index2];
          if (index2 && event[1].type === "chunkFlow" && events[index2 - 1][1].type === "listItemPrefix") {
            subevents = event[1]._tokenizer.events;
            otherIndex = 0;
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
              otherIndex += 2;
            }
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
              while (++otherIndex < subevents.length) {
                if (subevents[otherIndex][1].type === "content") {
                  break;
                }
                if (subevents[otherIndex][1].type === "chunkText") {
                  subevents[otherIndex][1].isInFirstContentOfListItem = true;
                  otherIndex++;
                }
              }
            }
          }
          if (event[0] === "enter") {
            if (event[1].contentType) {
              assign$1(jumps, subcontent(events, index2));
              index2 = jumps[index2];
              more = true;
            }
          } else if (event[1]._container || event[1]._movePreviousLineEndings) {
            otherIndex = index2;
            lineIndex = void 0;
            while (otherIndex--) {
              otherEvent = events[otherIndex];
              if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
                if (otherEvent[0] === "enter") {
                  if (lineIndex) {
                    events[lineIndex][1].type = "lineEndingBlank";
                  }
                  otherEvent[1].type = "lineEnding";
                  lineIndex = otherIndex;
                }
              } else {
                break;
              }
            }
            if (lineIndex) {
              event[1].end = shallow$4(events[lineIndex][1].start);
              parameters = events.slice(lineIndex, index2);
              parameters.unshift(event);
              chunkedSplice$5(events, lineIndex, index2 - lineIndex + 1, parameters);
            }
          }
        }
        return !more;
      }
      function subcontent(events, eventIndex) {
        var token2 = events[eventIndex][1];
        var context = events[eventIndex][2];
        var startPosition = eventIndex - 1;
        var startPositions = [];
        var tokenizer = token2._tokenizer || context.parser[token2.contentType](token2.start);
        var childEvents = tokenizer.events;
        var jumps = [];
        var gaps = {};
        var stream;
        var previous2;
        var index2;
        var entered;
        var end;
        var adjust;
        while (token2) {
          while (events[++startPosition][1] !== token2) {
          }
          startPositions.push(startPosition);
          if (!token2._tokenizer) {
            stream = context.sliceStream(token2);
            if (!token2.next) {
              stream.push(null);
            }
            if (previous2) {
              tokenizer.defineSkip(token2.start);
            }
            if (token2.isInFirstContentOfListItem) {
              tokenizer._gfmTasklistFirstContentOfListItem = true;
            }
            tokenizer.write(stream);
            if (token2.isInFirstContentOfListItem) {
              tokenizer._gfmTasklistFirstContentOfListItem = void 0;
            }
          }
          previous2 = token2;
          token2 = token2.next;
        }
        token2 = previous2;
        index2 = childEvents.length;
        while (index2--) {
          if (childEvents[index2][0] === "enter") {
            entered = true;
          } else if (entered && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line) {
            add2(childEvents.slice(index2 + 1, end));
            token2._tokenizer = token2.next = void 0;
            token2 = token2.previous;
            end = index2 + 1;
          }
        }
        tokenizer.events = token2._tokenizer = token2.next = void 0;
        add2(childEvents.slice(0, end));
        index2 = -1;
        adjust = 0;
        while (++index2 < jumps.length) {
          gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
          adjust += jumps[index2][1] - jumps[index2][0] - 1;
        }
        return gaps;
        function add2(slice2) {
          var start = startPositions.pop();
          jumps.unshift([start, start + slice2.length - 1]);
          chunkedSplice$5(events, start, 2, slice2);
        }
      }
      var subtokenize_1 = subtokenize$1;
      var markdownLineEnding$e = markdownLineEnding_1;
      var prefixSize$3 = prefixSize_1;
      var subtokenize = subtokenize_1;
      var factorySpace$d = factorySpace$h;
      var content$1 = {
        tokenize: tokenizeContent,
        resolve: resolveContent,
        interruptible: true,
        lazy: true
      };
      var continuationConstruct = {
        tokenize: tokenizeContinuation,
        partial: true
      };
      function resolveContent(events) {
        subtokenize(events);
        return events;
      }
      function tokenizeContent(effects, ok2) {
        var previous2;
        return start;
        function start(code) {
          effects.enter("content");
          previous2 = effects.enter("chunkContent", {
            contentType: "content"
          });
          return data(code);
        }
        function data(code) {
          if (code === null) {
            return contentEnd(code);
          }
          if (markdownLineEnding$e(code)) {
            return effects.check(continuationConstruct, contentContinue, contentEnd)(code);
          }
          effects.consume(code);
          return data;
        }
        function contentEnd(code) {
          effects.exit("chunkContent");
          effects.exit("content");
          return ok2(code);
        }
        function contentContinue(code) {
          effects.consume(code);
          effects.exit("chunkContent");
          previous2 = previous2.next = effects.enter("chunkContent", {
            contentType: "content",
            previous: previous2
          });
          return data;
        }
      }
      function tokenizeContinuation(effects, ok2, nok) {
        var self2 = this;
        return startLookahead;
        function startLookahead(code) {
          effects.enter("lineEnding");
          effects.consume(code);
          effects.exit("lineEnding");
          return factorySpace$d(effects, prefixed, "linePrefix");
        }
        function prefixed(code) {
          if (code === null || markdownLineEnding$e(code)) {
            return nok(code);
          }
          if (self2.parser.constructs.disable.null.indexOf("codeIndented") > -1 || prefixSize$3(self2.events, "linePrefix") < 4) {
            return effects.interrupt(self2.parser.constructs.flow, nok, ok2)(code);
          }
          return ok2(code);
        }
      }
      var content_1 = content$1;
      Object.defineProperty(flow$1, "__esModule", { value: true });
      var content = content_1;
      var factorySpace$c = factorySpace$h;
      var partialBlankLine$2 = partialBlankLine_1;
      var tokenize = initializeFlow;
      function initializeFlow(effects) {
        var self2 = this;
        var initial = effects.attempt(partialBlankLine$2, atBlankEnding, effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace$c(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), "linePrefix")));
        return initial;
        function atBlankEnding(code) {
          if (code === null) {
            effects.consume(code);
            return;
          }
          effects.enter("lineEndingBlank");
          effects.consume(code);
          effects.exit("lineEndingBlank");
          self2.currentConstruct = void 0;
          return initial;
        }
        function afterConstruct(code) {
          if (code === null) {
            effects.consume(code);
            return;
          }
          effects.enter("lineEnding");
          effects.consume(code);
          effects.exit("lineEnding");
          self2.currentConstruct = void 0;
          return initial;
        }
      }
      flow$1.tokenize = tokenize;
      var text$3 = {};
      Object.defineProperty(text$3, "__esModule", { value: true });
      var assign = assign_1;
      var shallow$3 = shallow_1;
      var text$2 = initializeFactory("text");
      var string$1 = initializeFactory("string");
      var resolver = {
        resolveAll: createResolver()
      };
      function initializeFactory(field) {
        return {
          tokenize: initializeText,
          resolveAll: createResolver(field === "text" ? resolveAllLineSuffixes : void 0)
        };
        function initializeText(effects) {
          var self2 = this;
          var constructs2 = this.parser.constructs[field];
          var text2 = effects.attempt(constructs2, start, notText);
          return start;
          function start(code) {
            return atBreak(code) ? text2(code) : notText(code);
          }
          function notText(code) {
            if (code === null) {
              effects.consume(code);
              return;
            }
            effects.enter("data");
            effects.consume(code);
            return data;
          }
          function data(code) {
            if (atBreak(code)) {
              effects.exit("data");
              return text2(code);
            }
            effects.consume(code);
            return data;
          }
          function atBreak(code) {
            var list2 = constructs2[code];
            var index2 = -1;
            if (code === null) {
              return true;
            }
            if (list2) {
              while (++index2 < list2.length) {
                if (!list2[index2].previous || list2[index2].previous.call(self2, self2.previous)) {
                  return true;
                }
              }
            }
          }
        }
      }
      function createResolver(extraResolver) {
        return resolveAllText;
        function resolveAllText(events, context) {
          var index2 = -1;
          var enter;
          while (++index2 <= events.length) {
            if (enter === void 0) {
              if (events[index2] && events[index2][1].type === "data") {
                enter = index2;
                index2++;
              }
            } else if (!events[index2] || events[index2][1].type !== "data") {
              if (index2 !== enter + 2) {
                events[enter][1].end = events[index2 - 1][1].end;
                events.splice(enter + 2, index2 - enter - 2);
                index2 = enter + 2;
              }
              enter = void 0;
            }
          }
          return extraResolver ? extraResolver(events, context) : events;
        }
      }
      function resolveAllLineSuffixes(events, context) {
        var eventIndex = -1;
        var chunks;
        var data;
        var chunk;
        var index2;
        var bufferIndex;
        var size;
        var tabs;
        var token2;
        while (++eventIndex <= events.length) {
          if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
            data = events[eventIndex - 1][1];
            chunks = context.sliceStream(data);
            index2 = chunks.length;
            bufferIndex = -1;
            size = 0;
            tabs = void 0;
            while (index2--) {
              chunk = chunks[index2];
              if (typeof chunk === "string") {
                bufferIndex = chunk.length;
                while (chunk.charCodeAt(bufferIndex - 1) === 32) {
                  size++;
                  bufferIndex--;
                }
                if (bufferIndex)
                  break;
                bufferIndex = -1;
              } else if (chunk === -2) {
                tabs = true;
                size++;
              } else if (chunk === -1)
                ;
              else {
                index2++;
                break;
              }
            }
            if (size) {
              token2 = {
                type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
                start: {
                  line: data.end.line,
                  column: data.end.column - size,
                  offset: data.end.offset - size,
                  _index: data.start._index + index2,
                  _bufferIndex: index2 ? bufferIndex : data.start._bufferIndex + bufferIndex
                },
                end: shallow$3(data.end)
              };
              data.end = shallow$3(token2.start);
              if (data.start.offset === data.end.offset) {
                assign(data, token2);
              } else {
                events.splice(eventIndex, 0, ["enter", token2, context], ["exit", token2, context]);
                eventIndex += 2;
              }
            }
            eventIndex++;
          }
        }
        return events;
      }
      text$3.resolver = resolver;
      text$3.string = string$1;
      text$3.text = text$2;
      var chunkedSplice$4 = chunkedSplice_1;
      function chunkedPush$2(list2, items) {
        if (list2.length) {
          chunkedSplice$4(list2, list2.length, 0, items);
          return list2;
        }
        return items;
      }
      var chunkedPush_1 = chunkedPush$2;
      function resolveAll$2(constructs2, events, context) {
        var called = [];
        var index2 = -1;
        var resolve;
        while (++index2 < constructs2.length) {
          resolve = constructs2[index2].resolveAll;
          if (resolve && called.indexOf(resolve) < 0) {
            events = resolve(events, context);
            called.push(resolve);
          }
        }
        return events;
      }
      var resolveAll_1 = resolveAll$2;
      var constructs = {};
      function markdownLineEndingOrSpace$8(code) {
        return code < 0 || code === 32;
      }
      var markdownLineEndingOrSpace_1 = markdownLineEndingOrSpace$8;
      var unicodePunctuation$2 = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
      var unicodePunctuationRegex$1 = unicodePunctuation$2;
      var fromCharCode$1 = fromCharCode_1;
      function regexCheck$8(regex) {
        return check;
        function check(code) {
          return regex.test(fromCharCode$1(code));
        }
      }
      var regexCheck_1 = regexCheck$8;
      var unicodePunctuationRegex = unicodePunctuationRegex$1;
      var regexCheck$7 = regexCheck_1;
      var unicodePunctuation$1 = regexCheck$7(unicodePunctuationRegex);
      var unicodePunctuation_1 = unicodePunctuation$1;
      var regexCheck$6 = regexCheck_1;
      var unicodeWhitespace$1 = regexCheck$6(/\s/);
      var unicodeWhitespace_1 = unicodeWhitespace$1;
      var markdownLineEndingOrSpace$7 = markdownLineEndingOrSpace_1;
      var unicodePunctuation = unicodePunctuation_1;
      var unicodeWhitespace = unicodeWhitespace_1;
      function classifyCharacter$1(code) {
        if (code === null || markdownLineEndingOrSpace$7(code) || unicodeWhitespace(code)) {
          return 1;
        }
        if (unicodePunctuation(code)) {
          return 2;
        }
      }
      var classifyCharacter_1 = classifyCharacter$1;
      function movePoint$1(point2, offset2) {
        point2.column += offset2;
        point2.offset += offset2;
        point2._bufferIndex += offset2;
        return point2;
      }
      var movePoint_1 = movePoint$1;
      var chunkedPush$1 = chunkedPush_1;
      var chunkedSplice$3 = chunkedSplice_1;
      var classifyCharacter = classifyCharacter_1;
      var movePoint = movePoint_1;
      var resolveAll$1 = resolveAll_1;
      var shallow$2 = shallow_1;
      var attention$1 = {
        name: "attention",
        tokenize: tokenizeAttention,
        resolveAll: resolveAllAttention
      };
      function resolveAllAttention(events, context) {
        var index2 = -1;
        var open;
        var group;
        var text2;
        var openingSequence;
        var closingSequence;
        var use;
        var nextEvents;
        var offset2;
        while (++index2 < events.length) {
          if (events[index2][0] === "enter" && events[index2][1].type === "attentionSequence" && events[index2][1]._close) {
            open = index2;
            while (open--) {
              if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {
                if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) {
                  continue;
                }
                use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;
                openingSequence = {
                  type: use > 1 ? "strongSequence" : "emphasisSequence",
                  start: movePoint(shallow$2(events[open][1].end), -use),
                  end: shallow$2(events[open][1].end)
                };
                closingSequence = {
                  type: use > 1 ? "strongSequence" : "emphasisSequence",
                  start: shallow$2(events[index2][1].start),
                  end: movePoint(shallow$2(events[index2][1].start), use)
                };
                text2 = {
                  type: use > 1 ? "strongText" : "emphasisText",
                  start: shallow$2(events[open][1].end),
                  end: shallow$2(events[index2][1].start)
                };
                group = {
                  type: use > 1 ? "strong" : "emphasis",
                  start: shallow$2(openingSequence.start),
                  end: shallow$2(closingSequence.end)
                };
                events[open][1].end = shallow$2(openingSequence.start);
                events[index2][1].start = shallow$2(closingSequence.end);
                nextEvents = [];
                if (events[open][1].end.offset - events[open][1].start.offset) {
                  nextEvents = chunkedPush$1(nextEvents, [
                    ["enter", events[open][1], context],
                    ["exit", events[open][1], context]
                  ]);
                }
                nextEvents = chunkedPush$1(nextEvents, [
                  ["enter", group, context],
                  ["enter", openingSequence, context],
                  ["exit", openingSequence, context],
                  ["enter", text2, context]
                ]);
                nextEvents = chunkedPush$1(nextEvents, resolveAll$1(context.parser.constructs.insideSpan.null, events.slice(open + 1, index2), context));
                nextEvents = chunkedPush$1(nextEvents, [
                  ["exit", text2, context],
                  ["enter", closingSequence, context],
                  ["exit", closingSequence, context],
                  ["exit", group, context]
                ]);
                if (events[index2][1].end.offset - events[index2][1].start.offset) {
                  offset2 = 2;
                  nextEvents = chunkedPush$1(nextEvents, [
                    ["enter", events[index2][1], context],
                    ["exit", events[index2][1], context]
                  ]);
                } else {
                  offset2 = 0;
                }
                chunkedSplice$3(events, open - 1, index2 - open + 3, nextEvents);
                index2 = open + nextEvents.length - offset2 - 2;
                break;
              }
            }
          }
        }
        index2 = -1;
        while (++index2 < events.length) {
          if (events[index2][1].type === "attentionSequence") {
            events[index2][1].type = "data";
          }
        }
        return events;
      }
      function tokenizeAttention(effects, ok2) {
        var before = classifyCharacter(this.previous);
        var marker;
        return start;
        function start(code) {
          effects.enter("attentionSequence");
          marker = code;
          return sequence(code);
        }
        function sequence(code) {
          var token2;
          var after;
          var open;
          var close;
          if (code === marker) {
            effects.consume(code);
            return sequence;
          }
          token2 = effects.exit("attentionSequence");
          after = classifyCharacter(code);
          open = !after || after === 2 && before;
          close = !before || before === 2 && after;
          token2._open = marker === 42 ? open : open && (before || !close);
          token2._close = marker === 42 ? close : close && (after || !open);
          return ok2(code);
        }
      }
      var attention_1 = attention$1;
      var regexCheck$5 = regexCheck_1;
      var asciiAlpha$3 = regexCheck$5(/[A-Za-z]/);
      var asciiAlpha_1 = asciiAlpha$3;
      var regexCheck$4 = regexCheck_1;
      var asciiAlphanumeric$4 = regexCheck$4(/[\dA-Za-z]/);
      var asciiAlphanumeric_1 = asciiAlphanumeric$4;
      var regexCheck$3 = regexCheck_1;
      var asciiAtext$1 = regexCheck$3(/[#-'*+\--9=?A-Z^-~]/);
      var asciiAtext_1 = asciiAtext$1;
      function asciiControl$2(code) {
        return code < 32 || code === 127;
      }
      var asciiControl_1 = asciiControl$2;
      var asciiAlpha$2 = asciiAlpha_1;
      var asciiAlphanumeric$3 = asciiAlphanumeric_1;
      var asciiAtext = asciiAtext_1;
      var asciiControl$1 = asciiControl_1;
      var autolink$1 = {
        name: "autolink",
        tokenize: tokenizeAutolink
      };
      function tokenizeAutolink(effects, ok2, nok) {
        var size = 1;
        return start;
        function start(code) {
          effects.enter("autolink");
          effects.enter("autolinkMarker");
          effects.consume(code);
          effects.exit("autolinkMarker");
          effects.enter("autolinkProtocol");
          return open;
        }
        function open(code) {
          if (asciiAlpha$2(code)) {
            effects.consume(code);
            return schemeOrEmailAtext;
          }
          return asciiAtext(code) ? emailAtext(code) : nok(code);
        }
        function schemeOrEmailAtext(code) {
          return code === 43 || code === 45 || code === 46 || asciiAlphanumeric$3(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);
        }
        function schemeInsideOrEmailAtext(code) {
          if (code === 58) {
            effects.consume(code);
            return urlInside;
          }
          if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric$3(code)) && size++ < 32) {
            effects.consume(code);
            return schemeInsideOrEmailAtext;
          }
          return emailAtext(code);
        }
        function urlInside(code) {
          if (code === 62) {
            effects.exit("autolinkProtocol");
            return end(code);
          }
          if (code === 32 || code === 60 || asciiControl$1(code)) {
            return nok(code);
          }
          effects.consume(code);
          return urlInside;
        }
        function emailAtext(code) {
          if (code === 64) {
            effects.consume(code);
            size = 0;
            return emailAtSignOrDot;
          }
          if (asciiAtext(code)) {
            effects.consume(code);
            return emailAtext;
          }
          return nok(code);
        }
        function emailAtSignOrDot(code) {
          return asciiAlphanumeric$3(code) ? emailLabel(code) : nok(code);
        }
        function emailLabel(code) {
          if (code === 46) {
            effects.consume(code);
            size = 0;
            return emailAtSignOrDot;
          }
          if (code === 62) {
            effects.exit("autolinkProtocol").type = "autolinkEmail";
            return end(code);
          }
          return emailValue(code);
        }
        function emailValue(code) {
          if ((code === 45 || asciiAlphanumeric$3(code)) && size++ < 63) {
            effects.consume(code);
            return code === 45 ? emailValue : emailLabel;
          }
          return nok(code);
        }
        function end(code) {
          effects.enter("autolinkMarker");
          effects.consume(code);
          effects.exit("autolinkMarker");
          effects.exit("autolink");
          return ok2;
        }
      }
      var autolink_1 = autolink$1;
      var markdownSpace$7 = markdownSpace_1;
      var factorySpace$b = factorySpace$h;
      var blockQuote$1 = {
        name: "blockQuote",
        tokenize: tokenizeBlockQuoteStart,
        continuation: {
          tokenize: tokenizeBlockQuoteContinuation
        },
        exit
      };
      function tokenizeBlockQuoteStart(effects, ok2, nok) {
        var self2 = this;
        return start;
        function start(code) {
          if (code === 62) {
            if (!self2.containerState.open) {
              effects.enter("blockQuote", {
                _container: true
              });
              self2.containerState.open = true;
            }
            effects.enter("blockQuotePrefix");
            effects.enter("blockQuoteMarker");
            effects.consume(code);
            effects.exit("blockQuoteMarker");
            return after;
          }
          return nok(code);
        }
        function after(code) {
          if (markdownSpace$7(code)) {
            effects.enter("blockQuotePrefixWhitespace");
            effects.consume(code);
            effects.exit("blockQuotePrefixWhitespace");
            effects.exit("blockQuotePrefix");
            return ok2;
          }
          effects.exit("blockQuotePrefix");
          return ok2(code);
        }
      }
      function tokenizeBlockQuoteContinuation(effects, ok2, nok) {
        return factorySpace$b(effects, effects.attempt(blockQuote$1, ok2, nok), "linePrefix", this.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4);
      }
      function exit(effects) {
        effects.exit("blockQuote");
      }
      var blockQuote_1 = blockQuote$1;
      var regexCheck$2 = regexCheck_1;
      var asciiPunctuation$1 = regexCheck$2(/[!-/:-@[-`{-~]/);
      var asciiPunctuation_1 = asciiPunctuation$1;
      var asciiPunctuation = asciiPunctuation_1;
      var characterEscape$1 = {
        name: "characterEscape",
        tokenize: tokenizeCharacterEscape
      };
      function tokenizeCharacterEscape(effects, ok2, nok) {
        return start;
        function start(code) {
          effects.enter("characterEscape");
          effects.enter("escapeMarker");
          effects.consume(code);
          effects.exit("escapeMarker");
          return open;
        }
        function open(code) {
          if (asciiPunctuation(code)) {
            effects.enter("characterEscapeValue");
            effects.consume(code);
            effects.exit("characterEscapeValue");
            effects.exit("characterEscape");
            return ok2;
          }
          return nok(code);
        }
      }
      var characterEscape_1 = characterEscape$1;
      var el;
      var semicolon = 59;
      var decodeEntity_browser = decodeEntity$1;
      function decodeEntity$1(characters) {
        var entity = "&" + characters + ";";
        var char;
        el = el || document.createElement("i");
        el.innerHTML = entity;
        char = el.textContent;
        if (char.charCodeAt(char.length - 1) === semicolon && characters !== "semi") {
          return false;
        }
        return char === entity ? false : char;
      }
      var regexCheck$1 = regexCheck_1;
      var asciiDigit$2 = regexCheck$1(/\d/);
      var asciiDigit_1 = asciiDigit$2;
      var regexCheck = regexCheck_1;
      var asciiHexDigit$1 = regexCheck(/[\dA-Fa-f]/);
      var asciiHexDigit_1 = asciiHexDigit$1;
      var decodeEntity = decodeEntity_browser;
      var asciiAlphanumeric$2 = asciiAlphanumeric_1;
      var asciiDigit$1 = asciiDigit_1;
      var asciiHexDigit = asciiHexDigit_1;
      function _interopDefaultLegacy$1(e2) {
        return e2 && typeof e2 === "object" && "default" in e2 ? e2 : { default: e2 };
      }
      var decodeEntity__default = _interopDefaultLegacy$1(decodeEntity);
      var characterReference$1 = {
        name: "characterReference",
        tokenize: tokenizeCharacterReference
      };
      function tokenizeCharacterReference(effects, ok2, nok) {
        var self2 = this;
        var size = 0;
        var max2;
        var test;
        return start;
        function start(code) {
          effects.enter("characterReference");
          effects.enter("characterReferenceMarker");
          effects.consume(code);
          effects.exit("characterReferenceMarker");
          return open;
        }
        function open(code) {
          if (code === 35) {
            effects.enter("characterReferenceMarkerNumeric");
            effects.consume(code);
            effects.exit("characterReferenceMarkerNumeric");
            return numeric;
          }
          effects.enter("characterReferenceValue");
          max2 = 31;
          test = asciiAlphanumeric$2;
          return value(code);
        }
        function numeric(code) {
          if (code === 88 || code === 120) {
            effects.enter("characterReferenceMarkerHexadecimal");
            effects.consume(code);
            effects.exit("characterReferenceMarkerHexadecimal");
            effects.enter("characterReferenceValue");
            max2 = 6;
            test = asciiHexDigit;
            return value;
          }
          effects.enter("characterReferenceValue");
          max2 = 7;
          test = asciiDigit$1;
          return value(code);
        }
        function value(code) {
          var token2;
          if (code === 59 && size) {
            token2 = effects.exit("characterReferenceValue");
            if (test === asciiAlphanumeric$2 && !decodeEntity__default["default"](self2.sliceSerialize(token2))) {
              return nok(code);
            }
            effects.enter("characterReferenceMarker");
            effects.consume(code);
            effects.exit("characterReferenceMarker");
            effects.exit("characterReference");
            return ok2;
          }
          if (test(code) && size++ < max2) {
            effects.consume(code);
            return value;
          }
          return nok(code);
        }
      }
      var characterReference_1 = characterReference$1;
      var markdownLineEnding$d = markdownLineEnding_1;
      var markdownLineEndingOrSpace$6 = markdownLineEndingOrSpace_1;
      var prefixSize$2 = prefixSize_1;
      var factorySpace$a = factorySpace$h;
      var codeFenced$1 = {
        name: "codeFenced",
        tokenize: tokenizeCodeFenced,
        concrete: true
      };
      function tokenizeCodeFenced(effects, ok2, nok) {
        var self2 = this;
        var closingFenceConstruct = {
          tokenize: tokenizeClosingFence,
          partial: true
        };
        var initialPrefix = prefixSize$2(this.events, "linePrefix");
        var sizeOpen = 0;
        var marker;
        return start;
        function start(code) {
          effects.enter("codeFenced");
          effects.enter("codeFencedFence");
          effects.enter("codeFencedFenceSequence");
          marker = code;
          return sequenceOpen(code);
        }
        function sequenceOpen(code) {
          if (code === marker) {
            effects.consume(code);
            sizeOpen++;
            return sequenceOpen;
          }
          effects.exit("codeFencedFenceSequence");
          return sizeOpen < 3 ? nok(code) : factorySpace$a(effects, infoOpen, "whitespace")(code);
        }
        function infoOpen(code) {
          if (code === null || markdownLineEnding$d(code)) {
            return openAfter(code);
          }
          effects.enter("codeFencedFenceInfo");
          effects.enter("chunkString", {
            contentType: "string"
          });
          return info2(code);
        }
        function info2(code) {
          if (code === null || markdownLineEndingOrSpace$6(code)) {
            effects.exit("chunkString");
            effects.exit("codeFencedFenceInfo");
            return factorySpace$a(effects, infoAfter, "whitespace")(code);
          }
          if (code === 96 && code === marker)
            return nok(code);
          effects.consume(code);
          return info2;
        }
        function infoAfter(code) {
          if (code === null || markdownLineEnding$d(code)) {
            return openAfter(code);
          }
          effects.enter("codeFencedFenceMeta");
          effects.enter("chunkString", {
            contentType: "string"
          });
          return meta(code);
        }
        function meta(code) {
          if (code === null || markdownLineEnding$d(code)) {
            effects.exit("chunkString");
            effects.exit("codeFencedFenceMeta");
            return openAfter(code);
          }
          if (code === 96 && code === marker)
            return nok(code);
          effects.consume(code);
          return meta;
        }
        function openAfter(code) {
          effects.exit("codeFencedFence");
          return self2.interrupt ? ok2(code) : content2(code);
        }
        function content2(code) {
          if (code === null) {
            return after(code);
          }
          if (markdownLineEnding$d(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return effects.attempt(closingFenceConstruct, after, initialPrefix ? factorySpace$a(effects, content2, "linePrefix", initialPrefix + 1) : content2);
          }
          effects.enter("codeFlowValue");
          return contentContinue(code);
        }
        function contentContinue(code) {
          if (code === null || markdownLineEnding$d(code)) {
            effects.exit("codeFlowValue");
            return content2(code);
          }
          effects.consume(code);
          return contentContinue;
        }
        function after(code) {
          effects.exit("codeFenced");
          return ok2(code);
        }
        function tokenizeClosingFence(effects2, ok3, nok2) {
          var size = 0;
          return factorySpace$a(effects2, closingSequenceStart, "linePrefix", this.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4);
          function closingSequenceStart(code) {
            effects2.enter("codeFencedFence");
            effects2.enter("codeFencedFenceSequence");
            return closingSequence(code);
          }
          function closingSequence(code) {
            if (code === marker) {
              effects2.consume(code);
              size++;
              return closingSequence;
            }
            if (size < sizeOpen)
              return nok2(code);
            effects2.exit("codeFencedFenceSequence");
            return factorySpace$a(effects2, closingSequenceEnd, "whitespace")(code);
          }
          function closingSequenceEnd(code) {
            if (code === null || markdownLineEnding$d(code)) {
              effects2.exit("codeFencedFence");
              return ok3(code);
            }
            return nok2(code);
          }
        }
      }
      var codeFenced_1 = codeFenced$1;
      var markdownLineEnding$c = markdownLineEnding_1;
      var chunkedSplice$2 = chunkedSplice_1;
      var prefixSize$1 = prefixSize_1;
      var factorySpace$9 = factorySpace$h;
      var codeIndented$1 = {
        name: "codeIndented",
        tokenize: tokenizeCodeIndented,
        resolve: resolveCodeIndented
      };
      var indentedContentConstruct = {
        tokenize: tokenizeIndentedContent,
        partial: true
      };
      function resolveCodeIndented(events, context) {
        var code = {
          type: "codeIndented",
          start: events[0][1].start,
          end: events[events.length - 1][1].end
        };
        chunkedSplice$2(events, 0, 0, [["enter", code, context]]);
        chunkedSplice$2(events, events.length, 0, [["exit", code, context]]);
        return events;
      }
      function tokenizeCodeIndented(effects, ok2, nok) {
        return effects.attempt(indentedContentConstruct, afterPrefix, nok);
        function afterPrefix(code) {
          if (code === null) {
            return ok2(code);
          }
          if (markdownLineEnding$c(code)) {
            return effects.attempt(indentedContentConstruct, afterPrefix, ok2)(code);
          }
          effects.enter("codeFlowValue");
          return content2(code);
        }
        function content2(code) {
          if (code === null || markdownLineEnding$c(code)) {
            effects.exit("codeFlowValue");
            return afterPrefix(code);
          }
          effects.consume(code);
          return content2;
        }
      }
      function tokenizeIndentedContent(effects, ok2, nok) {
        var self2 = this;
        return factorySpace$9(effects, afterPrefix, "linePrefix", 4 + 1);
        function afterPrefix(code) {
          if (markdownLineEnding$c(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return factorySpace$9(effects, afterPrefix, "linePrefix", 4 + 1);
          }
          return prefixSize$1(self2.events, "linePrefix") < 4 ? nok(code) : ok2(code);
        }
      }
      var codeIndented_1 = codeIndented$1;
      var markdownLineEnding$b = markdownLineEnding_1;
      var codeText$1 = {
        name: "codeText",
        tokenize: tokenizeCodeText,
        resolve: resolveCodeText,
        previous
      };
      function resolveCodeText(events) {
        var tailExitIndex = events.length - 4;
        var headEnterIndex = 3;
        var index2;
        var enter;
        if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
          index2 = headEnterIndex;
          while (++index2 < tailExitIndex) {
            if (events[index2][1].type === "codeTextData") {
              events[tailExitIndex][1].type = events[headEnterIndex][1].type = "codeTextPadding";
              headEnterIndex += 2;
              tailExitIndex -= 2;
              break;
            }
          }
        }
        index2 = headEnterIndex - 1;
        tailExitIndex++;
        while (++index2 <= tailExitIndex) {
          if (enter === void 0) {
            if (index2 !== tailExitIndex && events[index2][1].type !== "lineEnding") {
              enter = index2;
            }
          } else if (index2 === tailExitIndex || events[index2][1].type === "lineEnding") {
            events[enter][1].type = "codeTextData";
            if (index2 !== enter + 2) {
              events[enter][1].end = events[index2 - 1][1].end;
              events.splice(enter + 2, index2 - enter - 2);
              tailExitIndex -= index2 - enter - 2;
              index2 = enter + 2;
            }
            enter = void 0;
          }
        }
        return events;
      }
      function previous(code) {
        return code !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
      }
      function tokenizeCodeText(effects, ok2, nok) {
        var sizeOpen = 0;
        var size;
        var token2;
        return start;
        function start(code) {
          effects.enter("codeText");
          effects.enter("codeTextSequence");
          return openingSequence(code);
        }
        function openingSequence(code) {
          if (code === 96) {
            effects.consume(code);
            sizeOpen++;
            return openingSequence;
          }
          effects.exit("codeTextSequence");
          return gap(code);
        }
        function gap(code) {
          if (code === null) {
            return nok(code);
          }
          if (code === 96) {
            token2 = effects.enter("codeTextSequence");
            size = 0;
            return closingSequence(code);
          }
          if (code === 32) {
            effects.enter("space");
            effects.consume(code);
            effects.exit("space");
            return gap;
          }
          if (markdownLineEnding$b(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return gap;
          }
          effects.enter("codeTextData");
          return data(code);
        }
        function data(code) {
          if (code === null || code === 32 || code === 96 || markdownLineEnding$b(code)) {
            effects.exit("codeTextData");
            return gap(code);
          }
          effects.consume(code);
          return data;
        }
        function closingSequence(code) {
          if (code === 96) {
            effects.consume(code);
            size++;
            return closingSequence;
          }
          if (size === sizeOpen) {
            effects.exit("codeTextSequence");
            effects.exit("codeText");
            return ok2(code);
          }
          token2.type = "codeTextData";
          return data(code);
        }
      }
      var codeText_1 = codeText$1;
      var asciiControl = asciiControl_1;
      var markdownLineEndingOrSpace$5 = markdownLineEndingOrSpace_1;
      var markdownLineEnding$a = markdownLineEnding_1;
      function destinationFactory(effects, ok2, nok, type, literalType, literalMarkerType, rawType, stringType, max2) {
        var limit = max2 || Infinity;
        var balance = 0;
        return start;
        function start(code) {
          if (code === 60) {
            effects.enter(type);
            effects.enter(literalType);
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            return destinationEnclosedBefore;
          }
          if (asciiControl(code) || code === 41) {
            return nok(code);
          }
          effects.enter(type);
          effects.enter(rawType);
          effects.enter(stringType);
          effects.enter("chunkString", {
            contentType: "string"
          });
          return destinationRaw(code);
        }
        function destinationEnclosedBefore(code) {
          if (code === 62) {
            effects.enter(literalMarkerType);
            effects.consume(code);
            effects.exit(literalMarkerType);
            effects.exit(literalType);
            effects.exit(type);
            return ok2;
          }
          effects.enter(stringType);
          effects.enter("chunkString", {
            contentType: "string"
          });
          return destinationEnclosed(code);
        }
        function destinationEnclosed(code) {
          if (code === 62) {
            effects.exit("chunkString");
            effects.exit(stringType);
            return destinationEnclosedBefore(code);
          }
          if (code === null || code === 60 || markdownLineEnding$a(code)) {
            return nok(code);
          }
          effects.consume(code);
          return code === 92 ? destinationEnclosedEscape : destinationEnclosed;
        }
        function destinationEnclosedEscape(code) {
          if (code === 60 || code === 62 || code === 92) {
            effects.consume(code);
            return destinationEnclosed;
          }
          return destinationEnclosed(code);
        }
        function destinationRaw(code) {
          if (code === 40) {
            if (++balance > limit)
              return nok(code);
            effects.consume(code);
            return destinationRaw;
          }
          if (code === 41) {
            if (!balance--) {
              effects.exit("chunkString");
              effects.exit(stringType);
              effects.exit(rawType);
              effects.exit(type);
              return ok2(code);
            }
            effects.consume(code);
            return destinationRaw;
          }
          if (code === null || markdownLineEndingOrSpace$5(code)) {
            if (balance)
              return nok(code);
            effects.exit("chunkString");
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok2(code);
          }
          if (asciiControl(code))
            return nok(code);
          effects.consume(code);
          return code === 92 ? destinationRawEscape : destinationRaw;
        }
        function destinationRawEscape(code) {
          if (code === 40 || code === 41 || code === 92) {
            effects.consume(code);
            return destinationRaw;
          }
          return destinationRaw(code);
        }
      }
      var factoryDestination$2 = destinationFactory;
      var markdownLineEnding$9 = markdownLineEnding_1;
      var markdownSpace$6 = markdownSpace_1;
      function labelFactory(effects, ok2, nok, type, markerType, stringType) {
        var self2 = this;
        var size = 0;
        var data;
        return start;
        function start(code) {
          effects.enter(type);
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          effects.enter(stringType);
          return atBreak;
        }
        function atBreak(code) {
          if (code === null || code === 91 || code === 93 && !data || code === 94 && !size && "_hiddenFootnoteSupport" in self2.parser.constructs || size > 999) {
            return nok(code);
          }
          if (code === 93) {
            effects.exit(stringType);
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok2;
          }
          if (markdownLineEnding$9(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return atBreak;
          }
          effects.enter("chunkString", {
            contentType: "string"
          });
          return label(code);
        }
        function label(code) {
          if (code === null || code === 91 || code === 93 || markdownLineEnding$9(code) || size++ > 999) {
            effects.exit("chunkString");
            return atBreak(code);
          }
          effects.consume(code);
          data = data || !markdownSpace$6(code);
          return code === 92 ? labelEscape : label;
        }
        function labelEscape(code) {
          if (code === 91 || code === 92 || code === 93) {
            effects.consume(code);
            size++;
            return label;
          }
          return label(code);
        }
      }
      var factoryLabel$2 = labelFactory;
      var markdownLineEnding$8 = markdownLineEnding_1;
      var markdownSpace$5 = markdownSpace_1;
      var factorySpace$8 = factorySpace$h;
      function whitespaceFactory(effects, ok2) {
        var seen;
        return start;
        function start(code) {
          if (markdownLineEnding$8(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            seen = true;
            return start;
          }
          if (markdownSpace$5(code)) {
            return factorySpace$8(effects, start, seen ? "linePrefix" : "lineSuffix")(code);
          }
          return ok2(code);
        }
      }
      var factoryWhitespace$2 = whitespaceFactory;
      var markdownLineEnding$7 = markdownLineEnding_1;
      var factorySpace$7 = factorySpace$h;
      function titleFactory(effects, ok2, nok, type, markerType, stringType) {
        var marker;
        return start;
        function start(code) {
          effects.enter(type);
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          marker = code === 40 ? 41 : code;
          return atFirstTitleBreak;
        }
        function atFirstTitleBreak(code) {
          if (code === marker) {
            effects.enter(markerType);
            effects.consume(code);
            effects.exit(markerType);
            effects.exit(type);
            return ok2;
          }
          effects.enter(stringType);
          return atTitleBreak(code);
        }
        function atTitleBreak(code) {
          if (code === marker) {
            effects.exit(stringType);
            return atFirstTitleBreak(marker);
          }
          if (code === null) {
            return nok(code);
          }
          if (markdownLineEnding$7(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return factorySpace$7(effects, atTitleBreak, "linePrefix");
          }
          effects.enter("chunkString", {
            contentType: "string"
          });
          return title(code);
        }
        function title(code) {
          if (code === marker || code === null || markdownLineEnding$7(code)) {
            effects.exit("chunkString");
            return atTitleBreak(code);
          }
          effects.consume(code);
          return code === 92 ? titleEscape : title;
        }
        function titleEscape(code) {
          if (code === marker || code === 92) {
            effects.consume(code);
            return title;
          }
          return title(code);
        }
      }
      var factoryTitle$2 = titleFactory;
      var markdownLineEnding$6 = markdownLineEnding_1;
      var markdownLineEndingOrSpace$4 = markdownLineEndingOrSpace_1;
      var normalizeIdentifier$1 = normalizeIdentifier_1;
      var factoryDestination$1 = factoryDestination$2;
      var factoryLabel$1 = factoryLabel$2;
      var factorySpace$6 = factorySpace$h;
      var factoryWhitespace$1 = factoryWhitespace$2;
      var factoryTitle$1 = factoryTitle$2;
      var definition$1 = {
        name: "definition",
        tokenize: tokenizeDefinition
      };
      var titleConstruct = {
        tokenize: tokenizeTitle,
        partial: true
      };
      function tokenizeDefinition(effects, ok2, nok) {
        var self2 = this;
        var identifier;
        return start;
        function start(code) {
          effects.enter("definition");
          return factoryLabel$1.call(self2, effects, labelAfter, nok, "definitionLabel", "definitionLabelMarker", "definitionLabelString")(code);
        }
        function labelAfter(code) {
          identifier = normalizeIdentifier$1(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1));
          if (code === 58) {
            effects.enter("definitionMarker");
            effects.consume(code);
            effects.exit("definitionMarker");
            return factoryWhitespace$1(effects, factoryDestination$1(effects, effects.attempt(titleConstruct, factorySpace$6(effects, after, "whitespace"), factorySpace$6(effects, after, "whitespace")), nok, "definitionDestination", "definitionDestinationLiteral", "definitionDestinationLiteralMarker", "definitionDestinationRaw", "definitionDestinationString"));
          }
          return nok(code);
        }
        function after(code) {
          if (code === null || markdownLineEnding$6(code)) {
            effects.exit("definition");
            if (self2.parser.defined.indexOf(identifier) < 0) {
              self2.parser.defined.push(identifier);
            }
            return ok2(code);
          }
          return nok(code);
        }
      }
      function tokenizeTitle(effects, ok2, nok) {
        return start;
        function start(code) {
          return markdownLineEndingOrSpace$4(code) ? factoryWhitespace$1(effects, before)(code) : nok(code);
        }
        function before(code) {
          if (code === 34 || code === 39 || code === 40) {
            return factoryTitle$1(effects, factorySpace$6(effects, after, "whitespace"), nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code);
          }
          return nok(code);
        }
        function after(code) {
          return code === null || markdownLineEnding$6(code) ? ok2(code) : nok(code);
        }
      }
      var definition_1 = definition$1;
      var markdownLineEnding$5 = markdownLineEnding_1;
      var hardBreakEscape$1 = {
        name: "hardBreakEscape",
        tokenize: tokenizeHardBreakEscape
      };
      function tokenizeHardBreakEscape(effects, ok2, nok) {
        return start;
        function start(code) {
          effects.enter("hardBreakEscape");
          effects.enter("escapeMarker");
          effects.consume(code);
          return open;
        }
        function open(code) {
          if (markdownLineEnding$5(code)) {
            effects.exit("escapeMarker");
            effects.exit("hardBreakEscape");
            return ok2(code);
          }
          return nok(code);
        }
      }
      var hardBreakEscape_1 = hardBreakEscape$1;
      var markdownLineEnding$4 = markdownLineEnding_1;
      var markdownLineEndingOrSpace$3 = markdownLineEndingOrSpace_1;
      var markdownSpace$4 = markdownSpace_1;
      var chunkedSplice$1 = chunkedSplice_1;
      var factorySpace$5 = factorySpace$h;
      var headingAtx$1 = {
        name: "headingAtx",
        tokenize: tokenizeHeadingAtx,
        resolve: resolveHeadingAtx
      };
      function resolveHeadingAtx(events, context) {
        var contentEnd = events.length - 2;
        var contentStart = 3;
        var content2;
        var text2;
        if (events[contentStart][1].type === "whitespace") {
          contentStart += 2;
        }
        if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
          contentEnd -= 2;
        }
        if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
          contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
        }
        if (contentEnd > contentStart) {
          content2 = {
            type: "atxHeadingText",
            start: events[contentStart][1].start,
            end: events[contentEnd][1].end
          };
          text2 = {
            type: "chunkText",
            start: events[contentStart][1].start,
            end: events[contentEnd][1].end,
            contentType: "text"
          };
          chunkedSplice$1(events, contentStart, contentEnd - contentStart + 1, [
            ["enter", content2, context],
            ["enter", text2, context],
            ["exit", text2, context],
            ["exit", content2, context]
          ]);
        }
        return events;
      }
      function tokenizeHeadingAtx(effects, ok2, nok) {
        var self2 = this;
        var size = 0;
        return start;
        function start(code) {
          effects.enter("atxHeading");
          effects.enter("atxHeadingSequence");
          return fenceOpenInside(code);
        }
        function fenceOpenInside(code) {
          if (code === 35 && size++ < 6) {
            effects.consume(code);
            return fenceOpenInside;
          }
          if (code === null || markdownLineEndingOrSpace$3(code)) {
            effects.exit("atxHeadingSequence");
            return self2.interrupt ? ok2(code) : headingBreak(code);
          }
          return nok(code);
        }
        function headingBreak(code) {
          if (code === 35) {
            effects.enter("atxHeadingSequence");
            return sequence(code);
          }
          if (code === null || markdownLineEnding$4(code)) {
            effects.exit("atxHeading");
            return ok2(code);
          }
          if (markdownSpace$4(code)) {
            return factorySpace$5(effects, headingBreak, "whitespace")(code);
          }
          effects.enter("atxHeadingText");
          return data(code);
        }
        function sequence(code) {
          if (code === 35) {
            effects.consume(code);
            return sequence;
          }
          effects.exit("atxHeadingSequence");
          return headingBreak(code);
        }
        function data(code) {
          if (code === null || code === 35 || markdownLineEndingOrSpace$3(code)) {
            effects.exit("atxHeadingText");
            return headingBreak(code);
          }
          effects.consume(code);
          return data;
        }
      }
      var headingAtx_1 = headingAtx$1;
      var basics = [
        "address",
        "article",
        "aside",
        "base",
        "basefont",
        "blockquote",
        "body",
        "caption",
        "center",
        "col",
        "colgroup",
        "dd",
        "details",
        "dialog",
        "dir",
        "div",
        "dl",
        "dt",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "frame",
        "frameset",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hr",
        "html",
        "iframe",
        "legend",
        "li",
        "link",
        "main",
        "menu",
        "menuitem",
        "nav",
        "noframes",
        "ol",
        "optgroup",
        "option",
        "p",
        "param",
        "section",
        "source",
        "summary",
        "table",
        "tbody",
        "td",
        "tfoot",
        "th",
        "thead",
        "title",
        "tr",
        "track",
        "ul"
      ];
      var htmlBlockNames$1 = basics;
      var raws = ["pre", "script", "style", "textarea"];
      var htmlRawNames$1 = raws;
      var asciiAlpha$1 = asciiAlpha_1;
      var asciiAlphanumeric$1 = asciiAlphanumeric_1;
      var markdownLineEnding$3 = markdownLineEnding_1;
      var markdownLineEndingOrSpace$2 = markdownLineEndingOrSpace_1;
      var markdownSpace$3 = markdownSpace_1;
      var fromCharCode = fromCharCode_1;
      var htmlBlockNames = htmlBlockNames$1;
      var htmlRawNames = htmlRawNames$1;
      var partialBlankLine$1 = partialBlankLine_1;
      var htmlFlow$1 = {
        name: "htmlFlow",
        tokenize: tokenizeHtmlFlow,
        resolveTo: resolveToHtmlFlow,
        concrete: true
      };
      var nextBlankConstruct = {
        tokenize: tokenizeNextBlank,
        partial: true
      };
      function resolveToHtmlFlow(events) {
        var index2 = events.length;
        while (index2--) {
          if (events[index2][0] === "enter" && events[index2][1].type === "htmlFlow") {
            break;
          }
        }
        if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
          events[index2][1].start = events[index2 - 2][1].start;
          events[index2 + 1][1].start = events[index2 - 2][1].start;
          events.splice(index2 - 2, 2);
        }
        return events;
      }
      function tokenizeHtmlFlow(effects, ok2, nok) {
        var self2 = this;
        var kind;
        var startTag;
        var buffer2;
        var index2;
        var marker;
        return start;
        function start(code) {
          effects.enter("htmlFlow");
          effects.enter("htmlFlowData");
          effects.consume(code);
          return open;
        }
        function open(code) {
          if (code === 33) {
            effects.consume(code);
            return declarationStart;
          }
          if (code === 47) {
            effects.consume(code);
            return tagCloseStart;
          }
          if (code === 63) {
            effects.consume(code);
            kind = 3;
            return self2.interrupt ? ok2 : continuationDeclarationInside;
          }
          if (asciiAlpha$1(code)) {
            effects.consume(code);
            buffer2 = fromCharCode(code);
            startTag = true;
            return tagName;
          }
          return nok(code);
        }
        function declarationStart(code) {
          if (code === 45) {
            effects.consume(code);
            kind = 2;
            return commentOpenInside;
          }
          if (code === 91) {
            effects.consume(code);
            kind = 5;
            buffer2 = "CDATA[";
            index2 = 0;
            return cdataOpenInside;
          }
          if (asciiAlpha$1(code)) {
            effects.consume(code);
            kind = 4;
            return self2.interrupt ? ok2 : continuationDeclarationInside;
          }
          return nok(code);
        }
        function commentOpenInside(code) {
          if (code === 45) {
            effects.consume(code);
            return self2.interrupt ? ok2 : continuationDeclarationInside;
          }
          return nok(code);
        }
        function cdataOpenInside(code) {
          if (code === buffer2.charCodeAt(index2++)) {
            effects.consume(code);
            return index2 === buffer2.length ? self2.interrupt ? ok2 : continuation : cdataOpenInside;
          }
          return nok(code);
        }
        function tagCloseStart(code) {
          if (asciiAlpha$1(code)) {
            effects.consume(code);
            buffer2 = fromCharCode(code);
            return tagName;
          }
          return nok(code);
        }
        function tagName(code) {
          if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace$2(code)) {
            if (code !== 47 && startTag && htmlRawNames.indexOf(buffer2.toLowerCase()) > -1) {
              kind = 1;
              return self2.interrupt ? ok2(code) : continuation(code);
            }
            if (htmlBlockNames.indexOf(buffer2.toLowerCase()) > -1) {
              kind = 6;
              if (code === 47) {
                effects.consume(code);
                return basicSelfClosing;
              }
              return self2.interrupt ? ok2(code) : continuation(code);
            }
            kind = 7;
            return self2.interrupt ? nok(code) : startTag ? completeAttributeNameBefore(code) : completeClosingTagAfter(code);
          }
          if (code === 45 || asciiAlphanumeric$1(code)) {
            effects.consume(code);
            buffer2 += fromCharCode(code);
            return tagName;
          }
          return nok(code);
        }
        function basicSelfClosing(code) {
          if (code === 62) {
            effects.consume(code);
            return self2.interrupt ? ok2 : continuation;
          }
          return nok(code);
        }
        function completeClosingTagAfter(code) {
          if (markdownSpace$3(code)) {
            effects.consume(code);
            return completeClosingTagAfter;
          }
          return completeEnd(code);
        }
        function completeAttributeNameBefore(code) {
          if (code === 47) {
            effects.consume(code);
            return completeEnd;
          }
          if (code === 58 || code === 95 || asciiAlpha$1(code)) {
            effects.consume(code);
            return completeAttributeName;
          }
          if (markdownSpace$3(code)) {
            effects.consume(code);
            return completeAttributeNameBefore;
          }
          return completeEnd(code);
        }
        function completeAttributeName(code) {
          if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric$1(code)) {
            effects.consume(code);
            return completeAttributeName;
          }
          return completeAttributeNameAfter(code);
        }
        function completeAttributeNameAfter(code) {
          if (code === 61) {
            effects.consume(code);
            return completeAttributeValueBefore;
          }
          if (markdownSpace$3(code)) {
            effects.consume(code);
            return completeAttributeNameAfter;
          }
          return completeAttributeNameBefore(code);
        }
        function completeAttributeValueBefore(code) {
          if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
            return nok(code);
          }
          if (code === 34 || code === 39) {
            effects.consume(code);
            marker = code;
            return completeAttributeValueQuoted;
          }
          if (markdownSpace$3(code)) {
            effects.consume(code);
            return completeAttributeValueBefore;
          }
          marker = void 0;
          return completeAttributeValueUnquoted(code);
        }
        function completeAttributeValueQuoted(code) {
          if (code === marker) {
            effects.consume(code);
            return completeAttributeValueQuotedAfter;
          }
          if (code === null || markdownLineEnding$3(code)) {
            return nok(code);
          }
          effects.consume(code);
          return completeAttributeValueQuoted;
        }
        function completeAttributeValueUnquoted(code) {
          if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace$2(code)) {
            return completeAttributeNameAfter(code);
          }
          effects.consume(code);
          return completeAttributeValueUnquoted;
        }
        function completeAttributeValueQuotedAfter(code) {
          if (code === 47 || code === 62 || markdownSpace$3(code)) {
            return completeAttributeNameBefore(code);
          }
          return nok(code);
        }
        function completeEnd(code) {
          if (code === 62) {
            effects.consume(code);
            return completeAfter;
          }
          return nok(code);
        }
        function completeAfter(code) {
          if (markdownSpace$3(code)) {
            effects.consume(code);
            return completeAfter;
          }
          return code === null || markdownLineEnding$3(code) ? continuation(code) : nok(code);
        }
        function continuation(code) {
          if (code === 45 && kind === 2) {
            effects.consume(code);
            return continuationCommentInside;
          }
          if (code === 60 && kind === 1) {
            effects.consume(code);
            return continuationRawTagOpen;
          }
          if (code === 62 && kind === 4) {
            effects.consume(code);
            return continuationClose;
          }
          if (code === 63 && kind === 3) {
            effects.consume(code);
            return continuationDeclarationInside;
          }
          if (code === 93 && kind === 5) {
            effects.consume(code);
            return continuationCharacterDataInside;
          }
          if (markdownLineEnding$3(code) && (kind === 6 || kind === 7)) {
            return effects.check(nextBlankConstruct, continuationClose, continuationAtLineEnding)(code);
          }
          if (code === null || markdownLineEnding$3(code)) {
            return continuationAtLineEnding(code);
          }
          effects.consume(code);
          return continuation;
        }
        function continuationAtLineEnding(code) {
          effects.exit("htmlFlowData");
          return htmlContinueStart(code);
        }
        function htmlContinueStart(code) {
          if (code === null) {
            return done(code);
          }
          if (markdownLineEnding$3(code)) {
            effects.enter("lineEnding");
            effects.consume(code);
            effects.exit("lineEnding");
            return htmlContinueStart;
          }
          effects.enter("htmlFlowData");
          return continuation(code);
        }
        function continuationCommentInside(code) {
          if (code === 45) {
            effects.consume(code);
            return continuationDeclarationInside;
          }
          return continuation(code);
        }
        function continuationRawTagOpen(code) {
          if (code === 47) {
            effects.consume(code);
            buffer2 = "";
            return continuationRawEndTag;
          }
          return continuation(code);
        }
        function continuationRawEndTag(code) {
          if (code === 62 && htmlRawNames.indexOf(buffer2.toLowerCase()) > -1) {
            effects.consume(code);
            return continuationClose;
          }
          if (asciiAlpha$1(code) && buffer2.length < 8) {
            effects.consume(code);
            buffer2 += fromCharCode(code);
            return continuationRawEndTag;
          }
          return continuation(code);
        }
        function continuationCharacterDataInside(code) {
          if (code === 93) {
            effects.consume(code);
            return continuationDeclarationInside;
          }
          return continuation(code);
        }
        function continuationDeclarationInside(code) {
          if (code === 62) {
            effects.consume(code);
            return continuationClose;
          }
          return continuation(code);
        }
        function continuationClose(code) {
          if (code === null || markdownLineEnding$3(code)) {
            effects.exit("htmlFlowData");
            return done(code);
          }
          effects.consume(code);
          return continuationClose;
        }
        function done(code) {
          effects.exit("htmlFlow");
          return ok2(code);
        }
      }
      function tokenizeNextBlank(effects, ok2, nok) {
        return start;
        function start(code) {
          effects.exit("htmlFlowData");
          effects.enter("lineEndingBlank");
          effects.consume(code);
          effects.exit("lineEndingBlank");
          return effects.attempt(partialBlankLine$1, ok2, nok);
        }
      }
      var htmlFlow_1 = htmlFlow$1;
      var asciiAlpha = asciiAlpha_1;
      var asciiAlphanumeric = asciiAlphanumeric_1;
      var markdownLineEnding$2 = markdownLineEnding_1;
      var markdownLineEndingOrSpace$1 = markdownLineEndingOrSpace_1;
      var markdownSpace$2 = markdownSpace_1;
      var factorySpace$4 = factorySpace$h;
      var htmlText$1 = {
        name: "htmlText",
        tokenize: tokenizeHtmlText
      };
      function tokenizeHtmlText(effects, ok2, nok) {
        var self2 = this;
        var marker;
        var buffer2;
        var index2;
        var returnState;
        return start;
        function start(code) {
          effects.enter("htmlText");
          effects.enter("htmlTextData");
          effects.consume(code);
          return open;
        }
        function open(code) {
          if (code === 33) {
            effects.consume(code);
            return declarationOpen;
          }
          if (code === 47) {
            effects.consume(code);
            return tagCloseStart;
          }
          if (code === 63) {
            effects.consume(code);
            return instruction;
          }
          if (asciiAlpha(code)) {
            effects.consume(code);
            return tagOpen;
          }
          return nok(code);
        }
        function declarationOpen(code) {
          if (code === 45) {
            effects.consume(code);
            return commentOpen;
          }
          if (code === 91) {
            effects.consume(code);
            buffer2 = "CDATA[";
            index2 = 0;
            return cdataOpen;
          }
          if (asciiAlpha(code)) {
            effects.consume(code);
            return declaration;
          }
          return nok(code);
        }
        function commentOpen(code) {
          if (code === 45) {
            effects.consume(code);
            return commentStart;
          }
          return nok(code);
        }
        function commentStart(code) {
          if (code === null || code === 62) {
            return nok(code);
          }
          if (code === 45) {
            effects.consume(code);
            return commentStartDash;
          }
          return comment(code);
        }
        function commentStartDash(code) {
          if (code === null || code === 62) {
            return nok(code);
          }
          return comment(code);
        }
        function comment(code) {
          if (code === null) {
            return nok(code);
          }
          if (code === 45) {
            effects.consume(code);
            return commentClose;
          }
          if (markdownLineEnding$2(code)) {
            returnState = comment;
            return atLineEnding(code);
          }
          effects.consume(code);
          return comment;
        }
        function commentClose(code) {
          if (code === 45) {
            effects.consume(code);
            return end;
          }
          return comment(code);
        }
        function cdataOpen(code) {
          if (code === buffer2.charCodeAt(index2++)) {
            effects.consume(code);
            return index2 === buffer2.length ? cdata : cdataOpen;
          }
          return nok(code);
        }
        function cdata(code) {
          if (code === null) {
            return nok(code);
          }
          if (code === 93) {
            effects.consume(code);
            return cdataClose;
          }
          if (markdownLineEnding$2(code)) {
            returnState = cdata;
            return atLineEnding(code);
          }
          effects.consume(code);
          return cdata;
        }
        function cdataClose(code) {
          if (code === 93) {
            effects.consume(code);
            return cdataEnd;
          }
          return cdata(code);
        }
        function cdataEnd(code) {
          if (code === 62) {
            return end(code);
          }
          if (code === 93) {
            effects.consume(code);
            return cdataEnd;
          }
          return cdata(code);
        }
        function declaration(code) {
          if (code === null || code === 62) {
            return end(code);
          }
          if (markdownLineEnding$2(code)) {
            returnState = declaration;
            return atLineEnding(code);
          }
          effects.consume(code);
          return declaration;
        }
        function instruction(code) {
          if (code === null) {
            return nok(code);
          }
          if (code === 63) {
            effects.consume(code);
            return instructionClose;
          }
          if (markdownLineEnding$2(code)) {
            returnState = instruction;
            return atLineEnding(code);
          }
          effects.consume(code);
          return instruction;
        }
        function instructionClose(code) {
          return code === 62 ? end(code) : instruction(code);
        }
        function tagCloseStart(code) {
          if (asciiAlpha(code)) {
            effects.consume(code);
            return tagClose;
          }
          return nok(code);
        }
        function tagClose(code) {
          if (code === 45 || asciiAlphanumeric(code)) {
            effects.consume(code);
            return tagClose;
          }
          return tagCloseBetween(code);
        }
        function tagCloseBetween(code) {
          if (markdownLineEnding$2(code)) {
            returnState = tagCloseBetween;
            return atLineEnding(code);
          }
          if (markdownSpace$2(code)) {
            effects.consume(code);
            return tagCloseBetween;
          }
          return end(code);
        }
        function tagOpen(code) {
          if (code === 45 || asciiAlphanumeric(code)) {
            effects.consume(code);
            return tagOpen;
          }
          if (code === 47 || code === 62 || markdownLineEndingOrSpace$1(code)) {
            return tagOpenBetween(code);
          }
          return nok(code);
        }
        function tagOpenBetween(code) {
          if (code === 47) {
            effects.consume(code);
            return end;
          }
          if (code === 58 || code === 95 || asciiAlpha(code)) {
            effects.consume(code);
            return tagOpenAttributeName;
          }
          if (markdownLineEnding$2(code)) {
            returnState = tagOpenBetween;
            return atLineEnding(code);
          }
          if (markdownSpace$2(code)) {
            effects.consume(code);
            return tagOpenBetween;
          }
          return end(code);
        }
        function tagOpenAttributeName(code) {
          if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
            effects.consume(code);
            return tagOpenAttributeName;
          }
          return tagOpenAttributeNameAfter(code);
        }
        function tagOpenAttributeNameAfter(code) {
          if (code === 61) {
            effects.consume(code);
            return tagOpenAttributeValueBefore;
          }
          if (markdownLineEnding$2(code)) {
            returnState = tagOpenAttributeNameAfter;
            return atLineEnding(code);
          }
          if (markdownSpace$2(code)) {
            effects.consume(code);
            return tagOpenAttributeNameAfter;
          }
          return tagOpenBetween(code);
        }
        function tagOpenAttributeValueBefore(code) {
          if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
            return nok(code);
          }
          if (code === 34 || code === 39) {
            effects.consume(code);
            marker = code;
            return tagOpenAttributeValueQuoted;
          }
          if (markdownLineEnding$2(code)) {
            returnState = tagOpenAttributeValueBefore;
            return atLineEnding(code);
          }
          if (markdownSpace$2(code)) {
            effects.consume(code);
            return tagOpenAttributeValueBefore;
          }
          effects.consume(code);
          marker = void 0;
          return tagOpenAttributeValueUnquoted;
        }
        function tagOpenAttributeValueQuoted(code) {
          if (code === marker) {
            effects.consume(code);
            return tagOpenAttributeValueQuotedAfter;
          }
          if (code === null) {
            return nok(code);
          }
          if (markdownLineEnding$2(code)) {
            returnState = tagOpenAttributeValueQuoted;
            return atLineEnding(code);
          }
          effects.consume(code);
          return tagOpenAttributeValueQuoted;
        }
        function tagOpenAttributeValueQuotedAfter(code) {
          if (code === 62 || code === 47 || markdownLineEndingOrSpace$1(code)) {
            return tagOpenBetween(code);
          }
          return nok(code);
        }
        function tagOpenAttributeValueUnquoted(code) {
          if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {
            return nok(code);
          }
          if (code === 62 || markdownLineEndingOrSpace$1(code)) {
            return tagOpenBetween(code);
          }
          effects.consume(code);
          return tagOpenAttributeValueUnquoted;
        }
        function atLineEnding(code) {
          effects.exit("htmlTextData");
          effects.enter("lineEnding");
          effects.consume(code);
          effects.exit("lineEnding");
          return factorySpace$4(effects, afterPrefix, "linePrefix", self2.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4);
        }
        function afterPrefix(code) {
          effects.enter("htmlTextData");
          return returnState(code);
        }
        function end(code) {
          if (code === 62) {
            effects.consume(code);
            effects.exit("htmlTextData");
            effects.exit("htmlText");
            return ok2;
          }
          return nok(code);
        }
      }
      var htmlText_1 = htmlText$1;
      var markdownLineEndingOrSpace = markdownLineEndingOrSpace_1;
      var chunkedPush = chunkedPush_1;
      var chunkedSplice = chunkedSplice_1;
      var normalizeIdentifier = normalizeIdentifier_1;
      var resolveAll = resolveAll_1;
      var shallow$1 = shallow_1;
      var factoryDestination = factoryDestination$2;
      var factoryLabel = factoryLabel$2;
      var factoryTitle = factoryTitle$2;
      var factoryWhitespace = factoryWhitespace$2;
      var labelEnd$3 = {
        name: "labelEnd",
        tokenize: tokenizeLabelEnd,
        resolveTo: resolveToLabelEnd,
        resolveAll: resolveAllLabelEnd
      };
      var resourceConstruct = {
        tokenize: tokenizeResource
      };
      var fullReferenceConstruct = {
        tokenize: tokenizeFullReference
      };
      var collapsedReferenceConstruct = {
        tokenize: tokenizeCollapsedReference
      };
      function resolveAllLabelEnd(events) {
        var index2 = -1;
        var token2;
        while (++index2 < events.length) {
          token2 = events[index2][1];
          if (!token2._used && (token2.type === "labelImage" || token2.type === "labelLink" || token2.type === "labelEnd")) {
            events.splice(index2 + 1, token2.type === "labelImage" ? 4 : 2);
            token2.type = "data";
            index2++;
          }
        }
        return events;
      }
      function resolveToLabelEnd(events, context) {
        var index2 = events.length;
        var offset2 = 0;
        var group;
        var label;
        var text2;
        var token2;
        var open;
        var close;
        var media;
        while (index2--) {
          token2 = events[index2][1];
          if (open) {
            if (token2.type === "link" || token2.type === "labelLink" && token2._inactive) {
              break;
            }
            if (events[index2][0] === "enter" && token2.type === "labelLink") {
              token2._inactive = true;
            }
          } else if (close) {
            if (events[index2][0] === "enter" && (token2.type === "labelImage" || token2.type === "labelLink") && !token2._balanced) {
              open = index2;
              if (token2.type !== "labelLink") {
                offset2 = 2;
                break;
              }
            }
          } else if (token2.type === "labelEnd") {
            close = index2;
          }
        }
        group = {
          type: events[open][1].type === "labelLink" ? "link" : "image",
          start: shallow$1(events[open][1].start),
          end: shallow$1(events[events.length - 1][1].end)
        };
        label = {
          type: "label",
          start: shallow$1(events[open][1].start),
          end: shallow$1(events[close][1].end)
        };
        text2 = {
          type: "labelText",
          start: shallow$1(events[open + offset2 + 2][1].end),
          end: shallow$1(events[close - 2][1].start)
        };
        media = [
          ["enter", group, context],
          ["enter", label, context]
        ];
        media = chunkedPush(media, events.slice(open + 1, open + offset2 + 3));
        media = chunkedPush(media, [["enter", text2, context]]);
        media = chunkedPush(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset2 + 4, close - 3), context));
        media = chunkedPush(media, [
          ["exit", text2, context],
          events[close - 2],
          events[close - 1],
          ["exit", label, context]
        ]);
        media = chunkedPush(media, events.slice(close + 1));
        media = chunkedPush(media, [["exit", group, context]]);
        chunkedSplice(events, open, events.length, media);
        return events;
      }
      function tokenizeLabelEnd(effects, ok2, nok) {
        var self2 = this;
        var index2 = self2.events.length;
        var labelStart;
        var defined;
        while (index2--) {
          if ((self2.events[index2][1].type === "labelImage" || self2.events[index2][1].type === "labelLink") && !self2.events[index2][1]._balanced) {
            labelStart = self2.events[index2][1];
            break;
          }
        }
        return start;
        function start(code) {
          if (!labelStart) {
            return nok(code);
          }
          if (labelStart._inactive)
            return balanced(code);
          defined = self2.parser.defined.indexOf(normalizeIdentifier(self2.sliceSerialize({
            start: labelStart.end,
            end: self2.now()
          }))) > -1;
          effects.enter("labelEnd");
          effects.enter("labelMarker");
          effects.consume(code);
          effects.exit("labelMarker");
          effects.exit("labelEnd");
          return afterLabelEnd;
        }
        function afterLabelEnd(code) {
          if (code === 40) {
            return effects.attempt(resourceConstruct, ok2, defined ? ok2 : balanced)(code);
          }
          if (code === 91) {
            return effects.attempt(fullReferenceConstruct, ok2, defined ? effects.attempt(collapsedReferenceConstruct, ok2, balanced) : balanced)(code);
          }
          return defined ? ok2(code) : balanced(code);
        }
        function balanced(code) {
          labelStart._balanced = true;
          return nok(code);
        }
      }
      function tokenizeResource(effects, ok2, nok) {
        return start;
        function start(code) {
          effects.enter("resource");
          effects.enter("resourceMarker");
          effects.consume(code);
          effects.exit("resourceMarker");
          return factoryWhitespace(effects, open);
        }
        function open(code) {
          if (code === 41) {
            return end(code);
          }
          return factoryDestination(effects, destinationAfter, nok, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 3)(code);
        }
        function destinationAfter(code) {
          return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, between)(code) : end(code);
        }
        function between(code) {
          if (code === 34 || code === 39 || code === 40) {
            return factoryTitle(effects, factoryWhitespace(effects, end), nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code);
          }
          return end(code);
        }
        function end(code) {
          if (code === 41) {
            effects.enter("resourceMarker");
            effects.consume(code);
            effects.exit("resourceMarker");
            effects.exit("resource");
            return ok2;
          }
          return nok(code);
        }
      }
      function tokenizeFullReference(effects, ok2, nok) {
        var self2 = this;
        return start;
        function start(code) {
          return factoryLabel.call(self2, effects, afterLabel, nok, "reference", "referenceMarker", "referenceString")(code);
        }
        function afterLabel(code) {
          return self2.parser.defined.indexOf(normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1))) < 0 ? nok(code) : ok2(code);
        }
      }
      function tokenizeCollapsedReference(effects, ok2, nok) {
        return start;
        function start(code) {
          effects.enter("reference");
          effects.enter("referenceMarker");
          effects.consume(code);
          effects.exit("referenceMarker");
          return open;
        }
        function open(code) {
          if (code === 93) {
            effects.enter("referenceMarker");
            effects.consume(code);
            effects.exit("referenceMarker");
            effects.exit("reference");
            return ok2;
          }
          return nok(code);
        }
      }
      var labelEnd_1 = labelEnd$3;
      var labelEnd$2 = labelEnd_1;
      var labelStartImage$1 = {
        name: "labelStartImage",
        tokenize: tokenizeLabelStartImage,
        resolveAll: labelEnd$2.resolveAll
      };
      function tokenizeLabelStartImage(effects, ok2, nok) {
        var self2 = this;
        return start;
        function start(code) {
          effects.enter("labelImage");
          effects.enter("labelImageMarker");
          effects.consume(code);
          effects.exit("labelImageMarker");
          return open;
        }
        function open(code) {
          if (code === 91) {
            effects.enter("labelMarker");
            effects.consume(code);
            effects.exit("labelMarker");
            effects.exit("labelImage");
            return after;
          }
          return nok(code);
        }
        function after(code) {
          return code === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code) : ok2(code);
        }
      }
      var labelStartImage_1 = labelStartImage$1;
      var labelEnd$1 = labelEnd_1;
      var labelStartLink$1 = {
        name: "labelStartLink",
        tokenize: tokenizeLabelStartLink,
        resolveAll: labelEnd$1.resolveAll
      };
      function tokenizeLabelStartLink(effects, ok2, nok) {
        var self2 = this;
        return start;
        function start(code) {
          effects.enter("labelLink");
          effects.enter("labelMarker");
          effects.consume(code);
          effects.exit("labelMarker");
          effects.exit("labelLink");
          return after;
        }
        function after(code) {
          return code === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code) : ok2(code);
        }
      }
      var labelStartLink_1 = labelStartLink$1;
      var factorySpace$3 = factorySpace$h;
      var lineEnding$1 = {
        name: "lineEnding",
        tokenize: tokenizeLineEnding
      };
      function tokenizeLineEnding(effects, ok2) {
        return start;
        function start(code) {
          effects.enter("lineEnding");
          effects.consume(code);
          effects.exit("lineEnding");
          return factorySpace$3(effects, ok2, "linePrefix");
        }
      }
      var lineEnding_1 = lineEnding$1;
      var markdownLineEnding$1 = markdownLineEnding_1;
      var markdownSpace$1 = markdownSpace_1;
      var factorySpace$2 = factorySpace$h;
      var thematicBreak$2 = {
        name: "thematicBreak",
        tokenize: tokenizeThematicBreak
      };
      function tokenizeThematicBreak(effects, ok2, nok) {
        var size = 0;
        var marker;
        return start;
        function start(code) {
          effects.enter("thematicBreak");
          marker = code;
          return atBreak(code);
        }
        function atBreak(code) {
          if (code === marker) {
            effects.enter("thematicBreakSequence");
            return sequence(code);
          }
          if (markdownSpace$1(code)) {
            return factorySpace$2(effects, atBreak, "whitespace")(code);
          }
          if (size < 3 || code !== null && !markdownLineEnding$1(code)) {
            return nok(code);
          }
          effects.exit("thematicBreak");
          return ok2(code);
        }
        function sequence(code) {
          if (code === marker) {
            effects.consume(code);
            size++;
            return sequence;
          }
          effects.exit("thematicBreakSequence");
          return atBreak(code);
        }
      }
      var thematicBreak_1 = thematicBreak$2;
      var asciiDigit = asciiDigit_1;
      var markdownSpace = markdownSpace_1;
      var prefixSize = prefixSize_1;
      var sizeChunks = sizeChunks_1;
      var factorySpace$1 = factorySpace$h;
      var partialBlankLine = partialBlankLine_1;
      var thematicBreak$1 = thematicBreak_1;
      var list$1 = {
        name: "list",
        tokenize: tokenizeListStart,
        continuation: {
          tokenize: tokenizeListContinuation
        },
        exit: tokenizeListEnd
      };
      var listItemPrefixWhitespaceConstruct = {
        tokenize: tokenizeListItemPrefixWhitespace,
        partial: true
      };
      var indentConstruct = {
        tokenize: tokenizeIndent,
        partial: true
      };
      function tokenizeListStart(effects, ok2, nok) {
        var self2 = this;
        var initialSize = prefixSize(self2.events, "linePrefix");
        var size = 0;
        return start;
        function start(code) {
          var kind = self2.containerState.type || (code === 42 || code === 43 || code === 45 ? "listUnordered" : "listOrdered");
          if (kind === "listUnordered" ? !self2.containerState.marker || code === self2.containerState.marker : asciiDigit(code)) {
            if (!self2.containerState.type) {
              self2.containerState.type = kind;
              effects.enter(kind, {
                _container: true
              });
            }
            if (kind === "listUnordered") {
              effects.enter("listItemPrefix");
              return code === 42 || code === 45 ? effects.check(thematicBreak$1, nok, atMarker)(code) : atMarker(code);
            }
            if (!self2.interrupt || code === 49) {
              effects.enter("listItemPrefix");
              effects.enter("listItemValue");
              return inside(code);
            }
          }
          return nok(code);
        }
        function inside(code) {
          if (asciiDigit(code) && ++size < 10) {
            effects.consume(code);
            return inside;
          }
          if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code === self2.containerState.marker : code === 41 || code === 46)) {
            effects.exit("listItemValue");
            return atMarker(code);
          }
          return nok(code);
        }
        function atMarker(code) {
          effects.enter("listItemMarker");
          effects.consume(code);
          effects.exit("listItemMarker");
          self2.containerState.marker = self2.containerState.marker || code;
          return effects.check(partialBlankLine, self2.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));
        }
        function onBlank(code) {
          self2.containerState.initialBlankLine = true;
          initialSize++;
          return endOfPrefix(code);
        }
        function otherPrefix(code) {
          if (markdownSpace(code)) {
            effects.enter("listItemPrefixWhitespace");
            effects.consume(code);
            effects.exit("listItemPrefixWhitespace");
            return endOfPrefix;
          }
          return nok(code);
        }
        function endOfPrefix(code) {
          self2.containerState.size = initialSize + sizeChunks(self2.sliceStream(effects.exit("listItemPrefix")));
          return ok2(code);
        }
      }
      function tokenizeListContinuation(effects, ok2, nok) {
        var self2 = this;
        self2.containerState._closeFlow = void 0;
        return effects.check(partialBlankLine, onBlank, notBlank);
        function onBlank(code) {
          self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
          return factorySpace$1(effects, ok2, "listItemIndent", self2.containerState.size + 1)(code);
        }
        function notBlank(code) {
          if (self2.containerState.furtherBlankLines || !markdownSpace(code)) {
            self2.containerState.furtherBlankLines = self2.containerState.initialBlankLine = void 0;
            return notInCurrentItem(code);
          }
          self2.containerState.furtherBlankLines = self2.containerState.initialBlankLine = void 0;
          return effects.attempt(indentConstruct, ok2, notInCurrentItem)(code);
        }
        function notInCurrentItem(code) {
          self2.containerState._closeFlow = true;
          self2.interrupt = void 0;
          return factorySpace$1(effects, effects.attempt(list$1, ok2, nok), "linePrefix", self2.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4)(code);
        }
      }
      function tokenizeIndent(effects, ok2, nok) {
        var self2 = this;
        return factorySpace$1(effects, afterPrefix, "listItemIndent", self2.containerState.size + 1);
        function afterPrefix(code) {
          return prefixSize(self2.events, "listItemIndent") === self2.containerState.size ? ok2(code) : nok(code);
        }
      }
      function tokenizeListEnd(effects) {
        effects.exit(this.containerState.type);
      }
      function tokenizeListItemPrefixWhitespace(effects, ok2, nok) {
        var self2 = this;
        return factorySpace$1(effects, afterPrefix, "listItemPrefixWhitespace", self2.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4 + 1);
        function afterPrefix(code) {
          return markdownSpace(code) || !prefixSize(self2.events, "listItemPrefixWhitespace") ? nok(code) : ok2(code);
        }
      }
      var list_1 = list$1;
      var markdownLineEnding = markdownLineEnding_1;
      var shallow = shallow_1;
      var factorySpace = factorySpace$h;
      var setextUnderline$1 = {
        name: "setextUnderline",
        tokenize: tokenizeSetextUnderline,
        resolveTo: resolveToSetextUnderline
      };
      function resolveToSetextUnderline(events, context) {
        var index2 = events.length;
        var content2;
        var text2;
        var definition2;
        var heading;
        while (index2--) {
          if (events[index2][0] === "enter") {
            if (events[index2][1].type === "content") {
              content2 = index2;
              break;
            }
            if (events[index2][1].type === "paragraph") {
              text2 = index2;
            }
          } else {
            if (events[index2][1].type === "content") {
              events.splice(index2, 1);
            }
            if (!definition2 && events[index2][1].type === "definition") {
              definition2 = index2;
            }
          }
        }
        heading = {
          type: "setextHeading",
          start: shallow(events[text2][1].start),
          end: shallow(events[events.length - 1][1].end)
        };
        events[text2][1].type = "setextHeadingText";
        if (definition2) {
          events.splice(text2, 0, ["enter", heading, context]);
          events.splice(definition2 + 1, 0, ["exit", events[content2][1], context]);
          events[content2][1].end = shallow(events[definition2][1].end);
        } else {
          events[content2][1] = heading;
        }
        events.push(["exit", heading, context]);
        return events;
      }
      function tokenizeSetextUnderline(effects, ok2, nok) {
        var self2 = this;
        var index2 = self2.events.length;
        var marker;
        var paragraph;
        while (index2--) {
          if (self2.events[index2][1].type !== "lineEnding" && self2.events[index2][1].type !== "linePrefix" && self2.events[index2][1].type !== "content") {
            paragraph = self2.events[index2][1].type === "paragraph";
            break;
          }
        }
        return start;
        function start(code) {
          if (!self2.lazy && (self2.interrupt || paragraph)) {
            effects.enter("setextHeadingLine");
            effects.enter("setextHeadingLineSequence");
            marker = code;
            return closingSequence(code);
          }
          return nok(code);
        }
        function closingSequence(code) {
          if (code === marker) {
            effects.consume(code);
            return closingSequence;
          }
          effects.exit("setextHeadingLineSequence");
          return factorySpace(effects, closingSequenceEnd, "lineSuffix")(code);
        }
        function closingSequenceEnd(code) {
          if (code === null || markdownLineEnding(code)) {
            effects.exit("setextHeadingLine");
            return ok2(code);
          }
          return nok(code);
        }
      }
      var setextUnderline_1 = setextUnderline$1;
      Object.defineProperty(constructs, "__esModule", { value: true });
      var text$1 = text$3;
      var attention = attention_1;
      var autolink = autolink_1;
      var blockQuote = blockQuote_1;
      var characterEscape = characterEscape_1;
      var characterReference = characterReference_1;
      var codeFenced = codeFenced_1;
      var codeIndented = codeIndented_1;
      var codeText = codeText_1;
      var definition = definition_1;
      var hardBreakEscape = hardBreakEscape_1;
      var headingAtx = headingAtx_1;
      var htmlFlow = htmlFlow_1;
      var htmlText = htmlText_1;
      var labelEnd = labelEnd_1;
      var labelStartImage = labelStartImage_1;
      var labelStartLink = labelStartLink_1;
      var lineEnding = lineEnding_1;
      var list = list_1;
      var setextUnderline = setextUnderline_1;
      var thematicBreak = thematicBreak_1;
      var document$1 = {
        42: list,
        43: list,
        45: list,
        48: list,
        49: list,
        50: list,
        51: list,
        52: list,
        53: list,
        54: list,
        55: list,
        56: list,
        57: list,
        62: blockQuote
      };
      var contentInitial = {
        91: definition
      };
      var flowInitial = {
        "-2": codeIndented,
        "-1": codeIndented,
        32: codeIndented
      };
      var flow = {
        35: headingAtx,
        42: thematicBreak,
        45: [setextUnderline, thematicBreak],
        60: htmlFlow,
        61: setextUnderline,
        95: thematicBreak,
        96: codeFenced,
        126: codeFenced
      };
      var string = {
        38: characterReference,
        92: characterEscape
      };
      var text = {
        "-5": lineEnding,
        "-4": lineEnding,
        "-3": lineEnding,
        33: labelStartImage,
        38: characterReference,
        42: attention,
        60: [autolink, htmlText],
        91: labelStartLink,
        92: [hardBreakEscape, characterEscape],
        93: labelEnd,
        95: attention,
        96: codeText
      };
      var insideSpan = {
        null: [attention, text$1.resolver]
      };
      var disable = {
        null: []
      };
      constructs.contentInitial = contentInitial;
      constructs.disable = disable;
      constructs.document = document$1;
      constructs.flow = flow;
      constructs.flowInitial = flowInitial;
      constructs.insideSpan = insideSpan;
      constructs.string = string;
      constructs.text = text;
      var own$2 = {}.hasOwnProperty;
      var unistUtilStringifyPosition = stringify$1;
      function stringify$1(value) {
        if (!value || typeof value !== "object") {
          return "";
        }
        if (own$2.call(value, "position") || own$2.call(value, "type")) {
          return position(value.position);
        }
        if (own$2.call(value, "start") || own$2.call(value, "end")) {
          return position(value);
        }
        if (own$2.call(value, "line") || own$2.call(value, "column")) {
          return point(value);
        }
        return "";
      }
      function point(point2) {
        if (!point2 || typeof point2 !== "object") {
          point2 = {};
        }
        return index$1(point2.line) + ":" + index$1(point2.column);
      }
      function position(pos) {
        if (!pos || typeof pos !== "object") {
          pos = {};
        }
        return point(pos.start) + "-" + point(pos.end);
      }
      function index$1(value) {
        return value && typeof value === "number" ? value : 1;
      }
      var bail_1 = bail$1;
      function bail$1(err) {
        if (err) {
          throw err;
        }
      }
      var isBuffer$6 = function isBuffer2(obj) {
        return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      };
      var hasOwn = Object.prototype.hasOwnProperty;
      var toStr = Object.prototype.toString;
      var defineProperty$4 = Object.defineProperty;
      var gOPD = Object.getOwnPropertyDescriptor;
      var isArray$f = function isArray2(arr) {
        if (typeof Array.isArray === "function") {
          return Array.isArray(arr);
        }
        return toStr.call(arr) === "[object Array]";
      };
      var isPlainObject$2 = function isPlainObject2(obj) {
        if (!obj || toStr.call(obj) !== "[object Object]") {
          return false;
        }
        var hasOwnConstructor = hasOwn.call(obj, "constructor");
        var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
          return false;
        }
        var key;
        for (key in obj) {
        }
        return typeof key === "undefined" || hasOwn.call(obj, key);
      };
      var setProperty = function setProperty2(target, options) {
        if (defineProperty$4 && options.name === "__proto__") {
          defineProperty$4(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
          });
        } else {
          target[options.name] = options.newValue;
        }
      };
      var getProperty = function getProperty2(obj, name2) {
        if (name2 === "__proto__") {
          if (!hasOwn.call(obj, name2)) {
            return void 0;
          } else if (gOPD) {
            return gOPD(obj, name2).value;
          }
        }
        return obj[name2];
      };
      var extend$2 = function extend2() {
        var options, name2, src, copy, copyIsArray, clone2;
        var target = arguments[0];
        var i2 = 1;
        var length = arguments.length;
        var deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[1] || {};
          i2 = 2;
        }
        if (target == null || typeof target !== "object" && typeof target !== "function") {
          target = {};
        }
        for (; i2 < length; ++i2) {
          options = arguments[i2];
          if (options != null) {
            for (name2 in options) {
              src = getProperty(target, name2);
              copy = getProperty(options, name2);
              if (target !== copy) {
                if (deep && copy && (isPlainObject$2(copy) || (copyIsArray = isArray$f(copy)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone2 = src && isArray$f(src) ? src : [];
                  } else {
                    clone2 = src && isPlainObject$2(src) ? src : {};
                  }
                  setProperty(target, { name: name2, newValue: extend2(deep, clone2, copy) });
                } else if (typeof copy !== "undefined") {
                  setProperty(target, { name: name2, newValue: copy });
                }
              }
            }
          }
        }
        return target;
      };
      var isPlainObj = (value) => {
        if (Object.prototype.toString.call(value) !== "[object Object]") {
          return false;
        }
        const prototype = Object.getPrototypeOf(value);
        return prototype === null || prototype === Object.prototype;
      };
      var slice$3 = [].slice;
      var wrap_1 = wrap$1;
      function wrap$1(fn2, callback) {
        var invoked;
        return wrapped;
        function wrapped() {
          var params = slice$3.call(arguments, 0);
          var callback2 = fn2.length > params.length;
          var result;
          if (callback2) {
            params.push(done);
          }
          try {
            result = fn2.apply(null, params);
          } catch (error) {
            if (callback2 && invoked) {
              throw error;
            }
            return done(error);
          }
          if (!callback2) {
            if (result && typeof result.then === "function") {
              result.then(then, done);
            } else if (result instanceof Error) {
              done(result);
            } else {
              then(result);
            }
          }
        }
        function done() {
          if (!invoked) {
            invoked = true;
            callback.apply(null, arguments);
          }
        }
        function then(value) {
          done(null, value);
        }
      }
      var wrap = wrap_1;
      var trough_1 = trough$1;
      trough$1.wrap = wrap;
      var slice$2 = [].slice;
      function trough$1() {
        var fns = [];
        var middleware = {};
        middleware.run = run;
        middleware.use = use;
        return middleware;
        function run() {
          var index2 = -1;
          var input = slice$2.call(arguments, 0, -1);
          var done = arguments[arguments.length - 1];
          if (typeof done !== "function") {
            throw new Error("Expected function as last argument, not " + done);
          }
          next.apply(null, [null].concat(input));
          function next(err) {
            var fn2 = fns[++index2];
            var params = slice$2.call(arguments, 0);
            var values2 = params.slice(1);
            var length = input.length;
            var pos = -1;
            if (err) {
              done(err);
              return;
            }
            while (++pos < length) {
              if (values2[pos] === null || values2[pos] === void 0) {
                values2[pos] = input[pos];
              }
            }
            input = values2;
            if (fn2) {
              wrap(fn2, next).apply(null, input);
            } else {
              done.apply(null, [null].concat(input));
            }
          }
        }
        function use(fn2) {
          if (typeof fn2 !== "function") {
            throw new Error("Expected `fn` to be a function, not " + fn2);
          }
          fns.push(fn2);
          return middleware;
        }
      }
      var stringify = unistUtilStringifyPosition;
      var vfileMessage = VMessage$1;
      function VMessagePrototype() {
      }
      VMessagePrototype.prototype = Error.prototype;
      VMessage$1.prototype = new VMessagePrototype();
      var proto$3 = VMessage$1.prototype;
      proto$3.file = "";
      proto$3.name = "";
      proto$3.reason = "";
      proto$3.message = "";
      proto$3.stack = "";
      proto$3.fatal = null;
      proto$3.column = null;
      proto$3.line = null;
      function VMessage$1(reason, position2, origin) {
        var parts;
        var range;
        var location;
        if (typeof position2 === "string") {
          origin = position2;
          position2 = null;
        }
        parts = parseOrigin(origin);
        range = stringify(position2) || "1:1";
        location = {
          start: { line: null, column: null },
          end: { line: null, column: null }
        };
        if (position2 && position2.position) {
          position2 = position2.position;
        }
        if (position2) {
          if (position2.start) {
            location = position2;
            position2 = position2.start;
          } else {
            location.start = position2;
          }
        }
        if (reason.stack) {
          this.stack = reason.stack;
          reason = reason.message;
        }
        this.message = reason;
        this.name = range;
        this.reason = reason;
        this.line = position2 ? position2.line : null;
        this.column = position2 ? position2.column : null;
        this.location = location;
        this.source = parts[0];
        this.ruleId = parts[1];
      }
      function parseOrigin(origin) {
        var result = [null, null];
        var index2;
        if (typeof origin === "string") {
          index2 = origin.indexOf(":");
          if (index2 === -1) {
            result[1] = origin;
          } else {
            result[0] = origin.slice(0, index2);
            result[1] = origin.slice(index2 + 1);
          }
        }
        return result;
      }
      var minpath_browser = {};
      minpath_browser.basename = basename;
      minpath_browser.dirname = dirname$1;
      minpath_browser.extname = extname;
      minpath_browser.join = join$1;
      minpath_browser.sep = "/";
      function basename(path, ext) {
        var start = 0;
        var end = -1;
        var index2;
        var firstNonSlashEnd;
        var seenNonSlash;
        var extIndex;
        if (ext !== void 0 && typeof ext !== "string") {
          throw new TypeError('"ext" argument must be a string');
        }
        assertPath$1(path);
        index2 = path.length;
        if (ext === void 0 || !ext.length || ext.length > path.length) {
          while (index2--) {
            if (path.charCodeAt(index2) === 47) {
              if (seenNonSlash) {
                start = index2 + 1;
                break;
              }
            } else if (end < 0) {
              seenNonSlash = true;
              end = index2 + 1;
            }
          }
          return end < 0 ? "" : path.slice(start, end);
        }
        if (ext === path) {
          return "";
        }
        firstNonSlashEnd = -1;
        extIndex = ext.length - 1;
        while (index2--) {
          if (path.charCodeAt(index2) === 47) {
            if (seenNonSlash) {
              start = index2 + 1;
              break;
            }
          } else {
            if (firstNonSlashEnd < 0) {
              seenNonSlash = true;
              firstNonSlashEnd = index2 + 1;
            }
            if (extIndex > -1) {
              if (path.charCodeAt(index2) === ext.charCodeAt(extIndex--)) {
                if (extIndex < 0) {
                  end = index2;
                }
              } else {
                extIndex = -1;
                end = firstNonSlashEnd;
              }
            }
          }
        }
        if (start === end) {
          end = firstNonSlashEnd;
        } else if (end < 0) {
          end = path.length;
        }
        return path.slice(start, end);
      }
      function dirname$1(path) {
        var end;
        var unmatchedSlash;
        var index2;
        assertPath$1(path);
        if (!path.length) {
          return ".";
        }
        end = -1;
        index2 = path.length;
        while (--index2) {
          if (path.charCodeAt(index2) === 47) {
            if (unmatchedSlash) {
              end = index2;
              break;
            }
          } else if (!unmatchedSlash) {
            unmatchedSlash = true;
          }
        }
        return end < 0 ? path.charCodeAt(0) === 47 ? "/" : "." : end === 1 && path.charCodeAt(0) === 47 ? "//" : path.slice(0, end);
      }
      function extname(path) {
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var preDotState = 0;
        var unmatchedSlash;
        var code;
        var index2;
        assertPath$1(path);
        index2 = path.length;
        while (index2--) {
          code = path.charCodeAt(index2);
          if (code === 47) {
            if (unmatchedSlash) {
              startPart = index2 + 1;
              break;
            }
            continue;
          }
          if (end < 0) {
            unmatchedSlash = true;
            end = index2 + 1;
          }
          if (code === 46) {
            if (startDot < 0) {
              startDot = index2;
            } else if (preDotState !== 1) {
              preDotState = 1;
            }
          } else if (startDot > -1) {
            preDotState = -1;
          }
        }
        if (startDot < 0 || end < 0 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          return "";
        }
        return path.slice(startDot, end);
      }
      function join$1() {
        var index2 = -1;
        var joined;
        while (++index2 < arguments.length) {
          assertPath$1(arguments[index2]);
          if (arguments[index2]) {
            joined = joined === void 0 ? arguments[index2] : joined + "/" + arguments[index2];
          }
        }
        return joined === void 0 ? "." : normalize(joined);
      }
      function normalize(path) {
        var absolute;
        var value;
        assertPath$1(path);
        absolute = path.charCodeAt(0) === 47;
        value = normalizeString(path, !absolute);
        if (!value.length && !absolute) {
          value = ".";
        }
        if (value.length && path.charCodeAt(path.length - 1) === 47) {
          value += "/";
        }
        return absolute ? "/" + value : value;
      }
      function normalizeString(path, allowAboveRoot) {
        var result = "";
        var lastSegmentLength = 0;
        var lastSlash = -1;
        var dots = 0;
        var index2 = -1;
        var code;
        var lastSlashIndex;
        while (++index2 <= path.length) {
          if (index2 < path.length) {
            code = path.charCodeAt(index2);
          } else if (code === 47) {
            break;
          } else {
            code = 47;
          }
          if (code === 47) {
            if (lastSlash === index2 - 1 || dots === 1)
              ;
            else if (lastSlash !== index2 - 1 && dots === 2) {
              if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
                if (result.length > 2) {
                  lastSlashIndex = result.lastIndexOf("/");
                  if (lastSlashIndex !== result.length - 1) {
                    if (lastSlashIndex < 0) {
                      result = "";
                      lastSegmentLength = 0;
                    } else {
                      result = result.slice(0, lastSlashIndex);
                      lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
                    }
                    lastSlash = index2;
                    dots = 0;
                    continue;
                  }
                } else if (result.length) {
                  result = "";
                  lastSegmentLength = 0;
                  lastSlash = index2;
                  dots = 0;
                  continue;
                }
              }
              if (allowAboveRoot) {
                result = result.length ? result + "/.." : "..";
                lastSegmentLength = 2;
              }
            } else {
              if (result.length) {
                result += "/" + path.slice(lastSlash + 1, index2);
              } else {
                result = path.slice(lastSlash + 1, index2);
              }
              lastSegmentLength = index2 - lastSlash - 1;
            }
            lastSlash = index2;
            dots = 0;
          } else if (code === 46 && dots > -1) {
            dots++;
          } else {
            dots = -1;
          }
        }
        return result;
      }
      function assertPath$1(path) {
        if (typeof path !== "string") {
          throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
        }
      }
      var minproc_browser = {};
      minproc_browser.cwd = cwd;
      function cwd() {
        return "/";
      }
      var p = minpath_browser;
      var proc = minproc_browser;
      var buffer$1 = isBuffer$6;
      var core = VFile$1;
      var own$1 = {}.hasOwnProperty;
      var order = ["history", "path", "basename", "stem", "extname", "dirname"];
      VFile$1.prototype.toString = toString$4;
      Object.defineProperty(VFile$1.prototype, "path", { get: getPath, set: setPath });
      Object.defineProperty(VFile$1.prototype, "dirname", {
        get: getDirname,
        set: setDirname
      });
      Object.defineProperty(VFile$1.prototype, "basename", {
        get: getBasename,
        set: setBasename
      });
      Object.defineProperty(VFile$1.prototype, "extname", {
        get: getExtname,
        set: setExtname
      });
      Object.defineProperty(VFile$1.prototype, "stem", { get: getStem, set: setStem });
      function VFile$1(options) {
        var prop;
        var index2;
        if (!options) {
          options = {};
        } else if (typeof options === "string" || buffer$1(options)) {
          options = { contents: options };
        } else if ("message" in options && "messages" in options) {
          return options;
        }
        if (!(this instanceof VFile$1)) {
          return new VFile$1(options);
        }
        this.data = {};
        this.messages = [];
        this.history = [];
        this.cwd = proc.cwd();
        index2 = -1;
        while (++index2 < order.length) {
          prop = order[index2];
          if (own$1.call(options, prop)) {
            this[prop] = options[prop];
          }
        }
        for (prop in options) {
          if (order.indexOf(prop) < 0) {
            this[prop] = options[prop];
          }
        }
      }
      function getPath() {
        return this.history[this.history.length - 1];
      }
      function setPath(path) {
        assertNonEmpty(path, "path");
        if (this.path !== path) {
          this.history.push(path);
        }
      }
      function getDirname() {
        return typeof this.path === "string" ? p.dirname(this.path) : void 0;
      }
      function setDirname(dirname2) {
        assertPath(this.path, "dirname");
        this.path = p.join(dirname2 || "", this.basename);
      }
      function getBasename() {
        return typeof this.path === "string" ? p.basename(this.path) : void 0;
      }
      function setBasename(basename2) {
        assertNonEmpty(basename2, "basename");
        assertPart(basename2, "basename");
        this.path = p.join(this.dirname || "", basename2);
      }
      function getExtname() {
        return typeof this.path === "string" ? p.extname(this.path) : void 0;
      }
      function setExtname(extname2) {
        assertPart(extname2, "extname");
        assertPath(this.path, "extname");
        if (extname2) {
          if (extname2.charCodeAt(0) !== 46) {
            throw new Error("`extname` must start with `.`");
          }
          if (extname2.indexOf(".", 1) > -1) {
            throw new Error("`extname` cannot contain multiple dots");
          }
        }
        this.path = p.join(this.dirname, this.stem + (extname2 || ""));
      }
      function getStem() {
        return typeof this.path === "string" ? p.basename(this.path, this.extname) : void 0;
      }
      function setStem(stem) {
        assertNonEmpty(stem, "stem");
        assertPart(stem, "stem");
        this.path = p.join(this.dirname || "", stem + (this.extname || ""));
      }
      function toString$4(encoding) {
        return (this.contents || "").toString(encoding);
      }
      function assertPart(part, name2) {
        if (part && part.indexOf(p.sep) > -1) {
          throw new Error("`" + name2 + "` cannot be a path: did not expect `" + p.sep + "`");
        }
      }
      function assertNonEmpty(part, name2) {
        if (!part) {
          throw new Error("`" + name2 + "` cannot be empty");
        }
      }
      function assertPath(path, name2) {
        if (!path) {
          throw new Error("Setting `" + name2 + "` requires `path` to be set too");
        }
      }
      var VMessage = vfileMessage;
      var VFile = core;
      var lib$3 = VFile;
      VFile.prototype.message = message;
      VFile.prototype.info = info;
      VFile.prototype.fail = fail;
      function message(reason, position2, origin) {
        var message2 = new VMessage(reason, position2, origin);
        if (this.path) {
          message2.name = this.path + ":" + message2.name;
          message2.file = this.path;
        }
        message2.fatal = false;
        this.messages.push(message2);
        return message2;
      }
      function fail() {
        var message2 = this.message.apply(this, arguments);
        message2.fatal = true;
        throw message2;
      }
      function info() {
        var message2 = this.message.apply(this, arguments);
        message2.fatal = null;
        return message2;
      }
      var vfile$1 = lib$3;
      var bail = bail_1;
      var buffer = isBuffer$6;
      var extend$1 = extend$2;
      var plain = isPlainObj;
      var trough = trough_1;
      var vfile = vfile$1;
      unified().freeze();
      var slice$1 = [].slice;
      var own = {}.hasOwnProperty;
      var pipeline = trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);
      function pipelineParse(p2, ctx) {
        ctx.tree = p2.parse(ctx.file);
      }
      function pipelineRun(p2, ctx, next) {
        p2.run(ctx.tree, ctx.file, done);
        function done(error, tree, file) {
          if (error) {
            next(error);
          } else {
            ctx.tree = tree;
            ctx.file = file;
            next();
          }
        }
      }
      function pipelineStringify(p2, ctx) {
        var result = p2.stringify(ctx.tree, ctx.file);
        if (result === void 0 || result === null)
          ;
        else if (typeof result === "string" || buffer(result)) {
          if ("value" in ctx.file) {
            ctx.file.value = result;
          }
          ctx.file.contents = result;
        } else {
          ctx.file.result = result;
        }
      }
      function unified() {
        var attachers = [];
        var transformers = trough();
        var namespace = {};
        var freezeIndex = -1;
        var frozen;
        processor.data = data;
        processor.freeze = freeze;
        processor.attachers = attachers;
        processor.use = use;
        processor.parse = parse;
        processor.stringify = stringify2;
        processor.run = run;
        processor.runSync = runSync;
        processor.process = process2;
        processor.processSync = processSync;
        return processor;
        function processor() {
          var destination = unified();
          var index2 = -1;
          while (++index2 < attachers.length) {
            destination.use.apply(null, attachers[index2]);
          }
          destination.data(extend$1(true, {}, namespace));
          return destination;
        }
        function freeze() {
          var values2;
          var transformer;
          if (frozen) {
            return processor;
          }
          while (++freezeIndex < attachers.length) {
            values2 = attachers[freezeIndex];
            if (values2[1] === false) {
              continue;
            }
            if (values2[1] === true) {
              values2[1] = void 0;
            }
            transformer = values2[0].apply(processor, values2.slice(1));
            if (typeof transformer === "function") {
              transformers.use(transformer);
            }
          }
          frozen = true;
          freezeIndex = Infinity;
          return processor;
        }
        function data(key, value) {
          if (typeof key === "string") {
            if (arguments.length === 2) {
              assertUnfrozen("data", frozen);
              namespace[key] = value;
              return processor;
            }
            return own.call(namespace, key) && namespace[key] || null;
          }
          if (key) {
            assertUnfrozen("data", frozen);
            namespace = key;
            return processor;
          }
          return namespace;
        }
        function use(value) {
          var settings;
          assertUnfrozen("use", frozen);
          if (value === null || value === void 0)
            ;
          else if (typeof value === "function") {
            addPlugin.apply(null, arguments);
          } else if (typeof value === "object") {
            if ("length" in value) {
              addList(value);
            } else {
              addPreset(value);
            }
          } else {
            throw new Error("Expected usable value, not `" + value + "`");
          }
          if (settings) {
            namespace.settings = extend$1(namespace.settings || {}, settings);
          }
          return processor;
          function addPreset(result) {
            addList(result.plugins);
            if (result.settings) {
              settings = extend$1(settings || {}, result.settings);
            }
          }
          function add2(value2) {
            if (typeof value2 === "function") {
              addPlugin(value2);
            } else if (typeof value2 === "object") {
              if ("length" in value2) {
                addPlugin.apply(null, value2);
              } else {
                addPreset(value2);
              }
            } else {
              throw new Error("Expected usable value, not `" + value2 + "`");
            }
          }
          function addList(plugins) {
            var index2 = -1;
            if (plugins === null || plugins === void 0)
              ;
            else if (typeof plugins === "object" && "length" in plugins) {
              while (++index2 < plugins.length) {
                add2(plugins[index2]);
              }
            } else {
              throw new Error("Expected a list of plugins, not `" + plugins + "`");
            }
          }
          function addPlugin(plugin, value2) {
            var entry = find(plugin);
            if (entry) {
              if (plain(entry[1]) && plain(value2)) {
                value2 = extend$1(true, entry[1], value2);
              }
              entry[1] = value2;
            } else {
              attachers.push(slice$1.call(arguments));
            }
          }
        }
        function find(plugin) {
          var index2 = -1;
          while (++index2 < attachers.length) {
            if (attachers[index2][0] === plugin) {
              return attachers[index2];
            }
          }
        }
        function parse(doc) {
          var file = vfile(doc);
          var Parser;
          freeze();
          Parser = processor.Parser;
          assertParser("parse", Parser);
          if (newable(Parser, "parse")) {
            return new Parser(String(file), file).parse();
          }
          return Parser(String(file), file);
        }
        function run(node, file, cb2) {
          assertNode(node);
          freeze();
          if (!cb2 && typeof file === "function") {
            cb2 = file;
            file = null;
          }
          if (!cb2) {
            return new Promise(executor);
          }
          executor(null, cb2);
          function executor(resolve, reject) {
            transformers.run(node, vfile(file), done);
            function done(error, tree, file2) {
              tree = tree || node;
              if (error) {
                reject(error);
              } else if (resolve) {
                resolve(tree);
              } else {
                cb2(null, tree, file2);
              }
            }
          }
        }
        function runSync(node, file) {
          var result;
          var complete;
          run(node, file, done);
          assertDone("runSync", "run", complete);
          return result;
          function done(error, tree) {
            complete = true;
            result = tree;
            bail(error);
          }
        }
        function stringify2(node, doc) {
          var file = vfile(doc);
          var Compiler;
          freeze();
          Compiler = processor.Compiler;
          assertCompiler("stringify", Compiler);
          assertNode(node);
          if (newable(Compiler, "compile")) {
            return new Compiler(node, file).compile();
          }
          return Compiler(node, file);
        }
        function process2(doc, cb2) {
          freeze();
          assertParser("process", processor.Parser);
          assertCompiler("process", processor.Compiler);
          if (!cb2) {
            return new Promise(executor);
          }
          executor(null, cb2);
          function executor(resolve, reject) {
            var file = vfile(doc);
            pipeline.run(processor, { file }, done);
            function done(error) {
              if (error) {
                reject(error);
              } else if (resolve) {
                resolve(file);
              } else {
                cb2(null, file);
              }
            }
          }
        }
        function processSync(doc) {
          var file;
          var complete;
          freeze();
          assertParser("processSync", processor.Parser);
          assertCompiler("processSync", processor.Compiler);
          file = vfile(doc);
          process2(file, done);
          assertDone("processSync", "process", complete);
          return file;
          function done(error) {
            complete = true;
            bail(error);
          }
        }
      }
      function newable(value, name2) {
        return typeof value === "function" && value.prototype && (keys$8(value.prototype) || name2 in value.prototype);
      }
      function keys$8(value) {
        var key;
        for (key in value) {
          return true;
        }
        return false;
      }
      function assertParser(name2, Parser) {
        if (typeof Parser !== "function") {
          throw new Error("Cannot `" + name2 + "` without `Parser`");
        }
      }
      function assertCompiler(name2, Compiler) {
        if (typeof Compiler !== "function") {
          throw new Error("Cannot `" + name2 + "` without `Compiler`");
        }
      }
      function assertUnfrozen(name2, frozen) {
        if (frozen) {
          throw new Error("Cannot invoke `" + name2 + "` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.");
        }
      }
      function assertNode(node) {
        if (!node || typeof node.type !== "string") {
          throw new Error("Expected node, got `" + node + "`");
        }
      }
      function assertDone(name2, asyncName, complete) {
        if (!complete) {
          throw new Error("`" + name2 + "` finished async. Use `" + asyncName + "` instead");
        }
      }
      const MARK_BOLD = "bold";
      const createBoldPlugin = createPluginFactory({
        key: MARK_BOLD,
        isLeaf: true,
        deserializeHtml: {
          rules: [{
            validNodeName: ["STRONG", "B"]
          }, {
            validStyle: {
              fontWeight: ["600", "700", "bold"]
            }
          }],
          query: (el2) => !someHtmlElement(el2, (node) => node.style.fontWeight === "normal")
        },
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+b"
        }
      });
      const MARK_CODE = "code";
      const createCodePlugin = createPluginFactory({
        key: MARK_CODE,
        isLeaf: true,
        deserializeHtml: {
          rules: [{
            validNodeName: ["CODE"]
          }, {
            validStyle: {
              wordWrap: "break-word"
            }
          }, {
            validStyle: {
              fontFamily: "Consolas"
            }
          }],
          query(el2) {
            const blockAbove = findHtmlParentElement(el2, "P");
            if ((blockAbove === null || blockAbove === void 0 ? void 0 : blockAbove.style.fontFamily) === "Consolas")
              return false;
            return !findHtmlParentElement(el2, "PRE");
          }
        },
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+e"
        }
      });
      const MARK_ITALIC = "italic";
      const createItalicPlugin = createPluginFactory({
        key: MARK_ITALIC,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+i"
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["EM", "I"]
          }, {
            validStyle: {
              fontStyle: "italic"
            }
          }],
          query: (el2) => !someHtmlElement(el2, (node) => node.style.fontStyle === "normal")
        }
      });
      const MARK_STRIKETHROUGH = "strikethrough";
      const createStrikethroughPlugin = createPluginFactory({
        key: MARK_STRIKETHROUGH,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+shift+x"
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["S", "DEL", "STRIKE"]
          }, {
            validStyle: {
              textDecoration: "line-through"
            }
          }],
          query: (el2) => !someHtmlElement(el2, (node) => node.style.textDecoration === "none")
        }
      });
      const MARK_SUBSCRIPT$1 = "subscript";
      const MARK_SUPERSCRIPT$1 = "superscript";
      const createSubscriptPlugin = createPluginFactory({
        key: MARK_SUBSCRIPT$1,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+,",
          clear: MARK_SUPERSCRIPT$1
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["SUB"]
          }, {
            validStyle: {
              verticalAlign: "sub"
            }
          }]
        }
      });
      const MARK_SUPERSCRIPT = "superscript";
      const MARK_SUBSCRIPT = "subscript";
      const createSuperscriptPlugin = createPluginFactory({
        key: MARK_SUPERSCRIPT,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+.",
          clear: MARK_SUBSCRIPT
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["SUP"]
          }, {
            validStyle: {
              verticalAlign: "super"
            }
          }]
        }
      });
      const MARK_UNDERLINE = "underline";
      const createUnderlinePlugin = createPluginFactory({
        key: MARK_UNDERLINE,
        isLeaf: true,
        handlers: {
          onKeyDown: onKeyDownToggleMark
        },
        options: {
          hotkey: "mod+u"
        },
        deserializeHtml: {
          rules: [{
            validNodeName: ["U"]
          }, {
            validStyle: {
              textDecoration: ["underline"]
            }
          }],
          query: (el2) => !someHtmlElement(el2, (node) => node.style.textDecoration === "none")
        }
      });
      createPluginFactory({
        key: "basicMarks",
        plugins: [createBoldPlugin(), createCodePlugin(), createItalicPlugin(), createStrikethroughPlugin(), createSubscriptPlugin(), createSuperscriptPlugin(), createUnderlinePlugin()]
      });
      var __extends$1 = function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __assign$1 = function() {
        __assign$1 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        return __assign$1.apply(this, arguments);
      };
      var rowSizeBase = {
        width: "100%",
        height: "10px",
        top: "0px",
        left: "0px",
        cursor: "row-resize"
      };
      var colSizeBase = {
        width: "10px",
        height: "100%",
        top: "0px",
        left: "0px",
        cursor: "col-resize"
      };
      var edgeBase = {
        width: "20px",
        height: "20px",
        position: "absolute"
      };
      var styles$1 = {
        top: __assign$1(__assign$1({}, rowSizeBase), { top: "-5px" }),
        right: __assign$1(__assign$1({}, colSizeBase), { left: void 0, right: "-5px" }),
        bottom: __assign$1(__assign$1({}, rowSizeBase), { top: void 0, bottom: "-5px" }),
        left: __assign$1(__assign$1({}, colSizeBase), { left: "-5px" }),
        topRight: __assign$1(__assign$1({}, edgeBase), { right: "-10px", top: "-10px", cursor: "ne-resize" }),
        bottomRight: __assign$1(__assign$1({}, edgeBase), { right: "-10px", bottom: "-10px", cursor: "se-resize" }),
        bottomLeft: __assign$1(__assign$1({}, edgeBase), { left: "-10px", bottom: "-10px", cursor: "sw-resize" }),
        topLeft: __assign$1(__assign$1({}, edgeBase), { left: "-10px", top: "-10px", cursor: "nw-resize" })
      };
      var Resizer = function(_super) {
        __extends$1(Resizer2, _super);
        function Resizer2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.onMouseDown = function(e2) {
            _this.props.onResizeStart(e2, _this.props.direction);
          };
          _this.onTouchStart = function(e2) {
            _this.props.onResizeStart(e2, _this.props.direction);
          };
          return _this;
        }
        Resizer2.prototype.render = function() {
          return react.exports.createElement("div", { className: this.props.className || "", style: __assign$1(__assign$1({ position: "absolute", userSelect: "none" }, styles$1[this.props.direction]), this.props.replaceStyles || {}), onMouseDown: this.onMouseDown, onTouchStart: this.onTouchStart }, this.props.children);
        };
        return Resizer2;
      }(react.exports.PureComponent);
      var __extends = function() {
        var extendStatics = function(d2, b2) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
            d3.__proto__ = b3;
          } || function(d3, b3) {
            for (var p2 in b3)
              if (Object.prototype.hasOwnProperty.call(b3, p2))
                d3[p2] = b3[p2];
          };
          return extendStatics(d2, b2);
        };
        return function(d2, b2) {
          extendStatics(d2, b2);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
      }();
      var __assign$2 = function() {
        __assign$2 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        return __assign$2.apply(this, arguments);
      };
      var DEFAULT_SIZE$2 = {
        width: "auto",
        height: "auto"
      };
      var clamp$1 = function(n2, min2, max2) {
        return Math.max(Math.min(n2, max2), min2);
      };
      var snap = function(n2, size) {
        return Math.round(n2 / size) * size;
      };
      var hasDirection = function(dir, target) {
        return new RegExp(dir, "i").test(target);
      };
      var isTouchEvent = function(event) {
        return Boolean(event.touches && event.touches.length);
      };
      var isMouseEvent = function(event) {
        return Boolean((event.clientX || event.clientX === 0) && (event.clientY || event.clientY === 0));
      };
      var findClosestSnap = function(n2, snapArray, snapGap) {
        if (snapGap === void 0) {
          snapGap = 0;
        }
        var closestGapIndex = snapArray.reduce(function(prev, curr, index2) {
          return Math.abs(curr - n2) < Math.abs(snapArray[prev] - n2) ? index2 : prev;
        }, 0);
        var gap = Math.abs(snapArray[closestGapIndex] - n2);
        return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n2;
      };
      var getStringSize = function(n2) {
        n2 = n2.toString();
        if (n2 === "auto") {
          return n2;
        }
        if (n2.endsWith("px")) {
          return n2;
        }
        if (n2.endsWith("%")) {
          return n2;
        }
        if (n2.endsWith("vh")) {
          return n2;
        }
        if (n2.endsWith("vw")) {
          return n2;
        }
        if (n2.endsWith("vmax")) {
          return n2;
        }
        if (n2.endsWith("vmin")) {
          return n2;
        }
        return n2 + "px";
      };
      var getPixelSize = function(size, parentSize, innerWidth, innerHeight) {
        if (size && typeof size === "string") {
          if (size.endsWith("px")) {
            return Number(size.replace("px", ""));
          }
          if (size.endsWith("%")) {
            var ratio = Number(size.replace("%", "")) / 100;
            return parentSize * ratio;
          }
          if (size.endsWith("vw")) {
            var ratio = Number(size.replace("vw", "")) / 100;
            return innerWidth * ratio;
          }
          if (size.endsWith("vh")) {
            var ratio = Number(size.replace("vh", "")) / 100;
            return innerHeight * ratio;
          }
        }
        return size;
      };
      var calculateNewMax = function(parentSize, innerWidth, innerHeight, maxWidth, maxHeight, minWidth, minHeight) {
        maxWidth = getPixelSize(maxWidth, parentSize.width, innerWidth, innerHeight);
        maxHeight = getPixelSize(maxHeight, parentSize.height, innerWidth, innerHeight);
        minWidth = getPixelSize(minWidth, parentSize.width, innerWidth, innerHeight);
        minHeight = getPixelSize(minHeight, parentSize.height, innerWidth, innerHeight);
        return {
          maxWidth: typeof maxWidth === "undefined" ? void 0 : Number(maxWidth),
          maxHeight: typeof maxHeight === "undefined" ? void 0 : Number(maxHeight),
          minWidth: typeof minWidth === "undefined" ? void 0 : Number(minWidth),
          minHeight: typeof minHeight === "undefined" ? void 0 : Number(minHeight)
        };
      };
      var definedProps = [
        "as",
        "style",
        "className",
        "grid",
        "snap",
        "bounds",
        "boundsByDirection",
        "size",
        "defaultSize",
        "minWidth",
        "minHeight",
        "maxWidth",
        "maxHeight",
        "lockAspectRatio",
        "lockAspectRatioExtraWidth",
        "lockAspectRatioExtraHeight",
        "enable",
        "handleStyles",
        "handleClasses",
        "handleWrapperStyle",
        "handleWrapperClass",
        "children",
        "onResizeStart",
        "onResize",
        "onResizeStop",
        "handleComponent",
        "scale",
        "resizeRatio",
        "snapGap"
      ];
      var baseClassName = "__resizable_base__";
      (function(_super) {
        __extends(Resizable, _super);
        function Resizable(props) {
          var _this = _super.call(this, props) || this;
          _this.ratio = 1;
          _this.resizable = null;
          _this.parentLeft = 0;
          _this.parentTop = 0;
          _this.resizableLeft = 0;
          _this.resizableRight = 0;
          _this.resizableTop = 0;
          _this.resizableBottom = 0;
          _this.targetLeft = 0;
          _this.targetTop = 0;
          _this.appendBase = function() {
            if (!_this.resizable || !_this.window) {
              return null;
            }
            var parent2 = _this.parentNode;
            if (!parent2) {
              return null;
            }
            var element = _this.window.document.createElement("div");
            element.style.width = "100%";
            element.style.height = "100%";
            element.style.position = "absolute";
            element.style.transform = "scale(0, 0)";
            element.style.left = "0";
            element.style.flex = "0 0 100%";
            if (element.classList) {
              element.classList.add(baseClassName);
            } else {
              element.className += baseClassName;
            }
            parent2.appendChild(element);
            return element;
          };
          _this.removeBase = function(base) {
            var parent2 = _this.parentNode;
            if (!parent2) {
              return;
            }
            parent2.removeChild(base);
          };
          _this.ref = function(c2) {
            if (c2) {
              _this.resizable = c2;
            }
          };
          _this.state = {
            isResizing: false,
            width: typeof (_this.propsSize && _this.propsSize.width) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.width,
            height: typeof (_this.propsSize && _this.propsSize.height) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.height,
            direction: "right",
            original: {
              x: 0,
              y: 0,
              width: 0,
              height: 0
            },
            backgroundStyle: {
              height: "100%",
              width: "100%",
              backgroundColor: "rgba(0,0,0,0)",
              cursor: "auto",
              opacity: 0,
              position: "fixed",
              zIndex: 9999,
              top: "0",
              left: "0",
              bottom: "0",
              right: "0"
            },
            flexBasis: void 0
          };
          _this.onResizeStart = _this.onResizeStart.bind(_this);
          _this.onMouseMove = _this.onMouseMove.bind(_this);
          _this.onMouseUp = _this.onMouseUp.bind(_this);
          return _this;
        }
        Object.defineProperty(Resizable.prototype, "parentNode", {
          get: function() {
            if (!this.resizable) {
              return null;
            }
            return this.resizable.parentNode;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resizable.prototype, "window", {
          get: function() {
            if (!this.resizable) {
              return null;
            }
            if (!this.resizable.ownerDocument) {
              return null;
            }
            return this.resizable.ownerDocument.defaultView;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resizable.prototype, "propsSize", {
          get: function() {
            return this.props.size || this.props.defaultSize || DEFAULT_SIZE$2;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resizable.prototype, "size", {
          get: function() {
            var width = 0;
            var height = 0;
            if (this.resizable && this.window) {
              var orgWidth = this.resizable.offsetWidth;
              var orgHeight = this.resizable.offsetHeight;
              var orgPosition = this.resizable.style.position;
              if (orgPosition !== "relative") {
                this.resizable.style.position = "relative";
              }
              width = this.resizable.style.width !== "auto" ? this.resizable.offsetWidth : orgWidth;
              height = this.resizable.style.height !== "auto" ? this.resizable.offsetHeight : orgHeight;
              this.resizable.style.position = orgPosition;
            }
            return { width, height };
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Resizable.prototype, "sizeStyle", {
          get: function() {
            var _this = this;
            var size = this.props.size;
            var getSize = function(key) {
              if (typeof _this.state[key] === "undefined" || _this.state[key] === "auto") {
                return "auto";
              }
              if (_this.propsSize && _this.propsSize[key] && _this.propsSize[key].toString().endsWith("%")) {
                if (_this.state[key].toString().endsWith("%")) {
                  return _this.state[key].toString();
                }
                var parentSize = _this.getParentSize();
                var value = Number(_this.state[key].toString().replace("px", ""));
                var percent = value / parentSize[key] * 100;
                return percent + "%";
              }
              return getStringSize(_this.state[key]);
            };
            var width = size && typeof size.width !== "undefined" && !this.state.isResizing ? getStringSize(size.width) : getSize("width");
            var height = size && typeof size.height !== "undefined" && !this.state.isResizing ? getStringSize(size.height) : getSize("height");
            return { width, height };
          },
          enumerable: false,
          configurable: true
        });
        Resizable.prototype.getParentSize = function() {
          if (!this.parentNode) {
            if (!this.window) {
              return { width: 0, height: 0 };
            }
            return { width: this.window.innerWidth, height: this.window.innerHeight };
          }
          var base = this.appendBase();
          if (!base) {
            return { width: 0, height: 0 };
          }
          var wrapChanged = false;
          var wrap2 = this.parentNode.style.flexWrap;
          if (wrap2 !== "wrap") {
            wrapChanged = true;
            this.parentNode.style.flexWrap = "wrap";
          }
          base.style.position = "relative";
          base.style.minWidth = "100%";
          base.style.minHeight = "100%";
          var size = {
            width: base.offsetWidth,
            height: base.offsetHeight
          };
          if (wrapChanged) {
            this.parentNode.style.flexWrap = wrap2;
          }
          this.removeBase(base);
          return size;
        };
        Resizable.prototype.bindEvents = function() {
          if (this.window) {
            this.window.addEventListener("mouseup", this.onMouseUp);
            this.window.addEventListener("mousemove", this.onMouseMove);
            this.window.addEventListener("mouseleave", this.onMouseUp);
            this.window.addEventListener("touchmove", this.onMouseMove, {
              capture: true,
              passive: false
            });
            this.window.addEventListener("touchend", this.onMouseUp);
          }
        };
        Resizable.prototype.unbindEvents = function() {
          if (this.window) {
            this.window.removeEventListener("mouseup", this.onMouseUp);
            this.window.removeEventListener("mousemove", this.onMouseMove);
            this.window.removeEventListener("mouseleave", this.onMouseUp);
            this.window.removeEventListener("touchmove", this.onMouseMove, true);
            this.window.removeEventListener("touchend", this.onMouseUp);
          }
        };
        Resizable.prototype.componentDidMount = function() {
          if (!this.resizable || !this.window) {
            return;
          }
          var computedStyle = this.window.getComputedStyle(this.resizable);
          this.setState({
            width: this.state.width || this.size.width,
            height: this.state.height || this.size.height,
            flexBasis: computedStyle.flexBasis !== "auto" ? computedStyle.flexBasis : void 0
          });
        };
        Resizable.prototype.componentWillUnmount = function() {
          if (this.window) {
            this.unbindEvents();
          }
        };
        Resizable.prototype.createSizeForCssProperty = function(newSize, kind) {
          var propsSize = this.propsSize && this.propsSize[kind];
          return this.state[kind] === "auto" && this.state.original[kind] === newSize && (typeof propsSize === "undefined" || propsSize === "auto") ? "auto" : newSize;
        };
        Resizable.prototype.calculateNewMaxFromBoundary = function(maxWidth, maxHeight) {
          var boundsByDirection = this.props.boundsByDirection;
          var direction = this.state.direction;
          var widthByDirection = boundsByDirection && hasDirection("left", direction);
          var heightByDirection = boundsByDirection && hasDirection("top", direction);
          var boundWidth;
          var boundHeight;
          if (this.props.bounds === "parent") {
            var parent_1 = this.parentNode;
            if (parent_1) {
              boundWidth = widthByDirection ? this.resizableRight - this.parentLeft : parent_1.offsetWidth + (this.parentLeft - this.resizableLeft);
              boundHeight = heightByDirection ? this.resizableBottom - this.parentTop : parent_1.offsetHeight + (this.parentTop - this.resizableTop);
            }
          } else if (this.props.bounds === "window") {
            if (this.window) {
              boundWidth = widthByDirection ? this.resizableRight : this.window.innerWidth - this.resizableLeft;
              boundHeight = heightByDirection ? this.resizableBottom : this.window.innerHeight - this.resizableTop;
            }
          } else if (this.props.bounds) {
            boundWidth = widthByDirection ? this.resizableRight - this.targetLeft : this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);
            boundHeight = heightByDirection ? this.resizableBottom - this.targetTop : this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);
          }
          if (boundWidth && Number.isFinite(boundWidth)) {
            maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
          }
          if (boundHeight && Number.isFinite(boundHeight)) {
            maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
          }
          return { maxWidth, maxHeight };
        };
        Resizable.prototype.calculateNewSizeFromDirection = function(clientX, clientY) {
          var scale = this.props.scale || 1;
          var resizeRatio = this.props.resizeRatio || 1;
          var _a = this.state, direction = _a.direction, original = _a.original;
          var _b = this.props, lockAspectRatio = _b.lockAspectRatio, lockAspectRatioExtraHeight = _b.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _b.lockAspectRatioExtraWidth;
          var newWidth = original.width;
          var newHeight = original.height;
          var extraHeight = lockAspectRatioExtraHeight || 0;
          var extraWidth = lockAspectRatioExtraWidth || 0;
          if (hasDirection("right", direction)) {
            newWidth = original.width + (clientX - original.x) * resizeRatio / scale;
            if (lockAspectRatio) {
              newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
            }
          }
          if (hasDirection("left", direction)) {
            newWidth = original.width - (clientX - original.x) * resizeRatio / scale;
            if (lockAspectRatio) {
              newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
            }
          }
          if (hasDirection("bottom", direction)) {
            newHeight = original.height + (clientY - original.y) * resizeRatio / scale;
            if (lockAspectRatio) {
              newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
            }
          }
          if (hasDirection("top", direction)) {
            newHeight = original.height - (clientY - original.y) * resizeRatio / scale;
            if (lockAspectRatio) {
              newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
            }
          }
          return { newWidth, newHeight };
        };
        Resizable.prototype.calculateNewSizeFromAspectRatio = function(newWidth, newHeight, max2, min2) {
          var _a = this.props, lockAspectRatio = _a.lockAspectRatio, lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;
          var computedMinWidth = typeof min2.width === "undefined" ? 10 : min2.width;
          var computedMaxWidth = typeof max2.width === "undefined" || max2.width < 0 ? newWidth : max2.width;
          var computedMinHeight = typeof min2.height === "undefined" ? 10 : min2.height;
          var computedMaxHeight = typeof max2.height === "undefined" || max2.height < 0 ? newHeight : max2.height;
          var extraHeight = lockAspectRatioExtraHeight || 0;
          var extraWidth = lockAspectRatioExtraWidth || 0;
          if (lockAspectRatio) {
            var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;
            var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;
            var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;
            var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;
            var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
            var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
            var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
            var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
            newWidth = clamp$1(newWidth, lockedMinWidth, lockedMaxWidth);
            newHeight = clamp$1(newHeight, lockedMinHeight, lockedMaxHeight);
          } else {
            newWidth = clamp$1(newWidth, computedMinWidth, computedMaxWidth);
            newHeight = clamp$1(newHeight, computedMinHeight, computedMaxHeight);
          }
          return { newWidth, newHeight };
        };
        Resizable.prototype.setBoundingClientRect = function() {
          if (this.props.bounds === "parent") {
            var parent_2 = this.parentNode;
            if (parent_2) {
              var parentRect = parent_2.getBoundingClientRect();
              this.parentLeft = parentRect.left;
              this.parentTop = parentRect.top;
            }
          }
          if (this.props.bounds && typeof this.props.bounds !== "string") {
            var targetRect = this.props.bounds.getBoundingClientRect();
            this.targetLeft = targetRect.left;
            this.targetTop = targetRect.top;
          }
          if (this.resizable) {
            var _a = this.resizable.getBoundingClientRect(), left = _a.left, top_1 = _a.top, right = _a.right, bottom = _a.bottom;
            this.resizableLeft = left;
            this.resizableRight = right;
            this.resizableTop = top_1;
            this.resizableBottom = bottom;
          }
        };
        Resizable.prototype.onResizeStart = function(event, direction) {
          if (!this.resizable || !this.window) {
            return;
          }
          var clientX = 0;
          var clientY = 0;
          if (event.nativeEvent && isMouseEvent(event.nativeEvent)) {
            clientX = event.nativeEvent.clientX;
            clientY = event.nativeEvent.clientY;
          } else if (event.nativeEvent && isTouchEvent(event.nativeEvent)) {
            clientX = event.nativeEvent.touches[0].clientX;
            clientY = event.nativeEvent.touches[0].clientY;
          }
          if (this.props.onResizeStart) {
            if (this.resizable) {
              var startResize = this.props.onResizeStart(event, direction, this.resizable);
              if (startResize === false) {
                return;
              }
            }
          }
          if (this.props.size) {
            if (typeof this.props.size.height !== "undefined" && this.props.size.height !== this.state.height) {
              this.setState({ height: this.props.size.height });
            }
            if (typeof this.props.size.width !== "undefined" && this.props.size.width !== this.state.width) {
              this.setState({ width: this.props.size.width });
            }
          }
          this.ratio = typeof this.props.lockAspectRatio === "number" ? this.props.lockAspectRatio : this.size.width / this.size.height;
          var flexBasis;
          var computedStyle = this.window.getComputedStyle(this.resizable);
          if (computedStyle.flexBasis !== "auto") {
            var parent_3 = this.parentNode;
            if (parent_3) {
              var dir = this.window.getComputedStyle(parent_3).flexDirection;
              this.flexDir = dir.startsWith("row") ? "row" : "column";
              flexBasis = computedStyle.flexBasis;
            }
          }
          this.setBoundingClientRect();
          this.bindEvents();
          var state = {
            original: {
              x: clientX,
              y: clientY,
              width: this.size.width,
              height: this.size.height
            },
            isResizing: true,
            backgroundStyle: __assign$2(__assign$2({}, this.state.backgroundStyle), { cursor: this.window.getComputedStyle(event.target).cursor || "auto" }),
            direction,
            flexBasis
          };
          this.setState(state);
        };
        Resizable.prototype.onMouseMove = function(event) {
          var _this = this;
          if (!this.state.isResizing || !this.resizable || !this.window) {
            return;
          }
          if (this.window.TouchEvent && isTouchEvent(event)) {
            try {
              event.preventDefault();
              event.stopPropagation();
            } catch (e2) {
            }
          }
          var _a = this.props, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, minWidth = _a.minWidth, minHeight = _a.minHeight;
          var clientX = isTouchEvent(event) ? event.touches[0].clientX : event.clientX;
          var clientY = isTouchEvent(event) ? event.touches[0].clientY : event.clientY;
          var _b = this.state, direction = _b.direction, original = _b.original, width = _b.width, height = _b.height;
          var parentSize = this.getParentSize();
          var max2 = calculateNewMax(parentSize, this.window.innerWidth, this.window.innerHeight, maxWidth, maxHeight, minWidth, minHeight);
          maxWidth = max2.maxWidth;
          maxHeight = max2.maxHeight;
          minWidth = max2.minWidth;
          minHeight = max2.minHeight;
          var _c = this.calculateNewSizeFromDirection(clientX, clientY), newHeight = _c.newHeight, newWidth = _c.newWidth;
          var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);
          if (this.props.snap && this.props.snap.x) {
            newWidth = findClosestSnap(newWidth, this.props.snap.x, this.props.snapGap);
          }
          if (this.props.snap && this.props.snap.y) {
            newHeight = findClosestSnap(newHeight, this.props.snap.y, this.props.snapGap);
          }
          var newSize = this.calculateNewSizeFromAspectRatio(newWidth, newHeight, { width: boundaryMax.maxWidth, height: boundaryMax.maxHeight }, { width: minWidth, height: minHeight });
          newWidth = newSize.newWidth;
          newHeight = newSize.newHeight;
          if (this.props.grid) {
            var newGridWidth = snap(newWidth, this.props.grid[0]);
            var newGridHeight = snap(newHeight, this.props.grid[1]);
            var gap = this.props.snapGap || 0;
            newWidth = gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;
            newHeight = gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;
          }
          var delta = {
            width: newWidth - original.width,
            height: newHeight - original.height
          };
          if (width && typeof width === "string") {
            if (width.endsWith("%")) {
              var percent = newWidth / parentSize.width * 100;
              newWidth = percent + "%";
            } else if (width.endsWith("vw")) {
              var vw = newWidth / this.window.innerWidth * 100;
              newWidth = vw + "vw";
            } else if (width.endsWith("vh")) {
              var vh2 = newWidth / this.window.innerHeight * 100;
              newWidth = vh2 + "vh";
            }
          }
          if (height && typeof height === "string") {
            if (height.endsWith("%")) {
              var percent = newHeight / parentSize.height * 100;
              newHeight = percent + "%";
            } else if (height.endsWith("vw")) {
              var vw = newHeight / this.window.innerWidth * 100;
              newHeight = vw + "vw";
            } else if (height.endsWith("vh")) {
              var vh2 = newHeight / this.window.innerHeight * 100;
              newHeight = vh2 + "vh";
            }
          }
          var newState = {
            width: this.createSizeForCssProperty(newWidth, "width"),
            height: this.createSizeForCssProperty(newHeight, "height")
          };
          if (this.flexDir === "row") {
            newState.flexBasis = newState.width;
          } else if (this.flexDir === "column") {
            newState.flexBasis = newState.height;
          }
          reactDom.exports.flushSync(function() {
            _this.setState(newState);
          });
          if (this.props.onResize) {
            this.props.onResize(event, direction, this.resizable, delta);
          }
        };
        Resizable.prototype.onMouseUp = function(event) {
          var _a = this.state, isResizing = _a.isResizing, direction = _a.direction, original = _a.original;
          if (!isResizing || !this.resizable) {
            return;
          }
          var delta = {
            width: this.size.width - original.width,
            height: this.size.height - original.height
          };
          if (this.props.onResizeStop) {
            this.props.onResizeStop(event, direction, this.resizable, delta);
          }
          if (this.props.size) {
            this.setState(this.props.size);
          }
          this.unbindEvents();
          this.setState({
            isResizing: false,
            backgroundStyle: __assign$2(__assign$2({}, this.state.backgroundStyle), { cursor: "auto" })
          });
        };
        Resizable.prototype.updateSize = function(size) {
          this.setState({ width: size.width, height: size.height });
        };
        Resizable.prototype.renderResizer = function() {
          var _this = this;
          var _a = this.props, enable = _a.enable, handleStyles = _a.handleStyles, handleClasses = _a.handleClasses, handleWrapperStyle = _a.handleWrapperStyle, handleWrapperClass = _a.handleWrapperClass, handleComponent = _a.handleComponent;
          if (!enable) {
            return null;
          }
          var resizers = Object.keys(enable).map(function(dir) {
            if (enable[dir] !== false) {
              return react.exports.createElement(Resizer, { key: dir, direction: dir, onResizeStart: _this.onResizeStart, replaceStyles: handleStyles && handleStyles[dir], className: handleClasses && handleClasses[dir] }, handleComponent && handleComponent[dir] ? handleComponent[dir] : null);
            }
            return null;
          });
          return react.exports.createElement("div", { className: handleWrapperClass, style: handleWrapperStyle }, resizers);
        };
        Resizable.prototype.render = function() {
          var _this = this;
          var extendsProps = Object.keys(this.props).reduce(function(acc, key) {
            if (definedProps.indexOf(key) !== -1) {
              return acc;
            }
            acc[key] = _this.props[key];
            return acc;
          }, {});
          var style = __assign$2(__assign$2(__assign$2({ position: "relative", userSelect: this.state.isResizing ? "none" : "auto" }, this.props.style), this.sizeStyle), { maxWidth: this.props.maxWidth, maxHeight: this.props.maxHeight, minWidth: this.props.minWidth, minHeight: this.props.minHeight, boxSizing: "border-box", flexShrink: 0 });
          if (this.state.flexBasis) {
            style.flexBasis = this.state.flexBasis;
          }
          var Wrapper = this.props.as || "div";
          return react.exports.createElement(Wrapper, __assign$2({ ref: this.ref, style, className: this.props.className }, extendsProps), this.state.isResizing && react.exports.createElement("div", { style: this.state.backgroundStyle }), this.props.children, this.renderResizer());
        };
        Resizable.defaultProps = {
          as: "div",
          onResizeStart: function() {
          },
          onResize: function() {
          },
          onResizeStop: function() {
          },
          enable: {
            top: true,
            right: true,
            bottom: true,
            left: true,
            topRight: true,
            bottomRight: true,
            bottomLeft: true,
            topLeft: true
          },
          style: {},
          grid: [1, 1],
          lockAspectRatio: false,
          lockAspectRatioExtraWidth: 0,
          lockAspectRatioExtraHeight: 0,
          scale: 1,
          resizeRatio: 1,
          snapGap: 0
        };
        return Resizable;
      })(react.exports.PureComponent);
      function unwrapExports(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule(fn2, module2) {
        return module2 = {
          exports: {}
        }, fn2(module2, module2.exports), module2.exports;
      }
      var lib$2 = createCommonjsModule(function(module2, exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        var IS_MAC2 = () => typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
        var MODIFIERS2 = {
          alt: "altKey",
          control: "ctrlKey",
          meta: "metaKey",
          shift: "shiftKey"
        };
        var ALIASES2 = () => ({
          add: "+",
          break: "pause",
          cmd: "meta",
          command: "meta",
          ctl: "control",
          ctrl: "control",
          del: "delete",
          down: "arrowdown",
          esc: "escape",
          ins: "insert",
          left: "arrowleft",
          mod: IS_MAC2() ? "meta" : "control",
          opt: "alt",
          option: "alt",
          return: "enter",
          right: "arrowright",
          space: " ",
          spacebar: " ",
          up: "arrowup",
          win: "meta",
          windows: "meta"
        });
        var CODES2 = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          " ": 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ";": 186,
          "=": 187,
          ",": 188,
          "-": 189,
          ".": 190,
          "/": 191,
          "`": 192,
          "[": 219,
          "\\": 220,
          "]": 221,
          "'": 222
        };
        for (var f2 = 1; f2 < 20; f2++) {
          CODES2["f" + f2] = 111 + f2;
        }
        function isHotkey2(hotkey, options, event) {
          if (options && !("byKey" in options)) {
            event = options;
            options = null;
          }
          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey];
          }
          var array = hotkey.map(function(string2) {
            return parseHotkey2(string2, options);
          });
          var check = function check2(e2) {
            return array.some(function(object) {
              return compareHotkey2(object, e2);
            });
          };
          var ret = event == null ? check : check(event);
          return ret;
        }
        function isCodeHotkey2(hotkey, event) {
          return isHotkey2(hotkey, event);
        }
        function isKeyHotkey2(hotkey, event) {
          return isHotkey2(hotkey, {
            byKey: true
          }, event);
        }
        function parseHotkey2(hotkey, options) {
          var byKey = options && options.byKey;
          var ret = {};
          hotkey = hotkey.replace("++", "+add");
          var values2 = hotkey.split("+");
          var length = values2.length;
          for (var k2 in MODIFIERS2) {
            ret[MODIFIERS2[k2]] = false;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var value = _step.value;
              var optional = value.endsWith("?") && value.length > 1;
              if (optional) {
                value = value.slice(0, -1);
              }
              var name2 = toKeyName2(value);
              var modifier = MODIFIERS2[name2];
              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name2;
                } else {
                  ret.which = toKeyCode2(value);
                }
              }
              if (modifier) {
                ret[modifier] = optional ? null : true;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return ret;
        }
        function compareHotkey2(object, event) {
          for (var key in object) {
            var expected = object[key];
            var actual = void 0;
            if (expected == null) {
              continue;
            }
            if (key === "key" && event.key != null) {
              actual = event.key.toLowerCase();
            } else if (key === "which") {
              actual = expected === 91 && event.which === 93 ? 91 : event.which;
            } else {
              actual = event[key];
            }
            if (actual == null && expected === false) {
              continue;
            }
            if (actual !== expected) {
              return false;
            }
          }
          return true;
        }
        function toKeyCode2(name2) {
          name2 = toKeyName2(name2);
          var code = CODES2[name2] || name2.toUpperCase().charCodeAt(0);
          return code;
        }
        function toKeyName2(name2) {
          name2 = name2.toLowerCase();
          name2 = ALIASES2()[name2] || name2;
          return name2;
        }
        exports3.default = isHotkey2;
        exports3.isHotkey = isHotkey2;
        exports3.isCodeHotkey = isCodeHotkey2;
        exports3.isKeyHotkey = isKeyHotkey2;
        exports3.parseHotkey = parseHotkey2;
        exports3.compareHotkey = compareHotkey2;
        exports3.toKeyCode = toKeyCode2;
        exports3.toKeyName = toKeyName2;
      });
      unwrapExports(lib$2);
      lib$2.isHotkey;
      lib$2.isCodeHotkey;
      lib$2.isKeyHotkey;
      lib$2.parseHotkey;
      lib$2.compareHotkey;
      lib$2.toKeyCode;
      lib$2.toKeyName;
      createAtomStore({
        width: 0
      }, {
        name: "image",
        scope: "img"
      });
      createStore("image")({
        focusEndCaptionPath: null,
        focusStartCaptionPath: null
      });
      const withTrailingBlock = (editor, {
        type,
        options: {
          level,
          ...query
        }
      }) => {
        const {
          normalizeNode
        } = editor;
        editor.normalizeNode = ([currentNode, currentPath]) => {
          if (!currentPath.length) {
            const lastChild = getLastNodeByLevel(editor, level);
            const lastChildNode = lastChild === null || lastChild === void 0 ? void 0 : lastChild[0];
            if (!lastChildNode || lastChildNode.type !== type && queryNode(lastChild, query)) {
              const at = lastChild ? Path.next(lastChild[1]) : [0];
              insertElements(editor, {
                type,
                children: [{
                  text: ""
                }]
              }, {
                at
              });
              return;
            }
          }
          return normalizeNode([currentNode, currentPath]);
        };
        return editor;
      };
      const KEY_TRAILING_BLOCK = "trailingBlock";
      const createTrailingBlockPlugin = createPluginFactory({
        key: KEY_TRAILING_BLOCK,
        withOverrides: withTrailingBlock,
        options: {
          level: 0
        },
        then: (editor) => ({
          type: getPluginType(editor, ELEMENT_DEFAULT)
        })
      });
      function _defineProperty$5(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function ownKeys$3(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread2$1(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$3(Object(source), true).forEach(function(key) {
              _defineProperty$5(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$3(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i2;
        for (i2 = 0; i2 < sourceKeys.length; i2++) {
          key = sourceKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _objectWithoutProperties$3(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose$2(source, excluded);
        var key, i2;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
            key = sourceSymbolKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _slicedToArray$2(arr, i2) {
        return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i2) || _unsupportedIterableToArray$2(arr, i2) || _nonIterableRest$2();
      }
      function _arrayWithHoles$2(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _iterableToArrayLimit$2(arr, i2) {
        if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = void 0;
        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i2 && _arr.length === i2)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _unsupportedIterableToArray$2(o2, minLen) {
        if (!o2)
          return;
        if (typeof o2 === "string")
          return _arrayLikeToArray$2(o2, minLen);
        var n2 = Object.prototype.toString.call(o2).slice(8, -1);
        if (n2 === "Object" && o2.constructor)
          n2 = o2.constructor.name;
        if (n2 === "Map" || n2 === "Set")
          return Array.from(o2);
        if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
          return _arrayLikeToArray$2(o2, minLen);
      }
      function _arrayLikeToArray$2(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
          arr2[i2] = arr[i2];
        return arr2;
      }
      function _nonIterableRest$2() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _defineProperty$4(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function ownKeys$2(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread2(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          if (i2 % 2) {
            ownKeys$2(Object(source), true).forEach(function(key) {
              _defineProperty$4(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$2(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      function compose$1() {
        for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
          fns[_key] = arguments[_key];
        }
        return function(x2) {
          return fns.reduceRight(function(y2, f2) {
            return f2(y2);
          }, x2);
        };
      }
      function curry$1(fn2) {
        return function curried() {
          var _this = this;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return args.length >= fn2.length ? fn2.apply(this, args) : function() {
            for (var _len3 = arguments.length, nextArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              nextArgs[_key3] = arguments[_key3];
            }
            return curried.apply(_this, [].concat(args, nextArgs));
          };
        };
      }
      function isObject$a(value) {
        return {}.toString.call(value).includes("Object");
      }
      function isEmpty(obj) {
        return !Object.keys(obj).length;
      }
      function isFunction$5(value) {
        return typeof value === "function";
      }
      function hasOwnProperty$p(object, property2) {
        return Object.prototype.hasOwnProperty.call(object, property2);
      }
      function validateChanges(initial, changes) {
        if (!isObject$a(changes))
          errorHandler$1("changeType");
        if (Object.keys(changes).some(function(field) {
          return !hasOwnProperty$p(initial, field);
        }))
          errorHandler$1("changeField");
        return changes;
      }
      function validateSelector(selector) {
        if (!isFunction$5(selector))
          errorHandler$1("selectorType");
      }
      function validateHandler(handler) {
        if (!(isFunction$5(handler) || isObject$a(handler)))
          errorHandler$1("handlerType");
        if (isObject$a(handler) && Object.values(handler).some(function(_handler) {
          return !isFunction$5(_handler);
        }))
          errorHandler$1("handlersType");
      }
      function validateInitial(initial) {
        if (!initial)
          errorHandler$1("initialIsRequired");
        if (!isObject$a(initial))
          errorHandler$1("initialType");
        if (isEmpty(initial))
          errorHandler$1("initialContent");
      }
      function throwError$1(errorMessages2, type) {
        throw new Error(errorMessages2[type] || errorMessages2["default"]);
      }
      var errorMessages$1 = {
        initialIsRequired: "initial state is required",
        initialType: "initial state should be an object",
        initialContent: "initial state shouldn't be an empty object",
        handlerType: "handler should be an object or a function",
        handlersType: "all handlers should be a functions",
        selectorType: "selector should be a function",
        changeType: "provided value of changes should be an object",
        changeField: 'it seams you want to change a field in the state which is not specified in the "initial" state',
        "default": "an unknown error accured in `state-local` package"
      };
      var errorHandler$1 = curry$1(throwError$1)(errorMessages$1);
      var validators$1 = {
        changes: validateChanges,
        selector: validateSelector,
        handler: validateHandler,
        initial: validateInitial
      };
      function create(initial) {
        var handler = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        validators$1.initial(initial);
        validators$1.handler(handler);
        var state = {
          current: initial
        };
        var didUpdate = curry$1(didStateUpdate)(state, handler);
        var update = curry$1(updateState)(state);
        var validate = curry$1(validators$1.changes)(initial);
        var getChanges = curry$1(extractChanges)(state);
        function getState2() {
          var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function(state2) {
            return state2;
          };
          validators$1.selector(selector);
          return selector(state.current);
        }
        function setState2(causedChanges) {
          compose$1(didUpdate, update, validate, getChanges)(causedChanges);
        }
        return [getState2, setState2];
      }
      function extractChanges(state, causedChanges) {
        return isFunction$5(causedChanges) ? causedChanges(state.current) : causedChanges;
      }
      function updateState(state, changes) {
        state.current = _objectSpread2(_objectSpread2({}, state.current), changes);
        return changes;
      }
      function didStateUpdate(state, handler, changes) {
        isFunction$5(handler) ? handler(state.current) : Object.keys(changes).forEach(function(field) {
          var _handler$field;
          return (_handler$field = handler[field]) === null || _handler$field === void 0 ? void 0 : _handler$field.call(handler, state.current[field]);
        });
        return changes;
      }
      var index = {
        create
      };
      var config$1 = {
        paths: {
          vs: "https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs"
        }
      };
      function curry(fn2) {
        return function curried() {
          var _this = this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return args.length >= fn2.length ? fn2.apply(this, args) : function() {
            for (var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              nextArgs[_key2] = arguments[_key2];
            }
            return curried.apply(_this, [].concat(args, nextArgs));
          };
        };
      }
      function isObject$9(value) {
        return {}.toString.call(value).includes("Object");
      }
      function validateConfig(config22) {
        if (!config22)
          errorHandler("configIsRequired");
        if (!isObject$9(config22))
          errorHandler("configType");
        if (config22.urls) {
          informAboutDeprecation();
          return {
            paths: {
              vs: config22.urls.monacoBase
            }
          };
        }
        return config22;
      }
      function informAboutDeprecation() {
        console.warn(errorMessages.deprecation);
      }
      function throwError(errorMessages2, type) {
        throw new Error(errorMessages2[type] || errorMessages2["default"]);
      }
      var errorMessages = {
        configIsRequired: "the configuration object is required",
        configType: "the configuration object should be an object",
        "default": "an unknown error accured in `@monaco-editor/loader` package",
        deprecation: "Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  "
      };
      var errorHandler = curry(throwError)(errorMessages);
      var validators = {
        config: validateConfig
      };
      var compose = function compose2() {
        for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
          fns[_key] = arguments[_key];
        }
        return function(x2) {
          return fns.reduceRight(function(y2, f2) {
            return f2(y2);
          }, x2);
        };
      };
      function merge$2(target, source) {
        Object.keys(source).forEach(function(key) {
          if (source[key] instanceof Object) {
            if (target[key]) {
              Object.assign(source[key], merge$2(target[key], source[key]));
            }
          }
        });
        return _objectSpread2$1(_objectSpread2$1({}, target), source);
      }
      var CANCELATION_MESSAGE = {
        type: "cancelation",
        msg: "operation is manually canceled"
      };
      function makeCancelable(promise) {
        var hasCanceled_ = false;
        var wrappedPromise = new Promise(function(resolve, reject) {
          promise.then(function(val) {
            return hasCanceled_ ? reject(CANCELATION_MESSAGE) : resolve(val);
          });
          promise["catch"](reject);
        });
        return wrappedPromise.cancel = function() {
          return hasCanceled_ = true;
        }, wrappedPromise;
      }
      var _state$create = index.create({
        config: config$1,
        isInitialized: false,
        resolve: null,
        reject: null,
        monaco: null
      }), _state$create2 = _slicedToArray$2(_state$create, 2), getState = _state$create2[0], setState = _state$create2[1];
      function config2(globalConfig) {
        var _validators$config = validators.config(globalConfig), monaco = _validators$config.monaco, config22 = _objectWithoutProperties$3(_validators$config, ["monaco"]);
        setState(function(state) {
          return {
            config: merge$2(state.config, config22),
            monaco
          };
        });
      }
      function init() {
        var state = getState(function(_ref) {
          var monaco = _ref.monaco, isInitialized = _ref.isInitialized, resolve = _ref.resolve;
          return {
            monaco,
            isInitialized,
            resolve
          };
        });
        if (!state.isInitialized) {
          setState({
            isInitialized: true
          });
          if (state.monaco) {
            state.resolve(state.monaco);
            return makeCancelable(wrapperPromise);
          }
          if (window.monaco && window.monaco.editor) {
            storeMonacoInstance(window.monaco);
            state.resolve(window.monaco);
            return makeCancelable(wrapperPromise);
          }
          compose(injectScripts, getMonacoLoaderScript)(configureLoader);
        }
        return makeCancelable(wrapperPromise);
      }
      function injectScripts(script) {
        return document.body.appendChild(script);
      }
      function createScript(src) {
        var script = document.createElement("script");
        return src && (script.src = src), script;
      }
      function getMonacoLoaderScript(configureLoader2) {
        var state = getState(function(_ref2) {
          var config22 = _ref2.config, reject = _ref2.reject;
          return {
            config: config22,
            reject
          };
        });
        var loaderScript = createScript("".concat(state.config.paths.vs, "/loader.js"));
        loaderScript.onload = function() {
          return configureLoader2();
        };
        loaderScript.onerror = state.reject;
        return loaderScript;
      }
      function configureLoader() {
        var state = getState(function(_ref3) {
          var config22 = _ref3.config, resolve = _ref3.resolve, reject = _ref3.reject;
          return {
            config: config22,
            resolve,
            reject
          };
        });
        var require2 = window.require;
        require2.config(state.config);
        require2(["vs/editor/editor.main"], function(monaco) {
          storeMonacoInstance(monaco);
          state.resolve(monaco);
        }, function(error) {
          state.reject(error);
        });
      }
      function storeMonacoInstance(monaco) {
        if (!getState().monaco) {
          setState({
            monaco
          });
        }
      }
      function __getMonacoInstance() {
        return getState(function(_ref4) {
          var monaco = _ref4.monaco;
          return monaco;
        });
      }
      var wrapperPromise = new Promise(function(resolve, reject) {
        return setState({
          resolve,
          reject
        });
      });
      var loader = {
        config: config2,
        init,
        __getMonacoInstance
      };
      function _extends$f() {
        _extends$f = Object.assign || function(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = arguments[i2];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$f.apply(this, arguments);
      }
      const loadingStyles = {
        display: "flex",
        height: "100%",
        width: "100%",
        justifyContent: "center",
        alignItems: "center"
      };
      function Loading({
        content: content2
      }) {
        return React__default.createElement("div", {
          style: loadingStyles
        }, content2);
      }
      const styles = {
        wrapper: {
          display: "flex",
          position: "relative",
          textAlign: "initial"
        },
        fullWidth: {
          width: "100%"
        },
        hide: {
          display: "none"
        }
      };
      function MonacoContainer$1({
        width,
        height,
        isEditorReady,
        loading,
        _ref,
        className,
        wrapperProps
      }) {
        return React__default.createElement("section", _extends$f({
          style: {
            ...styles.wrapper,
            width,
            height
          }
        }, wrapperProps), !isEditorReady && React__default.createElement(Loading, {
          content: loading
        }), React__default.createElement("div", {
          ref: _ref,
          style: {
            ...styles.fullWidth,
            ...!isEditorReady && styles.hide
          },
          className
        }));
      }
      MonacoContainer$1.propTypes = {
        width: PropTypes$1.oneOfType([PropTypes$1.number, PropTypes$1.string]).isRequired,
        height: PropTypes$1.oneOfType([PropTypes$1.number, PropTypes$1.string]).isRequired,
        loading: PropTypes$1.oneOfType([PropTypes$1.element, PropTypes$1.string]).isRequired,
        isEditorReady: PropTypes$1.bool.isRequired,
        className: PropTypes$1.string,
        wrapperProps: PropTypes$1.object
      };
      var MonacoContainer = react.exports.memo(MonacoContainer$1);
      function useMount(effect) {
        react.exports.useEffect(effect, []);
      }
      function useUpdate(effect, deps, applyChanges = true) {
        const isInitialMount = react.exports.useRef(true);
        react.exports.useEffect(isInitialMount.current || !applyChanges ? () => {
          isInitialMount.current = false;
        } : effect, deps);
      }
      function noop$1() {
      }
      function getOrCreateModel(monaco, value, language, path) {
        return getModel(monaco, path) || createModel(monaco, value, language, path);
      }
      function getModel(monaco, path) {
        return monaco.editor.getModel(createModelUri(monaco, path));
      }
      function createModel(monaco, value, language, path) {
        return monaco.editor.createModel(value, language, path && createModelUri(monaco, path));
      }
      function createModelUri(monaco, path) {
        return monaco.Uri.parse(path);
      }
      function isUndefined$2(input) {
        return input === void 0;
      }
      function DiffEditor({
        original,
        modified,
        language,
        originalLanguage,
        modifiedLanguage,
        originalModelPath,
        modifiedModelPath,
        keepCurrentOriginalModel,
        keepCurrentModifiedModel,
        theme,
        loading,
        options,
        height,
        width,
        className,
        wrapperProps,
        beforeMount,
        onMount
      }) {
        const [isEditorReady, setIsEditorReady] = react.exports.useState(false);
        const [isMonacoMounting, setIsMonacoMounting] = react.exports.useState(true);
        const editorRef = react.exports.useRef(null);
        const monacoRef = react.exports.useRef(null);
        const containerRef = react.exports.useRef(null);
        const onMountRef = react.exports.useRef(onMount);
        const beforeMountRef = react.exports.useRef(beforeMount);
        useMount(() => {
          const cancelable = loader.init();
          cancelable.then((monaco) => (monacoRef.current = monaco) && setIsMonacoMounting(false)).catch((error) => (error === null || error === void 0 ? void 0 : error.type) !== "cancelation" && console.error("Monaco initialization: error:", error));
          return () => editorRef.current ? disposeEditor() : cancelable.cancel();
        });
        useUpdate(() => {
          const modifiedEditor = editorRef.current.getModifiedEditor();
          if (modifiedEditor.getOption(monacoRef.current.editor.EditorOption.readOnly)) {
            modifiedEditor.setValue(modified);
          } else {
            if (modified !== modifiedEditor.getValue()) {
              modifiedEditor.executeEdits("", [{
                range: modifiedEditor.getModel().getFullModelRange(),
                text: modified,
                forceMoveMarkers: true
              }]);
              modifiedEditor.pushUndoStop();
            }
          }
        }, [modified], isEditorReady);
        useUpdate(() => {
          editorRef.current.getModel().original.setValue(original);
        }, [original], isEditorReady);
        useUpdate(() => {
          const {
            original: original2,
            modified: modified2
          } = editorRef.current.getModel();
          monacoRef.current.editor.setModelLanguage(original2, originalLanguage || language);
          monacoRef.current.editor.setModelLanguage(modified2, modifiedLanguage || language);
        }, [language, originalLanguage, modifiedLanguage], isEditorReady);
        useUpdate(() => {
          monacoRef.current.editor.setTheme(theme);
        }, [theme], isEditorReady);
        useUpdate(() => {
          editorRef.current.updateOptions(options);
        }, [options], isEditorReady);
        const setModels = react.exports.useCallback(() => {
          beforeMountRef.current(monacoRef.current);
          const originalModel = getOrCreateModel(monacoRef.current, original, originalLanguage || language, originalModelPath);
          const modifiedModel = getOrCreateModel(monacoRef.current, modified, modifiedLanguage || language, modifiedModelPath);
          editorRef.current.setModel({
            original: originalModel,
            modified: modifiedModel
          });
        }, [language, modified, modifiedLanguage, original, originalLanguage, originalModelPath, modifiedModelPath]);
        const createEditor2 = react.exports.useCallback(() => {
          editorRef.current = monacoRef.current.editor.createDiffEditor(containerRef.current, {
            automaticLayout: true,
            ...options
          });
          setModels();
          monacoRef.current.editor.setTheme(theme);
          setIsEditorReady(true);
        }, [options, theme, setModels]);
        react.exports.useEffect(() => {
          if (isEditorReady) {
            onMountRef.current(editorRef.current, monacoRef.current);
          }
        }, [isEditorReady]);
        react.exports.useEffect(() => {
          !isMonacoMounting && !isEditorReady && createEditor2();
        }, [isMonacoMounting, isEditorReady, createEditor2]);
        function disposeEditor() {
          const models = editorRef.current.getModel();
          if (!keepCurrentOriginalModel) {
            var _models$original;
            (_models$original = models.original) === null || _models$original === void 0 ? void 0 : _models$original.dispose();
          }
          if (!keepCurrentModifiedModel) {
            var _models$modified;
            (_models$modified = models.modified) === null || _models$modified === void 0 ? void 0 : _models$modified.dispose();
          }
          editorRef.current.dispose();
        }
        return React__default.createElement(MonacoContainer, {
          width,
          height,
          isEditorReady,
          loading,
          _ref: containerRef,
          className,
          wrapperProps
        });
      }
      DiffEditor.propTypes = {
        original: PropTypes$1.string,
        modified: PropTypes$1.string,
        language: PropTypes$1.string,
        originalLanguage: PropTypes$1.string,
        modifiedLanguage: PropTypes$1.string,
        originalModelPath: PropTypes$1.string,
        modifiedModelPath: PropTypes$1.string,
        keepCurrentOriginalModel: PropTypes$1.bool,
        keepCurrentModifiedModel: PropTypes$1.bool,
        theme: PropTypes$1.string,
        loading: PropTypes$1.oneOfType([PropTypes$1.element, PropTypes$1.string]),
        options: PropTypes$1.object,
        width: PropTypes$1.oneOfType([PropTypes$1.number, PropTypes$1.string]),
        height: PropTypes$1.oneOfType([PropTypes$1.number, PropTypes$1.string]),
        className: PropTypes$1.string,
        wrapperProps: PropTypes$1.object,
        beforeMount: PropTypes$1.func,
        onMount: PropTypes$1.func
      };
      DiffEditor.defaultProps = {
        theme: "light",
        loading: "Loading...",
        options: {},
        keepCurrentOriginalModel: false,
        keepCurrentModifiedModel: false,
        width: "100%",
        height: "100%",
        wrapperProps: {},
        beforeMount: noop$1,
        onMount: noop$1
      };
      function usePrevious(value) {
        const ref = react.exports.useRef();
        react.exports.useEffect(() => {
          ref.current = value;
        }, [value]);
        return ref.current;
      }
      const viewStates = /* @__PURE__ */ new Map();
      function Editor({
        defaultValue,
        defaultLanguage,
        defaultPath,
        value,
        language,
        path,
        theme,
        line,
        loading,
        options,
        overrideServices,
        saveViewState,
        keepCurrentModel,
        width,
        height,
        className,
        wrapperProps,
        beforeMount,
        onMount,
        onChange,
        onValidate
      }) {
        const [isEditorReady, setIsEditorReady] = react.exports.useState(false);
        const [isMonacoMounting, setIsMonacoMounting] = react.exports.useState(true);
        const monacoRef = react.exports.useRef(null);
        const editorRef = react.exports.useRef(null);
        const containerRef = react.exports.useRef(null);
        const onMountRef = react.exports.useRef(onMount);
        const beforeMountRef = react.exports.useRef(beforeMount);
        const subscriptionRef = react.exports.useRef(null);
        const valueRef = react.exports.useRef(value);
        const previousPath = usePrevious(path);
        useMount(() => {
          const cancelable = loader.init();
          cancelable.then((monaco) => (monacoRef.current = monaco) && setIsMonacoMounting(false)).catch((error) => (error === null || error === void 0 ? void 0 : error.type) !== "cancelation" && console.error("Monaco initialization: error:", error));
          return () => editorRef.current ? disposeEditor() : cancelable.cancel();
        });
        useUpdate(() => {
          const model = getOrCreateModel(monacoRef.current, defaultValue || value, defaultLanguage || language, path);
          if (model !== editorRef.current.getModel()) {
            saveViewState && viewStates.set(previousPath, editorRef.current.saveViewState());
            editorRef.current.setModel(model);
            saveViewState && editorRef.current.restoreViewState(viewStates.get(path));
          }
        }, [path], isEditorReady);
        useUpdate(() => {
          editorRef.current.updateOptions(options);
        }, [options], isEditorReady);
        useUpdate(() => {
          if (editorRef.current.getOption(monacoRef.current.editor.EditorOption.readOnly)) {
            editorRef.current.setValue(value);
          } else {
            if (value !== editorRef.current.getValue()) {
              editorRef.current.executeEdits("", [{
                range: editorRef.current.getModel().getFullModelRange(),
                text: value,
                forceMoveMarkers: true
              }]);
              editorRef.current.pushUndoStop();
            }
          }
        }, [value], isEditorReady);
        useUpdate(() => {
          monacoRef.current.editor.setModelLanguage(editorRef.current.getModel(), language);
        }, [language], isEditorReady);
        useUpdate(() => {
          if (!isUndefined$2(line)) {
            editorRef.current.revealLine(line);
          }
        }, [line], isEditorReady);
        useUpdate(() => {
          monacoRef.current.editor.setTheme(theme);
        }, [theme], isEditorReady);
        const createEditor2 = react.exports.useCallback(() => {
          beforeMountRef.current(monacoRef.current);
          const autoCreatedModelPath = path || defaultPath;
          const defaultModel = getOrCreateModel(monacoRef.current, value || defaultValue, defaultLanguage || language, autoCreatedModelPath);
          editorRef.current = monacoRef.current.editor.create(containerRef.current, {
            model: defaultModel,
            automaticLayout: true,
            ...options
          }, overrideServices);
          saveViewState && editorRef.current.restoreViewState(viewStates.get(autoCreatedModelPath));
          monacoRef.current.editor.setTheme(theme);
          setIsEditorReady(true);
        }, [defaultValue, defaultLanguage, defaultPath, value, language, path, options, overrideServices, saveViewState, theme]);
        react.exports.useEffect(() => {
          if (isEditorReady) {
            onMountRef.current(editorRef.current, monacoRef.current);
          }
        }, [isEditorReady]);
        react.exports.useEffect(() => {
          !isMonacoMounting && !isEditorReady && createEditor2();
        }, [isMonacoMounting, isEditorReady, createEditor2]);
        valueRef.current = value;
        react.exports.useEffect(() => {
          if (isEditorReady && onChange) {
            var _subscriptionRef$curr, _editorRef$current;
            (_subscriptionRef$curr = subscriptionRef.current) === null || _subscriptionRef$curr === void 0 ? void 0 : _subscriptionRef$curr.dispose();
            subscriptionRef.current = (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.onDidChangeModelContent((event) => {
              const editorValue = editorRef.current.getValue();
              if (valueRef.current !== editorValue) {
                onChange(editorValue, event);
              }
            });
          }
        }, [isEditorReady, onChange]);
        react.exports.useEffect(() => {
          if (isEditorReady) {
            const changeMarkersListener = monacoRef.current.editor.onDidChangeMarkers((uris) => {
              var _editorRef$current$ge;
              const editorUri = (_editorRef$current$ge = editorRef.current.getModel()) === null || _editorRef$current$ge === void 0 ? void 0 : _editorRef$current$ge.uri;
              if (editorUri) {
                const currentEditorHasMarkerChanges = uris.find((uri) => uri.path === editorUri.path);
                if (currentEditorHasMarkerChanges) {
                  const markers = monacoRef.current.editor.getModelMarkers({
                    resource: editorUri
                  });
                  onValidate === null || onValidate === void 0 ? void 0 : onValidate(markers);
                }
              }
            });
            return () => {
              changeMarkersListener === null || changeMarkersListener === void 0 ? void 0 : changeMarkersListener.dispose();
            };
          }
        }, [isEditorReady, onValidate]);
        function disposeEditor() {
          var _subscriptionRef$curr2;
          (_subscriptionRef$curr2 = subscriptionRef.current) === null || _subscriptionRef$curr2 === void 0 ? void 0 : _subscriptionRef$curr2.dispose();
          if (keepCurrentModel) {
            saveViewState && viewStates.set(path, editorRef.current.saveViewState());
          } else {
            var _editorRef$current$ge2;
            (_editorRef$current$ge2 = editorRef.current.getModel()) === null || _editorRef$current$ge2 === void 0 ? void 0 : _editorRef$current$ge2.dispose();
          }
          editorRef.current.dispose();
        }
        return React__default.createElement(MonacoContainer, {
          width,
          height,
          isEditorReady,
          loading,
          _ref: containerRef,
          className,
          wrapperProps
        });
      }
      Editor.propTypes = {
        defaultValue: PropTypes$1.string,
        defaultPath: PropTypes$1.string,
        defaultLanguage: PropTypes$1.string,
        value: PropTypes$1.string,
        language: PropTypes$1.string,
        path: PropTypes$1.string,
        theme: PropTypes$1.string,
        line: PropTypes$1.number,
        loading: PropTypes$1.oneOfType([PropTypes$1.element, PropTypes$1.string]),
        options: PropTypes$1.object,
        overrideServices: PropTypes$1.object,
        saveViewState: PropTypes$1.bool,
        keepCurrentModel: PropTypes$1.bool,
        width: PropTypes$1.oneOfType([PropTypes$1.number, PropTypes$1.string]),
        height: PropTypes$1.oneOfType([PropTypes$1.number, PropTypes$1.string]),
        className: PropTypes$1.string,
        wrapperProps: PropTypes$1.object,
        beforeMount: PropTypes$1.func,
        onMount: PropTypes$1.func,
        onChange: PropTypes$1.func,
        onValidate: PropTypes$1.func
      };
      Editor.defaultProps = {
        theme: "light",
        loading: "Loading...",
        options: {},
        overrideServices: {},
        saveViewState: true,
        keepCurrentModel: false,
        width: "100%",
        height: "100%",
        wrapperProps: {},
        beforeMount: noop$1,
        onMount: noop$1,
        onValidate: noop$1
      };
      var fieldSubscriptionItems = ["active", "data", "dirty", "dirtySinceLastSubmit", "error", "initial", "invalid", "length", "modified", "modifiedSinceLastSubmit", "pristine", "submitError", "submitFailed", "submitSucceeded", "submitting", "touched", "valid", "value", "visited", "validating"];
      var formSubscriptionItems = ["active", "dirty", "dirtyFields", "dirtyFieldsSinceLastSubmit", "dirtySinceLastSubmit", "error", "errors", "hasSubmitErrors", "hasValidationErrors", "initialValues", "invalid", "modified", "modifiedSinceLastSubmit", "pristine", "submitting", "submitError", "submitErrors", "submitFailed", "submitSucceeded", "touched", "valid", "validating", "values", "visited"];
      formSubscriptionItems.reduce(function(result, key) {
        result[key] = true;
        return result;
      }, {});
      fieldSubscriptionItems.reduce(function(result, key) {
        result[key] = true;
        return result;
      }, {});
      var propTypes = { exports: {} };
      var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
      var ReactPropTypesSecret = ReactPropTypesSecret_1;
      function emptyFunction() {
      }
      function emptyFunctionWithReset() {
      }
      emptyFunctionWithReset.resetWarningCache = emptyFunction;
      var factoryWithThrowingShims = function() {
        function shim(props, propName, componentName, location, propFullName, secret) {
          if (secret === ReactPropTypesSecret) {
            return;
          }
          var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
          err.name = "Invariant Violation";
          throw err;
        }
        shim.isRequired = shim;
        function getShim() {
          return shim;
        }
        var ReactPropTypes = {
          array: shim,
          bool: shim,
          func: shim,
          number: shim,
          object: shim,
          string: shim,
          symbol: shim,
          any: shim,
          arrayOf: getShim,
          element: shim,
          elementType: shim,
          instanceOf: getShim,
          node: shim,
          objectOf: getShim,
          oneOf: getShim,
          oneOfType: getShim,
          shape: getShim,
          exact: getShim,
          checkPropTypes: emptyFunctionWithReset,
          resetWarningCache: emptyFunction
        };
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
      {
        propTypes.exports = factoryWithThrowingShims();
      }
      var PropTypes = propTypes.exports;
      var lib$1 = {};
      Object.defineProperty(lib$1, "__esModule", {
        value: true
      });
      var IS_MAC = typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
      var MODIFIERS = {
        alt: "altKey",
        control: "ctrlKey",
        meta: "metaKey",
        shift: "shiftKey"
      };
      var ALIASES = {
        add: "+",
        break: "pause",
        cmd: "meta",
        command: "meta",
        ctl: "control",
        ctrl: "control",
        del: "delete",
        down: "arrowdown",
        esc: "escape",
        ins: "insert",
        left: "arrowleft",
        mod: IS_MAC ? "meta" : "control",
        opt: "alt",
        option: "alt",
        return: "enter",
        right: "arrowright",
        space: " ",
        spacebar: " ",
        up: "arrowup",
        win: "meta",
        windows: "meta"
      };
      var CODES = {
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        control: 17,
        alt: 18,
        pause: 19,
        capslock: 20,
        escape: 27,
        " ": 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        arrowleft: 37,
        arrowup: 38,
        arrowright: 39,
        arrowdown: 40,
        insert: 45,
        delete: 46,
        meta: 91,
        numlock: 144,
        scrolllock: 145,
        ";": 186,
        "=": 187,
        ",": 188,
        "-": 189,
        ".": 190,
        "/": 191,
        "`": 192,
        "[": 219,
        "\\": 220,
        "]": 221,
        "'": 222
      };
      for (var f = 1; f < 20; f++) {
        CODES["f" + f] = 111 + f;
      }
      function isHotkey(hotkey, options, event) {
        if (options && !("byKey" in options)) {
          event = options;
          options = null;
        }
        if (!Array.isArray(hotkey)) {
          hotkey = [hotkey];
        }
        var array = hotkey.map(function(string2) {
          return parseHotkey(string2, options);
        });
        var check = function check2(e2) {
          return array.some(function(object) {
            return compareHotkey(object, e2);
          });
        };
        var ret = event == null ? check : check(event);
        return ret;
      }
      function isCodeHotkey(hotkey, event) {
        return isHotkey(hotkey, event);
      }
      function isKeyHotkey(hotkey, event) {
        return isHotkey(hotkey, { byKey: true }, event);
      }
      function parseHotkey(hotkey, options) {
        var byKey = options && options.byKey;
        var ret = {};
        hotkey = hotkey.replace("++", "+add");
        var values2 = hotkey.split("+");
        var length = values2.length;
        for (var k2 in MODIFIERS) {
          ret[MODIFIERS[k2]] = false;
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = values2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var value = _step.value;
            var optional = value.endsWith("?") && value.length > 1;
            if (optional) {
              value = value.slice(0, -1);
            }
            var name2 = toKeyName(value);
            var modifier = MODIFIERS[name2];
            if (value.length > 1 && !modifier && !ALIASES[value] && !CODES[name2]) {
              throw new TypeError('Unknown modifier: "' + value + '"');
            }
            if (length === 1 || !modifier) {
              if (byKey) {
                ret.key = name2;
              } else {
                ret.which = toKeyCode(value);
              }
            }
            if (modifier) {
              ret[modifier] = optional ? null : true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        return ret;
      }
      function compareHotkey(object, event) {
        for (var key in object) {
          var expected = object[key];
          var actual = void 0;
          if (expected == null) {
            continue;
          }
          if (key === "key" && event.key != null) {
            actual = event.key.toLowerCase();
          } else if (key === "which") {
            actual = expected === 91 && event.which === 93 ? 91 : event.which;
          } else {
            actual = event[key];
          }
          if (actual == null && expected === false) {
            continue;
          }
          if (actual !== expected) {
            return false;
          }
        }
        return true;
      }
      function toKeyCode(name2) {
        name2 = toKeyName(name2);
        var code = CODES[name2] || name2.toUpperCase().charCodeAt(0);
        return code;
      }
      function toKeyName(name2) {
        name2 = name2.toLowerCase();
        name2 = ALIASES[name2] || name2;
        return name2;
      }
      var _default$4 = lib$1.default = isHotkey;
      lib$1.isHotkey = isHotkey;
      lib$1.isCodeHotkey = isCodeHotkey;
      lib$1.isKeyHotkey = isKeyHotkey;
      lib$1.parseHotkey = parseHotkey;
      lib$1.compareHotkey = compareHotkey;
      lib$1.toKeyCode = toKeyCode;
      lib$1.toKeyName = toKeyName;
      var lib = {};
      var flattenNames$1 = {};
      var isArray$e = Array.isArray;
      var isArray_1 = isArray$e;
      var baseGetTag$6 = _baseGetTag$4, isArray$d = isArray_1, isObjectLike$8 = isObjectLike_1$4;
      var stringTag$6 = "[object String]";
      function isString$1(value) {
        return typeof value == "string" || !isArray$d(value) && isObjectLike$8(value) && baseGetTag$6(value) == stringTag$6;
      }
      var isString_1 = isString$1;
      function createBaseFor$2(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      var _createBaseFor = createBaseFor$2;
      var createBaseFor$1 = _createBaseFor;
      var baseFor$3 = createBaseFor$1();
      var _baseFor = baseFor$3;
      function baseTimes$2(n2, iteratee) {
        var index2 = -1, result = Array(n2);
        while (++index2 < n2) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      var _baseTimes = baseTimes$2;
      var baseGetTag$5 = _baseGetTag$4, isObjectLike$7 = isObjectLike_1$4;
      var argsTag$6 = "[object Arguments]";
      function baseIsArguments$2(value) {
        return isObjectLike$7(value) && baseGetTag$5(value) == argsTag$6;
      }
      var _baseIsArguments = baseIsArguments$2;
      var baseIsArguments$1 = _baseIsArguments, isObjectLike$6 = isObjectLike_1$4;
      var objectProto$s = Object.prototype;
      var hasOwnProperty$o = objectProto$s.hasOwnProperty;
      var propertyIsEnumerable$3 = objectProto$s.propertyIsEnumerable;
      var isArguments$4 = baseIsArguments$1(function() {
        return arguments;
      }()) ? baseIsArguments$1 : function(value) {
        return isObjectLike$6(value) && hasOwnProperty$o.call(value, "callee") && !propertyIsEnumerable$3.call(value, "callee");
      };
      var isArguments_1 = isArguments$4;
      var isBuffer$5 = { exports: {} };
      function stubFalse$1() {
        return false;
      }
      var stubFalse_1 = stubFalse$1;
      (function(module2, exports3) {
        var root2 = _root$4, stubFalse2 = stubFalse_1;
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? root2.Buffer : void 0;
        var nativeIsBuffer2 = Buffer22 ? Buffer22.isBuffer : void 0;
        var isBuffer2 = nativeIsBuffer2 || stubFalse2;
        module2.exports = isBuffer2;
      })(isBuffer$5, isBuffer$5.exports);
      var MAX_SAFE_INTEGER$3 = 9007199254740991;
      var reIsUint$1 = /^(?:0|[1-9]\d*)$/;
      function isIndex$3(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER$3 : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint$1.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      var _isIndex = isIndex$3;
      var MAX_SAFE_INTEGER$2 = 9007199254740991;
      function isLength$4(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
      }
      var isLength_1 = isLength$4;
      var baseGetTag$4 = _baseGetTag$4, isLength$3 = isLength_1, isObjectLike$5 = isObjectLike_1$4;
      var argsTag$5 = "[object Arguments]", arrayTag$4 = "[object Array]", boolTag$5 = "[object Boolean]", dateTag$5 = "[object Date]", errorTag$4 = "[object Error]", funcTag$4 = "[object Function]", mapTag$8 = "[object Map]", numberTag$5 = "[object Number]", objectTag$8 = "[object Object]", regexpTag$5 = "[object RegExp]", setTag$8 = "[object Set]", stringTag$5 = "[object String]", weakMapTag$4 = "[object WeakMap]";
      var arrayBufferTag$5 = "[object ArrayBuffer]", dataViewTag$7 = "[object DataView]", float32Tag$3 = "[object Float32Array]", float64Tag$3 = "[object Float64Array]", int8Tag$3 = "[object Int8Array]", int16Tag$3 = "[object Int16Array]", int32Tag$3 = "[object Int32Array]", uint8Tag$3 = "[object Uint8Array]", uint8ClampedTag$3 = "[object Uint8ClampedArray]", uint16Tag$3 = "[object Uint16Array]", uint32Tag$3 = "[object Uint32Array]";
      var typedArrayTags$1 = {};
      typedArrayTags$1[float32Tag$3] = typedArrayTags$1[float64Tag$3] = typedArrayTags$1[int8Tag$3] = typedArrayTags$1[int16Tag$3] = typedArrayTags$1[int32Tag$3] = typedArrayTags$1[uint8Tag$3] = typedArrayTags$1[uint8ClampedTag$3] = typedArrayTags$1[uint16Tag$3] = typedArrayTags$1[uint32Tag$3] = true;
      typedArrayTags$1[argsTag$5] = typedArrayTags$1[arrayTag$4] = typedArrayTags$1[arrayBufferTag$5] = typedArrayTags$1[boolTag$5] = typedArrayTags$1[dataViewTag$7] = typedArrayTags$1[dateTag$5] = typedArrayTags$1[errorTag$4] = typedArrayTags$1[funcTag$4] = typedArrayTags$1[mapTag$8] = typedArrayTags$1[numberTag$5] = typedArrayTags$1[objectTag$8] = typedArrayTags$1[regexpTag$5] = typedArrayTags$1[setTag$8] = typedArrayTags$1[stringTag$5] = typedArrayTags$1[weakMapTag$4] = false;
      function baseIsTypedArray$2(value) {
        return isObjectLike$5(value) && isLength$3(value.length) && !!typedArrayTags$1[baseGetTag$4(value)];
      }
      var _baseIsTypedArray = baseIsTypedArray$2;
      function baseUnary$4(func) {
        return function(value) {
          return func(value);
        };
      }
      var _baseUnary = baseUnary$4;
      var _nodeUtil = { exports: {} };
      (function(module2, exports3) {
        var freeGlobal2 = _freeGlobal$4;
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var freeProcess2 = moduleExports2 && freeGlobal2.process;
        var nodeUtil2 = function() {
          try {
            var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
          } catch (e2) {
          }
        }();
        module2.exports = nodeUtil2;
      })(_nodeUtil, _nodeUtil.exports);
      var baseIsTypedArray$1 = _baseIsTypedArray, baseUnary$3 = _baseUnary, nodeUtil$4 = _nodeUtil.exports;
      var nodeIsTypedArray$1 = nodeUtil$4 && nodeUtil$4.isTypedArray;
      var isTypedArray$4 = nodeIsTypedArray$1 ? baseUnary$3(nodeIsTypedArray$1) : baseIsTypedArray$1;
      var isTypedArray_1 = isTypedArray$4;
      var baseTimes$1 = _baseTimes, isArguments$3 = isArguments_1, isArray$c = isArray_1, isBuffer$4 = isBuffer$5.exports, isIndex$2 = _isIndex, isTypedArray$3 = isTypedArray_1;
      var objectProto$r = Object.prototype;
      var hasOwnProperty$n = objectProto$r.hasOwnProperty;
      function arrayLikeKeys$3(value, inherited) {
        var isArr = isArray$c(value), isArg = !isArr && isArguments$3(value), isBuff = !isArr && !isArg && isBuffer$4(value), isType2 = !isArr && !isArg && !isBuff && isTypedArray$3(value), skipIndexes = isArr || isArg || isBuff || isType2, result = skipIndexes ? baseTimes$1(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty$n.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex$2(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      var _arrayLikeKeys = arrayLikeKeys$3;
      var objectProto$q = Object.prototype;
      function isPrototype$4(value) {
        var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$q;
        return value === proto2;
      }
      var _isPrototype = isPrototype$4;
      function overArg$3(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      var _overArg = overArg$3;
      var overArg$2 = _overArg;
      var nativeKeys$3 = overArg$2(Object.keys, Object);
      var _nativeKeys = nativeKeys$3;
      var isPrototype$3 = _isPrototype, nativeKeys$2 = _nativeKeys;
      var objectProto$p = Object.prototype;
      var hasOwnProperty$m = objectProto$p.hasOwnProperty;
      function baseKeys$2(object) {
        if (!isPrototype$3(object)) {
          return nativeKeys$2(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty$m.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      var _baseKeys = baseKeys$2;
      var baseGetTag$3 = _baseGetTag$4, isObject$8 = isObject_1$4;
      var asyncTag$1 = "[object AsyncFunction]", funcTag$3 = "[object Function]", genTag$2 = "[object GeneratorFunction]", proxyTag$1 = "[object Proxy]";
      function isFunction$4(value) {
        if (!isObject$8(value)) {
          return false;
        }
        var tag = baseGetTag$3(value);
        return tag == funcTag$3 || tag == genTag$2 || tag == asyncTag$1 || tag == proxyTag$1;
      }
      var isFunction_1 = isFunction$4;
      var isFunction$3 = isFunction_1, isLength$2 = isLength_1;
      function isArrayLike$5(value) {
        return value != null && isLength$2(value.length) && !isFunction$3(value);
      }
      var isArrayLike_1 = isArrayLike$5;
      var arrayLikeKeys$2 = _arrayLikeKeys, baseKeys$1 = _baseKeys, isArrayLike$4 = isArrayLike_1;
      function keys$7(object) {
        return isArrayLike$4(object) ? arrayLikeKeys$2(object) : baseKeys$1(object);
      }
      var keys_1 = keys$7;
      var baseFor$2 = _baseFor, keys$6 = keys_1;
      function baseForOwn$3(object, iteratee) {
        return object && baseFor$2(object, iteratee, keys$6);
      }
      var _baseForOwn = baseForOwn$3;
      function identity$3(value) {
        return value;
      }
      var identity_1 = identity$3;
      var identity$2 = identity_1;
      function castFunction$2(value) {
        return typeof value == "function" ? value : identity$2;
      }
      var _castFunction = castFunction$2;
      var baseForOwn$2 = _baseForOwn, castFunction$1 = _castFunction;
      function forOwn(object, iteratee) {
        return object && baseForOwn$2(object, castFunction$1(iteratee));
      }
      var forOwn_1 = forOwn;
      var overArg$1 = _overArg;
      var getPrototype$5 = overArg$1(Object.getPrototypeOf, Object);
      var _getPrototype = getPrototype$5;
      var baseGetTag$2 = _baseGetTag$4, getPrototype$4 = _getPrototype, isObjectLike$4 = isObjectLike_1$4;
      var objectTag$7 = "[object Object]";
      var funcProto$5 = Function.prototype, objectProto$o = Object.prototype;
      var funcToString$5 = funcProto$5.toString;
      var hasOwnProperty$l = objectProto$o.hasOwnProperty;
      var objectCtorString$1 = funcToString$5.call(Object);
      function isPlainObject$1(value) {
        if (!isObjectLike$4(value) || baseGetTag$2(value) != objectTag$7) {
          return false;
        }
        var proto2 = getPrototype$4(value);
        if (proto2 === null) {
          return true;
        }
        var Ctor = hasOwnProperty$l.call(proto2, "constructor") && proto2.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString$5.call(Ctor) == objectCtorString$1;
      }
      var isPlainObject_1 = isPlainObject$1;
      function arrayMap$3(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index2 < length) {
          result[index2] = iteratee(array[index2], index2, array);
        }
        return result;
      }
      var _arrayMap = arrayMap$3;
      function listCacheClear$2() {
        this.__data__ = [];
        this.size = 0;
      }
      var _listCacheClear = listCacheClear$2;
      function eq$4(value, other) {
        return value === other || value !== value && other !== other;
      }
      var eq_1 = eq$4;
      var eq$3 = eq_1;
      function assocIndexOf$5(array, key) {
        var length = array.length;
        while (length--) {
          if (eq$3(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      var _assocIndexOf = assocIndexOf$5;
      var assocIndexOf$4 = _assocIndexOf;
      var arrayProto$1 = Array.prototype;
      var splice$1 = arrayProto$1.splice;
      function listCacheDelete$2(key) {
        var data = this.__data__, index2 = assocIndexOf$4(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice$1.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      var _listCacheDelete = listCacheDelete$2;
      var assocIndexOf$3 = _assocIndexOf;
      function listCacheGet$2(key) {
        var data = this.__data__, index2 = assocIndexOf$3(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      var _listCacheGet = listCacheGet$2;
      var assocIndexOf$2 = _assocIndexOf;
      function listCacheHas$2(key) {
        return assocIndexOf$2(this.__data__, key) > -1;
      }
      var _listCacheHas = listCacheHas$2;
      var assocIndexOf$1 = _assocIndexOf;
      function listCacheSet$2(key, value) {
        var data = this.__data__, index2 = assocIndexOf$1(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      var _listCacheSet = listCacheSet$2;
      var listCacheClear$1 = _listCacheClear, listCacheDelete$1 = _listCacheDelete, listCacheGet$1 = _listCacheGet, listCacheHas$1 = _listCacheHas, listCacheSet$1 = _listCacheSet;
      function ListCache$5(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache$5.prototype.clear = listCacheClear$1;
      ListCache$5.prototype["delete"] = listCacheDelete$1;
      ListCache$5.prototype.get = listCacheGet$1;
      ListCache$5.prototype.has = listCacheHas$1;
      ListCache$5.prototype.set = listCacheSet$1;
      var _ListCache = ListCache$5;
      var ListCache$4 = _ListCache;
      function stackClear$2() {
        this.__data__ = new ListCache$4();
        this.size = 0;
      }
      var _stackClear = stackClear$2;
      function stackDelete$2(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      var _stackDelete = stackDelete$2;
      function stackGet$2(key) {
        return this.__data__.get(key);
      }
      var _stackGet = stackGet$2;
      function stackHas$2(key) {
        return this.__data__.has(key);
      }
      var _stackHas = stackHas$2;
      var root$8 = _root$4;
      var coreJsData$3 = root$8["__core-js_shared__"];
      var _coreJsData = coreJsData$3;
      var coreJsData$2 = _coreJsData;
      var maskSrcKey$1 = function() {
        var uid2 = /[^.]+$/.exec(coreJsData$2 && coreJsData$2.keys && coreJsData$2.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      function isMasked$2(func) {
        return !!maskSrcKey$1 && maskSrcKey$1 in func;
      }
      var _isMasked = isMasked$2;
      var funcProto$4 = Function.prototype;
      var funcToString$4 = funcProto$4.toString;
      function toSource$3(func) {
        if (func != null) {
          try {
            return funcToString$4.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      var _toSource = toSource$3;
      var isFunction$2 = isFunction_1, isMasked$1 = _isMasked, isObject$7 = isObject_1$4, toSource$2 = _toSource;
      var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;
      var funcProto$3 = Function.prototype, objectProto$n = Object.prototype;
      var funcToString$3 = funcProto$3.toString;
      var hasOwnProperty$k = objectProto$n.hasOwnProperty;
      var reIsNative$1 = RegExp("^" + funcToString$3.call(hasOwnProperty$k).replace(reRegExpChar$1, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative$2(value) {
        if (!isObject$7(value) || isMasked$1(value)) {
          return false;
        }
        var pattern = isFunction$2(value) ? reIsNative$1 : reIsHostCtor$1;
        return pattern.test(toSource$2(value));
      }
      var _baseIsNative = baseIsNative$2;
      function getValue$2(object, key) {
        return object == null ? void 0 : object[key];
      }
      var _getValue = getValue$2;
      var baseIsNative$1 = _baseIsNative, getValue$1 = _getValue;
      function getNative$8(object, key) {
        var value = getValue$1(object, key);
        return baseIsNative$1(value) ? value : void 0;
      }
      var _getNative = getNative$8;
      var getNative$7 = _getNative, root$7 = _root$4;
      var Map$6 = getNative$7(root$7, "Map");
      var _Map = Map$6;
      var getNative$6 = _getNative;
      var nativeCreate$6 = getNative$6(Object, "create");
      var _nativeCreate = nativeCreate$6;
      var nativeCreate$5 = _nativeCreate;
      function hashClear$2() {
        this.__data__ = nativeCreate$5 ? nativeCreate$5(null) : {};
        this.size = 0;
      }
      var _hashClear = hashClear$2;
      function hashDelete$2(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      var _hashDelete = hashDelete$2;
      var nativeCreate$4 = _nativeCreate;
      var HASH_UNDEFINED$5 = "__lodash_hash_undefined__";
      var objectProto$m = Object.prototype;
      var hasOwnProperty$j = objectProto$m.hasOwnProperty;
      function hashGet$2(key) {
        var data = this.__data__;
        if (nativeCreate$4) {
          var result = data[key];
          return result === HASH_UNDEFINED$5 ? void 0 : result;
        }
        return hasOwnProperty$j.call(data, key) ? data[key] : void 0;
      }
      var _hashGet = hashGet$2;
      var nativeCreate$3 = _nativeCreate;
      var objectProto$l = Object.prototype;
      var hasOwnProperty$i = objectProto$l.hasOwnProperty;
      function hashHas$2(key) {
        var data = this.__data__;
        return nativeCreate$3 ? data[key] !== void 0 : hasOwnProperty$i.call(data, key);
      }
      var _hashHas = hashHas$2;
      var nativeCreate$2 = _nativeCreate;
      var HASH_UNDEFINED$4 = "__lodash_hash_undefined__";
      function hashSet$2(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate$2 && value === void 0 ? HASH_UNDEFINED$4 : value;
        return this;
      }
      var _hashSet = hashSet$2;
      var hashClear$1 = _hashClear, hashDelete$1 = _hashDelete, hashGet$1 = _hashGet, hashHas$1 = _hashHas, hashSet$1 = _hashSet;
      function Hash$2(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash$2.prototype.clear = hashClear$1;
      Hash$2.prototype["delete"] = hashDelete$1;
      Hash$2.prototype.get = hashGet$1;
      Hash$2.prototype.has = hashHas$1;
      Hash$2.prototype.set = hashSet$1;
      var _Hash = Hash$2;
      var Hash$1 = _Hash, ListCache$3 = _ListCache, Map$5 = _Map;
      function mapCacheClear$2() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash$1(),
          "map": new (Map$5 || ListCache$3)(),
          "string": new Hash$1()
        };
      }
      var _mapCacheClear = mapCacheClear$2;
      function isKeyable$2(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      var _isKeyable = isKeyable$2;
      var isKeyable$1 = _isKeyable;
      function getMapData$5(map2, key) {
        var data = map2.__data__;
        return isKeyable$1(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      var _getMapData = getMapData$5;
      var getMapData$4 = _getMapData;
      function mapCacheDelete$2(key) {
        var result = getMapData$4(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      var _mapCacheDelete = mapCacheDelete$2;
      var getMapData$3 = _getMapData;
      function mapCacheGet$2(key) {
        return getMapData$3(this, key).get(key);
      }
      var _mapCacheGet = mapCacheGet$2;
      var getMapData$2 = _getMapData;
      function mapCacheHas$2(key) {
        return getMapData$2(this, key).has(key);
      }
      var _mapCacheHas = mapCacheHas$2;
      var getMapData$1 = _getMapData;
      function mapCacheSet$2(key, value) {
        var data = getMapData$1(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      var _mapCacheSet = mapCacheSet$2;
      var mapCacheClear$1 = _mapCacheClear, mapCacheDelete$1 = _mapCacheDelete, mapCacheGet$1 = _mapCacheGet, mapCacheHas$1 = _mapCacheHas, mapCacheSet$1 = _mapCacheSet;
      function MapCache$4(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache$4.prototype.clear = mapCacheClear$1;
      MapCache$4.prototype["delete"] = mapCacheDelete$1;
      MapCache$4.prototype.get = mapCacheGet$1;
      MapCache$4.prototype.has = mapCacheHas$1;
      MapCache$4.prototype.set = mapCacheSet$1;
      var _MapCache = MapCache$4;
      var ListCache$2 = _ListCache, Map$4 = _Map, MapCache$3 = _MapCache;
      var LARGE_ARRAY_SIZE$1 = 200;
      function stackSet$2(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache$2) {
          var pairs = data.__data__;
          if (!Map$4 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache$3(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      var _stackSet = stackSet$2;
      var ListCache$1 = _ListCache, stackClear$1 = _stackClear, stackDelete$1 = _stackDelete, stackGet$1 = _stackGet, stackHas$1 = _stackHas, stackSet$1 = _stackSet;
      function Stack$4(entries) {
        var data = this.__data__ = new ListCache$1(entries);
        this.size = data.size;
      }
      Stack$4.prototype.clear = stackClear$1;
      Stack$4.prototype["delete"] = stackDelete$1;
      Stack$4.prototype.get = stackGet$1;
      Stack$4.prototype.has = stackHas$1;
      Stack$4.prototype.set = stackSet$1;
      var _Stack = Stack$4;
      var HASH_UNDEFINED$3 = "__lodash_hash_undefined__";
      function setCacheAdd$2(value) {
        this.__data__.set(value, HASH_UNDEFINED$3);
        return this;
      }
      var _setCacheAdd = setCacheAdd$2;
      function setCacheHas$2(value) {
        return this.__data__.has(value);
      }
      var _setCacheHas = setCacheHas$2;
      var MapCache$2 = _MapCache, setCacheAdd$1 = _setCacheAdd, setCacheHas$1 = _setCacheHas;
      function SetCache$2(values2) {
        var index2 = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache$2();
        while (++index2 < length) {
          this.add(values2[index2]);
        }
      }
      SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd$1;
      SetCache$2.prototype.has = setCacheHas$1;
      var _SetCache = SetCache$2;
      function arraySome$2(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (predicate(array[index2], index2, array)) {
            return true;
          }
        }
        return false;
      }
      var _arraySome = arraySome$2;
      function cacheHas$2(cache, key) {
        return cache.has(key);
      }
      var _cacheHas = cacheHas$2;
      var SetCache$1 = _SetCache, arraySome$1 = _arraySome, cacheHas$1 = _cacheHas;
      var COMPARE_PARTIAL_FLAG$b = 1, COMPARE_UNORDERED_FLAG$7 = 2;
      function equalArrays$3(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$b, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$7 ? new SetCache$1() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index2 < arrLength) {
          var arrValue = array[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome$1(other, function(othValue2, othIndex) {
              if (!cacheHas$1(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      var _equalArrays = equalArrays$3;
      var root$6 = _root$4;
      var Uint8Array$4 = root$6.Uint8Array;
      var _Uint8Array = Uint8Array$4;
      function mapToArray$2(map2) {
        var index2 = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      var _mapToArray = mapToArray$2;
      function setToArray$2(set2) {
        var index2 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      var _setToArray = setToArray$2;
      var Symbol$5 = _Symbol$4, Uint8Array$3 = _Uint8Array, eq$2 = eq_1, equalArrays$2 = _equalArrays, mapToArray$1 = _mapToArray, setToArray$1 = _setToArray;
      var COMPARE_PARTIAL_FLAG$a = 1, COMPARE_UNORDERED_FLAG$6 = 2;
      var boolTag$4 = "[object Boolean]", dateTag$4 = "[object Date]", errorTag$3 = "[object Error]", mapTag$7 = "[object Map]", numberTag$4 = "[object Number]", regexpTag$4 = "[object RegExp]", setTag$7 = "[object Set]", stringTag$4 = "[object String]", symbolTag$4 = "[object Symbol]";
      var arrayBufferTag$4 = "[object ArrayBuffer]", dataViewTag$6 = "[object DataView]";
      var symbolProto$4 = Symbol$5 ? Symbol$5.prototype : void 0, symbolValueOf$2 = symbolProto$4 ? symbolProto$4.valueOf : void 0;
      function equalByTag$2(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag$6:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag$4:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$3(object), new Uint8Array$3(other))) {
              return false;
            }
            return true;
          case boolTag$4:
          case dateTag$4:
          case numberTag$4:
            return eq$2(+object, +other);
          case errorTag$3:
            return object.name == other.name && object.message == other.message;
          case regexpTag$4:
          case stringTag$4:
            return object == other + "";
          case mapTag$7:
            var convert = mapToArray$1;
          case setTag$7:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG$a;
            convert || (convert = setToArray$1);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG$6;
            stack.set(object, other);
            var result = equalArrays$2(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag$4:
            if (symbolValueOf$2) {
              return symbolValueOf$2.call(object) == symbolValueOf$2.call(other);
            }
        }
        return false;
      }
      var _equalByTag = equalByTag$2;
      function arrayPush$3(array, values2) {
        var index2 = -1, length = values2.length, offset2 = array.length;
        while (++index2 < length) {
          array[offset2 + index2] = values2[index2];
        }
        return array;
      }
      var _arrayPush = arrayPush$3;
      var arrayPush$2 = _arrayPush, isArray$b = isArray_1;
      function baseGetAllKeys$3(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray$b(object) ? result : arrayPush$2(result, symbolsFunc(object));
      }
      var _baseGetAllKeys = baseGetAllKeys$3;
      function arrayFilter$2(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array[index2];
          if (predicate(value, index2, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      var _arrayFilter = arrayFilter$2;
      function stubArray$3() {
        return [];
      }
      var stubArray_1 = stubArray$3;
      var arrayFilter$1 = _arrayFilter, stubArray$2 = stubArray_1;
      var objectProto$k = Object.prototype;
      var propertyIsEnumerable$2 = objectProto$k.propertyIsEnumerable;
      var nativeGetSymbols$2 = Object.getOwnPropertySymbols;
      var getSymbols$5 = !nativeGetSymbols$2 ? stubArray$2 : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter$1(nativeGetSymbols$2(object), function(symbol) {
          return propertyIsEnumerable$2.call(object, symbol);
        });
      };
      var _getSymbols = getSymbols$5;
      var baseGetAllKeys$2 = _baseGetAllKeys, getSymbols$4 = _getSymbols, keys$5 = keys_1;
      function getAllKeys$3(object) {
        return baseGetAllKeys$2(object, keys$5, getSymbols$4);
      }
      var _getAllKeys = getAllKeys$3;
      var getAllKeys$2 = _getAllKeys;
      var COMPARE_PARTIAL_FLAG$9 = 1;
      var objectProto$j = Object.prototype;
      var hasOwnProperty$h = objectProto$j.hasOwnProperty;
      function equalObjects$2(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$9, objProps = getAllKeys$2(object), objLength = objProps.length, othProps = getAllKeys$2(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty$h.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      var _equalObjects = equalObjects$2;
      var getNative$5 = _getNative, root$5 = _root$4;
      var DataView$3 = getNative$5(root$5, "DataView");
      var _DataView = DataView$3;
      var getNative$4 = _getNative, root$4 = _root$4;
      var Promise$4 = getNative$4(root$4, "Promise");
      var _Promise = Promise$4;
      var getNative$3 = _getNative, root$3 = _root$4;
      var Set$4 = getNative$3(root$3, "Set");
      var _Set = Set$4;
      var getNative$2 = _getNative, root$2 = _root$4;
      var WeakMap$4 = getNative$2(root$2, "WeakMap");
      var _WeakMap = WeakMap$4;
      var DataView$2 = _DataView, Map$3 = _Map, Promise$3 = _Promise, Set$3 = _Set, WeakMap$3 = _WeakMap, baseGetTag$1 = _baseGetTag$4, toSource$1 = _toSource;
      var mapTag$6 = "[object Map]", objectTag$6 = "[object Object]", promiseTag$1 = "[object Promise]", setTag$6 = "[object Set]", weakMapTag$3 = "[object WeakMap]";
      var dataViewTag$5 = "[object DataView]";
      var dataViewCtorString$1 = toSource$1(DataView$2), mapCtorString$1 = toSource$1(Map$3), promiseCtorString$1 = toSource$1(Promise$3), setCtorString$1 = toSource$1(Set$3), weakMapCtorString$1 = toSource$1(WeakMap$3);
      var getTag$6 = baseGetTag$1;
      if (DataView$2 && getTag$6(new DataView$2(new ArrayBuffer(1))) != dataViewTag$5 || Map$3 && getTag$6(new Map$3()) != mapTag$6 || Promise$3 && getTag$6(Promise$3.resolve()) != promiseTag$1 || Set$3 && getTag$6(new Set$3()) != setTag$6 || WeakMap$3 && getTag$6(new WeakMap$3()) != weakMapTag$3) {
        getTag$6 = function(value) {
          var result = baseGetTag$1(value), Ctor = result == objectTag$6 ? value.constructor : void 0, ctorString = Ctor ? toSource$1(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString$1:
                return dataViewTag$5;
              case mapCtorString$1:
                return mapTag$6;
              case promiseCtorString$1:
                return promiseTag$1;
              case setCtorString$1:
                return setTag$6;
              case weakMapCtorString$1:
                return weakMapTag$3;
            }
          }
          return result;
        };
      }
      var _getTag = getTag$6;
      var Stack$3 = _Stack, equalArrays$1 = _equalArrays, equalByTag$1 = _equalByTag, equalObjects$1 = _equalObjects, getTag$5 = _getTag, isArray$a = isArray_1, isBuffer$3 = isBuffer$5.exports, isTypedArray$2 = isTypedArray_1;
      var COMPARE_PARTIAL_FLAG$8 = 1;
      var argsTag$4 = "[object Arguments]", arrayTag$3 = "[object Array]", objectTag$5 = "[object Object]";
      var objectProto$i = Object.prototype;
      var hasOwnProperty$g = objectProto$i.hasOwnProperty;
      function baseIsEqualDeep$2(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray$a(object), othIsArr = isArray$a(other), objTag = objIsArr ? arrayTag$3 : getTag$5(object), othTag = othIsArr ? arrayTag$3 : getTag$5(other);
        objTag = objTag == argsTag$4 ? objectTag$5 : objTag;
        othTag = othTag == argsTag$4 ? objectTag$5 : othTag;
        var objIsObj = objTag == objectTag$5, othIsObj = othTag == objectTag$5, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer$3(object)) {
          if (!isBuffer$3(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack$3());
          return objIsArr || isTypedArray$2(object) ? equalArrays$1(object, other, bitmask, customizer, equalFunc, stack) : equalByTag$1(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG$8)) {
          var objIsWrapped = objIsObj && hasOwnProperty$g.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$g.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack$3());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack$3());
        return equalObjects$1(object, other, bitmask, customizer, equalFunc, stack);
      }
      var _baseIsEqualDeep = baseIsEqualDeep$2;
      var baseIsEqualDeep$1 = _baseIsEqualDeep, isObjectLike$3 = isObjectLike_1$4;
      function baseIsEqual$3(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike$3(value) && !isObjectLike$3(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep$1(value, other, bitmask, customizer, baseIsEqual$3, stack);
      }
      var _baseIsEqual = baseIsEqual$3;
      var Stack$2 = _Stack, baseIsEqual$2 = _baseIsEqual;
      var COMPARE_PARTIAL_FLAG$7 = 1, COMPARE_UNORDERED_FLAG$5 = 2;
      function baseIsMatch$2(object, source, matchData, customizer) {
        var index2 = matchData.length, length = index2, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index2 < length) {
          data = matchData[index2];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack$2();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual$2(srcValue, objValue, COMPARE_PARTIAL_FLAG$7 | COMPARE_UNORDERED_FLAG$5, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      var _baseIsMatch = baseIsMatch$2;
      var isObject$6 = isObject_1$4;
      function isStrictComparable$3(value) {
        return value === value && !isObject$6(value);
      }
      var _isStrictComparable = isStrictComparable$3;
      var isStrictComparable$2 = _isStrictComparable, keys$4 = keys_1;
      function getMatchData$2(object) {
        var result = keys$4(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, isStrictComparable$2(value)];
        }
        return result;
      }
      var _getMatchData = getMatchData$2;
      function matchesStrictComparable$3(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      var _matchesStrictComparable = matchesStrictComparable$3;
      var baseIsMatch$1 = _baseIsMatch, getMatchData$1 = _getMatchData, matchesStrictComparable$2 = _matchesStrictComparable;
      function baseMatches$2(source) {
        var matchData = getMatchData$1(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable$2(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch$1(object, source, matchData);
        };
      }
      var _baseMatches = baseMatches$2;
      var isArray$9 = isArray_1, isSymbol$3 = isSymbol_1$1;
      var reIsDeepProp$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp$1 = /^\w*$/;
      function isKey$4(value, object) {
        if (isArray$9(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$3(value)) {
          return true;
        }
        return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) || object != null && value in Object(object);
      }
      var _isKey = isKey$4;
      var MapCache$1 = _MapCache;
      var FUNC_ERROR_TEXT$3 = "Expected a function";
      function memoize$2(func, resolver2) {
        if (typeof func != "function" || resolver2 != null && typeof resolver2 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT$3);
        }
        var memoized = function() {
          var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize$2.Cache || MapCache$1)();
        return memoized;
      }
      memoize$2.Cache = MapCache$1;
      var memoize_1 = memoize$2;
      var memoize$1 = memoize_1;
      var MAX_MEMOIZE_SIZE$1 = 500;
      function memoizeCapped$2(func) {
        var result = memoize$1(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE$1) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      var _memoizeCapped = memoizeCapped$2;
      var memoizeCapped$1 = _memoizeCapped;
      var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar$1 = /\\(\\)?/g;
      var stringToPath$3 = memoizeCapped$1(function(string2) {
        var result = [];
        if (string2.charCodeAt(0) === 46) {
          result.push("");
        }
        string2.replace(rePropName$1, function(match5, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar$1, "$1") : number || match5);
        });
        return result;
      });
      var _stringToPath = stringToPath$3;
      var Symbol$4 = _Symbol$4, arrayMap$2 = _arrayMap, isArray$8 = isArray_1, isSymbol$2 = isSymbol_1$1;
      var INFINITY$3 = 1 / 0;
      var symbolProto$3 = Symbol$4 ? Symbol$4.prototype : void 0, symbolToString$1 = symbolProto$3 ? symbolProto$3.toString : void 0;
      function baseToString$2(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray$8(value)) {
          return arrayMap$2(value, baseToString$2) + "";
        }
        if (isSymbol$2(value)) {
          return symbolToString$1 ? symbolToString$1.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY$3 ? "-0" : result;
      }
      var _baseToString = baseToString$2;
      var baseToString$1 = _baseToString;
      function toString$3(value) {
        return value == null ? "" : baseToString$1(value);
      }
      var toString_1 = toString$3;
      var isArray$7 = isArray_1, isKey$3 = _isKey, stringToPath$2 = _stringToPath, toString$2 = toString_1;
      function castPath$3(value, object) {
        if (isArray$7(value)) {
          return value;
        }
        return isKey$3(value, object) ? [value] : stringToPath$2(toString$2(value));
      }
      var _castPath = castPath$3;
      var isSymbol$1 = isSymbol_1$1;
      var INFINITY$2 = 1 / 0;
      function toKey$5(value) {
        if (typeof value == "string" || isSymbol$1(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY$2 ? "-0" : result;
      }
      var _toKey = toKey$5;
      var castPath$2 = _castPath, toKey$4 = _toKey;
      function baseGet$3(object, path) {
        path = castPath$2(path, object);
        var index2 = 0, length = path.length;
        while (object != null && index2 < length) {
          object = object[toKey$4(path[index2++])];
        }
        return index2 && index2 == length ? object : void 0;
      }
      var _baseGet = baseGet$3;
      var baseGet$2 = _baseGet;
      function get$6(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet$2(object, path);
        return result === void 0 ? defaultValue : result;
      }
      var get_1 = get$6;
      function baseHasIn$2(object, key) {
        return object != null && key in Object(object);
      }
      var _baseHasIn = baseHasIn$2;
      var castPath$1 = _castPath, isArguments$2 = isArguments_1, isArray$6 = isArray_1, isIndex$1 = _isIndex, isLength$1 = isLength_1, toKey$3 = _toKey;
      function hasPath$2(object, path, hasFunc) {
        path = castPath$1(path, object);
        var index2 = -1, length = path.length, result = false;
        while (++index2 < length) {
          var key = toKey$3(path[index2]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index2 != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength$1(length) && isIndex$1(key, length) && (isArray$6(object) || isArguments$2(object));
      }
      var _hasPath = hasPath$2;
      var baseHasIn$1 = _baseHasIn, hasPath$1 = _hasPath;
      function hasIn$2(object, path) {
        return object != null && hasPath$1(object, path, baseHasIn$1);
      }
      var hasIn_1 = hasIn$2;
      var baseIsEqual$1 = _baseIsEqual, get$5 = get_1, hasIn$1 = hasIn_1, isKey$2 = _isKey, isStrictComparable$1 = _isStrictComparable, matchesStrictComparable$1 = _matchesStrictComparable, toKey$2 = _toKey;
      var COMPARE_PARTIAL_FLAG$6 = 1, COMPARE_UNORDERED_FLAG$4 = 2;
      function baseMatchesProperty$2(path, srcValue) {
        if (isKey$2(path) && isStrictComparable$1(srcValue)) {
          return matchesStrictComparable$1(toKey$2(path), srcValue);
        }
        return function(object) {
          var objValue = get$5(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn$1(object, path) : baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$6 | COMPARE_UNORDERED_FLAG$4);
        };
      }
      var _baseMatchesProperty = baseMatchesProperty$2;
      function baseProperty$2(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      var _baseProperty = baseProperty$2;
      var baseGet$1 = _baseGet;
      function basePropertyDeep$2(path) {
        return function(object) {
          return baseGet$1(object, path);
        };
      }
      var _basePropertyDeep = basePropertyDeep$2;
      var baseProperty$1 = _baseProperty, basePropertyDeep$1 = _basePropertyDeep, isKey$1 = _isKey, toKey$1 = _toKey;
      function property$2(path) {
        return isKey$1(path) ? baseProperty$1(toKey$1(path)) : basePropertyDeep$1(path);
      }
      var property_1 = property$2;
      var baseMatches$1 = _baseMatches, baseMatchesProperty$1 = _baseMatchesProperty, identity$1 = identity_1, isArray$5 = isArray_1, property$1 = property_1;
      function baseIteratee$2(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity$1;
        }
        if (typeof value == "object") {
          return isArray$5(value) ? baseMatchesProperty$1(value[0], value[1]) : baseMatches$1(value);
        }
        return property$1(value);
      }
      var _baseIteratee = baseIteratee$2;
      var isArrayLike$3 = isArrayLike_1;
      function createBaseEach$2(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike$3(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index2-- : ++index2 < length) {
            if (iteratee(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      var _createBaseEach = createBaseEach$2;
      var baseForOwn$1 = _baseForOwn, createBaseEach$1 = _createBaseEach;
      var baseEach$3 = createBaseEach$1(baseForOwn$1);
      var _baseEach = baseEach$3;
      var baseEach$2 = _baseEach, isArrayLike$2 = isArrayLike_1;
      function baseMap$2(collection, iteratee) {
        var index2 = -1, result = isArrayLike$2(collection) ? Array(collection.length) : [];
        baseEach$2(collection, function(value, key, collection2) {
          result[++index2] = iteratee(value, key, collection2);
        });
        return result;
      }
      var _baseMap = baseMap$2;
      var arrayMap$1 = _arrayMap, baseIteratee$1 = _baseIteratee, baseMap$1 = _baseMap, isArray$4 = isArray_1;
      function map$2(collection, iteratee) {
        var func = isArray$4(collection) ? arrayMap$1 : baseMap$1;
        return func(collection, baseIteratee$1(iteratee));
      }
      var map_1 = map$2;
      Object.defineProperty(flattenNames$1, "__esModule", {
        value: true
      });
      flattenNames$1.flattenNames = void 0;
      var _isString2 = isString_1;
      var _isString3 = _interopRequireDefault$7(_isString2);
      var _forOwn2$2 = forOwn_1;
      var _forOwn3$2 = _interopRequireDefault$7(_forOwn2$2);
      var _isPlainObject2 = isPlainObject_1;
      var _isPlainObject3 = _interopRequireDefault$7(_isPlainObject2);
      var _map2 = map_1;
      var _map3 = _interopRequireDefault$7(_map2);
      function _interopRequireDefault$7(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var flattenNames = flattenNames$1.flattenNames = function flattenNames2() {
        var things = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var names = [];
        (0, _map3.default)(things, function(thing) {
          if (Array.isArray(thing)) {
            flattenNames2(thing).map(function(name2) {
              return names.push(name2);
            });
          } else if ((0, _isPlainObject3.default)(thing)) {
            (0, _forOwn3$2.default)(thing, function(value, key) {
              value === true && names.push(key);
              names.push(key + "-" + value);
            });
          } else if ((0, _isString3.default)(thing)) {
            names.push(thing);
          }
        });
        return names;
      };
      flattenNames$1.default = flattenNames;
      var mergeClasses$1 = {};
      function arrayEach$2(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (iteratee(array[index2], index2, array) === false) {
            break;
          }
        }
        return array;
      }
      var _arrayEach = arrayEach$2;
      var getNative$1 = _getNative;
      var defineProperty$3 = function() {
        try {
          var func = getNative$1(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      }();
      var _defineProperty$3 = defineProperty$3;
      var defineProperty$2 = _defineProperty$3;
      function baseAssignValue$3(object, key, value) {
        if (key == "__proto__" && defineProperty$2) {
          defineProperty$2(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      var _baseAssignValue = baseAssignValue$3;
      var baseAssignValue$2 = _baseAssignValue, eq$1 = eq_1;
      var objectProto$h = Object.prototype;
      var hasOwnProperty$f = objectProto$h.hasOwnProperty;
      function assignValue$3(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty$f.call(object, key) && eq$1(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue$2(object, key, value);
        }
      }
      var _assignValue = assignValue$3;
      var assignValue$2 = _assignValue, baseAssignValue$1 = _baseAssignValue;
      function copyObject$5(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index2 = -1, length = props.length;
        while (++index2 < length) {
          var key = props[index2];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue$1(object, key, newValue);
          } else {
            assignValue$2(object, key, newValue);
          }
        }
        return object;
      }
      var _copyObject = copyObject$5;
      var copyObject$4 = _copyObject, keys$3 = keys_1;
      function baseAssign$1(object, source) {
        return object && copyObject$4(source, keys$3(source), object);
      }
      var _baseAssign = baseAssign$1;
      function nativeKeysIn$2(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      var _nativeKeysIn = nativeKeysIn$2;
      var isObject$5 = isObject_1$4, isPrototype$2 = _isPrototype, nativeKeysIn$1 = _nativeKeysIn;
      var objectProto$g = Object.prototype;
      var hasOwnProperty$e = objectProto$g.hasOwnProperty;
      function baseKeysIn$2(object) {
        if (!isObject$5(object)) {
          return nativeKeysIn$1(object);
        }
        var isProto = isPrototype$2(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty$e.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      var _baseKeysIn = baseKeysIn$2;
      var arrayLikeKeys$1 = _arrayLikeKeys, baseKeysIn$1 = _baseKeysIn, isArrayLike$1 = isArrayLike_1;
      function keysIn$4(object) {
        return isArrayLike$1(object) ? arrayLikeKeys$1(object, true) : baseKeysIn$1(object);
      }
      var keysIn_1 = keysIn$4;
      var copyObject$3 = _copyObject, keysIn$3 = keysIn_1;
      function baseAssignIn$1(object, source) {
        return object && copyObject$3(source, keysIn$3(source), object);
      }
      var _baseAssignIn = baseAssignIn$1;
      var _cloneBuffer = { exports: {} };
      (function(module2, exports3) {
        var root2 = _root$4;
        var freeExports2 = exports3 && !exports3.nodeType && exports3;
        var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
        var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
        var Buffer22 = moduleExports2 ? root2.Buffer : void 0, allocUnsafe2 = Buffer22 ? Buffer22.allocUnsafe : void 0;
        function cloneBuffer2(buffer2, isDeep) {
          if (isDeep) {
            return buffer2.slice();
          }
          var length = buffer2.length, result = allocUnsafe2 ? allocUnsafe2(length) : new buffer2.constructor(length);
          buffer2.copy(result);
          return result;
        }
        module2.exports = cloneBuffer2;
      })(_cloneBuffer, _cloneBuffer.exports);
      function copyArray$2(source, array) {
        var index2 = -1, length = source.length;
        array || (array = Array(length));
        while (++index2 < length) {
          array[index2] = source[index2];
        }
        return array;
      }
      var _copyArray = copyArray$2;
      var copyObject$2 = _copyObject, getSymbols$3 = _getSymbols;
      function copySymbols$1(source, object) {
        return copyObject$2(source, getSymbols$3(source), object);
      }
      var _copySymbols = copySymbols$1;
      var arrayPush$1 = _arrayPush, getPrototype$3 = _getPrototype, getSymbols$2 = _getSymbols, stubArray$1 = stubArray_1;
      var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
      var getSymbolsIn$2 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
        var result = [];
        while (object) {
          arrayPush$1(result, getSymbols$2(object));
          object = getPrototype$3(object);
        }
        return result;
      };
      var _getSymbolsIn = getSymbolsIn$2;
      var copyObject$1 = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
      function copySymbolsIn$1(source, object) {
        return copyObject$1(source, getSymbolsIn$1(source), object);
      }
      var _copySymbolsIn = copySymbolsIn$1;
      var baseGetAllKeys$1 = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$2 = keysIn_1;
      function getAllKeysIn$1(object) {
        return baseGetAllKeys$1(object, keysIn$2, getSymbolsIn);
      }
      var _getAllKeysIn = getAllKeysIn$1;
      var objectProto$f = Object.prototype;
      var hasOwnProperty$d = objectProto$f.hasOwnProperty;
      function initCloneArray$1(array) {
        var length = array.length, result = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty$d.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      var _initCloneArray = initCloneArray$1;
      var Uint8Array$2 = _Uint8Array;
      function cloneArrayBuffer$4(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
        return result;
      }
      var _cloneArrayBuffer = cloneArrayBuffer$4;
      var cloneArrayBuffer$3 = _cloneArrayBuffer;
      function cloneDataView$1(dataView, isDeep) {
        var buffer2 = isDeep ? cloneArrayBuffer$3(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer2, dataView.byteOffset, dataView.byteLength);
      }
      var _cloneDataView = cloneDataView$1;
      var reFlags = /\w*$/;
      function cloneRegExp$1(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      var _cloneRegExp = cloneRegExp$1;
      var Symbol$3 = _Symbol$4;
      var symbolProto$2 = Symbol$3 ? Symbol$3.prototype : void 0, symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : void 0;
      function cloneSymbol$1(symbol) {
        return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
      }
      var _cloneSymbol = cloneSymbol$1;
      var cloneArrayBuffer$2 = _cloneArrayBuffer;
      function cloneTypedArray$2(typedArray, isDeep) {
        var buffer2 = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
      }
      var _cloneTypedArray = cloneTypedArray$2;
      var cloneArrayBuffer$1 = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray$1 = _cloneTypedArray;
      var boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", symbolTag$3 = "[object Symbol]";
      var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
      function initCloneByTag$1(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag$3:
            return cloneArrayBuffer$1(object);
          case boolTag$3:
          case dateTag$3:
            return new Ctor(+object);
          case dataViewTag$4:
            return cloneDataView(object, isDeep);
          case float32Tag$2:
          case float64Tag$2:
          case int8Tag$2:
          case int16Tag$2:
          case int32Tag$2:
          case uint8Tag$2:
          case uint8ClampedTag$2:
          case uint16Tag$2:
          case uint32Tag$2:
            return cloneTypedArray$1(object, isDeep);
          case mapTag$5:
            return new Ctor();
          case numberTag$3:
          case stringTag$3:
            return new Ctor(object);
          case regexpTag$3:
            return cloneRegExp(object);
          case setTag$5:
            return new Ctor();
          case symbolTag$3:
            return cloneSymbol(object);
        }
      }
      var _initCloneByTag = initCloneByTag$1;
      var isObject$4 = isObject_1$4;
      var objectCreate$1 = Object.create;
      var baseCreate$3 = function() {
        function object() {
        }
        return function(proto2) {
          if (!isObject$4(proto2)) {
            return {};
          }
          if (objectCreate$1) {
            return objectCreate$1(proto2);
          }
          object.prototype = proto2;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      var _baseCreate = baseCreate$3;
      var baseCreate$2 = _baseCreate, getPrototype$2 = _getPrototype, isPrototype$1 = _isPrototype;
      function initCloneObject$2(object) {
        return typeof object.constructor == "function" && !isPrototype$1(object) ? baseCreate$2(getPrototype$2(object)) : {};
      }
      var _initCloneObject = initCloneObject$2;
      var getTag$4 = _getTag, isObjectLike$2 = isObjectLike_1$4;
      var mapTag$4 = "[object Map]";
      function baseIsMap$1(value) {
        return isObjectLike$2(value) && getTag$4(value) == mapTag$4;
      }
      var _baseIsMap = baseIsMap$1;
      var baseIsMap = _baseIsMap, baseUnary$2 = _baseUnary, nodeUtil$3 = _nodeUtil.exports;
      var nodeIsMap = nodeUtil$3 && nodeUtil$3.isMap;
      var isMap$1 = nodeIsMap ? baseUnary$2(nodeIsMap) : baseIsMap;
      var isMap_1 = isMap$1;
      var getTag$3 = _getTag, isObjectLike$1 = isObjectLike_1$4;
      var setTag$4 = "[object Set]";
      function baseIsSet$1(value) {
        return isObjectLike$1(value) && getTag$3(value) == setTag$4;
      }
      var _baseIsSet = baseIsSet$1;
      var baseIsSet = _baseIsSet, baseUnary$1 = _baseUnary, nodeUtil$2 = _nodeUtil.exports;
      var nodeIsSet = nodeUtil$2 && nodeUtil$2.isSet;
      var isSet$1 = nodeIsSet ? baseUnary$1(nodeIsSet) : baseIsSet;
      var isSet_1 = isSet$1;
      var Stack$1 = _Stack, arrayEach$1 = _arrayEach, assignValue$1 = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer$1 = _cloneBuffer.exports, copyArray$1 = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys$1 = _getAllKeys, getAllKeysIn = _getAllKeysIn, getTag$2 = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject$1 = _initCloneObject, isArray$3 = isArray_1, isBuffer$2 = isBuffer$5.exports, isMap = isMap_1, isObject$3 = isObject_1$4, isSet = isSet_1, keys$2 = keys_1, keysIn$1 = keysIn_1;
      var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
      var argsTag$3 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$2 = "[object Error]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", objectTag$4 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]", weakMapTag$2 = "[object WeakMap]";
      var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
      var cloneableTags = {};
      cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] = cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag$1] = cloneableTags[float64Tag$1] = cloneableTags[int8Tag$1] = cloneableTags[int16Tag$1] = cloneableTags[int32Tag$1] = cloneableTags[mapTag$3] = cloneableTags[numberTag$2] = cloneableTags[objectTag$4] = cloneableTags[regexpTag$2] = cloneableTags[setTag$3] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag$1] = cloneableTags[uint8ClampedTag$1] = cloneableTags[uint16Tag$1] = cloneableTags[uint32Tag$1] = true;
      cloneableTags[errorTag$2] = cloneableTags[funcTag$2] = cloneableTags[weakMapTag$2] = false;
      function baseClone$1(value, bitmask, customizer, key, object, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject$3(value)) {
          return value;
        }
        var isArr = isArray$3(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray$1(value, result);
          }
        } else {
          var tag = getTag$2(value), isFunc = tag == funcTag$2 || tag == genTag$1;
          if (isBuffer$2(value)) {
            return cloneBuffer$1(value, isDeep);
          }
          if (tag == objectTag$4 || tag == argsTag$3 || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject$1(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack$1());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone$1(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result.set(key2, baseClone$1(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys$1 : isFlat ? keysIn$1 : keys$2;
        var props = isArr ? void 0 : keysFunc(value);
        arrayEach$1(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue$1(result, key2, baseClone$1(subValue, bitmask, customizer, key2, value, stack));
        });
        return result;
      }
      var _baseClone = baseClone$1;
      var baseClone = _baseClone;
      var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      var cloneDeep_1 = cloneDeep;
      Object.defineProperty(mergeClasses$1, "__esModule", {
        value: true
      });
      mergeClasses$1.mergeClasses = void 0;
      var _forOwn2$1 = forOwn_1;
      var _forOwn3$1 = _interopRequireDefault$6(_forOwn2$1);
      var _cloneDeep2 = cloneDeep_1;
      var _cloneDeep3 = _interopRequireDefault$6(_cloneDeep2);
      var _extends$e = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _interopRequireDefault$6(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var mergeClasses = mergeClasses$1.mergeClasses = function mergeClasses2(classes) {
        var activeNames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        var styles2 = classes.default && (0, _cloneDeep3.default)(classes.default) || {};
        activeNames.map(function(name2) {
          var toMerge = classes[name2];
          if (toMerge) {
            (0, _forOwn3$1.default)(toMerge, function(value, key) {
              if (!styles2[key]) {
                styles2[key] = {};
              }
              styles2[key] = _extends$e({}, styles2[key], toMerge[key]);
            });
          }
          return name2;
        });
        return styles2;
      };
      mergeClasses$1.default = mergeClasses;
      var autoprefix$1 = {};
      Object.defineProperty(autoprefix$1, "__esModule", {
        value: true
      });
      autoprefix$1.autoprefix = void 0;
      var _forOwn2 = forOwn_1;
      var _forOwn3 = _interopRequireDefault$5(_forOwn2);
      var _extends$d = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _interopRequireDefault$5(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var transforms = {
        borderRadius: function borderRadius(value) {
          return {
            msBorderRadius: value,
            MozBorderRadius: value,
            OBorderRadius: value,
            WebkitBorderRadius: value,
            borderRadius: value
          };
        },
        boxShadow: function boxShadow(value) {
          return {
            msBoxShadow: value,
            MozBoxShadow: value,
            OBoxShadow: value,
            WebkitBoxShadow: value,
            boxShadow: value
          };
        },
        userSelect: function userSelect(value) {
          return {
            WebkitTouchCallout: value,
            KhtmlUserSelect: value,
            MozUserSelect: value,
            msUserSelect: value,
            WebkitUserSelect: value,
            userSelect: value
          };
        },
        flex: function flex(value) {
          return {
            WebkitBoxFlex: value,
            MozBoxFlex: value,
            WebkitFlex: value,
            msFlex: value,
            flex: value
          };
        },
        flexBasis: function flexBasis(value) {
          return {
            WebkitFlexBasis: value,
            flexBasis: value
          };
        },
        justifyContent: function justifyContent(value) {
          return {
            WebkitJustifyContent: value,
            justifyContent: value
          };
        },
        transition: function transition(value) {
          return {
            msTransition: value,
            MozTransition: value,
            OTransition: value,
            WebkitTransition: value,
            transition: value
          };
        },
        transform: function transform(value) {
          return {
            msTransform: value,
            MozTransform: value,
            OTransform: value,
            WebkitTransform: value,
            transform: value
          };
        },
        absolute: function absolute(value) {
          var direction = value && value.split(" ");
          return {
            position: "absolute",
            top: direction && direction[0],
            right: direction && direction[1],
            bottom: direction && direction[2],
            left: direction && direction[3]
          };
        },
        extend: function extend2(name2, otherElementStyles) {
          var otherStyle = otherElementStyles[name2];
          if (otherStyle) {
            return otherStyle;
          }
          return {
            "extend": name2
          };
        }
      };
      var autoprefix = autoprefix$1.autoprefix = function autoprefix2(elements) {
        var prefixed = {};
        (0, _forOwn3.default)(elements, function(styles2, element) {
          var expanded = {};
          (0, _forOwn3.default)(styles2, function(value, key) {
            var transform = transforms[key];
            if (transform) {
              expanded = _extends$d({}, expanded, transform(value));
            } else {
              expanded[key] = value;
            }
          });
          prefixed[element] = expanded;
        });
        return prefixed;
      };
      autoprefix$1.default = autoprefix;
      var hover$1 = {};
      Object.defineProperty(hover$1, "__esModule", {
        value: true
      });
      hover$1.hover = void 0;
      var _extends$c = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react$3 = react.exports;
      var _react2$3 = _interopRequireDefault$4(_react$3);
      function _interopRequireDefault$4(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck$9(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$9(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$9(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var hover = hover$1.hover = function hover2(Component) {
        var Span2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
        return function(_React$Component) {
          _inherits$9(Hover, _React$Component);
          function Hover() {
            var _ref;
            var _temp, _this, _ret;
            _classCallCheck$9(this, Hover);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = _possibleConstructorReturn$9(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hover: false }, _this.handleMouseOver = function() {
              return _this.setState({ hover: true });
            }, _this.handleMouseOut = function() {
              return _this.setState({ hover: false });
            }, _this.render = function() {
              return _react2$3.default.createElement(Span2, { onMouseOver: _this.handleMouseOver, onMouseOut: _this.handleMouseOut }, _react2$3.default.createElement(Component, _extends$c({}, _this.props, _this.state)));
            }, _temp), _possibleConstructorReturn$9(_this, _ret);
          }
          return Hover;
        }(_react2$3.default.Component);
      };
      hover$1.default = hover;
      var active$1 = {};
      Object.defineProperty(active$1, "__esModule", {
        value: true
      });
      active$1.active = void 0;
      var _extends$b = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react$2 = react.exports;
      var _react2$2 = _interopRequireDefault$3(_react$2);
      function _interopRequireDefault$3(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck$8(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$8(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$8(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var active = active$1.active = function active2(Component) {
        var Span2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
        return function(_React$Component) {
          _inherits$8(Active, _React$Component);
          function Active() {
            var _ref;
            var _temp, _this, _ret;
            _classCallCheck$8(this, Active);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = _possibleConstructorReturn$8(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = { active: false }, _this.handleMouseDown = function() {
              return _this.setState({ active: true });
            }, _this.handleMouseUp = function() {
              return _this.setState({ active: false });
            }, _this.render = function() {
              return _react2$2.default.createElement(Span2, { onMouseDown: _this.handleMouseDown, onMouseUp: _this.handleMouseUp }, _react2$2.default.createElement(Component, _extends$b({}, _this.props, _this.state)));
            }, _temp), _possibleConstructorReturn$8(_this, _ret);
          }
          return Active;
        }(_react2$2.default.Component);
      };
      active$1.default = active;
      var loop = {};
      Object.defineProperty(loop, "__esModule", {
        value: true
      });
      var loopable = function loopable2(i2, length) {
        var props = {};
        var setProp = function setProp2(name2) {
          var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          props[name2] = value;
        };
        i2 === 0 && setProp("first-child");
        i2 === length - 1 && setProp("last-child");
        (i2 === 0 || i2 % 2 === 0) && setProp("even");
        Math.abs(i2 % 2) === 1 && setProp("odd");
        setProp("nth-child", i2);
        return props;
      };
      loop.default = loopable;
      Object.defineProperty(lib, "__esModule", {
        value: true
      });
      lib.ReactCSS = lib.loop = lib.handleActive = handleHover = lib.handleHover = lib.hover = void 0;
      var _flattenNames = flattenNames$1;
      var _flattenNames2 = _interopRequireDefault$2(_flattenNames);
      var _mergeClasses = mergeClasses$1;
      var _mergeClasses2 = _interopRequireDefault$2(_mergeClasses);
      var _autoprefix = autoprefix$1;
      var _autoprefix2 = _interopRequireDefault$2(_autoprefix);
      var _hover2 = hover$1;
      var _hover3 = _interopRequireDefault$2(_hover2);
      var _active = active$1;
      var _active2 = _interopRequireDefault$2(_active);
      var _loop2 = loop;
      var _loop3 = _interopRequireDefault$2(_loop2);
      function _interopRequireDefault$2(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      lib.hover = _hover3.default;
      var handleHover = lib.handleHover = _hover3.default;
      lib.handleActive = _active2.default;
      lib.loop = _loop3.default;
      var ReactCSS = lib.ReactCSS = function ReactCSS2(classes) {
        for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          activations[_key - 1] = arguments[_key];
        }
        var activeNames = (0, _flattenNames2.default)(activations);
        var merged = (0, _mergeClasses2.default)(classes, activeNames);
        return (0, _autoprefix2.default)(merged);
      };
      var _default$3 = lib.default = ReactCSS;
      var calculateChange$2 = function calculateChange2(e2, hsl, direction, initialA, container) {
        var containerWidth = container.clientWidth;
        var containerHeight = container.clientHeight;
        var x2 = typeof e2.pageX === "number" ? e2.pageX : e2.touches[0].pageX;
        var y2 = typeof e2.pageY === "number" ? e2.pageY : e2.touches[0].pageY;
        var left = x2 - (container.getBoundingClientRect().left + window.pageXOffset);
        var top = y2 - (container.getBoundingClientRect().top + window.pageYOffset);
        if (direction === "vertical") {
          var a2 = void 0;
          if (top < 0) {
            a2 = 0;
          } else if (top > containerHeight) {
            a2 = 1;
          } else {
            a2 = Math.round(top * 100 / containerHeight) / 100;
          }
          if (hsl.a !== a2) {
            return {
              h: hsl.h,
              s: hsl.s,
              l: hsl.l,
              a: a2,
              source: "rgb"
            };
          }
        } else {
          var _a = void 0;
          if (left < 0) {
            _a = 0;
          } else if (left > containerWidth) {
            _a = 1;
          } else {
            _a = Math.round(left * 100 / containerWidth) / 100;
          }
          if (initialA !== _a) {
            return {
              h: hsl.h,
              s: hsl.s,
              l: hsl.l,
              a: _a,
              source: "rgb"
            };
          }
        }
        return null;
      };
      var checkboardCache = {};
      var render = function render2(c1, c2, size, serverCanvas) {
        if (typeof document === "undefined" && !serverCanvas) {
          return null;
        }
        var canvas = serverCanvas ? new serverCanvas() : document.createElement("canvas");
        canvas.width = size * 2;
        canvas.height = size * 2;
        var ctx = canvas.getContext("2d");
        if (!ctx) {
          return null;
        }
        ctx.fillStyle = c1;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = c2;
        ctx.fillRect(0, 0, size, size);
        ctx.translate(size, size);
        ctx.fillRect(0, 0, size, size);
        return canvas.toDataURL();
      };
      var get$4 = function get2(c1, c2, size, serverCanvas) {
        var key = c1 + "-" + c2 + "-" + size + (serverCanvas ? "-server" : "");
        if (checkboardCache[key]) {
          return checkboardCache[key];
        }
        var checkboard = render(c1, c2, size, serverCanvas);
        checkboardCache[key] = checkboard;
        return checkboard;
      };
      var _extends$a = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var Checkboard = function Checkboard2(_ref) {
        var white = _ref.white, grey = _ref.grey, size = _ref.size, renderers = _ref.renderers, borderRadius = _ref.borderRadius, boxShadow = _ref.boxShadow, children = _ref.children;
        var styles2 = _default$3({
          "default": {
            grid: {
              borderRadius,
              boxShadow,
              absolute: "0px 0px 0px 0px",
              background: "url(" + get$4(white, grey, size, renderers.canvas) + ") center left"
            }
          }
        });
        return react.exports.isValidElement(children) ? React__default.cloneElement(children, _extends$a({}, children.props, { style: _extends$a({}, children.props.style, styles2.grid) })) : React__default.createElement("div", { style: styles2.grid });
      };
      Checkboard.defaultProps = {
        size: 8,
        white: "transparent",
        grey: "rgba(0,0,0,.08)",
        renderers: {}
      };
      var _extends$9 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass$7 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck$7(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$7(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$7(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var Alpha = function(_ref) {
        _inherits$7(Alpha2, _ref);
        function Alpha2() {
          var _ref2;
          var _temp, _this, _ret;
          _classCallCheck$7(this, Alpha2);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = _possibleConstructorReturn$7(this, (_ref2 = Alpha2.__proto__ || Object.getPrototypeOf(Alpha2)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function(e2) {
            var change = calculateChange$2(e2, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);
            change && typeof _this.props.onChange === "function" && _this.props.onChange(change, e2);
          }, _this.handleMouseDown = function(e2) {
            _this.handleChange(e2);
            window.addEventListener("mousemove", _this.handleChange);
            window.addEventListener("mouseup", _this.handleMouseUp);
          }, _this.handleMouseUp = function() {
            _this.unbindEventListeners();
          }, _this.unbindEventListeners = function() {
            window.removeEventListener("mousemove", _this.handleChange);
            window.removeEventListener("mouseup", _this.handleMouseUp);
          }, _temp), _possibleConstructorReturn$7(_this, _ret);
        }
        _createClass$7(Alpha2, [{
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.unbindEventListeners();
          }
        }, {
          key: "render",
          value: function render2() {
            var _this2 = this;
            var rgb = this.props.rgb;
            var styles2 = _default$3({
              "default": {
                alpha: {
                  absolute: "0px 0px 0px 0px",
                  borderRadius: this.props.radius
                },
                checkboard: {
                  absolute: "0px 0px 0px 0px",
                  overflow: "hidden",
                  borderRadius: this.props.radius
                },
                gradient: {
                  absolute: "0px 0px 0px 0px",
                  background: "linear-gradient(to right, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)",
                  boxShadow: this.props.shadow,
                  borderRadius: this.props.radius
                },
                container: {
                  position: "relative",
                  height: "100%",
                  margin: "0 3px"
                },
                pointer: {
                  position: "absolute",
                  left: rgb.a * 100 + "%"
                },
                slider: {
                  width: "4px",
                  borderRadius: "1px",
                  height: "8px",
                  boxShadow: "0 0 2px rgba(0, 0, 0, .6)",
                  background: "#fff",
                  marginTop: "1px",
                  transform: "translateX(-2px)"
                }
              },
              "vertical": {
                gradient: {
                  background: "linear-gradient(to bottom, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)"
                },
                pointer: {
                  left: 0,
                  top: rgb.a * 100 + "%"
                }
              },
              "overwrite": _extends$9({}, this.props.style)
            }, {
              vertical: this.props.direction === "vertical",
              overwrite: true
            });
            return React__default.createElement("div", { style: styles2.alpha }, React__default.createElement("div", { style: styles2.checkboard }, React__default.createElement(Checkboard, { renderers: this.props.renderers })), React__default.createElement("div", { style: styles2.gradient }), React__default.createElement("div", {
              style: styles2.container,
              ref: function ref(container) {
                return _this2.container = container;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            }, React__default.createElement("div", { style: styles2.pointer }, this.props.pointer ? React__default.createElement(this.props.pointer, this.props) : React__default.createElement("div", { style: styles2.slider }))));
          }
        }]);
        return Alpha2;
      }(react.exports.PureComponent || react.exports.Component);
      var _createClass$6 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _defineProperty$2(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck$6(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$6(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$6(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var DEFAULT_ARROW_OFFSET = 1;
      var UP_KEY_CODE = 38;
      var DOWN_KEY_CODE = 40;
      var VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];
      var isValidKeyCode = function isValidKeyCode2(keyCode) {
        return VALID_KEY_CODES.indexOf(keyCode) > -1;
      };
      var getNumberValue = function getNumberValue2(value) {
        return Number(String(value).replace(/%/g, ""));
      };
      var idCounter = 1;
      var EditableInput = function(_ref) {
        _inherits$6(EditableInput2, _ref);
        function EditableInput2(props) {
          _classCallCheck$6(this, EditableInput2);
          var _this = _possibleConstructorReturn$6(this, (EditableInput2.__proto__ || Object.getPrototypeOf(EditableInput2)).call(this));
          _this.handleBlur = function() {
            if (_this.state.blurValue) {
              _this.setState({ value: _this.state.blurValue, blurValue: null });
            }
          };
          _this.handleChange = function(e2) {
            _this.setUpdatedValue(e2.target.value, e2);
          };
          _this.handleKeyDown = function(e2) {
            var value = getNumberValue(e2.target.value);
            if (!isNaN(value) && isValidKeyCode(e2.keyCode)) {
              var offset2 = _this.getArrowOffset();
              var updatedValue = e2.keyCode === UP_KEY_CODE ? value + offset2 : value - offset2;
              _this.setUpdatedValue(updatedValue, e2);
            }
          };
          _this.handleDrag = function(e2) {
            if (_this.props.dragLabel) {
              var newValue = Math.round(_this.props.value + e2.movementX);
              if (newValue >= 0 && newValue <= _this.props.dragMax) {
                _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e2);
              }
            }
          };
          _this.handleMouseDown = function(e2) {
            if (_this.props.dragLabel) {
              e2.preventDefault();
              _this.handleDrag(e2);
              window.addEventListener("mousemove", _this.handleDrag);
              window.addEventListener("mouseup", _this.handleMouseUp);
            }
          };
          _this.handleMouseUp = function() {
            _this.unbindEventListeners();
          };
          _this.unbindEventListeners = function() {
            window.removeEventListener("mousemove", _this.handleDrag);
            window.removeEventListener("mouseup", _this.handleMouseUp);
          };
          _this.state = {
            value: String(props.value).toUpperCase(),
            blurValue: String(props.value).toUpperCase()
          };
          _this.inputId = "rc-editable-input-" + idCounter++;
          return _this;
        }
        _createClass$6(EditableInput2, [{
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
              if (this.input === document.activeElement) {
                this.setState({ blurValue: String(this.props.value).toUpperCase() });
              } else {
                this.setState({ value: String(this.props.value).toUpperCase(), blurValue: !this.state.blurValue && String(this.props.value).toUpperCase() });
              }
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.unbindEventListeners();
          }
        }, {
          key: "getValueObjectWithLabel",
          value: function getValueObjectWithLabel(value) {
            return _defineProperty$2({}, this.props.label, value);
          }
        }, {
          key: "getArrowOffset",
          value: function getArrowOffset() {
            return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
          }
        }, {
          key: "setUpdatedValue",
          value: function setUpdatedValue(value, e2) {
            var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;
            this.props.onChange && this.props.onChange(onChangeValue, e2);
            this.setState({ value });
          }
        }, {
          key: "render",
          value: function render2() {
            var _this2 = this;
            var styles2 = _default$3({
              "default": {
                wrap: {
                  position: "relative"
                }
              },
              "user-override": {
                wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
                input: this.props.style && this.props.style.input ? this.props.style.input : {},
                label: this.props.style && this.props.style.label ? this.props.style.label : {}
              },
              "dragLabel-true": {
                label: {
                  cursor: "ew-resize"
                }
              }
            }, {
              "user-override": true
            }, this.props);
            return React__default.createElement("div", { style: styles2.wrap }, React__default.createElement("input", {
              id: this.inputId,
              style: styles2.input,
              ref: function ref(input) {
                return _this2.input = input;
              },
              value: this.state.value,
              onKeyDown: this.handleKeyDown,
              onChange: this.handleChange,
              onBlur: this.handleBlur,
              placeholder: this.props.placeholder,
              spellCheck: "false"
            }), this.props.label && !this.props.hideLabel ? React__default.createElement("label", {
              htmlFor: this.inputId,
              style: styles2.label,
              onMouseDown: this.handleMouseDown
            }, this.props.label) : null);
          }
        }]);
        return EditableInput2;
      }(react.exports.PureComponent || react.exports.Component);
      var calculateChange$1 = function calculateChange2(e2, direction, hsl, container) {
        var containerWidth = container.clientWidth;
        var containerHeight = container.clientHeight;
        var x2 = typeof e2.pageX === "number" ? e2.pageX : e2.touches[0].pageX;
        var y2 = typeof e2.pageY === "number" ? e2.pageY : e2.touches[0].pageY;
        var left = x2 - (container.getBoundingClientRect().left + window.pageXOffset);
        var top = y2 - (container.getBoundingClientRect().top + window.pageYOffset);
        if (direction === "vertical") {
          var h2 = void 0;
          if (top < 0) {
            h2 = 359;
          } else if (top > containerHeight) {
            h2 = 0;
          } else {
            var percent = -(top * 100 / containerHeight) + 100;
            h2 = 360 * percent / 100;
          }
          if (hsl.h !== h2) {
            return {
              h: h2,
              s: hsl.s,
              l: hsl.l,
              a: hsl.a,
              source: "hsl"
            };
          }
        } else {
          var _h = void 0;
          if (left < 0) {
            _h = 0;
          } else if (left > containerWidth) {
            _h = 359;
          } else {
            var _percent = left * 100 / containerWidth;
            _h = 360 * _percent / 100;
          }
          if (hsl.h !== _h) {
            return {
              h: _h,
              s: hsl.s,
              l: hsl.l,
              a: hsl.a,
              source: "hsl"
            };
          }
        }
        return null;
      };
      var _createClass$5 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck$5(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$5(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$5(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var Hue = function(_ref) {
        _inherits$5(Hue2, _ref);
        function Hue2() {
          var _ref2;
          var _temp, _this, _ret;
          _classCallCheck$5(this, Hue2);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = _possibleConstructorReturn$5(this, (_ref2 = Hue2.__proto__ || Object.getPrototypeOf(Hue2)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function(e2) {
            var change = calculateChange$1(e2, _this.props.direction, _this.props.hsl, _this.container);
            change && typeof _this.props.onChange === "function" && _this.props.onChange(change, e2);
          }, _this.handleMouseDown = function(e2) {
            _this.handleChange(e2);
            window.addEventListener("mousemove", _this.handleChange);
            window.addEventListener("mouseup", _this.handleMouseUp);
          }, _this.handleMouseUp = function() {
            _this.unbindEventListeners();
          }, _temp), _possibleConstructorReturn$5(_this, _ret);
        }
        _createClass$5(Hue2, [{
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.unbindEventListeners();
          }
        }, {
          key: "unbindEventListeners",
          value: function unbindEventListeners() {
            window.removeEventListener("mousemove", this.handleChange);
            window.removeEventListener("mouseup", this.handleMouseUp);
          }
        }, {
          key: "render",
          value: function render2() {
            var _this2 = this;
            var _props$direction = this.props.direction, direction = _props$direction === void 0 ? "horizontal" : _props$direction;
            var styles2 = _default$3({
              "default": {
                hue: {
                  absolute: "0px 0px 0px 0px",
                  borderRadius: this.props.radius,
                  boxShadow: this.props.shadow
                },
                container: {
                  padding: "0 2px",
                  position: "relative",
                  height: "100%",
                  borderRadius: this.props.radius
                },
                pointer: {
                  position: "absolute",
                  left: this.props.hsl.h * 100 / 360 + "%"
                },
                slider: {
                  marginTop: "1px",
                  width: "4px",
                  borderRadius: "1px",
                  height: "8px",
                  boxShadow: "0 0 2px rgba(0, 0, 0, .6)",
                  background: "#fff",
                  transform: "translateX(-2px)"
                }
              },
              "vertical": {
                pointer: {
                  left: "0px",
                  top: -(this.props.hsl.h * 100 / 360) + 100 + "%"
                }
              }
            }, { vertical: direction === "vertical" });
            return React__default.createElement("div", { style: styles2.hue }, React__default.createElement("div", {
              className: "hue-" + direction,
              style: styles2.container,
              ref: function ref(container) {
                return _this2.container = container;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            }, React__default.createElement("style", null, "\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          "), React__default.createElement("div", { style: styles2.pointer }, this.props.pointer ? React__default.createElement(this.props.pointer, this.props) : React__default.createElement("div", { style: styles2.slider }))));
          }
        }]);
        return Hue2;
      }(react.exports.PureComponent || react.exports.Component);
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      function ListCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeGlobal$1 = freeGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal$1 || freeSelf || Function("return this")();
      var root$1 = root;
      var Symbol$1 = root$1.Symbol;
      var Symbol$2 = Symbol$1;
      var objectProto$e = Object.prototype;
      var hasOwnProperty$c = objectProto$e.hasOwnProperty;
      var nativeObjectToString$1 = objectProto$e.toString;
      var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty$c.call(value, symToStringTag$1), tag = value[symToStringTag$1];
        try {
          value[symToStringTag$1] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString$1.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag$1] = tag;
          } else {
            delete value[symToStringTag$1];
          }
        }
        return result;
      }
      var objectProto$d = Object.prototype;
      var nativeObjectToString = objectProto$d.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      function isObject$2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      var asyncTag = "[object AsyncFunction]", funcTag$1 = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
      function isFunction$1(value) {
        if (!isObject$2(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      var coreJsData = root$1["__core-js_shared__"];
      var coreJsData$1 = coreJsData;
      var maskSrcKey = function() {
        var uid2 = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || "");
        return uid2 ? "Symbol(src)_1." + uid2 : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var funcProto$2 = Function.prototype;
      var funcToString$2 = funcProto$2.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString$2.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto$1 = Function.prototype, objectProto$c = Object.prototype;
      var funcToString$1 = funcProto$1.toString;
      var hasOwnProperty$b = objectProto$c.hasOwnProperty;
      var reIsNative = RegExp("^" + funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      function baseIsNative(value) {
        if (!isObject$2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      var Map$1 = getNative(root$1, "Map");
      var Map$2 = Map$1;
      var nativeCreate = getNative(Object, "create");
      var nativeCreate$1 = nativeCreate;
      function hashClear() {
        this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
      var objectProto$b = Object.prototype;
      var hasOwnProperty$a = objectProto$b.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate$1) {
          var result = data[key];
          return result === HASH_UNDEFINED$2 ? void 0 : result;
        }
        return hasOwnProperty$a.call(data, key) ? data[key] : void 0;
      }
      var objectProto$a = Object.prototype;
      var hasOwnProperty$9 = objectProto$a.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$9.call(data, key);
      }
      var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate$1 && value === void 0 ? HASH_UNDEFINED$1 : value;
        return this;
      }
      function Hash(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map$2 || ListCache)(),
          "string": new Hash()
        };
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function getMapData(map2, key) {
        var data = map2.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      function MapCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      }();
      var defineProperty$1 = defineProperty;
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty$1) {
          defineProperty$1(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      function assignMergeValue(object, key, value) {
        if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      var baseFor = createBaseFor();
      var baseFor$1 = baseFor;
      var freeExports$2 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
      var Buffer$1 = moduleExports$2 ? root$1.Buffer : void 0, allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : void 0;
      function cloneBuffer(buffer2, isDeep) {
        if (isDeep) {
          return buffer2.slice();
        }
        var length = buffer2.length, result = allocUnsafe ? allocUnsafe(length) : new buffer2.constructor(length);
        buffer2.copy(result);
        return result;
      }
      var Uint8Array2 = root$1.Uint8Array;
      var Uint8Array$1 = Uint8Array2;
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
        return result;
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
      }
      function copyArray(source, array) {
        var index2 = -1, length = source.length;
        array || (array = Array(length));
        while (++index2 < length) {
          array[index2] = source[index2];
        }
        return array;
      }
      var objectCreate = Object.create;
      var baseCreate = function() {
        function object() {
        }
        return function(proto2) {
          if (!isObject$2(proto2)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto2);
          }
          object.prototype = proto2;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      var baseCreate$1 = baseCreate;
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      var getPrototype$1 = getPrototype;
      var objectProto$9 = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$9;
        return value === proto2;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {};
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      var argsTag$2 = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag$2;
      }
      var objectProto$8 = Object.prototype;
      var hasOwnProperty$8 = objectProto$8.hasOwnProperty;
      var propertyIsEnumerable$1 = objectProto$8.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty$8.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
      };
      var isArguments$1 = isArguments;
      var isArray$1 = Array.isArray;
      var isArray$2 = isArray$1;
      var MAX_SAFE_INTEGER$1 = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
      }
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction$1(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function stubFalse() {
        return false;
      }
      var freeExports$1 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
      var Buffer2 = moduleExports$1 ? root$1.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse;
      var isBuffer$1 = isBuffer;
      var objectTag$3 = "[object Object]";
      var funcProto = Function.prototype, objectProto$7 = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty$7 = objectProto$7.hasOwnProperty;
      var objectCtorString = funcToString.call(Object);
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
          return false;
        }
        var proto2 = getPrototype$1(value);
        if (proto2 === null) {
          return true;
        }
        var Ctor = hasOwnProperty$7.call(proto2, "constructor") && proto2.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", weakMapTag$1 = "[object WeakMap]";
      var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] = typedArrayTags[dataViewTag$2] = typedArrayTags[dateTag$1] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag] = typedArrayTags[mapTag$2] = typedArrayTags[numberTag$1] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$1] = typedArrayTags[setTag$2] = typedArrayTags[stringTag$1] = typedArrayTags[weakMapTag$1] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal$1.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      var nodeUtil$1 = nodeUtil;
      var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      var isTypedArray$1 = isTypedArray;
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var objectProto$6 = Object.prototype;
      var hasOwnProperty$6 = objectProto$6.hasOwnProperty;
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty$6.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index2 = -1, length = props.length;
        while (++index2 < length) {
          var key = props[index2];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function baseTimes(n2, iteratee) {
        var index2 = -1, result = Array(n2);
        while (++index2 < n2) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      var objectProto$5 = Object.prototype;
      var hasOwnProperty$5 = objectProto$5.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray$2(value), isArg = !isArr && isArguments$1(value), isBuff = !isArr && !isArg && isBuffer$1(value), isType2 = !isArr && !isArg && !isBuff && isTypedArray$1(value), skipIndexes = isArr || isArg || isBuff || isType2, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty$5.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType2 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      var objectProto$4 = Object.prototype;
      var hasOwnProperty$4 = objectProto$4.hasOwnProperty;
      function baseKeysIn(object) {
        if (!isObject$2(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty$4.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray$2(srcValue), isBuff = !isArr && isBuffer$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray$2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments$1(srcValue)) {
            newValue = objValue;
            if (isArguments$1(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject$2(objValue) || isFunction$1(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor$1(source, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject$2(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function identity(value) {
        return value;
      }
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      var nativeMax$1 = Math.max;
      function overRest(func, start, transform) {
        start = nativeMax$1(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index2 = -1, length = nativeMax$1(args.length - start, 0), array = Array(length);
          while (++index2 < length) {
            array[index2] = args[start + index2];
          }
          index2 = -1;
          var otherArgs = Array(start + 1);
          while (++index2 < start) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }
      function constant(value) {
        return function() {
          return value;
        };
      }
      var baseSetToString = !defineProperty$1 ? identity : function(func, string2) {
        return defineProperty$1(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string2),
          "writable": true
        });
      };
      var baseSetToString$1 = baseSetToString;
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      var setToString = shortOut(baseSetToString$1);
      var setToString$1 = setToString;
      function baseRest(func, start) {
        return setToString$1(overRest(func, start, identity), func + "");
      }
      function isIterateeCall(value, index2, object) {
        if (!isObject$2(object)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
          return eq(object[index2], value);
        }
        return false;
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index2 < length) {
            var source = sources[index2];
            if (source) {
              assigner(object, source, index2, customizer);
            }
          }
          return object;
        });
      }
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var merge$1 = merge;
      var Raised = function Raised2(_ref) {
        var zDepth = _ref.zDepth, radius = _ref.radius, background = _ref.background, children = _ref.children, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles;
        var styles2 = _default$3(merge$1({
          "default": {
            wrap: {
              position: "relative",
              display: "inline-block"
            },
            content: {
              position: "relative"
            },
            bg: {
              absolute: "0px 0px 0px 0px",
              boxShadow: "0 " + zDepth + "px " + zDepth * 4 + "px rgba(0,0,0,.24)",
              borderRadius: radius,
              background
            }
          },
          "zDepth-0": {
            bg: {
              boxShadow: "none"
            }
          },
          "zDepth-1": {
            bg: {
              boxShadow: "0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)"
            }
          },
          "zDepth-2": {
            bg: {
              boxShadow: "0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)"
            }
          },
          "zDepth-3": {
            bg: {
              boxShadow: "0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)"
            }
          },
          "zDepth-4": {
            bg: {
              boxShadow: "0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)"
            }
          },
          "zDepth-5": {
            bg: {
              boxShadow: "0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)"
            }
          },
          "square": {
            bg: {
              borderRadius: "0"
            }
          },
          "circle": {
            bg: {
              borderRadius: "50%"
            }
          }
        }, passedStyles), { "zDepth-1": zDepth === 1 });
        return React__default.createElement("div", { style: styles2.wrap }, React__default.createElement("div", { style: styles2.bg }), React__default.createElement("div", { style: styles2.content }, children));
      };
      Raised.propTypes = {
        background: PropTypes$1.string,
        zDepth: PropTypes$1.oneOf([0, 1, 2, 3, 4, 5]),
        radius: PropTypes$1.number,
        styles: PropTypes$1.object
      };
      Raised.defaultProps = {
        background: "#fff",
        zDepth: 1,
        radius: 2,
        styles: {}
      };
      var now$1 = function() {
        return root$1.Date.now();
      };
      var now$2 = now$1;
      var reWhitespace = /\s/;
      function trimmedEndIndex(string2) {
        var index2 = string2.length;
        while (index2-- && reWhitespace.test(string2.charAt(index2))) {
        }
        return index2;
      }
      var reTrimStart = /^\s+/;
      function baseTrim(string2) {
        return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
      }
      var symbolTag$1 = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag$1;
      }
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject$2(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject$2(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      var FUNC_ERROR_TEXT$2 = "Expected a function";
      var nativeMax = Math.max, nativeMin = Math.min;
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT$2);
        }
        wait = toNumber(wait) || 0;
        if (isObject$2(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now$2();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now$2());
        }
        function debounced() {
          var time = now$2(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var FUNC_ERROR_TEXT$1 = "Expected a function";
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT$1);
        }
        if (isObject$2(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      var calculateChange = function calculateChange2(e2, hsl, container) {
        var _container$getBoundin = container.getBoundingClientRect(), containerWidth = _container$getBoundin.width, containerHeight = _container$getBoundin.height;
        var x2 = typeof e2.pageX === "number" ? e2.pageX : e2.touches[0].pageX;
        var y2 = typeof e2.pageY === "number" ? e2.pageY : e2.touches[0].pageY;
        var left = x2 - (container.getBoundingClientRect().left + window.pageXOffset);
        var top = y2 - (container.getBoundingClientRect().top + window.pageYOffset);
        if (left < 0) {
          left = 0;
        } else if (left > containerWidth) {
          left = containerWidth;
        }
        if (top < 0) {
          top = 0;
        } else if (top > containerHeight) {
          top = containerHeight;
        }
        var saturation = left / containerWidth;
        var bright = 1 - top / containerHeight;
        return {
          h: hsl.h,
          s: saturation,
          v: bright,
          a: hsl.a,
          source: "hsv"
        };
      };
      var _createClass$4 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck$4(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$4(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$4(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var Saturation = function(_ref) {
        _inherits$4(Saturation2, _ref);
        function Saturation2(props) {
          _classCallCheck$4(this, Saturation2);
          var _this = _possibleConstructorReturn$4(this, (Saturation2.__proto__ || Object.getPrototypeOf(Saturation2)).call(this, props));
          _this.handleChange = function(e2) {
            typeof _this.props.onChange === "function" && _this.throttle(_this.props.onChange, calculateChange(e2, _this.props.hsl, _this.container), e2);
          };
          _this.handleMouseDown = function(e2) {
            _this.handleChange(e2);
            var renderWindow = _this.getContainerRenderWindow();
            renderWindow.addEventListener("mousemove", _this.handleChange);
            renderWindow.addEventListener("mouseup", _this.handleMouseUp);
          };
          _this.handleMouseUp = function() {
            _this.unbindEventListeners();
          };
          _this.throttle = throttle(function(fn2, data, e2) {
            fn2(data, e2);
          }, 50);
          return _this;
        }
        _createClass$4(Saturation2, [{
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.throttle.cancel();
            this.unbindEventListeners();
          }
        }, {
          key: "getContainerRenderWindow",
          value: function getContainerRenderWindow() {
            var container = this.container;
            var renderWindow = window;
            while (!renderWindow.document.contains(container) && renderWindow.parent !== renderWindow) {
              renderWindow = renderWindow.parent;
            }
            return renderWindow;
          }
        }, {
          key: "unbindEventListeners",
          value: function unbindEventListeners() {
            var renderWindow = this.getContainerRenderWindow();
            renderWindow.removeEventListener("mousemove", this.handleChange);
            renderWindow.removeEventListener("mouseup", this.handleMouseUp);
          }
        }, {
          key: "render",
          value: function render2() {
            var _this2 = this;
            var _ref2 = this.props.style || {}, color = _ref2.color, white = _ref2.white, black = _ref2.black, pointer = _ref2.pointer, circle = _ref2.circle;
            var styles2 = _default$3({
              "default": {
                color: {
                  absolute: "0px 0px 0px 0px",
                  background: "hsl(" + this.props.hsl.h + ",100%, 50%)",
                  borderRadius: this.props.radius
                },
                white: {
                  absolute: "0px 0px 0px 0px",
                  borderRadius: this.props.radius
                },
                black: {
                  absolute: "0px 0px 0px 0px",
                  boxShadow: this.props.shadow,
                  borderRadius: this.props.radius
                },
                pointer: {
                  position: "absolute",
                  top: -(this.props.hsv.v * 100) + 100 + "%",
                  left: this.props.hsv.s * 100 + "%",
                  cursor: "default"
                },
                circle: {
                  width: "4px",
                  height: "4px",
                  boxShadow: "0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",
                  borderRadius: "50%",
                  cursor: "hand",
                  transform: "translate(-2px, -2px)"
                }
              },
              "custom": {
                color,
                white,
                black,
                pointer,
                circle
              }
            }, { "custom": !!this.props.style });
            return React__default.createElement("div", {
              style: styles2.color,
              ref: function ref(container) {
                return _this2.container = container;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            }, React__default.createElement("style", null, "\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        "), React__default.createElement("div", { style: styles2.white, className: "saturation-white" }, React__default.createElement("div", { style: styles2.black, className: "saturation-black" }), React__default.createElement("div", { style: styles2.pointer }, this.props.pointer ? React__default.createElement(this.props.pointer, this.props) : React__default.createElement("div", { style: styles2.circle }))));
          }
        }]);
        return Saturation2;
      }(react.exports.PureComponent || react.exports.Component);
      function arrayEach(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (iteratee(array[index2], index2, array) === false) {
            break;
          }
        }
        return array;
      }
      var nativeKeys = overArg(Object.keys, Object);
      var nativeKeys$1 = nativeKeys;
      var objectProto$3 = Object.prototype;
      var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys$1(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty$3.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      function keys$1(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      function baseForOwn(object, iteratee) {
        return object && baseFor$1(object, iteratee, keys$1);
      }
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index2-- : ++index2 < length) {
            if (iteratee(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      var baseEach = createBaseEach(baseForOwn);
      var baseEach$1 = baseEach;
      function castFunction(value) {
        return typeof value == "function" ? value : identity;
      }
      function forEach(collection, iteratee) {
        var func = isArray$2(collection) ? arrayEach : baseEach$1;
        return func(collection, castFunction(iteratee));
      }
      var tinycolor$1 = { exports: {} };
      (function(module2) {
        (function(Math2) {
          var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound = Math2.round, mathMin = Math2.min, mathMax = Math2.max, mathRandom = Math2.random;
          function tinycolor2(color, opts) {
            color = color ? color : "";
            opts = opts || {};
            if (color instanceof tinycolor2) {
              return color;
            }
            if (!(this instanceof tinycolor2)) {
              return new tinycolor2(color, opts);
            }
            var rgb = inputToRGB(color);
            this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
            this._gradientType = opts.gradientType;
            if (this._r < 1) {
              this._r = mathRound(this._r);
            }
            if (this._g < 1) {
              this._g = mathRound(this._g);
            }
            if (this._b < 1) {
              this._b = mathRound(this._b);
            }
            this._ok = rgb.ok;
            this._tc_id = tinyCounter++;
          }
          tinycolor2.prototype = {
            isDark: function() {
              return this.getBrightness() < 128;
            },
            isLight: function() {
              return !this.isDark();
            },
            isValid: function() {
              return this._ok;
            },
            getOriginalInput: function() {
              return this._originalInput;
            },
            getFormat: function() {
              return this._format;
            },
            getAlpha: function() {
              return this._a;
            },
            getBrightness: function() {
              var rgb = this.toRgb();
              return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
            },
            getLuminance: function() {
              var rgb = this.toRgb();
              var RsRGB, GsRGB, BsRGB, R2, G2, B2;
              RsRGB = rgb.r / 255;
              GsRGB = rgb.g / 255;
              BsRGB = rgb.b / 255;
              if (RsRGB <= 0.03928) {
                R2 = RsRGB / 12.92;
              } else {
                R2 = Math2.pow((RsRGB + 0.055) / 1.055, 2.4);
              }
              if (GsRGB <= 0.03928) {
                G2 = GsRGB / 12.92;
              } else {
                G2 = Math2.pow((GsRGB + 0.055) / 1.055, 2.4);
              }
              if (BsRGB <= 0.03928) {
                B2 = BsRGB / 12.92;
              } else {
                B2 = Math2.pow((BsRGB + 0.055) / 1.055, 2.4);
              }
              return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
            },
            setAlpha: function(value) {
              this._a = boundAlpha(value);
              this._roundA = mathRound(100 * this._a) / 100;
              return this;
            },
            toHsv: function() {
              var hsv = rgbToHsv(this._r, this._g, this._b);
              return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
            },
            toHsvString: function() {
              var hsv = rgbToHsv(this._r, this._g, this._b);
              var h2 = mathRound(hsv.h * 360), s2 = mathRound(hsv.s * 100), v2 = mathRound(hsv.v * 100);
              return this._a == 1 ? "hsv(" + h2 + ", " + s2 + "%, " + v2 + "%)" : "hsva(" + h2 + ", " + s2 + "%, " + v2 + "%, " + this._roundA + ")";
            },
            toHsl: function() {
              var hsl = rgbToHsl(this._r, this._g, this._b);
              return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
            },
            toHslString: function() {
              var hsl = rgbToHsl(this._r, this._g, this._b);
              var h2 = mathRound(hsl.h * 360), s2 = mathRound(hsl.s * 100), l2 = mathRound(hsl.l * 100);
              return this._a == 1 ? "hsl(" + h2 + ", " + s2 + "%, " + l2 + "%)" : "hsla(" + h2 + ", " + s2 + "%, " + l2 + "%, " + this._roundA + ")";
            },
            toHex: function(allow3Char) {
              return rgbToHex(this._r, this._g, this._b, allow3Char);
            },
            toHexString: function(allow3Char) {
              return "#" + this.toHex(allow3Char);
            },
            toHex8: function(allow4Char) {
              return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
            },
            toHex8String: function(allow4Char) {
              return "#" + this.toHex8(allow4Char);
            },
            toRgb: function() {
              return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
            },
            toRgbString: function() {
              return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
            },
            toPercentageRgb: function() {
              return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
            },
            toPercentageRgbString: function() {
              return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
            },
            toName: function() {
              if (this._a === 0) {
                return "transparent";
              }
              if (this._a < 1) {
                return false;
              }
              return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
            },
            toFilter: function(secondColor) {
              var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
              var secondHex8String = hex8String;
              var gradientType = this._gradientType ? "GradientType = 1, " : "";
              if (secondColor) {
                var s2 = tinycolor2(secondColor);
                secondHex8String = "#" + rgbaToArgbHex(s2._r, s2._g, s2._b, s2._a);
              }
              return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
            },
            toString: function(format2) {
              var formatSet = !!format2;
              format2 = format2 || this._format;
              var formattedString = false;
              var hasAlpha = this._a < 1 && this._a >= 0;
              var needsAlphaFormat = !formatSet && hasAlpha && (format2 === "hex" || format2 === "hex6" || format2 === "hex3" || format2 === "hex4" || format2 === "hex8" || format2 === "name");
              if (needsAlphaFormat) {
                if (format2 === "name" && this._a === 0) {
                  return this.toName();
                }
                return this.toRgbString();
              }
              if (format2 === "rgb") {
                formattedString = this.toRgbString();
              }
              if (format2 === "prgb") {
                formattedString = this.toPercentageRgbString();
              }
              if (format2 === "hex" || format2 === "hex6") {
                formattedString = this.toHexString();
              }
              if (format2 === "hex3") {
                formattedString = this.toHexString(true);
              }
              if (format2 === "hex4") {
                formattedString = this.toHex8String(true);
              }
              if (format2 === "hex8") {
                formattedString = this.toHex8String();
              }
              if (format2 === "name") {
                formattedString = this.toName();
              }
              if (format2 === "hsl") {
                formattedString = this.toHslString();
              }
              if (format2 === "hsv") {
                formattedString = this.toHsvString();
              }
              return formattedString || this.toHexString();
            },
            clone: function() {
              return tinycolor2(this.toString());
            },
            _applyModification: function(fn2, args) {
              var color = fn2.apply(null, [this].concat([].slice.call(args)));
              this._r = color._r;
              this._g = color._g;
              this._b = color._b;
              this.setAlpha(color._a);
              return this;
            },
            lighten: function() {
              return this._applyModification(lighten, arguments);
            },
            brighten: function() {
              return this._applyModification(brighten, arguments);
            },
            darken: function() {
              return this._applyModification(darken, arguments);
            },
            desaturate: function() {
              return this._applyModification(desaturate, arguments);
            },
            saturate: function() {
              return this._applyModification(saturate, arguments);
            },
            greyscale: function() {
              return this._applyModification(greyscale, arguments);
            },
            spin: function() {
              return this._applyModification(spin, arguments);
            },
            _applyCombination: function(fn2, args) {
              return fn2.apply(null, [this].concat([].slice.call(args)));
            },
            analogous: function() {
              return this._applyCombination(analogous, arguments);
            },
            complement: function() {
              return this._applyCombination(complement, arguments);
            },
            monochromatic: function() {
              return this._applyCombination(monochromatic, arguments);
            },
            splitcomplement: function() {
              return this._applyCombination(splitcomplement, arguments);
            },
            triad: function() {
              return this._applyCombination(triad, arguments);
            },
            tetrad: function() {
              return this._applyCombination(tetrad, arguments);
            }
          };
          tinycolor2.fromRatio = function(color, opts) {
            if (typeof color == "object") {
              var newColor = {};
              for (var i2 in color) {
                if (color.hasOwnProperty(i2)) {
                  if (i2 === "a") {
                    newColor[i2] = color[i2];
                  } else {
                    newColor[i2] = convertToPercentage(color[i2]);
                  }
                }
              }
              color = newColor;
            }
            return tinycolor2(color, opts);
          };
          function inputToRGB(color) {
            var rgb = { r: 0, g: 0, b: 0 };
            var a2 = 1;
            var s2 = null;
            var v2 = null;
            var l2 = null;
            var ok2 = false;
            var format2 = false;
            if (typeof color == "string") {
              color = stringInputToObject(color);
            }
            if (typeof color == "object") {
              if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
                rgb = rgbToRgb(color.r, color.g, color.b);
                ok2 = true;
                format2 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
              } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
                s2 = convertToPercentage(color.s);
                v2 = convertToPercentage(color.v);
                rgb = hsvToRgb(color.h, s2, v2);
                ok2 = true;
                format2 = "hsv";
              } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
                s2 = convertToPercentage(color.s);
                l2 = convertToPercentage(color.l);
                rgb = hslToRgb(color.h, s2, l2);
                ok2 = true;
                format2 = "hsl";
              }
              if (color.hasOwnProperty("a")) {
                a2 = color.a;
              }
            }
            a2 = boundAlpha(a2);
            return {
              ok: ok2,
              format: color.format || format2,
              r: mathMin(255, mathMax(rgb.r, 0)),
              g: mathMin(255, mathMax(rgb.g, 0)),
              b: mathMin(255, mathMax(rgb.b, 0)),
              a: a2
            };
          }
          function rgbToRgb(r2, g2, b2) {
            return {
              r: bound01(r2, 255) * 255,
              g: bound01(g2, 255) * 255,
              b: bound01(b2, 255) * 255
            };
          }
          function rgbToHsl(r2, g2, b2) {
            r2 = bound01(r2, 255);
            g2 = bound01(g2, 255);
            b2 = bound01(b2, 255);
            var max2 = mathMax(r2, g2, b2), min2 = mathMin(r2, g2, b2);
            var h2, s2, l2 = (max2 + min2) / 2;
            if (max2 == min2) {
              h2 = s2 = 0;
            } else {
              var d2 = max2 - min2;
              s2 = l2 > 0.5 ? d2 / (2 - max2 - min2) : d2 / (max2 + min2);
              switch (max2) {
                case r2:
                  h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
                  break;
                case g2:
                  h2 = (b2 - r2) / d2 + 2;
                  break;
                case b2:
                  h2 = (r2 - g2) / d2 + 4;
                  break;
              }
              h2 /= 6;
            }
            return { h: h2, s: s2, l: l2 };
          }
          function hslToRgb(h2, s2, l2) {
            var r2, g2, b2;
            h2 = bound01(h2, 360);
            s2 = bound01(s2, 100);
            l2 = bound01(l2, 100);
            function hue2rgb(p3, q3, t2) {
              if (t2 < 0)
                t2 += 1;
              if (t2 > 1)
                t2 -= 1;
              if (t2 < 1 / 6)
                return p3 + (q3 - p3) * 6 * t2;
              if (t2 < 1 / 2)
                return q3;
              if (t2 < 2 / 3)
                return p3 + (q3 - p3) * (2 / 3 - t2) * 6;
              return p3;
            }
            if (s2 === 0) {
              r2 = g2 = b2 = l2;
            } else {
              var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
              var p2 = 2 * l2 - q2;
              r2 = hue2rgb(p2, q2, h2 + 1 / 3);
              g2 = hue2rgb(p2, q2, h2);
              b2 = hue2rgb(p2, q2, h2 - 1 / 3);
            }
            return { r: r2 * 255, g: g2 * 255, b: b2 * 255 };
          }
          function rgbToHsv(r2, g2, b2) {
            r2 = bound01(r2, 255);
            g2 = bound01(g2, 255);
            b2 = bound01(b2, 255);
            var max2 = mathMax(r2, g2, b2), min2 = mathMin(r2, g2, b2);
            var h2, s2, v2 = max2;
            var d2 = max2 - min2;
            s2 = max2 === 0 ? 0 : d2 / max2;
            if (max2 == min2) {
              h2 = 0;
            } else {
              switch (max2) {
                case r2:
                  h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
                  break;
                case g2:
                  h2 = (b2 - r2) / d2 + 2;
                  break;
                case b2:
                  h2 = (r2 - g2) / d2 + 4;
                  break;
              }
              h2 /= 6;
            }
            return { h: h2, s: s2, v: v2 };
          }
          function hsvToRgb(h2, s2, v2) {
            h2 = bound01(h2, 360) * 6;
            s2 = bound01(s2, 100);
            v2 = bound01(v2, 100);
            var i2 = Math2.floor(h2), f2 = h2 - i2, p2 = v2 * (1 - s2), q2 = v2 * (1 - f2 * s2), t2 = v2 * (1 - (1 - f2) * s2), mod2 = i2 % 6, r2 = [v2, q2, p2, p2, t2, v2][mod2], g2 = [t2, v2, v2, q2, p2, p2][mod2], b2 = [p2, p2, t2, v2, v2, q2][mod2];
            return { r: r2 * 255, g: g2 * 255, b: b2 * 255 };
          }
          function rgbToHex(r2, g2, b2, allow3Char) {
            var hex = [
              pad2(mathRound(r2).toString(16)),
              pad2(mathRound(g2).toString(16)),
              pad2(mathRound(b2).toString(16))
            ];
            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
              return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
            }
            return hex.join("");
          }
          function rgbaToHex(r2, g2, b2, a2, allow4Char) {
            var hex = [
              pad2(mathRound(r2).toString(16)),
              pad2(mathRound(g2).toString(16)),
              pad2(mathRound(b2).toString(16)),
              pad2(convertDecimalToHex(a2))
            ];
            if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
              return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
            }
            return hex.join("");
          }
          function rgbaToArgbHex(r2, g2, b2, a2) {
            var hex = [
              pad2(convertDecimalToHex(a2)),
              pad2(mathRound(r2).toString(16)),
              pad2(mathRound(g2).toString(16)),
              pad2(mathRound(b2).toString(16))
            ];
            return hex.join("");
          }
          tinycolor2.equals = function(color1, color2) {
            if (!color1 || !color2) {
              return false;
            }
            return tinycolor2(color1).toRgbString() == tinycolor2(color2).toRgbString();
          };
          tinycolor2.random = function() {
            return tinycolor2.fromRatio({
              r: mathRandom(),
              g: mathRandom(),
              b: mathRandom()
            });
          };
          function desaturate(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor2(color).toHsl();
            hsl.s -= amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor2(hsl);
          }
          function saturate(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor2(color).toHsl();
            hsl.s += amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor2(hsl);
          }
          function greyscale(color) {
            return tinycolor2(color).desaturate(100);
          }
          function lighten(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor2(color).toHsl();
            hsl.l += amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor2(hsl);
          }
          function brighten(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var rgb = tinycolor2(color).toRgb();
            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
            return tinycolor2(rgb);
          }
          function darken(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor2(color).toHsl();
            hsl.l -= amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor2(hsl);
          }
          function spin(color, amount) {
            var hsl = tinycolor2(color).toHsl();
            var hue = (hsl.h + amount) % 360;
            hsl.h = hue < 0 ? 360 + hue : hue;
            return tinycolor2(hsl);
          }
          function complement(color) {
            var hsl = tinycolor2(color).toHsl();
            hsl.h = (hsl.h + 180) % 360;
            return tinycolor2(hsl);
          }
          function triad(color) {
            var hsl = tinycolor2(color).toHsl();
            var h2 = hsl.h;
            return [
              tinycolor2(color),
              tinycolor2({ h: (h2 + 120) % 360, s: hsl.s, l: hsl.l }),
              tinycolor2({ h: (h2 + 240) % 360, s: hsl.s, l: hsl.l })
            ];
          }
          function tetrad(color) {
            var hsl = tinycolor2(color).toHsl();
            var h2 = hsl.h;
            return [
              tinycolor2(color),
              tinycolor2({ h: (h2 + 90) % 360, s: hsl.s, l: hsl.l }),
              tinycolor2({ h: (h2 + 180) % 360, s: hsl.s, l: hsl.l }),
              tinycolor2({ h: (h2 + 270) % 360, s: hsl.s, l: hsl.l })
            ];
          }
          function splitcomplement(color) {
            var hsl = tinycolor2(color).toHsl();
            var h2 = hsl.h;
            return [
              tinycolor2(color),
              tinycolor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
              tinycolor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
            ];
          }
          function analogous(color, results, slices) {
            results = results || 6;
            slices = slices || 30;
            var hsl = tinycolor2(color).toHsl();
            var part = 360 / slices;
            var ret = [tinycolor2(color)];
            for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
              hsl.h = (hsl.h + part) % 360;
              ret.push(tinycolor2(hsl));
            }
            return ret;
          }
          function monochromatic(color, results) {
            results = results || 6;
            var hsv = tinycolor2(color).toHsv();
            var h2 = hsv.h, s2 = hsv.s, v2 = hsv.v;
            var ret = [];
            var modification = 1 / results;
            while (results--) {
              ret.push(tinycolor2({ h: h2, s: s2, v: v2 }));
              v2 = (v2 + modification) % 1;
            }
            return ret;
          }
          tinycolor2.mix = function(color1, color2, amount) {
            amount = amount === 0 ? 0 : amount || 50;
            var rgb1 = tinycolor2(color1).toRgb();
            var rgb2 = tinycolor2(color2).toRgb();
            var p2 = amount / 100;
            var rgba = {
              r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
              g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
              b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
              a: (rgb2.a - rgb1.a) * p2 + rgb1.a
            };
            return tinycolor2(rgba);
          };
          tinycolor2.readability = function(color1, color2) {
            var c1 = tinycolor2(color1);
            var c2 = tinycolor2(color2);
            return (Math2.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math2.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
          };
          tinycolor2.isReadable = function(color1, color2, wcag2) {
            var readability = tinycolor2.readability(color1, color2);
            var wcag2Parms, out;
            out = false;
            wcag2Parms = validateWCAG2Parms(wcag2);
            switch (wcag2Parms.level + wcag2Parms.size) {
              case "AAsmall":
              case "AAAlarge":
                out = readability >= 4.5;
                break;
              case "AAlarge":
                out = readability >= 3;
                break;
              case "AAAsmall":
                out = readability >= 7;
                break;
            }
            return out;
          };
          tinycolor2.mostReadable = function(baseColor, colorList, args) {
            var bestColor = null;
            var bestScore = 0;
            var readability;
            var includeFallbackColors, level, size;
            args = args || {};
            includeFallbackColors = args.includeFallbackColors;
            level = args.level;
            size = args.size;
            for (var i2 = 0; i2 < colorList.length; i2++) {
              readability = tinycolor2.readability(baseColor, colorList[i2]);
              if (readability > bestScore) {
                bestScore = readability;
                bestColor = tinycolor2(colorList[i2]);
              }
            }
            if (tinycolor2.isReadable(baseColor, bestColor, { "level": level, "size": size }) || !includeFallbackColors) {
              return bestColor;
            } else {
              args.includeFallbackColors = false;
              return tinycolor2.mostReadable(baseColor, ["#fff", "#000"], args);
            }
          };
          var names = tinycolor2.names = {
            aliceblue: "f0f8ff",
            antiquewhite: "faebd7",
            aqua: "0ff",
            aquamarine: "7fffd4",
            azure: "f0ffff",
            beige: "f5f5dc",
            bisque: "ffe4c4",
            black: "000",
            blanchedalmond: "ffebcd",
            blue: "00f",
            blueviolet: "8a2be2",
            brown: "a52a2a",
            burlywood: "deb887",
            burntsienna: "ea7e5d",
            cadetblue: "5f9ea0",
            chartreuse: "7fff00",
            chocolate: "d2691e",
            coral: "ff7f50",
            cornflowerblue: "6495ed",
            cornsilk: "fff8dc",
            crimson: "dc143c",
            cyan: "0ff",
            darkblue: "00008b",
            darkcyan: "008b8b",
            darkgoldenrod: "b8860b",
            darkgray: "a9a9a9",
            darkgreen: "006400",
            darkgrey: "a9a9a9",
            darkkhaki: "bdb76b",
            darkmagenta: "8b008b",
            darkolivegreen: "556b2f",
            darkorange: "ff8c00",
            darkorchid: "9932cc",
            darkred: "8b0000",
            darksalmon: "e9967a",
            darkseagreen: "8fbc8f",
            darkslateblue: "483d8b",
            darkslategray: "2f4f4f",
            darkslategrey: "2f4f4f",
            darkturquoise: "00ced1",
            darkviolet: "9400d3",
            deeppink: "ff1493",
            deepskyblue: "00bfff",
            dimgray: "696969",
            dimgrey: "696969",
            dodgerblue: "1e90ff",
            firebrick: "b22222",
            floralwhite: "fffaf0",
            forestgreen: "228b22",
            fuchsia: "f0f",
            gainsboro: "dcdcdc",
            ghostwhite: "f8f8ff",
            gold: "ffd700",
            goldenrod: "daa520",
            gray: "808080",
            green: "008000",
            greenyellow: "adff2f",
            grey: "808080",
            honeydew: "f0fff0",
            hotpink: "ff69b4",
            indianred: "cd5c5c",
            indigo: "4b0082",
            ivory: "fffff0",
            khaki: "f0e68c",
            lavender: "e6e6fa",
            lavenderblush: "fff0f5",
            lawngreen: "7cfc00",
            lemonchiffon: "fffacd",
            lightblue: "add8e6",
            lightcoral: "f08080",
            lightcyan: "e0ffff",
            lightgoldenrodyellow: "fafad2",
            lightgray: "d3d3d3",
            lightgreen: "90ee90",
            lightgrey: "d3d3d3",
            lightpink: "ffb6c1",
            lightsalmon: "ffa07a",
            lightseagreen: "20b2aa",
            lightskyblue: "87cefa",
            lightslategray: "789",
            lightslategrey: "789",
            lightsteelblue: "b0c4de",
            lightyellow: "ffffe0",
            lime: "0f0",
            limegreen: "32cd32",
            linen: "faf0e6",
            magenta: "f0f",
            maroon: "800000",
            mediumaquamarine: "66cdaa",
            mediumblue: "0000cd",
            mediumorchid: "ba55d3",
            mediumpurple: "9370db",
            mediumseagreen: "3cb371",
            mediumslateblue: "7b68ee",
            mediumspringgreen: "00fa9a",
            mediumturquoise: "48d1cc",
            mediumvioletred: "c71585",
            midnightblue: "191970",
            mintcream: "f5fffa",
            mistyrose: "ffe4e1",
            moccasin: "ffe4b5",
            navajowhite: "ffdead",
            navy: "000080",
            oldlace: "fdf5e6",
            olive: "808000",
            olivedrab: "6b8e23",
            orange: "ffa500",
            orangered: "ff4500",
            orchid: "da70d6",
            palegoldenrod: "eee8aa",
            palegreen: "98fb98",
            paleturquoise: "afeeee",
            palevioletred: "db7093",
            papayawhip: "ffefd5",
            peachpuff: "ffdab9",
            peru: "cd853f",
            pink: "ffc0cb",
            plum: "dda0dd",
            powderblue: "b0e0e6",
            purple: "800080",
            rebeccapurple: "663399",
            red: "f00",
            rosybrown: "bc8f8f",
            royalblue: "4169e1",
            saddlebrown: "8b4513",
            salmon: "fa8072",
            sandybrown: "f4a460",
            seagreen: "2e8b57",
            seashell: "fff5ee",
            sienna: "a0522d",
            silver: "c0c0c0",
            skyblue: "87ceeb",
            slateblue: "6a5acd",
            slategray: "708090",
            slategrey: "708090",
            snow: "fffafa",
            springgreen: "00ff7f",
            steelblue: "4682b4",
            tan: "d2b48c",
            teal: "008080",
            thistle: "d8bfd8",
            tomato: "ff6347",
            turquoise: "40e0d0",
            violet: "ee82ee",
            wheat: "f5deb3",
            white: "fff",
            whitesmoke: "f5f5f5",
            yellow: "ff0",
            yellowgreen: "9acd32"
          };
          var hexNames = tinycolor2.hexNames = flip(names);
          function flip(o2) {
            var flipped = {};
            for (var i2 in o2) {
              if (o2.hasOwnProperty(i2)) {
                flipped[o2[i2]] = i2;
              }
            }
            return flipped;
          }
          function boundAlpha(a2) {
            a2 = parseFloat(a2);
            if (isNaN(a2) || a2 < 0 || a2 > 1) {
              a2 = 1;
            }
            return a2;
          }
          function bound01(n2, max2) {
            if (isOnePointZero(n2)) {
              n2 = "100%";
            }
            var processPercent = isPercentage(n2);
            n2 = mathMin(max2, mathMax(0, parseFloat(n2)));
            if (processPercent) {
              n2 = parseInt(n2 * max2, 10) / 100;
            }
            if (Math2.abs(n2 - max2) < 1e-6) {
              return 1;
            }
            return n2 % max2 / parseFloat(max2);
          }
          function clamp01(val) {
            return mathMin(1, mathMax(0, val));
          }
          function parseIntFromHex(val) {
            return parseInt(val, 16);
          }
          function isOnePointZero(n2) {
            return typeof n2 == "string" && n2.indexOf(".") != -1 && parseFloat(n2) === 1;
          }
          function isPercentage(n2) {
            return typeof n2 === "string" && n2.indexOf("%") != -1;
          }
          function pad2(c2) {
            return c2.length == 1 ? "0" + c2 : "" + c2;
          }
          function convertToPercentage(n2) {
            if (n2 <= 1) {
              n2 = n2 * 100 + "%";
            }
            return n2;
          }
          function convertDecimalToHex(d2) {
            return Math2.round(parseFloat(d2) * 255).toString(16);
          }
          function convertHexToDecimal(h2) {
            return parseIntFromHex(h2) / 255;
          }
          var matchers = function() {
            var CSS_INTEGER = "[-\\+]?\\d+%?";
            var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
            var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
            var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
            var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
            return {
              CSS_UNIT: new RegExp(CSS_UNIT),
              rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
              rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
              hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
              hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
              hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
              hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
              hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
              hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
              hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
              hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
            };
          }();
          function isValidCSSUnit(color) {
            return !!matchers.CSS_UNIT.exec(color);
          }
          function stringInputToObject(color) {
            color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
            var named = false;
            if (names[color]) {
              color = names[color];
              named = true;
            } else if (color == "transparent") {
              return { r: 0, g: 0, b: 0, a: 0, format: "name" };
            }
            var match5;
            if (match5 = matchers.rgb.exec(color)) {
              return { r: match5[1], g: match5[2], b: match5[3] };
            }
            if (match5 = matchers.rgba.exec(color)) {
              return { r: match5[1], g: match5[2], b: match5[3], a: match5[4] };
            }
            if (match5 = matchers.hsl.exec(color)) {
              return { h: match5[1], s: match5[2], l: match5[3] };
            }
            if (match5 = matchers.hsla.exec(color)) {
              return { h: match5[1], s: match5[2], l: match5[3], a: match5[4] };
            }
            if (match5 = matchers.hsv.exec(color)) {
              return { h: match5[1], s: match5[2], v: match5[3] };
            }
            if (match5 = matchers.hsva.exec(color)) {
              return { h: match5[1], s: match5[2], v: match5[3], a: match5[4] };
            }
            if (match5 = matchers.hex8.exec(color)) {
              return {
                r: parseIntFromHex(match5[1]),
                g: parseIntFromHex(match5[2]),
                b: parseIntFromHex(match5[3]),
                a: convertHexToDecimal(match5[4]),
                format: named ? "name" : "hex8"
              };
            }
            if (match5 = matchers.hex6.exec(color)) {
              return {
                r: parseIntFromHex(match5[1]),
                g: parseIntFromHex(match5[2]),
                b: parseIntFromHex(match5[3]),
                format: named ? "name" : "hex"
              };
            }
            if (match5 = matchers.hex4.exec(color)) {
              return {
                r: parseIntFromHex(match5[1] + "" + match5[1]),
                g: parseIntFromHex(match5[2] + "" + match5[2]),
                b: parseIntFromHex(match5[3] + "" + match5[3]),
                a: convertHexToDecimal(match5[4] + "" + match5[4]),
                format: named ? "name" : "hex8"
              };
            }
            if (match5 = matchers.hex3.exec(color)) {
              return {
                r: parseIntFromHex(match5[1] + "" + match5[1]),
                g: parseIntFromHex(match5[2] + "" + match5[2]),
                b: parseIntFromHex(match5[3] + "" + match5[3]),
                format: named ? "name" : "hex"
              };
            }
            return false;
          }
          function validateWCAG2Parms(parms) {
            var level, size;
            parms = parms || { "level": "AA", "size": "small" };
            level = (parms.level || "AA").toUpperCase();
            size = (parms.size || "small").toLowerCase();
            if (level !== "AA" && level !== "AAA") {
              level = "AA";
            }
            if (size !== "small" && size !== "large") {
              size = "small";
            }
            return { "level": level, "size": size };
          }
          if (module2.exports) {
            module2.exports = tinycolor2;
          } else {
            window.tinycolor = tinycolor2;
          }
        })(Math);
      })(tinycolor$1);
      var tinycolor = tinycolor$1.exports;
      var simpleCheckForValidColor = function simpleCheckForValidColor2(data) {
        var keysToCheck = ["r", "g", "b", "a", "h", "s", "l", "v"];
        var checked = 0;
        var passed = 0;
        forEach(keysToCheck, function(letter) {
          if (data[letter]) {
            checked += 1;
            if (!isNaN(data[letter])) {
              passed += 1;
            }
            if (letter === "s" || letter === "l") {
              var percentPatt = /^\d+%$/;
              if (percentPatt.test(data[letter])) {
                passed += 1;
              }
            }
          }
        });
        return checked === passed ? data : false;
      };
      var toState = function toState2(data, oldHue) {
        var color = data.hex ? tinycolor(data.hex) : tinycolor(data);
        var hsl = color.toHsl();
        var hsv = color.toHsv();
        var rgb = color.toRgb();
        var hex = color.toHex();
        if (hsl.s === 0) {
          hsl.h = oldHue || 0;
          hsv.h = oldHue || 0;
        }
        var transparent = hex === "000000" && rgb.a === 0;
        return {
          hsl,
          hex: transparent ? "transparent" : "#" + hex,
          rgb,
          hsv,
          oldHue: data.h || oldHue || hsl.h,
          source: data.source
        };
      };
      var isValidHex = function isValidHex2(hex) {
        if (hex === "transparent") {
          return true;
        }
        var lh2 = String(hex).charAt(0) === "#" ? 1 : 0;
        return hex.length !== 4 + lh2 && hex.length < 7 + lh2 && tinycolor(hex).isValid();
      };
      var getContrastingColor = function getContrastingColor2(data) {
        if (!data) {
          return "#fff";
        }
        var col = toState(data);
        if (col.hex === "transparent") {
          return "rgba(0,0,0,0.4)";
        }
        var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1e3;
        return yiq >= 128 ? "#000" : "#fff";
      };
      var isvalidColorString = function isvalidColorString2(string2, type) {
        var stringWithoutDegree = string2.replace("\xB0", "");
        return tinycolor(type + " (" + stringWithoutDegree + ")")._ok;
      };
      var _extends$8 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass$3 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck$3(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$3(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$3(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var ColorWrap = function ColorWrap2(Picker) {
        var ColorPicker = function(_ref) {
          _inherits$3(ColorPicker2, _ref);
          function ColorPicker2(props) {
            _classCallCheck$3(this, ColorPicker2);
            var _this = _possibleConstructorReturn$3(this, (ColorPicker2.__proto__ || Object.getPrototypeOf(ColorPicker2)).call(this));
            _this.handleChange = function(data, event) {
              var isValidColor = simpleCheckForValidColor(data);
              if (isValidColor) {
                var colors = toState(data, data.h || _this.state.oldHue);
                _this.setState(colors);
                _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);
                _this.props.onChange && _this.props.onChange(colors, event);
              }
            };
            _this.handleSwatchHover = function(data, event) {
              var isValidColor = simpleCheckForValidColor(data);
              if (isValidColor) {
                var colors = toState(data, data.h || _this.state.oldHue);
                _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);
              }
            };
            _this.state = _extends$8({}, toState(props.color, 0));
            _this.debounce = debounce(function(fn2, data, event) {
              fn2(data, event);
            }, 100);
            return _this;
          }
          _createClass$3(ColorPicker2, [{
            key: "render",
            value: function render2() {
              var optionalEvents = {};
              if (this.props.onSwatchHover) {
                optionalEvents.onSwatchHover = this.handleSwatchHover;
              }
              return React__default.createElement(Picker, _extends$8({}, this.props, this.state, {
                onChange: this.handleChange
              }, optionalEvents));
            }
          }], [{
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(nextProps, state) {
              return _extends$8({}, toState(nextProps.color, state.oldHue));
            }
          }]);
          return ColorPicker2;
        }(react.exports.PureComponent || react.exports.Component);
        ColorPicker.propTypes = _extends$8({}, Picker.propTypes);
        ColorPicker.defaultProps = _extends$8({}, Picker.defaultProps, {
          color: {
            h: 250,
            s: 0.5,
            l: 0.2,
            a: 1
          }
        });
        return ColorPicker;
      };
      var _extends$7 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass$2 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck$2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$2(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$2(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var handleFocus = function handleFocus2(Component) {
        var Span2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "span";
        return function(_React$Component) {
          _inherits$2(Focus, _React$Component);
          function Focus() {
            var _ref;
            var _temp, _this, _ret;
            _classCallCheck$2(this, Focus);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _ret = (_temp = (_this = _possibleConstructorReturn$2(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = { focus: false }, _this.handleFocus = function() {
              return _this.setState({ focus: true });
            }, _this.handleBlur = function() {
              return _this.setState({ focus: false });
            }, _temp), _possibleConstructorReturn$2(_this, _ret);
          }
          _createClass$2(Focus, [{
            key: "render",
            value: function render2() {
              return React__default.createElement(Span2, { onFocus: this.handleFocus, onBlur: this.handleBlur }, React__default.createElement(Component, _extends$7({}, this.props, this.state)));
            }
          }]);
          return Focus;
        }(React__default.Component);
      };
      var _extends$6 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var ENTER = 13;
      var Swatch = function Swatch2(_ref) {
        var color = _ref.color, style = _ref.style, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, onHover = _ref.onHover, _ref$title = _ref.title, title = _ref$title === void 0 ? color : _ref$title, children = _ref.children, focus = _ref.focus, _ref$focusStyle = _ref.focusStyle, focusStyle = _ref$focusStyle === void 0 ? {} : _ref$focusStyle;
        var transparent = color === "transparent";
        var styles2 = _default$3({
          default: {
            swatch: _extends$6({
              background: color,
              height: "100%",
              width: "100%",
              cursor: "pointer",
              position: "relative",
              outline: "none"
            }, style, focus ? focusStyle : {})
          }
        });
        var handleClick = function handleClick2(e2) {
          return onClick(color, e2);
        };
        var handleKeyDown = function handleKeyDown2(e2) {
          return e2.keyCode === ENTER && onClick(color, e2);
        };
        var handleHover2 = function handleHover3(e2) {
          return onHover(color, e2);
        };
        var optionalEvents = {};
        if (onHover) {
          optionalEvents.onMouseOver = handleHover2;
        }
        return React__default.createElement("div", _extends$6({
          style: styles2.swatch,
          onClick: handleClick,
          title,
          tabIndex: 0,
          onKeyDown: handleKeyDown
        }, optionalEvents), children, transparent && React__default.createElement(Checkboard, {
          borderRadius: styles2.swatch.borderRadius,
          boxShadow: "inset 0 0 0 1px rgba(0,0,0,0.1)"
        }));
      };
      var Swatch$1 = handleFocus(Swatch);
      var AlphaPointer = function AlphaPointer2(_ref) {
        var direction = _ref.direction;
        var styles2 = _default$3({
          "default": {
            picker: {
              width: "18px",
              height: "18px",
              borderRadius: "50%",
              transform: "translate(-9px, -1px)",
              backgroundColor: "rgb(248, 248, 248)",
              boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
            }
          },
          "vertical": {
            picker: {
              transform: "translate(-3px, -9px)"
            }
          }
        }, { vertical: direction === "vertical" });
        return React__default.createElement("div", { style: styles2.picker });
      };
      var _extends$5 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var AlphaPicker = function AlphaPicker2(_ref) {
        var rgb = _ref.rgb, hsl = _ref.hsl, width = _ref.width, height = _ref.height, onChange = _ref.onChange, direction = _ref.direction, style = _ref.style, renderers = _ref.renderers, pointer = _ref.pointer, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3({
          "default": {
            picker: {
              position: "relative",
              width,
              height
            },
            alpha: {
              radius: "2px",
              style
            }
          }
        });
        return React__default.createElement("div", { style: styles2.picker, className: "alpha-picker " + className }, React__default.createElement(Alpha, _extends$5({}, styles2.alpha, {
          rgb,
          hsl,
          pointer,
          renderers,
          onChange,
          direction
        })));
      };
      AlphaPicker.defaultProps = {
        width: "316px",
        height: "16px",
        direction: "horizontal",
        pointer: AlphaPointer
      };
      ColorWrap(AlphaPicker);
      function arrayMap(array, iteratee) {
        var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index2 < length) {
          result[index2] = iteratee(array[index2], index2, array);
        }
        return result;
      }
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      function SetCache(values2) {
        var index2 = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values2[index2]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function arraySome(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length;
        while (++index2 < length) {
          if (predicate(array[index2], index2, array)) {
            return true;
          }
        }
        return false;
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index2 < arrLength) {
          var arrValue = array[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      function mapToArray(map2) {
        var index2 = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      function setToArray(set2) {
        var index2 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
      var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag$1 = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag$1 = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]";
      var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : void 0;
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag$1:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag$1:
            var convert = mapToArray;
          case setTag$1:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG$2;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function arrayPush(array, values2) {
        var index2 = -1, length = values2.length, offset2 = array.length;
        while (++index2 < length) {
          array[offset2 + index2] = values2[index2];
        }
        return array;
      }
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray$2(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      function arrayFilter(array, predicate) {
        var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array[index2];
          if (predicate(value, index2, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function stubArray() {
        return [];
      }
      var objectProto$2 = Object.prototype;
      var propertyIsEnumerable = objectProto$2.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbols$1 = getSymbols;
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys$1, getSymbols$1);
      }
      var COMPARE_PARTIAL_FLAG$3 = 1;
      var objectProto$1 = Object.prototype;
      var hasOwnProperty$2 = objectProto$1.hasOwnProperty;
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty$2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      var DataView = getNative(root$1, "DataView");
      var DataView$1 = DataView;
      var Promise$1 = getNative(root$1, "Promise");
      var Promise$2 = Promise$1;
      var Set$1 = getNative(root$1, "Set");
      var Set$2 = Set$1;
      var WeakMap$1 = getNative(root$1, "WeakMap");
      var WeakMap$2 = WeakMap$1;
      var mapTag = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$2), promiseCtorString = toSource(Promise$2), setCtorString = toSource(Set$2), weakMapCtorString = toSource(WeakMap$2);
      var getTag = baseGetTag;
      if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag || Map$2 && getTag(new Map$2()) != mapTag || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$2 && getTag(new Set$2()) != setTag || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag) {
        getTag = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag$1 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      var getTag$1 = getTag;
      var COMPARE_PARTIAL_FLAG$2 = 1;
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty$1 = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray$2(object), othIsArr = isArray$2(other), objTag = objIsArr ? arrayTag : getTag$1(object), othTag = othIsArr ? arrayTag : getTag$1(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer$1(object)) {
          if (!isBuffer$1(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray$1(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
          var objIsWrapped = objIsObj && hasOwnProperty$1.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$1.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
      function baseIsMatch(object, source, matchData, customizer) {
        var index2 = matchData.length, length = index2, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index2 < length) {
          data = matchData[index2];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      function isStrictComparable(value) {
        return value === value && !isObject$2(value);
      }
      function getMatchData(object) {
        var result = keys$1(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
      function isKey(value, object) {
        if (isArray$2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      var FUNC_ERROR_TEXT = "Expected a function";
      function memoize(func, resolver2) {
        if (typeof func != "function" || resolver2 != null && typeof resolver2 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped(function(string2) {
        var result = [];
        if (string2.charCodeAt(0) === 46) {
          result.push("");
        }
        string2.replace(rePropName, function(match5, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match5);
        });
        return result;
      });
      var stringToPath$1 = stringToPath;
      var INFINITY$1 = 1 / 0;
      var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray$2(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
      }
      function toString$1(value) {
        return value == null ? "" : baseToString(value);
      }
      function castPath(value, object) {
        if (isArray$2(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath$1(toString$1(value));
      }
      var INFINITY = 1 / 0;
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function baseGet(object, path) {
        path = castPath(path, object);
        var index2 = 0, length = path.length;
        while (object != null && index2 < length) {
          object = object[toKey(path[index2++])];
        }
        return index2 && index2 == length ? object : void 0;
      }
      function get$3(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path);
        return result === void 0 ? defaultValue : result;
      }
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index2 = -1, length = path.length, result = false;
        while (++index2 < length) {
          var key = toKey(path[index2]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index2 != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray$2(object) || isArguments$1(object));
      }
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get$3(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray$2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      function baseMap(collection, iteratee) {
        var index2 = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach$1(collection, function(value, key, collection2) {
          result[++index2] = iteratee(value, key, collection2);
        });
        return result;
      }
      function map$1(collection, iteratee) {
        var func = isArray$2(collection) ? arrayMap : baseMap;
        return func(collection, baseIteratee(iteratee));
      }
      var BlockSwatches = function BlockSwatches2(_ref) {
        var colors = _ref.colors, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover;
        var styles2 = _default$3({
          "default": {
            swatches: {
              marginRight: "-10px"
            },
            swatch: {
              width: "22px",
              height: "22px",
              float: "left",
              marginRight: "10px",
              marginBottom: "10px",
              borderRadius: "4px"
            },
            clear: {
              clear: "both"
            }
          }
        });
        return React__default.createElement("div", { style: styles2.swatches }, map$1(colors, function(c2) {
          return React__default.createElement(Swatch$1, {
            key: c2,
            color: c2,
            style: styles2.swatch,
            onClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "0 0 4px " + c2
            }
          });
        }), React__default.createElement("div", { style: styles2.clear }));
      };
      var Block = function Block2(_ref) {
        var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, hex = _ref.hex, colors = _ref.colors, width = _ref.width, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var transparent = hex === "transparent";
        var handleChange = function handleChange2(hexCode, e2) {
          isValidHex(hexCode) && onChange({
            hex: hexCode,
            source: "hex"
          }, e2);
        };
        var styles2 = _default$3(merge$1({
          "default": {
            card: {
              width,
              background: "#fff",
              boxShadow: "0 1px rgba(0,0,0,.1)",
              borderRadius: "6px",
              position: "relative"
            },
            head: {
              height: "110px",
              background: hex,
              borderRadius: "6px 6px 0 0",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              position: "relative"
            },
            body: {
              padding: "10px"
            },
            label: {
              fontSize: "18px",
              color: getContrastingColor(hex),
              position: "relative"
            },
            triangle: {
              width: "0px",
              height: "0px",
              borderStyle: "solid",
              borderWidth: "0 10px 10px 10px",
              borderColor: "transparent transparent " + hex + " transparent",
              position: "absolute",
              top: "-10px",
              left: "50%",
              marginLeft: "-10px"
            },
            input: {
              width: "100%",
              fontSize: "12px",
              color: "#666",
              border: "0px",
              outline: "none",
              height: "22px",
              boxShadow: "inset 0 0 0 1px #ddd",
              borderRadius: "4px",
              padding: "0 7px",
              boxSizing: "border-box"
            }
          },
          "hide-triangle": {
            triangle: {
              display: "none"
            }
          }
        }, passedStyles), { "hide-triangle": triangle === "hide" });
        return React__default.createElement("div", { style: styles2.card, className: "block-picker " + className }, React__default.createElement("div", { style: styles2.triangle }), React__default.createElement("div", { style: styles2.head }, transparent && React__default.createElement(Checkboard, { borderRadius: "6px 6px 0 0" }), React__default.createElement("div", { style: styles2.label }, hex)), React__default.createElement("div", { style: styles2.body }, React__default.createElement(BlockSwatches, { colors, onClick: handleChange, onSwatchHover }), React__default.createElement(EditableInput, {
          style: { input: styles2.input },
          value: hex,
          onChange: handleChange
        })));
      };
      Block.propTypes = {
        width: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        colors: PropTypes$1.arrayOf(PropTypes$1.string),
        triangle: PropTypes$1.oneOf(["top", "hide"]),
        styles: PropTypes$1.object
      };
      Block.defaultProps = {
        width: 170,
        colors: ["#D9E3F0", "#F47373", "#697689", "#37D67A", "#2CCCE4", "#555555", "#dce775", "#ff8a65", "#ba68c8"],
        triangle: "top",
        styles: {}
      };
      ColorWrap(Block);
      var red = { "50": "#ffebee", "100": "#ffcdd2", "200": "#ef9a9a", "300": "#e57373", "400": "#ef5350", "500": "#f44336", "600": "#e53935", "700": "#d32f2f", "800": "#c62828", "900": "#b71c1c", "a100": "#ff8a80", "a200": "#ff5252", "a400": "#ff1744", "a700": "#d50000" };
      var pink = { "50": "#fce4ec", "100": "#f8bbd0", "200": "#f48fb1", "300": "#f06292", "400": "#ec407a", "500": "#e91e63", "600": "#d81b60", "700": "#c2185b", "800": "#ad1457", "900": "#880e4f", "a100": "#ff80ab", "a200": "#ff4081", "a400": "#f50057", "a700": "#c51162" };
      var purple = { "50": "#f3e5f5", "100": "#e1bee7", "200": "#ce93d8", "300": "#ba68c8", "400": "#ab47bc", "500": "#9c27b0", "600": "#8e24aa", "700": "#7b1fa2", "800": "#6a1b9a", "900": "#4a148c", "a100": "#ea80fc", "a200": "#e040fb", "a400": "#d500f9", "a700": "#aa00ff" };
      var deepPurple = { "50": "#ede7f6", "100": "#d1c4e9", "200": "#b39ddb", "300": "#9575cd", "400": "#7e57c2", "500": "#673ab7", "600": "#5e35b1", "700": "#512da8", "800": "#4527a0", "900": "#311b92", "a100": "#b388ff", "a200": "#7c4dff", "a400": "#651fff", "a700": "#6200ea" };
      var indigo = { "50": "#e8eaf6", "100": "#c5cae9", "200": "#9fa8da", "300": "#7986cb", "400": "#5c6bc0", "500": "#3f51b5", "600": "#3949ab", "700": "#303f9f", "800": "#283593", "900": "#1a237e", "a100": "#8c9eff", "a200": "#536dfe", "a400": "#3d5afe", "a700": "#304ffe" };
      var blue = { "50": "#e3f2fd", "100": "#bbdefb", "200": "#90caf9", "300": "#64b5f6", "400": "#42a5f5", "500": "#2196f3", "600": "#1e88e5", "700": "#1976d2", "800": "#1565c0", "900": "#0d47a1", "a100": "#82b1ff", "a200": "#448aff", "a400": "#2979ff", "a700": "#2962ff" };
      var lightBlue = { "50": "#e1f5fe", "100": "#b3e5fc", "200": "#81d4fa", "300": "#4fc3f7", "400": "#29b6f6", "500": "#03a9f4", "600": "#039be5", "700": "#0288d1", "800": "#0277bd", "900": "#01579b", "a100": "#80d8ff", "a200": "#40c4ff", "a400": "#00b0ff", "a700": "#0091ea" };
      var cyan = { "50": "#e0f7fa", "100": "#b2ebf2", "200": "#80deea", "300": "#4dd0e1", "400": "#26c6da", "500": "#00bcd4", "600": "#00acc1", "700": "#0097a7", "800": "#00838f", "900": "#006064", "a100": "#84ffff", "a200": "#18ffff", "a400": "#00e5ff", "a700": "#00b8d4" };
      var teal = { "50": "#e0f2f1", "100": "#b2dfdb", "200": "#80cbc4", "300": "#4db6ac", "400": "#26a69a", "500": "#009688", "600": "#00897b", "700": "#00796b", "800": "#00695c", "900": "#004d40", "a100": "#a7ffeb", "a200": "#64ffda", "a400": "#1de9b6", "a700": "#00bfa5" };
      var green = { "50": "#e8f5e9", "100": "#c8e6c9", "200": "#a5d6a7", "300": "#81c784", "400": "#66bb6a", "500": "#4caf50", "600": "#43a047", "700": "#388e3c", "800": "#2e7d32", "900": "#1b5e20", "a100": "#b9f6ca", "a200": "#69f0ae", "a400": "#00e676", "a700": "#00c853" };
      var lightGreen = { "50": "#f1f8e9", "100": "#dcedc8", "200": "#c5e1a5", "300": "#aed581", "400": "#9ccc65", "500": "#8bc34a", "600": "#7cb342", "700": "#689f38", "800": "#558b2f", "900": "#33691e", "a100": "#ccff90", "a200": "#b2ff59", "a400": "#76ff03", "a700": "#64dd17" };
      var lime = { "50": "#f9fbe7", "100": "#f0f4c3", "200": "#e6ee9c", "300": "#dce775", "400": "#d4e157", "500": "#cddc39", "600": "#c0ca33", "700": "#afb42b", "800": "#9e9d24", "900": "#827717", "a100": "#f4ff81", "a200": "#eeff41", "a400": "#c6ff00", "a700": "#aeea00" };
      var yellow = { "50": "#fffde7", "100": "#fff9c4", "200": "#fff59d", "300": "#fff176", "400": "#ffee58", "500": "#ffeb3b", "600": "#fdd835", "700": "#fbc02d", "800": "#f9a825", "900": "#f57f17", "a100": "#ffff8d", "a200": "#ffff00", "a400": "#ffea00", "a700": "#ffd600" };
      var amber = { "50": "#fff8e1", "100": "#ffecb3", "200": "#ffe082", "300": "#ffd54f", "400": "#ffca28", "500": "#ffc107", "600": "#ffb300", "700": "#ffa000", "800": "#ff8f00", "900": "#ff6f00", "a100": "#ffe57f", "a200": "#ffd740", "a400": "#ffc400", "a700": "#ffab00" };
      var orange = { "50": "#fff3e0", "100": "#ffe0b2", "200": "#ffcc80", "300": "#ffb74d", "400": "#ffa726", "500": "#ff9800", "600": "#fb8c00", "700": "#f57c00", "800": "#ef6c00", "900": "#e65100", "a100": "#ffd180", "a200": "#ffab40", "a400": "#ff9100", "a700": "#ff6d00" };
      var deepOrange = { "50": "#fbe9e7", "100": "#ffccbc", "200": "#ffab91", "300": "#ff8a65", "400": "#ff7043", "500": "#ff5722", "600": "#f4511e", "700": "#e64a19", "800": "#d84315", "900": "#bf360c", "a100": "#ff9e80", "a200": "#ff6e40", "a400": "#ff3d00", "a700": "#dd2c00" };
      var brown = { "50": "#efebe9", "100": "#d7ccc8", "200": "#bcaaa4", "300": "#a1887f", "400": "#8d6e63", "500": "#795548", "600": "#6d4c41", "700": "#5d4037", "800": "#4e342e", "900": "#3e2723" };
      var blueGrey = { "50": "#eceff1", "100": "#cfd8dc", "200": "#b0bec5", "300": "#90a4ae", "400": "#78909c", "500": "#607d8b", "600": "#546e7a", "700": "#455a64", "800": "#37474f", "900": "#263238" };
      var CircleSwatch = function CircleSwatch2(_ref) {
        var color = _ref.color, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover, hover2 = _ref.hover, active2 = _ref.active, circleSize = _ref.circleSize, circleSpacing = _ref.circleSpacing;
        var styles2 = _default$3({
          "default": {
            swatch: {
              width: circleSize,
              height: circleSize,
              marginRight: circleSpacing,
              marginBottom: circleSpacing,
              transform: "scale(1)",
              transition: "100ms transform ease"
            },
            Swatch: {
              borderRadius: "50%",
              background: "transparent",
              boxShadow: "inset 0 0 0 " + (circleSize / 2 + 1) + "px " + color,
              transition: "100ms box-shadow ease"
            }
          },
          "hover": {
            swatch: {
              transform: "scale(1.2)"
            }
          },
          "active": {
            Swatch: {
              boxShadow: "inset 0 0 0 3px " + color
            }
          }
        }, { hover: hover2, active: active2 });
        return React__default.createElement("div", { style: styles2.swatch }, React__default.createElement(Swatch$1, {
          style: styles2.Swatch,
          color,
          onClick,
          onHover: onSwatchHover,
          focusStyle: { boxShadow: styles2.Swatch.boxShadow + ", 0 0 5px " + color }
        }));
      };
      CircleSwatch.defaultProps = {
        circleSize: 28,
        circleSpacing: 14
      };
      var CircleSwatch$1 = handleHover(CircleSwatch);
      var Circle = function Circle2(_ref) {
        var width = _ref.width, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors = _ref.colors, hex = _ref.hex, circleSize = _ref.circleSize, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, circleSpacing = _ref.circleSpacing, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            card: {
              width,
              display: "flex",
              flexWrap: "wrap",
              marginRight: -circleSpacing,
              marginBottom: -circleSpacing
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(hexCode, e2) {
          return onChange({ hex: hexCode, source: "hex" }, e2);
        };
        return React__default.createElement("div", { style: styles2.card, className: "circle-picker " + className }, map$1(colors, function(c2) {
          return React__default.createElement(CircleSwatch$1, {
            key: c2,
            color: c2,
            onClick: handleChange,
            onSwatchHover,
            active: hex === c2.toLowerCase(),
            circleSize,
            circleSpacing
          });
        }));
      };
      Circle.propTypes = {
        width: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        circleSize: PropTypes$1.number,
        circleSpacing: PropTypes$1.number,
        styles: PropTypes$1.object
      };
      Circle.defaultProps = {
        width: 252,
        circleSize: 28,
        circleSpacing: 14,
        colors: [red["500"], pink["500"], purple["500"], deepPurple["500"], indigo["500"], blue["500"], lightBlue["500"], cyan["500"], teal["500"], green["500"], lightGreen["500"], lime["500"], yellow["500"], amber["500"], orange["500"], deepOrange["500"], brown["500"], blueGrey["500"]],
        styles: {}
      };
      ColorWrap(Circle);
      function isUndefined$1(value) {
        return value === void 0;
      }
      var UnfoldMoreHorizontalIcon = {};
      Object.defineProperty(UnfoldMoreHorizontalIcon, "__esModule", {
        value: true
      });
      var _extends$4 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react$1 = react.exports;
      var _react2$1 = _interopRequireDefault$1(_react$1);
      function _interopRequireDefault$1(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutProperties$2(obj, keys2) {
        var target = {};
        for (var i2 in obj) {
          if (keys2.indexOf(i2) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i2))
            continue;
          target[i2] = obj[i2];
        }
        return target;
      }
      var DEFAULT_SIZE$1 = 24;
      var _default$2 = UnfoldMoreHorizontalIcon.default = function(_ref) {
        var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$width = _ref.width, width = _ref$width === void 0 ? DEFAULT_SIZE$1 : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? DEFAULT_SIZE$1 : _ref$height, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutProperties$2(_ref, ["fill", "width", "height", "style"]);
        return _react2$1.default.createElement("svg", _extends$4({
          viewBox: "0 0 " + DEFAULT_SIZE$1 + " " + DEFAULT_SIZE$1,
          style: _extends$4({ fill, width, height }, style)
        }, props), _react2$1.default.createElement("path", { d: "M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z" }));
      };
      var _createClass$1 = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn$1(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits$1(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var ChromeFields = function(_React$Component) {
        _inherits$1(ChromeFields2, _React$Component);
        function ChromeFields2(props) {
          _classCallCheck$1(this, ChromeFields2);
          var _this = _possibleConstructorReturn$1(this, (ChromeFields2.__proto__ || Object.getPrototypeOf(ChromeFields2)).call(this));
          _this.toggleViews = function() {
            if (_this.state.view === "hex") {
              _this.setState({ view: "rgb" });
            } else if (_this.state.view === "rgb") {
              _this.setState({ view: "hsl" });
            } else if (_this.state.view === "hsl") {
              if (_this.props.hsl.a === 1) {
                _this.setState({ view: "hex" });
              } else {
                _this.setState({ view: "rgb" });
              }
            }
          };
          _this.handleChange = function(data, e2) {
            if (data.hex) {
              isValidHex(data.hex) && _this.props.onChange({
                hex: data.hex,
                source: "hex"
              }, e2);
            } else if (data.r || data.g || data.b) {
              _this.props.onChange({
                r: data.r || _this.props.rgb.r,
                g: data.g || _this.props.rgb.g,
                b: data.b || _this.props.rgb.b,
                source: "rgb"
              }, e2);
            } else if (data.a) {
              if (data.a < 0) {
                data.a = 0;
              } else if (data.a > 1) {
                data.a = 1;
              }
              _this.props.onChange({
                h: _this.props.hsl.h,
                s: _this.props.hsl.s,
                l: _this.props.hsl.l,
                a: Math.round(data.a * 100) / 100,
                source: "rgb"
              }, e2);
            } else if (data.h || data.s || data.l) {
              if (typeof data.s === "string" && data.s.includes("%")) {
                data.s = data.s.replace("%", "");
              }
              if (typeof data.l === "string" && data.l.includes("%")) {
                data.l = data.l.replace("%", "");
              }
              if (data.s == 1) {
                data.s = 0.01;
              } else if (data.l == 1) {
                data.l = 0.01;
              }
              _this.props.onChange({
                h: data.h || _this.props.hsl.h,
                s: Number(!isUndefined$1(data.s) ? data.s : _this.props.hsl.s),
                l: Number(!isUndefined$1(data.l) ? data.l : _this.props.hsl.l),
                source: "hsl"
              }, e2);
            }
          };
          _this.showHighlight = function(e2) {
            e2.currentTarget.style.background = "#eee";
          };
          _this.hideHighlight = function(e2) {
            e2.currentTarget.style.background = "transparent";
          };
          if (props.hsl.a !== 1 && props.view === "hex") {
            _this.state = {
              view: "rgb"
            };
          } else {
            _this.state = {
              view: props.view
            };
          }
          return _this;
        }
        _createClass$1(ChromeFields2, [{
          key: "render",
          value: function render2() {
            var _this2 = this;
            var styles2 = _default$3({
              "default": {
                wrap: {
                  paddingTop: "16px",
                  display: "flex"
                },
                fields: {
                  flex: "1",
                  display: "flex",
                  marginLeft: "-6px"
                },
                field: {
                  paddingLeft: "6px",
                  width: "100%"
                },
                alpha: {
                  paddingLeft: "6px",
                  width: "100%"
                },
                toggle: {
                  width: "32px",
                  textAlign: "right",
                  position: "relative"
                },
                icon: {
                  marginRight: "-4px",
                  marginTop: "12px",
                  cursor: "pointer",
                  position: "relative"
                },
                iconHighlight: {
                  position: "absolute",
                  width: "24px",
                  height: "28px",
                  background: "#eee",
                  borderRadius: "4px",
                  top: "10px",
                  left: "12px",
                  display: "none"
                },
                input: {
                  fontSize: "11px",
                  color: "#333",
                  width: "100%",
                  borderRadius: "2px",
                  border: "none",
                  boxShadow: "inset 0 0 0 1px #dadada",
                  height: "21px",
                  textAlign: "center"
                },
                label: {
                  textTransform: "uppercase",
                  fontSize: "11px",
                  lineHeight: "11px",
                  color: "#969696",
                  textAlign: "center",
                  display: "block",
                  marginTop: "12px"
                },
                svg: {
                  fill: "#333",
                  width: "24px",
                  height: "24px",
                  border: "1px transparent solid",
                  borderRadius: "5px"
                }
              },
              "disableAlpha": {
                alpha: {
                  display: "none"
                }
              }
            }, this.props, this.state);
            var fields = void 0;
            if (this.state.view === "hex") {
              fields = React__default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.field }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "hex",
                value: this.props.hex,
                onChange: this.handleChange
              })));
            } else if (this.state.view === "rgb") {
              fields = React__default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.field }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "r",
                value: this.props.rgb.r,
                onChange: this.handleChange
              })), React__default.createElement("div", { style: styles2.field }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "g",
                value: this.props.rgb.g,
                onChange: this.handleChange
              })), React__default.createElement("div", { style: styles2.field }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "b",
                value: this.props.rgb.b,
                onChange: this.handleChange
              })), React__default.createElement("div", { style: styles2.alpha }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "a",
                value: this.props.rgb.a,
                arrowOffset: 0.01,
                onChange: this.handleChange
              })));
            } else if (this.state.view === "hsl") {
              fields = React__default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.field }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "h",
                value: Math.round(this.props.hsl.h),
                onChange: this.handleChange
              })), React__default.createElement("div", { style: styles2.field }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "s",
                value: Math.round(this.props.hsl.s * 100) + "%",
                onChange: this.handleChange
              })), React__default.createElement("div", { style: styles2.field }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "l",
                value: Math.round(this.props.hsl.l * 100) + "%",
                onChange: this.handleChange
              })), React__default.createElement("div", { style: styles2.alpha }, React__default.createElement(EditableInput, {
                style: { input: styles2.input, label: styles2.label },
                label: "a",
                value: this.props.hsl.a,
                arrowOffset: 0.01,
                onChange: this.handleChange
              })));
            }
            return React__default.createElement("div", { style: styles2.wrap, className: "flexbox-fix" }, fields, React__default.createElement("div", { style: styles2.toggle }, React__default.createElement("div", { style: styles2.icon, onClick: this.toggleViews, ref: function ref(icon) {
              return _this2.icon = icon;
            } }, React__default.createElement(_default$2, {
              style: styles2.svg,
              onMouseOver: this.showHighlight,
              onMouseEnter: this.showHighlight,
              onMouseOut: this.hideHighlight
            }))));
          }
        }], [{
          key: "getDerivedStateFromProps",
          value: function getDerivedStateFromProps(nextProps, state) {
            if (nextProps.hsl.a !== 1 && state.view === "hex") {
              return { view: "rgb" };
            }
            return null;
          }
        }]);
        return ChromeFields2;
      }(React__default.Component);
      ChromeFields.defaultProps = {
        view: "hex"
      };
      var ChromePointer = function ChromePointer2() {
        var styles2 = _default$3({
          "default": {
            picker: {
              width: "12px",
              height: "12px",
              borderRadius: "6px",
              transform: "translate(-6px, -1px)",
              backgroundColor: "rgb(248, 248, 248)",
              boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
            }
          }
        });
        return React__default.createElement("div", { style: styles2.picker });
      };
      var ChromePointerCircle = function ChromePointerCircle2() {
        var styles2 = _default$3({
          "default": {
            picker: {
              width: "12px",
              height: "12px",
              borderRadius: "6px",
              boxShadow: "inset 0 0 0 1px #fff",
              transform: "translate(-6px, -6px)"
            }
          }
        });
        return React__default.createElement("div", { style: styles2.picker });
      };
      var Chrome = function Chrome2(_ref) {
        var width = _ref.width, onChange = _ref.onChange, disableAlpha = _ref.disableAlpha, rgb = _ref.rgb, hsl = _ref.hsl, hsv = _ref.hsv, hex = _ref.hex, renderers = _ref.renderers, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, defaultView = _ref.defaultView;
        var styles2 = _default$3(merge$1({
          "default": {
            picker: {
              width,
              background: "#fff",
              borderRadius: "2px",
              boxShadow: "0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)",
              boxSizing: "initial",
              fontFamily: "Menlo"
            },
            saturation: {
              width: "100%",
              paddingBottom: "55%",
              position: "relative",
              borderRadius: "2px 2px 0 0",
              overflow: "hidden"
            },
            Saturation: {
              radius: "2px 2px 0 0"
            },
            body: {
              padding: "16px 16px 12px"
            },
            controls: {
              display: "flex"
            },
            color: {
              width: "32px"
            },
            swatch: {
              marginTop: "6px",
              width: "16px",
              height: "16px",
              borderRadius: "8px",
              position: "relative",
              overflow: "hidden"
            },
            active: {
              absolute: "0px 0px 0px 0px",
              borderRadius: "8px",
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.1)",
              background: "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", " + rgb.a + ")",
              zIndex: "2"
            },
            toggles: {
              flex: "1"
            },
            hue: {
              height: "10px",
              position: "relative",
              marginBottom: "8px"
            },
            Hue: {
              radius: "2px"
            },
            alpha: {
              height: "10px",
              position: "relative"
            },
            Alpha: {
              radius: "2px"
            }
          },
          "disableAlpha": {
            color: {
              width: "22px"
            },
            alpha: {
              display: "none"
            },
            hue: {
              marginBottom: "0px"
            },
            swatch: {
              width: "10px",
              height: "10px",
              marginTop: "0px"
            }
          }
        }, passedStyles), { disableAlpha });
        return React__default.createElement("div", { style: styles2.picker, className: "chrome-picker " + className }, React__default.createElement("div", { style: styles2.saturation }, React__default.createElement(Saturation, {
          style: styles2.Saturation,
          hsl,
          hsv,
          pointer: ChromePointerCircle,
          onChange
        })), React__default.createElement("div", { style: styles2.body }, React__default.createElement("div", { style: styles2.controls, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.color }, React__default.createElement("div", { style: styles2.swatch }, React__default.createElement("div", { style: styles2.active }), React__default.createElement(Checkboard, { renderers }))), React__default.createElement("div", { style: styles2.toggles }, React__default.createElement("div", { style: styles2.hue }, React__default.createElement(Hue, {
          style: styles2.Hue,
          hsl,
          pointer: ChromePointer,
          onChange
        })), React__default.createElement("div", { style: styles2.alpha }, React__default.createElement(Alpha, {
          style: styles2.Alpha,
          rgb,
          hsl,
          pointer: ChromePointer,
          renderers,
          onChange
        })))), React__default.createElement(ChromeFields, {
          rgb,
          hsl,
          hex,
          view: defaultView,
          onChange,
          disableAlpha
        })));
      };
      Chrome.propTypes = {
        width: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        disableAlpha: PropTypes$1.bool,
        styles: PropTypes$1.object,
        defaultView: PropTypes$1.oneOf(["hex", "rgb", "hsl"])
      };
      Chrome.defaultProps = {
        width: 225,
        disableAlpha: false,
        styles: {}
      };
      ColorWrap(Chrome);
      var CompactColor = function CompactColor2(_ref) {
        var color = _ref.color, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, onSwatchHover = _ref.onSwatchHover, active2 = _ref.active;
        var styles2 = _default$3({
          "default": {
            color: {
              background: color,
              width: "15px",
              height: "15px",
              float: "left",
              marginRight: "5px",
              marginBottom: "5px",
              position: "relative",
              cursor: "pointer"
            },
            dot: {
              absolute: "5px 5px 5px 5px",
              background: getContrastingColor(color),
              borderRadius: "50%",
              opacity: "0"
            }
          },
          "active": {
            dot: {
              opacity: "1"
            }
          },
          "color-#FFFFFF": {
            color: {
              boxShadow: "inset 0 0 0 1px #ddd"
            },
            dot: {
              background: "#000"
            }
          },
          "transparent": {
            dot: {
              background: "#000"
            }
          }
        }, { active: active2, "color-#FFFFFF": color === "#FFFFFF", "transparent": color === "transparent" });
        return React__default.createElement(Swatch$1, {
          style: styles2.color,
          color,
          onClick,
          onHover: onSwatchHover,
          focusStyle: { boxShadow: "0 0 4px " + color }
        }, React__default.createElement("div", { style: styles2.dot }));
      };
      var CompactFields = function CompactFields2(_ref) {
        var hex = _ref.hex, rgb = _ref.rgb, onChange = _ref.onChange;
        var styles2 = _default$3({
          "default": {
            fields: {
              display: "flex",
              paddingBottom: "6px",
              paddingRight: "5px",
              position: "relative"
            },
            active: {
              position: "absolute",
              top: "6px",
              left: "5px",
              height: "9px",
              width: "9px",
              background: hex
            },
            HEXwrap: {
              flex: "6",
              position: "relative"
            },
            HEXinput: {
              width: "80%",
              padding: "0px",
              paddingLeft: "20%",
              border: "none",
              outline: "none",
              background: "none",
              fontSize: "12px",
              color: "#333",
              height: "16px"
            },
            HEXlabel: {
              display: "none"
            },
            RGBwrap: {
              flex: "3",
              position: "relative"
            },
            RGBinput: {
              width: "70%",
              padding: "0px",
              paddingLeft: "30%",
              border: "none",
              outline: "none",
              background: "none",
              fontSize: "12px",
              color: "#333",
              height: "16px"
            },
            RGBlabel: {
              position: "absolute",
              top: "3px",
              left: "0px",
              lineHeight: "16px",
              textTransform: "uppercase",
              fontSize: "12px",
              color: "#999"
            }
          }
        });
        var handleChange = function handleChange2(data, e2) {
          if (data.r || data.g || data.b) {
            onChange({
              r: data.r || rgb.r,
              g: data.g || rgb.g,
              b: data.b || rgb.b,
              source: "rgb"
            }, e2);
          } else {
            onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          }
        };
        return React__default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.active }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.HEXwrap, input: styles2.HEXinput, label: styles2.HEXlabel },
          label: "hex",
          value: hex,
          onChange: handleChange
        }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "r",
          value: rgb.r,
          onChange: handleChange
        }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "g",
          value: rgb.g,
          onChange: handleChange
        }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "b",
          value: rgb.b,
          onChange: handleChange
        }));
      };
      var Compact = function Compact2(_ref) {
        var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors = _ref.colors, hex = _ref.hex, rgb = _ref.rgb, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            Compact: {
              background: "#f6f6f6",
              radius: "4px"
            },
            compact: {
              paddingTop: "5px",
              paddingLeft: "5px",
              boxSizing: "initial",
              width: "240px"
            },
            clear: {
              clear: "both"
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(data, e2) {
          if (data.hex) {
            isValidHex(data.hex) && onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          } else {
            onChange(data, e2);
          }
        };
        return React__default.createElement(Raised, { style: styles2.Compact, styles: passedStyles }, React__default.createElement("div", { style: styles2.compact, className: "compact-picker " + className }, React__default.createElement("div", null, map$1(colors, function(c2) {
          return React__default.createElement(CompactColor, {
            key: c2,
            color: c2,
            active: c2.toLowerCase() === hex,
            onClick: handleChange,
            onSwatchHover
          });
        }), React__default.createElement("div", { style: styles2.clear })), React__default.createElement(CompactFields, { hex, rgb, onChange: handleChange })));
      };
      Compact.propTypes = {
        colors: PropTypes$1.arrayOf(PropTypes$1.string),
        styles: PropTypes$1.object
      };
      Compact.defaultProps = {
        colors: ["#4D4D4D", "#999999", "#FFFFFF", "#F44E3B", "#FE9200", "#FCDC00", "#DBDF00", "#A4DD00", "#68CCCA", "#73D8FF", "#AEA1FF", "#FDA1FF", "#333333", "#808080", "#cccccc", "#D33115", "#E27300", "#FCC400", "#B0BC00", "#68BC00", "#16A5A5", "#009CE0", "#7B64FF", "#FA28FF", "#000000", "#666666", "#B3B3B3", "#9F0500", "#C45100", "#FB9E00", "#808900", "#194D33", "#0C797D", "#0062B1", "#653294", "#AB149E"],
        styles: {}
      };
      ColorWrap(Compact);
      var GithubSwatch = function GithubSwatch2(_ref) {
        var hover2 = _ref.hover, color = _ref.color, onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover;
        var hoverSwatch = {
          position: "relative",
          zIndex: "2",
          outline: "2px solid #fff",
          boxShadow: "0 0 5px 2px rgba(0,0,0,0.25)"
        };
        var styles2 = _default$3({
          "default": {
            swatch: {
              width: "25px",
              height: "25px",
              fontSize: "0"
            }
          },
          "hover": {
            swatch: hoverSwatch
          }
        }, { hover: hover2 });
        return React__default.createElement("div", { style: styles2.swatch }, React__default.createElement(Swatch$1, {
          color,
          onClick,
          onHover: onSwatchHover,
          focusStyle: hoverSwatch
        }));
      };
      var GithubSwatch$1 = handleHover(GithubSwatch);
      var Github = function Github2(_ref) {
        var width = _ref.width, colors = _ref.colors, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            card: {
              width,
              background: "#fff",
              border: "1px solid rgba(0,0,0,0.2)",
              boxShadow: "0 3px 12px rgba(0,0,0,0.15)",
              borderRadius: "4px",
              position: "relative",
              padding: "5px",
              display: "flex",
              flexWrap: "wrap"
            },
            triangle: {
              position: "absolute",
              border: "7px solid transparent",
              borderBottomColor: "#fff"
            },
            triangleShadow: {
              position: "absolute",
              border: "8px solid transparent",
              borderBottomColor: "rgba(0,0,0,0.15)"
            }
          },
          "hide-triangle": {
            triangle: {
              display: "none"
            },
            triangleShadow: {
              display: "none"
            }
          },
          "top-left-triangle": {
            triangle: {
              top: "-14px",
              left: "10px"
            },
            triangleShadow: {
              top: "-16px",
              left: "9px"
            }
          },
          "top-right-triangle": {
            triangle: {
              top: "-14px",
              right: "10px"
            },
            triangleShadow: {
              top: "-16px",
              right: "9px"
            }
          },
          "bottom-left-triangle": {
            triangle: {
              top: "35px",
              left: "10px",
              transform: "rotate(180deg)"
            },
            triangleShadow: {
              top: "37px",
              left: "9px",
              transform: "rotate(180deg)"
            }
          },
          "bottom-right-triangle": {
            triangle: {
              top: "35px",
              right: "10px",
              transform: "rotate(180deg)"
            },
            triangleShadow: {
              top: "37px",
              right: "9px",
              transform: "rotate(180deg)"
            }
          }
        }, passedStyles), {
          "hide-triangle": triangle === "hide",
          "top-left-triangle": triangle === "top-left",
          "top-right-triangle": triangle === "top-right",
          "bottom-left-triangle": triangle === "bottom-left",
          "bottom-right-triangle": triangle === "bottom-right"
        });
        var handleChange = function handleChange2(hex, e2) {
          return onChange({ hex, source: "hex" }, e2);
        };
        return React__default.createElement("div", { style: styles2.card, className: "github-picker " + className }, React__default.createElement("div", { style: styles2.triangleShadow }), React__default.createElement("div", { style: styles2.triangle }), map$1(colors, function(c2) {
          return React__default.createElement(GithubSwatch$1, {
            color: c2,
            key: c2,
            onClick: handleChange,
            onSwatchHover
          });
        }));
      };
      Github.propTypes = {
        width: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        colors: PropTypes$1.arrayOf(PropTypes$1.string),
        triangle: PropTypes$1.oneOf(["hide", "top-left", "top-right", "bottom-left", "bottom-right"]),
        styles: PropTypes$1.object
      };
      Github.defaultProps = {
        width: 200,
        colors: ["#B80000", "#DB3E00", "#FCCB00", "#008B02", "#006B76", "#1273DE", "#004DCF", "#5300EB", "#EB9694", "#FAD0C3", "#FEF3BD", "#C1E1C5", "#BEDADC", "#C4DEF6", "#BED3F3", "#D4C4FB"],
        triangle: "top-left",
        styles: {}
      };
      ColorWrap(Github);
      var SliderPointer$1 = function SliderPointer2(_ref) {
        var direction = _ref.direction;
        var styles2 = _default$3({
          "default": {
            picker: {
              width: "18px",
              height: "18px",
              borderRadius: "50%",
              transform: "translate(-9px, -1px)",
              backgroundColor: "rgb(248, 248, 248)",
              boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
            }
          },
          "vertical": {
            picker: {
              transform: "translate(-3px, -9px)"
            }
          }
        }, { vertical: direction === "vertical" });
        return React__default.createElement("div", { style: styles2.picker });
      };
      var _extends$3 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var HuePicker = function HuePicker2(_ref) {
        var width = _ref.width, height = _ref.height, onChange = _ref.onChange, hsl = _ref.hsl, direction = _ref.direction, pointer = _ref.pointer, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            picker: {
              position: "relative",
              width,
              height
            },
            hue: {
              radius: "2px"
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(data) {
          return onChange({ a: 1, h: data.h, l: 0.5, s: 1 });
        };
        return React__default.createElement("div", { style: styles2.picker, className: "hue-picker " + className }, React__default.createElement(Hue, _extends$3({}, styles2.hue, {
          hsl,
          pointer,
          onChange: handleChange,
          direction
        })));
      };
      HuePicker.propTypes = {
        styles: PropTypes$1.object
      };
      HuePicker.defaultProps = {
        width: "316px",
        height: "16px",
        direction: "horizontal",
        pointer: SliderPointer$1,
        styles: {}
      };
      ColorWrap(HuePicker);
      var Material = function Material2(_ref) {
        var onChange = _ref.onChange, hex = _ref.hex, rgb = _ref.rgb, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            material: {
              width: "98px",
              height: "98px",
              padding: "16px",
              fontFamily: "Roboto"
            },
            HEXwrap: {
              position: "relative"
            },
            HEXinput: {
              width: "100%",
              marginTop: "12px",
              fontSize: "15px",
              color: "#333",
              padding: "0px",
              border: "0px",
              borderBottom: "2px solid " + hex,
              outline: "none",
              height: "30px"
            },
            HEXlabel: {
              position: "absolute",
              top: "0px",
              left: "0px",
              fontSize: "11px",
              color: "#999999",
              textTransform: "capitalize"
            },
            Hex: {
              style: {}
            },
            RGBwrap: {
              position: "relative"
            },
            RGBinput: {
              width: "100%",
              marginTop: "12px",
              fontSize: "15px",
              color: "#333",
              padding: "0px",
              border: "0px",
              borderBottom: "1px solid #eee",
              outline: "none",
              height: "30px"
            },
            RGBlabel: {
              position: "absolute",
              top: "0px",
              left: "0px",
              fontSize: "11px",
              color: "#999999",
              textTransform: "capitalize"
            },
            split: {
              display: "flex",
              marginRight: "-10px",
              paddingTop: "11px"
            },
            third: {
              flex: "1",
              paddingRight: "10px"
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(data, e2) {
          if (data.hex) {
            isValidHex(data.hex) && onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          } else if (data.r || data.g || data.b) {
            onChange({
              r: data.r || rgb.r,
              g: data.g || rgb.g,
              b: data.b || rgb.b,
              source: "rgb"
            }, e2);
          }
        };
        return React__default.createElement(Raised, { styles: passedStyles }, React__default.createElement("div", { style: styles2.material, className: "material-picker " + className }, React__default.createElement(EditableInput, {
          style: { wrap: styles2.HEXwrap, input: styles2.HEXinput, label: styles2.HEXlabel },
          label: "hex",
          value: hex,
          onChange: handleChange
        }), React__default.createElement("div", { style: styles2.split, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.third }, React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "r",
          value: rgb.r,
          onChange: handleChange
        })), React__default.createElement("div", { style: styles2.third }, React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "g",
          value: rgb.g,
          onChange: handleChange
        })), React__default.createElement("div", { style: styles2.third }, React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "b",
          value: rgb.b,
          onChange: handleChange
        })))));
      };
      ColorWrap(Material);
      var PhotoshopPicker = function PhotoshopPicker2(_ref) {
        var onChange = _ref.onChange, rgb = _ref.rgb, hsv = _ref.hsv, hex = _ref.hex;
        var styles2 = _default$3({
          "default": {
            fields: {
              paddingTop: "5px",
              paddingBottom: "9px",
              width: "80px",
              position: "relative"
            },
            divider: {
              height: "5px"
            },
            RGBwrap: {
              position: "relative"
            },
            RGBinput: {
              marginLeft: "40%",
              width: "40%",
              height: "18px",
              border: "1px solid #888888",
              boxShadow: "inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",
              marginBottom: "5px",
              fontSize: "13px",
              paddingLeft: "3px",
              marginRight: "10px"
            },
            RGBlabel: {
              left: "0px",
              top: "0px",
              width: "34px",
              textTransform: "uppercase",
              fontSize: "13px",
              height: "18px",
              lineHeight: "22px",
              position: "absolute"
            },
            HEXwrap: {
              position: "relative"
            },
            HEXinput: {
              marginLeft: "20%",
              width: "80%",
              height: "18px",
              border: "1px solid #888888",
              boxShadow: "inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC",
              marginBottom: "6px",
              fontSize: "13px",
              paddingLeft: "3px"
            },
            HEXlabel: {
              position: "absolute",
              top: "0px",
              left: "0px",
              width: "14px",
              textTransform: "uppercase",
              fontSize: "13px",
              height: "18px",
              lineHeight: "22px"
            },
            fieldSymbols: {
              position: "absolute",
              top: "5px",
              right: "-7px",
              fontSize: "13px"
            },
            symbol: {
              height: "20px",
              lineHeight: "22px",
              paddingBottom: "7px"
            }
          }
        });
        var handleChange = function handleChange2(data, e2) {
          if (data["#"]) {
            isValidHex(data["#"]) && onChange({
              hex: data["#"],
              source: "hex"
            }, e2);
          } else if (data.r || data.g || data.b) {
            onChange({
              r: data.r || rgb.r,
              g: data.g || rgb.g,
              b: data.b || rgb.b,
              source: "rgb"
            }, e2);
          } else if (data.h || data.s || data.v) {
            onChange({
              h: data.h || hsv.h,
              s: data.s || hsv.s,
              v: data.v || hsv.v,
              source: "hsv"
            }, e2);
          }
        };
        return React__default.createElement("div", { style: styles2.fields }, React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "h",
          value: Math.round(hsv.h),
          onChange: handleChange
        }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "s",
          value: Math.round(hsv.s * 100),
          onChange: handleChange
        }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "v",
          value: Math.round(hsv.v * 100),
          onChange: handleChange
        }), React__default.createElement("div", { style: styles2.divider }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "r",
          value: rgb.r,
          onChange: handleChange
        }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "g",
          value: rgb.g,
          onChange: handleChange
        }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.RGBwrap, input: styles2.RGBinput, label: styles2.RGBlabel },
          label: "b",
          value: rgb.b,
          onChange: handleChange
        }), React__default.createElement("div", { style: styles2.divider }), React__default.createElement(EditableInput, {
          style: { wrap: styles2.HEXwrap, input: styles2.HEXinput, label: styles2.HEXlabel },
          label: "#",
          value: hex.replace("#", ""),
          onChange: handleChange
        }), React__default.createElement("div", { style: styles2.fieldSymbols }, React__default.createElement("div", { style: styles2.symbol }, "\xB0"), React__default.createElement("div", { style: styles2.symbol }, "%"), React__default.createElement("div", { style: styles2.symbol }, "%")));
      };
      var PhotoshopPointerCircle$1 = function PhotoshopPointerCircle2(_ref) {
        var hsl = _ref.hsl;
        var styles2 = _default$3({
          "default": {
            picker: {
              width: "12px",
              height: "12px",
              borderRadius: "6px",
              boxShadow: "inset 0 0 0 1px #fff",
              transform: "translate(-6px, -6px)"
            }
          },
          "black-outline": {
            picker: {
              boxShadow: "inset 0 0 0 1px #000"
            }
          }
        }, { "black-outline": hsl.l > 0.5 });
        return React__default.createElement("div", { style: styles2.picker });
      };
      var PhotoshopPointerCircle = function PhotoshopPointerCircle2() {
        var styles2 = _default$3({
          "default": {
            triangle: {
              width: 0,
              height: 0,
              borderStyle: "solid",
              borderWidth: "4px 0 4px 6px",
              borderColor: "transparent transparent transparent #fff",
              position: "absolute",
              top: "1px",
              left: "1px"
            },
            triangleBorder: {
              width: 0,
              height: 0,
              borderStyle: "solid",
              borderWidth: "5px 0 5px 8px",
              borderColor: "transparent transparent transparent #555"
            },
            left: {
              Extend: "triangleBorder",
              transform: "translate(-13px, -4px)"
            },
            leftInside: {
              Extend: "triangle",
              transform: "translate(-8px, -5px)"
            },
            right: {
              Extend: "triangleBorder",
              transform: "translate(20px, -14px) rotate(180deg)"
            },
            rightInside: {
              Extend: "triangle",
              transform: "translate(-8px, -5px)"
            }
          }
        });
        return React__default.createElement("div", { style: styles2.pointer }, React__default.createElement("div", { style: styles2.left }, React__default.createElement("div", { style: styles2.leftInside })), React__default.createElement("div", { style: styles2.right }, React__default.createElement("div", { style: styles2.rightInside })));
      };
      var PhotoshopButton = function PhotoshopButton2(_ref) {
        var onClick = _ref.onClick, label = _ref.label, children = _ref.children, active2 = _ref.active;
        var styles2 = _default$3({
          "default": {
            button: {
              backgroundImage: "linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)",
              border: "1px solid #878787",
              borderRadius: "2px",
              height: "20px",
              boxShadow: "0 1px 0 0 #EAEAEA",
              fontSize: "14px",
              color: "#000",
              lineHeight: "20px",
              textAlign: "center",
              marginBottom: "10px",
              cursor: "pointer"
            }
          },
          "active": {
            button: {
              boxShadow: "0 0 0 1px #878787"
            }
          }
        }, { active: active2 });
        return React__default.createElement("div", { style: styles2.button, onClick }, label || children);
      };
      var PhotoshopPreviews = function PhotoshopPreviews2(_ref) {
        var rgb = _ref.rgb, currentColor = _ref.currentColor;
        var styles2 = _default$3({
          "default": {
            swatches: {
              border: "1px solid #B3B3B3",
              borderBottom: "1px solid #F0F0F0",
              marginBottom: "2px",
              marginTop: "1px"
            },
            new: {
              height: "34px",
              background: "rgb(" + rgb.r + "," + rgb.g + ", " + rgb.b + ")",
              boxShadow: "inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000"
            },
            current: {
              height: "34px",
              background: currentColor,
              boxShadow: "inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000"
            },
            label: {
              fontSize: "14px",
              color: "#000",
              textAlign: "center"
            }
          }
        });
        return React__default.createElement("div", null, React__default.createElement("div", { style: styles2.label }, "new"), React__default.createElement("div", { style: styles2.swatches }, React__default.createElement("div", { style: styles2.new }), React__default.createElement("div", { style: styles2.current })), React__default.createElement("div", { style: styles2.label }, "current"));
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var Photoshop = function(_React$Component) {
        _inherits(Photoshop2, _React$Component);
        function Photoshop2(props) {
          _classCallCheck(this, Photoshop2);
          var _this = _possibleConstructorReturn(this, (Photoshop2.__proto__ || Object.getPrototypeOf(Photoshop2)).call(this));
          _this.state = {
            currentColor: props.hex
          };
          return _this;
        }
        _createClass(Photoshop2, [{
          key: "render",
          value: function render2() {
            var _props = this.props, _props$styles = _props.styles, passedStyles = _props$styles === void 0 ? {} : _props$styles, _props$className = _props.className, className = _props$className === void 0 ? "" : _props$className;
            var styles2 = _default$3(merge$1({
              "default": {
                picker: {
                  background: "#DCDCDC",
                  borderRadius: "4px",
                  boxShadow: "0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)",
                  boxSizing: "initial",
                  width: "513px"
                },
                head: {
                  backgroundImage: "linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)",
                  borderBottom: "1px solid #B1B1B1",
                  boxShadow: "inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)",
                  height: "23px",
                  lineHeight: "24px",
                  borderRadius: "4px 4px 0 0",
                  fontSize: "13px",
                  color: "#4D4D4D",
                  textAlign: "center"
                },
                body: {
                  padding: "15px 15px 0",
                  display: "flex"
                },
                saturation: {
                  width: "256px",
                  height: "256px",
                  position: "relative",
                  border: "2px solid #B3B3B3",
                  borderBottom: "2px solid #F0F0F0",
                  overflow: "hidden"
                },
                hue: {
                  position: "relative",
                  height: "256px",
                  width: "19px",
                  marginLeft: "10px",
                  border: "2px solid #B3B3B3",
                  borderBottom: "2px solid #F0F0F0"
                },
                controls: {
                  width: "180px",
                  marginLeft: "10px"
                },
                top: {
                  display: "flex"
                },
                previews: {
                  width: "60px"
                },
                actions: {
                  flex: "1",
                  marginLeft: "20px"
                }
              }
            }, passedStyles));
            return React__default.createElement("div", { style: styles2.picker, className: "photoshop-picker " + className }, React__default.createElement("div", { style: styles2.head }, this.props.header), React__default.createElement("div", { style: styles2.body, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.saturation }, React__default.createElement(Saturation, {
              hsl: this.props.hsl,
              hsv: this.props.hsv,
              pointer: PhotoshopPointerCircle$1,
              onChange: this.props.onChange
            })), React__default.createElement("div", { style: styles2.hue }, React__default.createElement(Hue, {
              direction: "vertical",
              hsl: this.props.hsl,
              pointer: PhotoshopPointerCircle,
              onChange: this.props.onChange
            })), React__default.createElement("div", { style: styles2.controls }, React__default.createElement("div", { style: styles2.top, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.previews }, React__default.createElement(PhotoshopPreviews, {
              rgb: this.props.rgb,
              currentColor: this.state.currentColor
            })), React__default.createElement("div", { style: styles2.actions }, React__default.createElement(PhotoshopButton, { label: "OK", onClick: this.props.onAccept, active: true }), React__default.createElement(PhotoshopButton, { label: "Cancel", onClick: this.props.onCancel }), React__default.createElement(PhotoshopPicker, {
              onChange: this.props.onChange,
              rgb: this.props.rgb,
              hsv: this.props.hsv,
              hex: this.props.hex
            }))))));
          }
        }]);
        return Photoshop2;
      }(React__default.Component);
      Photoshop.propTypes = {
        header: PropTypes$1.string,
        styles: PropTypes$1.object
      };
      Photoshop.defaultProps = {
        header: "Color Picker",
        styles: {}
      };
      ColorWrap(Photoshop);
      var SketchFields = function SketchFields2(_ref) {
        var onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hex = _ref.hex, disableAlpha = _ref.disableAlpha;
        var styles2 = _default$3({
          "default": {
            fields: {
              display: "flex",
              paddingTop: "4px"
            },
            single: {
              flex: "1",
              paddingLeft: "6px"
            },
            alpha: {
              flex: "1",
              paddingLeft: "6px"
            },
            double: {
              flex: "2"
            },
            input: {
              width: "80%",
              padding: "4px 10% 3px",
              border: "none",
              boxShadow: "inset 0 0 0 1px #ccc",
              fontSize: "11px"
            },
            label: {
              display: "block",
              textAlign: "center",
              fontSize: "11px",
              color: "#222",
              paddingTop: "3px",
              paddingBottom: "4px",
              textTransform: "capitalize"
            }
          },
          "disableAlpha": {
            alpha: {
              display: "none"
            }
          }
        }, { disableAlpha });
        var handleChange = function handleChange2(data, e2) {
          if (data.hex) {
            isValidHex(data.hex) && onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          } else if (data.r || data.g || data.b) {
            onChange({
              r: data.r || rgb.r,
              g: data.g || rgb.g,
              b: data.b || rgb.b,
              a: rgb.a,
              source: "rgb"
            }, e2);
          } else if (data.a) {
            if (data.a < 0) {
              data.a = 0;
            } else if (data.a > 100) {
              data.a = 100;
            }
            data.a /= 100;
            onChange({
              h: hsl.h,
              s: hsl.s,
              l: hsl.l,
              a: data.a,
              source: "rgb"
            }, e2);
          }
        };
        return React__default.createElement("div", { style: styles2.fields, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.double }, React__default.createElement(EditableInput, {
          style: { input: styles2.input, label: styles2.label },
          label: "hex",
          value: hex.replace("#", ""),
          onChange: handleChange
        })), React__default.createElement("div", { style: styles2.single }, React__default.createElement(EditableInput, {
          style: { input: styles2.input, label: styles2.label },
          label: "r",
          value: rgb.r,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })), React__default.createElement("div", { style: styles2.single }, React__default.createElement(EditableInput, {
          style: { input: styles2.input, label: styles2.label },
          label: "g",
          value: rgb.g,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })), React__default.createElement("div", { style: styles2.single }, React__default.createElement(EditableInput, {
          style: { input: styles2.input, label: styles2.label },
          label: "b",
          value: rgb.b,
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "255"
        })), React__default.createElement("div", { style: styles2.alpha }, React__default.createElement(EditableInput, {
          style: { input: styles2.input, label: styles2.label },
          label: "a",
          value: Math.round(rgb.a * 100),
          onChange: handleChange,
          dragLabel: "true",
          dragMax: "100"
        })));
      };
      var _extends$2 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var SketchPresetColors = function SketchPresetColors2(_ref) {
        var colors = _ref.colors, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, onSwatchHover = _ref.onSwatchHover;
        var styles2 = _default$3({
          "default": {
            colors: {
              margin: "0 -10px",
              padding: "10px 0 0 10px",
              borderTop: "1px solid #eee",
              display: "flex",
              flexWrap: "wrap",
              position: "relative"
            },
            swatchWrap: {
              width: "16px",
              height: "16px",
              margin: "0 10px 10px 0"
            },
            swatch: {
              borderRadius: "3px",
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15)"
            }
          },
          "no-presets": {
            colors: {
              display: "none"
            }
          }
        }, {
          "no-presets": !colors || !colors.length
        });
        var handleClick = function handleClick2(hex, e2) {
          onClick({
            hex,
            source: "hex"
          }, e2);
        };
        return React__default.createElement("div", { style: styles2.colors, className: "flexbox-fix" }, colors.map(function(colorObjOrString) {
          var c2 = typeof colorObjOrString === "string" ? { color: colorObjOrString } : colorObjOrString;
          var key = "" + c2.color + (c2.title || "");
          return React__default.createElement("div", { key, style: styles2.swatchWrap }, React__default.createElement(Swatch$1, _extends$2({}, c2, {
            style: styles2.swatch,
            onClick: handleClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px " + c2.color
            }
          })));
        }));
      };
      SketchPresetColors.propTypes = {
        colors: PropTypes$1.arrayOf(PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.shape({
          color: PropTypes$1.string,
          title: PropTypes$1.string
        })])).isRequired
      };
      var _extends$1 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var Sketch = function Sketch2(_ref) {
        var width = _ref.width, rgb = _ref.rgb, hex = _ref.hex, hsv = _ref.hsv, hsl = _ref.hsl, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, disableAlpha = _ref.disableAlpha, presetColors = _ref.presetColors, renderers = _ref.renderers, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": _extends$1({
            picker: {
              width,
              padding: "10px 10px 0",
              boxSizing: "initial",
              background: "#fff",
              borderRadius: "4px",
              boxShadow: "0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)"
            },
            saturation: {
              width: "100%",
              paddingBottom: "75%",
              position: "relative",
              overflow: "hidden"
            },
            Saturation: {
              radius: "3px",
              shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
            },
            controls: {
              display: "flex"
            },
            sliders: {
              padding: "4px 0",
              flex: "1"
            },
            color: {
              width: "24px",
              height: "24px",
              position: "relative",
              marginTop: "4px",
              marginLeft: "4px",
              borderRadius: "3px"
            },
            activeColor: {
              absolute: "0px 0px 0px 0px",
              borderRadius: "2px",
              background: "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")",
              boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
            },
            hue: {
              position: "relative",
              height: "10px",
              overflow: "hidden"
            },
            Hue: {
              radius: "2px",
              shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
            },
            alpha: {
              position: "relative",
              height: "10px",
              marginTop: "4px",
              overflow: "hidden"
            },
            Alpha: {
              radius: "2px",
              shadow: "inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)"
            }
          }, passedStyles),
          "disableAlpha": {
            color: {
              height: "10px"
            },
            hue: {
              height: "10px"
            },
            alpha: {
              display: "none"
            }
          }
        }, passedStyles), { disableAlpha });
        return React__default.createElement("div", { style: styles2.picker, className: "sketch-picker " + className }, React__default.createElement("div", { style: styles2.saturation }, React__default.createElement(Saturation, {
          style: styles2.Saturation,
          hsl,
          hsv,
          onChange
        })), React__default.createElement("div", { style: styles2.controls, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.sliders }, React__default.createElement("div", { style: styles2.hue }, React__default.createElement(Hue, {
          style: styles2.Hue,
          hsl,
          onChange
        })), React__default.createElement("div", { style: styles2.alpha }, React__default.createElement(Alpha, {
          style: styles2.Alpha,
          rgb,
          hsl,
          renderers,
          onChange
        }))), React__default.createElement("div", { style: styles2.color }, React__default.createElement(Checkboard, null), React__default.createElement("div", { style: styles2.activeColor }))), React__default.createElement(SketchFields, {
          rgb,
          hsl,
          hex,
          onChange,
          disableAlpha
        }), React__default.createElement(SketchPresetColors, {
          colors: presetColors,
          onClick: onChange,
          onSwatchHover
        }));
      };
      Sketch.propTypes = {
        disableAlpha: PropTypes$1.bool,
        width: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        styles: PropTypes$1.object
      };
      Sketch.defaultProps = {
        disableAlpha: false,
        width: 200,
        styles: {},
        presetColors: ["#D0021B", "#F5A623", "#F8E71C", "#8B572A", "#7ED321", "#417505", "#BD10E0", "#9013FE", "#4A90E2", "#50E3C2", "#B8E986", "#000000", "#4A4A4A", "#9B9B9B", "#FFFFFF"]
      };
      ColorWrap(Sketch);
      var SliderSwatch = function SliderSwatch2(_ref) {
        var hsl = _ref.hsl, offset2 = _ref.offset, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, active2 = _ref.active, first = _ref.first, last2 = _ref.last;
        var styles2 = _default$3({
          "default": {
            swatch: {
              height: "12px",
              background: "hsl(" + hsl.h + ", 50%, " + offset2 * 100 + "%)",
              cursor: "pointer"
            }
          },
          "first": {
            swatch: {
              borderRadius: "2px 0 0 2px"
            }
          },
          "last": {
            swatch: {
              borderRadius: "0 2px 2px 0"
            }
          },
          "active": {
            swatch: {
              transform: "scaleY(1.8)",
              borderRadius: "3.6px/2px"
            }
          }
        }, { active: active2, first, last: last2 });
        var handleClick = function handleClick2(e2) {
          return onClick({
            h: hsl.h,
            s: 0.5,
            l: offset2,
            source: "hsl"
          }, e2);
        };
        return React__default.createElement("div", { style: styles2.swatch, onClick: handleClick });
      };
      var SliderSwatches = function SliderSwatches2(_ref) {
        var onClick = _ref.onClick, hsl = _ref.hsl;
        var styles2 = _default$3({
          "default": {
            swatches: {
              marginTop: "20px"
            },
            swatch: {
              boxSizing: "border-box",
              width: "20%",
              paddingRight: "1px",
              float: "left"
            },
            clear: {
              clear: "both"
            }
          }
        });
        var epsilon = 0.1;
        return React__default.createElement("div", { style: styles2.swatches }, React__default.createElement("div", { style: styles2.swatch }, React__default.createElement(SliderSwatch, {
          hsl,
          offset: ".80",
          active: Math.abs(hsl.l - 0.8) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick,
          first: true
        })), React__default.createElement("div", { style: styles2.swatch }, React__default.createElement(SliderSwatch, {
          hsl,
          offset: ".65",
          active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })), React__default.createElement("div", { style: styles2.swatch }, React__default.createElement(SliderSwatch, {
          hsl,
          offset: ".50",
          active: Math.abs(hsl.l - 0.5) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })), React__default.createElement("div", { style: styles2.swatch }, React__default.createElement(SliderSwatch, {
          hsl,
          offset: ".35",
          active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick
        })), React__default.createElement("div", { style: styles2.swatch }, React__default.createElement(SliderSwatch, {
          hsl,
          offset: ".20",
          active: Math.abs(hsl.l - 0.2) < epsilon && Math.abs(hsl.s - 0.5) < epsilon,
          onClick,
          last: true
        })), React__default.createElement("div", { style: styles2.clear }));
      };
      var SliderPointer = function SliderPointer2() {
        var styles2 = _default$3({
          "default": {
            picker: {
              width: "14px",
              height: "14px",
              borderRadius: "6px",
              transform: "translate(-7px, -1px)",
              backgroundColor: "rgb(248, 248, 248)",
              boxShadow: "0 1px 4px 0 rgba(0, 0, 0, 0.37)"
            }
          }
        });
        return React__default.createElement("div", { style: styles2.picker });
      };
      var Slider = function Slider2(_ref) {
        var hsl = _ref.hsl, onChange = _ref.onChange, pointer = _ref.pointer, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            hue: {
              height: "12px",
              position: "relative"
            },
            Hue: {
              radius: "2px"
            }
          }
        }, passedStyles));
        return React__default.createElement("div", { style: styles2.wrap || {}, className: "slider-picker " + className }, React__default.createElement("div", { style: styles2.hue }, React__default.createElement(Hue, {
          style: styles2.Hue,
          hsl,
          pointer,
          onChange
        })), React__default.createElement("div", { style: styles2.swatches }, React__default.createElement(SliderSwatches, { hsl, onClick: onChange })));
      };
      Slider.propTypes = {
        styles: PropTypes$1.object
      };
      Slider.defaultProps = {
        pointer: SliderPointer,
        styles: {}
      };
      ColorWrap(Slider);
      var CheckIcon2 = {};
      Object.defineProperty(CheckIcon2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _react = react.exports;
      var _react2 = _interopRequireDefault(_react);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _objectWithoutProperties$1(obj, keys2) {
        var target = {};
        for (var i2 in obj) {
          if (keys2.indexOf(i2) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i2))
            continue;
          target[i2] = obj[i2];
        }
        return target;
      }
      var DEFAULT_SIZE = 24;
      var _default$1 = CheckIcon2.default = function(_ref) {
        var _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$width = _ref.width, width = _ref$width === void 0 ? DEFAULT_SIZE : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? DEFAULT_SIZE : _ref$height, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutProperties$1(_ref, ["fill", "width", "height", "style"]);
        return _react2.default.createElement("svg", _extends({
          viewBox: "0 0 " + DEFAULT_SIZE + " " + DEFAULT_SIZE,
          style: _extends({ fill, width, height }, style)
        }, props), _react2.default.createElement("path", { d: "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" }));
      };
      var SwatchesColor = function SwatchesColor2(_ref) {
        var color = _ref.color, _ref$onClick = _ref.onClick, onClick = _ref$onClick === void 0 ? function() {
        } : _ref$onClick, onSwatchHover = _ref.onSwatchHover, first = _ref.first, last2 = _ref.last, active2 = _ref.active;
        var styles2 = _default$3({
          "default": {
            color: {
              width: "40px",
              height: "24px",
              cursor: "pointer",
              background: color,
              marginBottom: "1px"
            },
            check: {
              color: getContrastingColor(color),
              marginLeft: "8px",
              display: "none"
            }
          },
          "first": {
            color: {
              overflow: "hidden",
              borderRadius: "2px 2px 0 0"
            }
          },
          "last": {
            color: {
              overflow: "hidden",
              borderRadius: "0 0 2px 2px"
            }
          },
          "active": {
            check: {
              display: "block"
            }
          },
          "color-#FFFFFF": {
            color: {
              boxShadow: "inset 0 0 0 1px #ddd"
            },
            check: {
              color: "#333"
            }
          },
          "transparent": {
            check: {
              color: "#333"
            }
          }
        }, {
          first,
          last: last2,
          active: active2,
          "color-#FFFFFF": color === "#FFFFFF",
          "transparent": color === "transparent"
        });
        return React__default.createElement(Swatch$1, {
          color,
          style: styles2.color,
          onClick,
          onHover: onSwatchHover,
          focusStyle: { boxShadow: "0 0 4px " + color }
        }, React__default.createElement("div", { style: styles2.check }, React__default.createElement(_default$1, null)));
      };
      var SwatchesGroup = function SwatchesGroup2(_ref) {
        var onClick = _ref.onClick, onSwatchHover = _ref.onSwatchHover, group = _ref.group, active2 = _ref.active;
        var styles2 = _default$3({
          "default": {
            group: {
              paddingBottom: "10px",
              width: "40px",
              float: "left",
              marginRight: "10px"
            }
          }
        });
        return React__default.createElement("div", { style: styles2.group }, map$1(group, function(color, i2) {
          return React__default.createElement(SwatchesColor, {
            key: color,
            color,
            active: color.toLowerCase() === active2,
            first: i2 === 0,
            last: i2 === group.length - 1,
            onClick,
            onSwatchHover
          });
        }));
      };
      var Swatches = function Swatches2(_ref) {
        var width = _ref.width, height = _ref.height, onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, colors = _ref.colors, hex = _ref.hex, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            picker: {
              width,
              height
            },
            overflow: {
              height,
              overflowY: "scroll"
            },
            body: {
              padding: "16px 0 6px 16px"
            },
            clear: {
              clear: "both"
            }
          }
        }, passedStyles));
        var handleChange = function handleChange2(data, e2) {
          return onChange({ hex: data, source: "hex" }, e2);
        };
        return React__default.createElement("div", { style: styles2.picker, className: "swatches-picker " + className }, React__default.createElement(Raised, null, React__default.createElement("div", { style: styles2.overflow }, React__default.createElement("div", { style: styles2.body }, map$1(colors, function(group) {
          return React__default.createElement(SwatchesGroup, {
            key: group.toString(),
            group,
            active: hex,
            onClick: handleChange,
            onSwatchHover
          });
        }), React__default.createElement("div", { style: styles2.clear })))));
      };
      Swatches.propTypes = {
        width: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        height: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        colors: PropTypes$1.arrayOf(PropTypes$1.arrayOf(PropTypes$1.string)),
        styles: PropTypes$1.object
      };
      Swatches.defaultProps = {
        width: 320,
        height: 240,
        colors: [[red["900"], red["700"], red["500"], red["300"], red["100"]], [pink["900"], pink["700"], pink["500"], pink["300"], pink["100"]], [purple["900"], purple["700"], purple["500"], purple["300"], purple["100"]], [deepPurple["900"], deepPurple["700"], deepPurple["500"], deepPurple["300"], deepPurple["100"]], [indigo["900"], indigo["700"], indigo["500"], indigo["300"], indigo["100"]], [blue["900"], blue["700"], blue["500"], blue["300"], blue["100"]], [lightBlue["900"], lightBlue["700"], lightBlue["500"], lightBlue["300"], lightBlue["100"]], [cyan["900"], cyan["700"], cyan["500"], cyan["300"], cyan["100"]], [teal["900"], teal["700"], teal["500"], teal["300"], teal["100"]], ["#194D33", green["700"], green["500"], green["300"], green["100"]], [lightGreen["900"], lightGreen["700"], lightGreen["500"], lightGreen["300"], lightGreen["100"]], [lime["900"], lime["700"], lime["500"], lime["300"], lime["100"]], [yellow["900"], yellow["700"], yellow["500"], yellow["300"], yellow["100"]], [amber["900"], amber["700"], amber["500"], amber["300"], amber["100"]], [orange["900"], orange["700"], orange["500"], orange["300"], orange["100"]], [deepOrange["900"], deepOrange["700"], deepOrange["500"], deepOrange["300"], deepOrange["100"]], [brown["900"], brown["700"], brown["500"], brown["300"], brown["100"]], [blueGrey["900"], blueGrey["700"], blueGrey["500"], blueGrey["300"], blueGrey["100"]], ["#000000", "#525252", "#969696", "#D9D9D9", "#FFFFFF"]],
        styles: {}
      };
      ColorWrap(Swatches);
      var Twitter = function Twitter2(_ref) {
        var onChange = _ref.onChange, onSwatchHover = _ref.onSwatchHover, hex = _ref.hex, colors = _ref.colors, width = _ref.width, triangle = _ref.triangle, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            card: {
              width,
              background: "#fff",
              border: "0 solid rgba(0,0,0,0.25)",
              boxShadow: "0 1px 4px rgba(0,0,0,0.25)",
              borderRadius: "4px",
              position: "relative"
            },
            body: {
              padding: "15px 9px 9px 15px"
            },
            label: {
              fontSize: "18px",
              color: "#fff"
            },
            triangle: {
              width: "0px",
              height: "0px",
              borderStyle: "solid",
              borderWidth: "0 9px 10px 9px",
              borderColor: "transparent transparent #fff transparent",
              position: "absolute"
            },
            triangleShadow: {
              width: "0px",
              height: "0px",
              borderStyle: "solid",
              borderWidth: "0 9px 10px 9px",
              borderColor: "transparent transparent rgba(0,0,0,.1) transparent",
              position: "absolute"
            },
            hash: {
              background: "#F0F0F0",
              height: "30px",
              width: "30px",
              borderRadius: "4px 0 0 4px",
              float: "left",
              color: "#98A1A4",
              display: "flex",
              alignItems: "center",
              justifyContent: "center"
            },
            input: {
              width: "100px",
              fontSize: "14px",
              color: "#666",
              border: "0px",
              outline: "none",
              height: "28px",
              boxShadow: "inset 0 0 0 1px #F0F0F0",
              boxSizing: "content-box",
              borderRadius: "0 4px 4px 0",
              float: "left",
              paddingLeft: "8px"
            },
            swatch: {
              width: "30px",
              height: "30px",
              float: "left",
              borderRadius: "4px",
              margin: "0 6px 6px 0"
            },
            clear: {
              clear: "both"
            }
          },
          "hide-triangle": {
            triangle: {
              display: "none"
            },
            triangleShadow: {
              display: "none"
            }
          },
          "top-left-triangle": {
            triangle: {
              top: "-10px",
              left: "12px"
            },
            triangleShadow: {
              top: "-11px",
              left: "12px"
            }
          },
          "top-right-triangle": {
            triangle: {
              top: "-10px",
              right: "12px"
            },
            triangleShadow: {
              top: "-11px",
              right: "12px"
            }
          }
        }, passedStyles), {
          "hide-triangle": triangle === "hide",
          "top-left-triangle": triangle === "top-left",
          "top-right-triangle": triangle === "top-right"
        });
        var handleChange = function handleChange2(hexcode, e2) {
          isValidHex(hexcode) && onChange({
            hex: hexcode,
            source: "hex"
          }, e2);
        };
        return React__default.createElement("div", { style: styles2.card, className: "twitter-picker " + className }, React__default.createElement("div", { style: styles2.triangleShadow }), React__default.createElement("div", { style: styles2.triangle }), React__default.createElement("div", { style: styles2.body }, map$1(colors, function(c2, i2) {
          return React__default.createElement(Swatch$1, {
            key: i2,
            color: c2,
            hex: c2,
            style: styles2.swatch,
            onClick: handleChange,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: "0 0 4px " + c2
            }
          });
        }), React__default.createElement("div", { style: styles2.hash }, "#"), React__default.createElement(EditableInput, {
          label: null,
          style: { input: styles2.input },
          value: hex.replace("#", ""),
          onChange: handleChange
        }), React__default.createElement("div", { style: styles2.clear })));
      };
      Twitter.propTypes = {
        width: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        triangle: PropTypes$1.oneOf(["hide", "top-left", "top-right"]),
        colors: PropTypes$1.arrayOf(PropTypes$1.string),
        styles: PropTypes$1.object
      };
      Twitter.defaultProps = {
        width: 276,
        colors: ["#FF6900", "#FCB900", "#7BDCB5", "#00D084", "#8ED1FC", "#0693E3", "#ABB8C3", "#EB144C", "#F78DA7", "#9900EF"],
        triangle: "top-left",
        styles: {}
      };
      ColorWrap(Twitter);
      var GooglePointerCircle = function GooglePointerCircle2(props) {
        var styles2 = _default$3({
          "default": {
            picker: {
              width: "20px",
              height: "20px",
              borderRadius: "22px",
              border: "2px #fff solid",
              transform: "translate(-12px, -13px)",
              background: "hsl(" + Math.round(props.hsl.h) + ", " + Math.round(props.hsl.s * 100) + "%, " + Math.round(props.hsl.l * 100) + "%)"
            }
          }
        });
        return React__default.createElement("div", { style: styles2.picker });
      };
      GooglePointerCircle.propTypes = {
        hsl: PropTypes$1.shape({
          h: PropTypes$1.number,
          s: PropTypes$1.number,
          l: PropTypes$1.number,
          a: PropTypes$1.number
        })
      };
      GooglePointerCircle.defaultProps = {
        hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 }
      };
      var GooglePointer = function GooglePointer2(props) {
        var styles2 = _default$3({
          "default": {
            picker: {
              width: "20px",
              height: "20px",
              borderRadius: "22px",
              transform: "translate(-10px, -7px)",
              background: "hsl(" + Math.round(props.hsl.h) + ", 100%, 50%)",
              border: "2px white solid"
            }
          }
        });
        return React__default.createElement("div", { style: styles2.picker });
      };
      GooglePointer.propTypes = {
        hsl: PropTypes$1.shape({
          h: PropTypes$1.number,
          s: PropTypes$1.number,
          l: PropTypes$1.number,
          a: PropTypes$1.number
        })
      };
      GooglePointer.defaultProps = {
        hsl: { a: 1, h: 249.94, l: 0.2, s: 0.5 }
      };
      var GoogleFields = function GoogleFields2(_ref) {
        var onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hex = _ref.hex, hsv = _ref.hsv;
        var handleChange = function handleChange2(data, e2) {
          if (data.hex) {
            isValidHex(data.hex) && onChange({
              hex: data.hex,
              source: "hex"
            }, e2);
          } else if (data.rgb) {
            var values2 = data.rgb.split(",");
            isvalidColorString(data.rgb, "rgb") && onChange({
              r: values2[0],
              g: values2[1],
              b: values2[2],
              a: 1,
              source: "rgb"
            }, e2);
          } else if (data.hsv) {
            var _values = data.hsv.split(",");
            if (isvalidColorString(data.hsv, "hsv")) {
              _values[2] = _values[2].replace("%", "");
              _values[1] = _values[1].replace("%", "");
              _values[0] = _values[0].replace("\xB0", "");
              if (_values[1] == 1) {
                _values[1] = 0.01;
              } else if (_values[2] == 1) {
                _values[2] = 0.01;
              }
              onChange({
                h: Number(_values[0]),
                s: Number(_values[1]),
                v: Number(_values[2]),
                source: "hsv"
              }, e2);
            }
          } else if (data.hsl) {
            var _values2 = data.hsl.split(",");
            if (isvalidColorString(data.hsl, "hsl")) {
              _values2[2] = _values2[2].replace("%", "");
              _values2[1] = _values2[1].replace("%", "");
              _values2[0] = _values2[0].replace("\xB0", "");
              if (hsvValue[1] == 1) {
                hsvValue[1] = 0.01;
              } else if (hsvValue[2] == 1) {
                hsvValue[2] = 0.01;
              }
              onChange({
                h: Number(_values2[0]),
                s: Number(_values2[1]),
                v: Number(_values2[2]),
                source: "hsl"
              }, e2);
            }
          }
        };
        var styles2 = _default$3({
          "default": {
            wrap: {
              display: "flex",
              height: "100px",
              marginTop: "4px"
            },
            fields: {
              width: "100%"
            },
            column: {
              paddingTop: "10px",
              display: "flex",
              justifyContent: "space-between"
            },
            double: {
              padding: "0px 4.4px",
              boxSizing: "border-box"
            },
            input: {
              width: "100%",
              height: "38px",
              boxSizing: "border-box",
              padding: "4px 10% 3px",
              textAlign: "center",
              border: "1px solid #dadce0",
              fontSize: "11px",
              textTransform: "lowercase",
              borderRadius: "5px",
              outline: "none",
              fontFamily: "Roboto,Arial,sans-serif"
            },
            input2: {
              height: "38px",
              width: "100%",
              border: "1px solid #dadce0",
              boxSizing: "border-box",
              fontSize: "11px",
              textTransform: "lowercase",
              borderRadius: "5px",
              outline: "none",
              paddingLeft: "10px",
              fontFamily: "Roboto,Arial,sans-serif"
            },
            label: {
              textAlign: "center",
              fontSize: "12px",
              background: "#fff",
              position: "absolute",
              textTransform: "uppercase",
              color: "#3c4043",
              width: "35px",
              top: "-6px",
              left: "0",
              right: "0",
              marginLeft: "auto",
              marginRight: "auto",
              fontFamily: "Roboto,Arial,sans-serif"
            },
            label2: {
              left: "10px",
              textAlign: "center",
              fontSize: "12px",
              background: "#fff",
              position: "absolute",
              textTransform: "uppercase",
              color: "#3c4043",
              width: "32px",
              top: "-6px",
              fontFamily: "Roboto,Arial,sans-serif"
            },
            single: {
              flexGrow: "1",
              margin: "0px 4.4px"
            }
          }
        });
        var rgbValue = rgb.r + ", " + rgb.g + ", " + rgb.b;
        var hslValue = Math.round(hsl.h) + "\xB0, " + Math.round(hsl.s * 100) + "%, " + Math.round(hsl.l * 100) + "%";
        var hsvValue = Math.round(hsv.h) + "\xB0, " + Math.round(hsv.s * 100) + "%, " + Math.round(hsv.v * 100) + "%";
        return React__default.createElement("div", { style: styles2.wrap, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.fields }, React__default.createElement("div", { style: styles2.double }, React__default.createElement(EditableInput, {
          style: { input: styles2.input, label: styles2.label },
          label: "hex",
          value: hex,
          onChange: handleChange
        })), React__default.createElement("div", { style: styles2.column }, React__default.createElement("div", { style: styles2.single }, React__default.createElement(EditableInput, {
          style: { input: styles2.input2, label: styles2.label2 },
          label: "rgb",
          value: rgbValue,
          onChange: handleChange
        })), React__default.createElement("div", { style: styles2.single }, React__default.createElement(EditableInput, {
          style: { input: styles2.input2, label: styles2.label2 },
          label: "hsv",
          value: hsvValue,
          onChange: handleChange
        })), React__default.createElement("div", { style: styles2.single }, React__default.createElement(EditableInput, {
          style: { input: styles2.input2, label: styles2.label2 },
          label: "hsl",
          value: hslValue,
          onChange: handleChange
        })))));
      };
      var Google = function Google2(_ref) {
        var width = _ref.width, onChange = _ref.onChange, rgb = _ref.rgb, hsl = _ref.hsl, hsv = _ref.hsv, hex = _ref.hex, header = _ref.header, _ref$styles = _ref.styles, passedStyles = _ref$styles === void 0 ? {} : _ref$styles, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
        var styles2 = _default$3(merge$1({
          "default": {
            picker: {
              width,
              background: "#fff",
              border: "1px solid #dfe1e5",
              boxSizing: "initial",
              display: "flex",
              flexWrap: "wrap",
              borderRadius: "8px 8px 0px 0px"
            },
            head: {
              height: "57px",
              width: "100%",
              paddingTop: "16px",
              paddingBottom: "16px",
              paddingLeft: "16px",
              fontSize: "20px",
              boxSizing: "border-box",
              fontFamily: "Roboto-Regular,HelveticaNeue,Arial,sans-serif"
            },
            saturation: {
              width: "70%",
              padding: "0px",
              position: "relative",
              overflow: "hidden"
            },
            swatch: {
              width: "30%",
              height: "228px",
              padding: "0px",
              background: "rgba(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ", 1)",
              position: "relative",
              overflow: "hidden"
            },
            body: {
              margin: "auto",
              width: "95%"
            },
            controls: {
              display: "flex",
              boxSizing: "border-box",
              height: "52px",
              paddingTop: "22px"
            },
            color: {
              width: "32px"
            },
            hue: {
              height: "8px",
              position: "relative",
              margin: "0px 16px 0px 16px",
              width: "100%"
            },
            Hue: {
              radius: "2px"
            }
          }
        }, passedStyles));
        return React__default.createElement("div", { style: styles2.picker, className: "google-picker " + className }, React__default.createElement("div", { style: styles2.head }, header), React__default.createElement("div", { style: styles2.swatch }), React__default.createElement("div", { style: styles2.saturation }, React__default.createElement(Saturation, {
          hsl,
          hsv,
          pointer: GooglePointerCircle,
          onChange
        })), React__default.createElement("div", { style: styles2.body }, React__default.createElement("div", { style: styles2.controls, className: "flexbox-fix" }, React__default.createElement("div", { style: styles2.hue }, React__default.createElement(Hue, {
          style: styles2.Hue,
          hsl,
          radius: "4px",
          pointer: GooglePointer,
          onChange
        }))), React__default.createElement(GoogleFields, {
          rgb,
          hsl,
          hex,
          hsv,
          onChange
        })));
      };
      Google.propTypes = {
        width: PropTypes$1.oneOfType([PropTypes$1.string, PropTypes$1.number]),
        styles: PropTypes$1.object,
        header: PropTypes$1.string
      };
      Google.defaultProps = {
        width: 652,
        styles: {},
        header: "Color picker"
      };
      ColorWrap(Google);
      var colorName = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
      var simpleSwizzle = { exports: {} };
      var isArrayish$1 = function isArrayish2(obj) {
        if (!obj || typeof obj === "string") {
          return false;
        }
        return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
      };
      var isArrayish = isArrayish$1;
      var concat = Array.prototype.concat;
      var slice = Array.prototype.slice;
      var swizzle$1 = simpleSwizzle.exports = function swizzle2(args) {
        var results = [];
        for (var i2 = 0, len = args.length; i2 < len; i2++) {
          var arg = args[i2];
          if (isArrayish(arg)) {
            results = concat.call(results, slice.call(arg));
          } else {
            results.push(arg);
          }
        }
        return results;
      };
      swizzle$1.wrap = function(fn2) {
        return function() {
          return fn2(swizzle$1(arguments));
        };
      };
      var colorNames = colorName;
      var swizzle = simpleSwizzle.exports;
      var hasOwnProperty = Object.hasOwnProperty;
      var reverseNames = /* @__PURE__ */ Object.create(null);
      for (var name in colorNames) {
        if (hasOwnProperty.call(colorNames, name)) {
          reverseNames[colorNames[name]] = name;
        }
      }
      var cs = {
        to: {},
        get: {}
      };
      cs.get = function(string2) {
        var prefix = string2.substring(0, 3).toLowerCase();
        var val;
        var model;
        switch (prefix) {
          case "hsl":
            val = cs.get.hsl(string2);
            model = "hsl";
            break;
          case "hwb":
            val = cs.get.hwb(string2);
            model = "hwb";
            break;
          default:
            val = cs.get.rgb(string2);
            model = "rgb";
            break;
        }
        if (!val) {
          return null;
        }
        return { model, value: val };
      };
      cs.get.rgb = function(string2) {
        if (!string2) {
          return null;
        }
        var abbr = /^#([a-f0-9]{3,4})$/i;
        var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
        var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
        var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
        var keyword = /^(\w+)$/;
        var rgb = [0, 0, 0, 1];
        var match5;
        var i2;
        var hexAlpha;
        if (match5 = string2.match(hex)) {
          hexAlpha = match5[2];
          match5 = match5[1];
          for (i2 = 0; i2 < 3; i2++) {
            var i22 = i2 * 2;
            rgb[i2] = parseInt(match5.slice(i22, i22 + 2), 16);
          }
          if (hexAlpha) {
            rgb[3] = parseInt(hexAlpha, 16) / 255;
          }
        } else if (match5 = string2.match(abbr)) {
          match5 = match5[1];
          hexAlpha = match5[3];
          for (i2 = 0; i2 < 3; i2++) {
            rgb[i2] = parseInt(match5[i2] + match5[i2], 16);
          }
          if (hexAlpha) {
            rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
          }
        } else if (match5 = string2.match(rgba)) {
          for (i2 = 0; i2 < 3; i2++) {
            rgb[i2] = parseInt(match5[i2 + 1], 0);
          }
          if (match5[4]) {
            if (match5[5]) {
              rgb[3] = parseFloat(match5[4]) * 0.01;
            } else {
              rgb[3] = parseFloat(match5[4]);
            }
          }
        } else if (match5 = string2.match(per)) {
          for (i2 = 0; i2 < 3; i2++) {
            rgb[i2] = Math.round(parseFloat(match5[i2 + 1]) * 2.55);
          }
          if (match5[4]) {
            if (match5[5]) {
              rgb[3] = parseFloat(match5[4]) * 0.01;
            } else {
              rgb[3] = parseFloat(match5[4]);
            }
          }
        } else if (match5 = string2.match(keyword)) {
          if (match5[1] === "transparent") {
            return [0, 0, 0, 0];
          }
          if (!hasOwnProperty.call(colorNames, match5[1])) {
            return null;
          }
          rgb = colorNames[match5[1]];
          rgb[3] = 1;
          return rgb;
        } else {
          return null;
        }
        for (i2 = 0; i2 < 3; i2++) {
          rgb[i2] = clamp(rgb[i2], 0, 255);
        }
        rgb[3] = clamp(rgb[3], 0, 1);
        return rgb;
      };
      cs.get.hsl = function(string2) {
        if (!string2) {
          return null;
        }
        var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
        var match5 = string2.match(hsl);
        if (match5) {
          var alpha = parseFloat(match5[4]);
          var h2 = (parseFloat(match5[1]) % 360 + 360) % 360;
          var s2 = clamp(parseFloat(match5[2]), 0, 100);
          var l2 = clamp(parseFloat(match5[3]), 0, 100);
          var a2 = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h2, s2, l2, a2];
        }
        return null;
      };
      cs.get.hwb = function(string2) {
        if (!string2) {
          return null;
        }
        var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
        var match5 = string2.match(hwb);
        if (match5) {
          var alpha = parseFloat(match5[4]);
          var h2 = (parseFloat(match5[1]) % 360 + 360) % 360;
          var w2 = clamp(parseFloat(match5[2]), 0, 100);
          var b2 = clamp(parseFloat(match5[3]), 0, 100);
          var a2 = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h2, w2, b2, a2];
        }
        return null;
      };
      cs.to.hex = function() {
        var rgba = swizzle(arguments);
        return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
      };
      cs.to.rgb = function() {
        var rgba = swizzle(arguments);
        return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
      };
      cs.to.rgb.percent = function() {
        var rgba = swizzle(arguments);
        var r2 = Math.round(rgba[0] / 255 * 100);
        var g2 = Math.round(rgba[1] / 255 * 100);
        var b2 = Math.round(rgba[2] / 255 * 100);
        return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r2 + "%, " + g2 + "%, " + b2 + "%)" : "rgba(" + r2 + "%, " + g2 + "%, " + b2 + "%, " + rgba[3] + ")";
      };
      cs.to.hsl = function() {
        var hsla = swizzle(arguments);
        return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
      };
      cs.to.hwb = function() {
        var hwba = swizzle(arguments);
        var a2 = "";
        if (hwba.length >= 4 && hwba[3] !== 1) {
          a2 = ", " + hwba[3];
        }
        return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a2 + ")";
      };
      cs.to.keyword = function(rgb) {
        return reverseNames[rgb.slice(0, 3)];
      };
      function clamp(num, min2, max2) {
        return Math.min(Math.max(min2, num), max2);
      }
      function hexDouble(num) {
        var str = Math.round(num).toString(16).toUpperCase();
        return str.length < 2 ? "0" + str : str;
      }
      var COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
        ["aac", "audio/aac"],
        ["abw", "application/x-abiword"],
        ["arc", "application/x-freearc"],
        ["avif", "image/avif"],
        ["avi", "video/x-msvideo"],
        ["azw", "application/vnd.amazon.ebook"],
        ["bin", "application/octet-stream"],
        ["bmp", "image/bmp"],
        ["bz", "application/x-bzip"],
        ["bz2", "application/x-bzip2"],
        ["cda", "application/x-cdf"],
        ["csh", "application/x-csh"],
        ["css", "text/css"],
        ["csv", "text/csv"],
        ["doc", "application/msword"],
        ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
        ["eot", "application/vnd.ms-fontobject"],
        ["epub", "application/epub+zip"],
        ["gz", "application/gzip"],
        ["gif", "image/gif"],
        ["heic", "image/heic"],
        ["heif", "image/heif"],
        ["htm", "text/html"],
        ["html", "text/html"],
        ["ico", "image/vnd.microsoft.icon"],
        ["ics", "text/calendar"],
        ["jar", "application/java-archive"],
        ["jpeg", "image/jpeg"],
        ["jpg", "image/jpeg"],
        ["js", "text/javascript"],
        ["json", "application/json"],
        ["jsonld", "application/ld+json"],
        ["mid", "audio/midi"],
        ["midi", "audio/midi"],
        ["mjs", "text/javascript"],
        ["mp3", "audio/mpeg"],
        ["mp4", "video/mp4"],
        ["mpeg", "video/mpeg"],
        ["mpkg", "application/vnd.apple.installer+xml"],
        ["odp", "application/vnd.oasis.opendocument.presentation"],
        ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
        ["odt", "application/vnd.oasis.opendocument.text"],
        ["oga", "audio/ogg"],
        ["ogv", "video/ogg"],
        ["ogx", "application/ogg"],
        ["opus", "audio/opus"],
        ["otf", "font/otf"],
        ["png", "image/png"],
        ["pdf", "application/pdf"],
        ["php", "application/x-httpd-php"],
        ["ppt", "application/vnd.ms-powerpoint"],
        ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
        ["rar", "application/vnd.rar"],
        ["rtf", "application/rtf"],
        ["sh", "application/x-sh"],
        ["svg", "image/svg+xml"],
        ["swf", "application/x-shockwave-flash"],
        ["tar", "application/x-tar"],
        ["tif", "image/tiff"],
        ["tiff", "image/tiff"],
        ["ts", "video/mp2t"],
        ["ttf", "font/ttf"],
        ["txt", "text/plain"],
        ["vsd", "application/vnd.visio"],
        ["wav", "audio/wav"],
        ["weba", "audio/webm"],
        ["webm", "video/webm"],
        ["webp", "image/webp"],
        ["woff", "font/woff"],
        ["woff2", "font/woff2"],
        ["xhtml", "application/xhtml+xml"],
        ["xls", "application/vnd.ms-excel"],
        ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
        ["xml", "application/xml"],
        ["xul", "application/vnd.mozilla.xul+xml"],
        ["zip", "application/zip"],
        ["7z", "application/x-7z-compressed"],
        ["mkv", "video/x-matroska"],
        ["mov", "video/quicktime"],
        ["msg", "application/vnd.ms-outlook"]
      ]);
      function toFileWithPath(file, path) {
        var f2 = withMimeType(file);
        if (typeof f2.path !== "string") {
          var webkitRelativePath = file.webkitRelativePath;
          Object.defineProperty(f2, "path", {
            value: typeof path === "string" ? path : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : file.name,
            writable: false,
            configurable: false,
            enumerable: true
          });
        }
        return f2;
      }
      function withMimeType(file) {
        var name2 = file.name;
        var hasExtension = name2 && name2.lastIndexOf(".") !== -1;
        if (hasExtension && !file.type) {
          var ext = name2.split(".").pop().toLowerCase();
          var type = COMMON_MIME_TYPES.get(ext);
          if (type) {
            Object.defineProperty(file, "type", {
              value: type,
              writable: false,
              configurable: false,
              enumerable: true
            });
          }
        }
        return file;
      }
      var FILES_TO_IGNORE = [
        ".DS_Store",
        "Thumbs.db"
      ];
      function fromEvent(evt) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            if (isObject$1(evt) && isDataTransfer(evt.dataTransfer)) {
              return [2, getDataTransferFiles(evt.dataTransfer, evt.type)];
            } else if (isChangeEvt(evt)) {
              return [2, getInputFiles(evt)];
            } else if (Array.isArray(evt) && evt.every(function(item) {
              return "getFile" in item && typeof item.getFile === "function";
            })) {
              return [2, getFsHandleFiles(evt)];
            }
            return [2, []];
          });
        });
      }
      function isDataTransfer(value) {
        return isObject$1(value);
      }
      function isChangeEvt(value) {
        return isObject$1(value) && isObject$1(value.target);
      }
      function isObject$1(v2) {
        return typeof v2 === "object" && v2 !== null;
      }
      function getInputFiles(evt) {
        return fromList(evt.target.files).map(function(file) {
          return toFileWithPath(file);
        });
      }
      function getFsHandleFiles(handles) {
        return __awaiter(this, void 0, void 0, function() {
          var files;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, Promise.all(handles.map(function(h2) {
                  return h2.getFile();
                }))];
              case 1:
                files = _a.sent();
                return [2, files.map(function(file) {
                  return toFileWithPath(file);
                })];
            }
          });
        });
      }
      function getDataTransferFiles(dt, type) {
        return __awaiter(this, void 0, void 0, function() {
          var items, files;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (!dt.items)
                  return [3, 2];
                items = fromList(dt.items).filter(function(item) {
                  return item.kind === "file";
                });
                if (type !== "drop") {
                  return [2, items];
                }
                return [4, Promise.all(items.map(toFilePromises))];
              case 1:
                files = _a.sent();
                return [2, noIgnoredFiles(flatten(files))];
              case 2:
                return [2, noIgnoredFiles(fromList(dt.files).map(function(file) {
                  return toFileWithPath(file);
                }))];
            }
          });
        });
      }
      function noIgnoredFiles(files) {
        return files.filter(function(file) {
          return FILES_TO_IGNORE.indexOf(file.name) === -1;
        });
      }
      function fromList(items) {
        if (items === null) {
          return [];
        }
        var files = [];
        for (var i2 = 0; i2 < items.length; i2++) {
          var file = items[i2];
          files.push(file);
        }
        return files;
      }
      function toFilePromises(item) {
        if (typeof item.webkitGetAsEntry !== "function") {
          return fromDataTransferItem(item);
        }
        var entry = item.webkitGetAsEntry();
        if (entry && entry.isDirectory) {
          return fromDirEntry(entry);
        }
        return fromDataTransferItem(item);
      }
      function flatten(items) {
        return items.reduce(function(acc, files) {
          return __spreadArray(__spreadArray([], __read(acc), false), __read(Array.isArray(files) ? flatten(files) : [files]), false);
        }, []);
      }
      function fromDataTransferItem(item) {
        var file = item.getAsFile();
        if (!file) {
          return Promise.reject("".concat(item, " is not a File"));
        }
        var fwp = toFileWithPath(file);
        return Promise.resolve(fwp);
      }
      function fromEntry(entry) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            return [2, entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry)];
          });
        });
      }
      function fromDirEntry(entry) {
        var reader = entry.createReader();
        return new Promise(function(resolve, reject) {
          var entries = [];
          function readEntries() {
            var _this = this;
            reader.readEntries(function(batch) {
              return __awaiter(_this, void 0, void 0, function() {
                var files, err_1, items;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                    case 0:
                      if (!!batch.length)
                        return [3, 5];
                      _a.label = 1;
                    case 1:
                      _a.trys.push([1, 3, , 4]);
                      return [4, Promise.all(entries)];
                    case 2:
                      files = _a.sent();
                      resolve(files);
                      return [3, 4];
                    case 3:
                      err_1 = _a.sent();
                      reject(err_1);
                      return [3, 4];
                    case 4:
                      return [3, 6];
                    case 5:
                      items = Promise.all(batch.map(fromEntry));
                      entries.push(items);
                      readEntries();
                      _a.label = 6;
                    case 6:
                      return [2];
                  }
                });
              });
            }, function(err) {
              reject(err);
            });
          }
          readEntries();
        });
      }
      function fromFileEntry(entry) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            return [2, new Promise(function(resolve, reject) {
              entry.file(function(file) {
                var fwp = toFileWithPath(file, entry.fullPath);
                resolve(fwp);
              }, function(err) {
                reject(err);
              });
            })];
          });
        });
      }
      var _default = function(file, acceptedFiles) {
        if (file && acceptedFiles) {
          var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
          var fileName = file.name || "";
          var mimeType = (file.type || "").toLowerCase();
          var baseMimeType = mimeType.replace(/\/.*$/, "");
          return acceptedFilesArray.some(function(type) {
            var validType = type.trim().toLowerCase();
            if (validType.charAt(0) === ".") {
              return fileName.toLowerCase().endsWith(validType);
            } else if (validType.endsWith("/*")) {
              return baseMimeType === validType.replace(/\/.*$/, "");
            }
            return mimeType === validType;
          });
        }
        return true;
      };
      function _toConsumableArray$1(arr) {
        return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
      }
      function _nonIterableSpread$1() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _iterableToArray$1(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
          return Array.from(iter);
      }
      function _arrayWithoutHoles$1(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray$1(arr);
      }
      function ownKeys$1(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread$1(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          i2 % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
            _defineProperty$1(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$1(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _slicedToArray$1(arr, i2) {
        return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i2) || _unsupportedIterableToArray$1(arr, i2) || _nonIterableRest$1();
      }
      function _nonIterableRest$1() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray$1(o2, minLen) {
        if (!o2)
          return;
        if (typeof o2 === "string")
          return _arrayLikeToArray$1(o2, minLen);
        var n2 = Object.prototype.toString.call(o2).slice(8, -1);
        if (n2 === "Object" && o2.constructor)
          n2 = o2.constructor.name;
        if (n2 === "Map" || n2 === "Set")
          return Array.from(o2);
        if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
          return _arrayLikeToArray$1(o2, minLen);
      }
      function _arrayLikeToArray$1(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
          arr2[i2] = arr[i2];
        }
        return arr2;
      }
      function _iterableToArrayLimit$1(arr, i2) {
        var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i2 && _arr.length === i2)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _arrayWithHoles$1(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      var FILE_INVALID_TYPE = "file-invalid-type";
      var FILE_TOO_LARGE = "file-too-large";
      var FILE_TOO_SMALL = "file-too-small";
      var TOO_MANY_FILES = "too-many-files";
      var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr2(accept) {
        accept = Array.isArray(accept) && accept.length === 1 ? accept[0] : accept;
        var messageSuffix = Array.isArray(accept) ? "one of ".concat(accept.join(", ")) : accept;
        return {
          code: FILE_INVALID_TYPE,
          message: "File type must be ".concat(messageSuffix)
        };
      };
      var getTooLargeRejectionErr = function getTooLargeRejectionErr2(maxSize) {
        return {
          code: FILE_TOO_LARGE,
          message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
        };
      };
      var getTooSmallRejectionErr = function getTooSmallRejectionErr2(minSize) {
        return {
          code: FILE_TOO_SMALL,
          message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
        };
      };
      var TOO_MANY_FILES_REJECTION = {
        code: TOO_MANY_FILES,
        message: "Too many files"
      };
      function fileAccepted(file, accept) {
        var isAcceptable = file.type === "application/x-moz-file" || _default(file, accept);
        return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
      }
      function fileMatchSize(file, minSize, maxSize) {
        if (isDefined(file.size)) {
          if (isDefined(minSize) && isDefined(maxSize)) {
            if (file.size > maxSize)
              return [false, getTooLargeRejectionErr(maxSize)];
            if (file.size < minSize)
              return [false, getTooSmallRejectionErr(minSize)];
          } else if (isDefined(minSize) && file.size < minSize)
            return [false, getTooSmallRejectionErr(minSize)];
          else if (isDefined(maxSize) && file.size > maxSize)
            return [false, getTooLargeRejectionErr(maxSize)];
        }
        return [true, null];
      }
      function isDefined(value) {
        return value !== void 0 && value !== null;
      }
      function allFilesAccepted(_ref) {
        var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;
        if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
          return false;
        }
        return files.every(function(file) {
          var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray$1(_fileAccepted, 1), accepted = _fileAccepted2[0];
          var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray$1(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
          var customErrors = validator ? validator(file) : null;
          return accepted && sizeMatch && !customErrors;
        });
      }
      function isPropagationStopped(event) {
        if (typeof event.isPropagationStopped === "function") {
          return event.isPropagationStopped();
        } else if (typeof event.cancelBubble !== "undefined") {
          return event.cancelBubble;
        }
        return false;
      }
      function isEvtWithFiles(event) {
        if (!event.dataTransfer) {
          return !!event.target && !!event.target.files;
        }
        return Array.prototype.some.call(event.dataTransfer.types, function(type) {
          return type === "Files" || type === "application/x-moz-file";
        });
      }
      function onDocumentDragOver(event) {
        event.preventDefault();
      }
      function isIe(userAgent) {
        return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
      }
      function isEdge(userAgent) {
        return userAgent.indexOf("Edge/") !== -1;
      }
      function isIeOrEdge() {
        var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
        return isIe(userAgent) || isEdge(userAgent);
      }
      function composeEventHandlers() {
        for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
          fns[_key] = arguments[_key];
        }
        return function(event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          return fns.some(function(fn2) {
            if (!isPropagationStopped(event) && fn2) {
              fn2.apply(void 0, [event].concat(args));
            }
            return isPropagationStopped(event);
          });
        };
      }
      function canUseFileSystemAccessAPI() {
        return "showOpenFilePicker" in window;
      }
      function pickerOptionsFromAccept(accept) {
        if (isDefined(accept)) {
          var acceptForPicker = Object.entries(accept).filter(function(_ref2) {
            var _ref3 = _slicedToArray$1(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];
            var ok2 = true;
            if (!isMIMEType(mimeType)) {
              console.warn('Skipped "'.concat(mimeType, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));
              ok2 = false;
            }
            if (!Array.isArray(ext) || !ext.every(isExt)) {
              console.warn('Skipped "'.concat(mimeType, '" because an invalid file extension was provided.'));
              ok2 = false;
            }
            return ok2;
          }).reduce(function(agg, _ref4) {
            var _ref5 = _slicedToArray$1(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];
            return _objectSpread$1(_objectSpread$1({}, agg), {}, _defineProperty$1({}, mimeType, ext));
          }, {});
          return [{
            description: "Files",
            accept: acceptForPicker
          }];
        }
        return accept;
      }
      function acceptPropAsAcceptAttr(accept) {
        if (isDefined(accept)) {
          return Object.entries(accept).reduce(function(a2, _ref6) {
            var _ref7 = _slicedToArray$1(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];
            return [].concat(_toConsumableArray$1(a2), [mimeType], _toConsumableArray$1(ext));
          }, []).filter(function(v2) {
            return isMIMEType(v2) || isExt(v2);
          }).join(",");
        }
        return void 0;
      }
      function isAbort(v2) {
        return v2 instanceof DOMException && (v2.name === "AbortError" || v2.code === v2.ABORT_ERR);
      }
      function isSecurityError(v2) {
        return v2 instanceof DOMException && (v2.name === "SecurityError" || v2.code === v2.SECURITY_ERR);
      }
      function isMIMEType(v2) {
        return v2 === "audio/*" || v2 === "video/*" || v2 === "image/*" || v2 === "text/*" || /\w+\/[-+.\w]+/g.test(v2);
      }
      function isExt(v2) {
        return /^.*\.[\w]+$/.test(v2);
      }
      var _excluded = ["children"], _excluded2 = ["open"], _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"], _excluded4 = ["refKey", "onChange", "onClick"];
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
          return Array.from(iter);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _slicedToArray(arr, i2) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o2, minLen) {
        if (!o2)
          return;
        if (typeof o2 === "string")
          return _arrayLikeToArray(o2, minLen);
        var n2 = Object.prototype.toString.call(o2).slice(8, -1);
        if (n2 === "Object" && o2.constructor)
          n2 = o2.constructor.name;
        if (n2 === "Map" || n2 === "Set")
          return Array.from(o2);
        if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
          return _arrayLikeToArray(o2, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
          arr2[i2] = arr[i2];
        }
        return arr2;
      }
      function _iterableToArrayLimit(arr, i2) {
        var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i2 && _arr.length === i2)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2] != null ? arguments[i2] : {};
          i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose$1(source, excluded);
        var key, i2;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
            key = sourceSymbolKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$1(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i2;
        for (i2 = 0; i2 < sourceKeys.length; i2++) {
          key = sourceKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var Dropzone = react.exports.forwardRef(function(_ref, ref) {
        var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded);
        var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded2);
        react.exports.useImperativeHandle(ref, function() {
          return {
            open
          };
        }, [open]);
        return React__default.createElement(react.exports.Fragment, null, children(_objectSpread(_objectSpread({}, props), {}, {
          open
        })));
      });
      Dropzone.displayName = "Dropzone";
      var defaultProps = {
        disabled: false,
        getFilesFromEvent: fromEvent,
        maxSize: Infinity,
        minSize: 0,
        multiple: true,
        maxFiles: 0,
        preventDropOnDocument: true,
        noClick: false,
        noKeyboard: false,
        noDrag: false,
        noDragEventsBubbling: false,
        validator: null,
        useFsAccessApi: true,
        autoFocus: false
      };
      Dropzone.defaultProps = defaultProps;
      Dropzone.propTypes = {
        children: PropTypes$1.func,
        accept: PropTypes$1.objectOf(PropTypes$1.arrayOf(PropTypes$1.string)),
        multiple: PropTypes$1.bool,
        preventDropOnDocument: PropTypes$1.bool,
        noClick: PropTypes$1.bool,
        noKeyboard: PropTypes$1.bool,
        noDrag: PropTypes$1.bool,
        noDragEventsBubbling: PropTypes$1.bool,
        minSize: PropTypes$1.number,
        maxSize: PropTypes$1.number,
        maxFiles: PropTypes$1.number,
        disabled: PropTypes$1.bool,
        getFilesFromEvent: PropTypes$1.func,
        onFileDialogCancel: PropTypes$1.func,
        onFileDialogOpen: PropTypes$1.func,
        useFsAccessApi: PropTypes$1.bool,
        autoFocus: PropTypes$1.bool,
        onDragEnter: PropTypes$1.func,
        onDragLeave: PropTypes$1.func,
        onDragOver: PropTypes$1.func,
        onDrop: PropTypes$1.func,
        onDropAccepted: PropTypes$1.func,
        onDropRejected: PropTypes$1.func,
        onError: PropTypes$1.func,
        validator: PropTypes$1.func
      };
      var initialState = {
        isFocused: false,
        isFileDialogActive: false,
        isDragActive: false,
        isDragAccept: false,
        isDragReject: false,
        acceptedFiles: [],
        fileRejections: []
      };
      function useDropzone() {
        var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var _defaultProps$props = _objectSpread(_objectSpread({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError = _defaultProps$props.onError, validator = _defaultProps$props.validator;
        var acceptAttr = react.exports.useMemo(function() {
          return acceptPropAsAcceptAttr(accept);
        }, [accept]);
        var pickerTypes = react.exports.useMemo(function() {
          return pickerOptionsFromAccept(accept);
        }, [accept]);
        var onFileDialogOpenCb = react.exports.useMemo(function() {
          return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop;
        }, [onFileDialogOpen]);
        var onFileDialogCancelCb = react.exports.useMemo(function() {
          return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop;
        }, [onFileDialogCancel]);
        var rootRef = react.exports.useRef(null);
        var inputRef = react.exports.useRef(null);
        var _useReducer = react.exports.useReducer(reducer, initialState), _useReducer2 = _slicedToArray(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
        var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;
        var fsAccessApiWorksRef = react.exports.useRef(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI());
        var onWindowFocus = function onWindowFocus2() {
          if (!fsAccessApiWorksRef.current && isFileDialogActive) {
            setTimeout(function() {
              if (inputRef.current) {
                var files = inputRef.current.files;
                if (!files.length) {
                  dispatch({
                    type: "closeDialog"
                  });
                  onFileDialogCancelCb();
                }
              }
            }, 300);
          }
        };
        react.exports.useEffect(function() {
          window.addEventListener("focus", onWindowFocus, false);
          return function() {
            window.removeEventListener("focus", onWindowFocus, false);
          };
        }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
        var dragTargetsRef = react.exports.useRef([]);
        var onDocumentDrop = function onDocumentDrop2(event) {
          if (rootRef.current && rootRef.current.contains(event.target)) {
            return;
          }
          event.preventDefault();
          dragTargetsRef.current = [];
        };
        react.exports.useEffect(function() {
          if (preventDropOnDocument) {
            document.addEventListener("dragover", onDocumentDragOver, false);
            document.addEventListener("drop", onDocumentDrop, false);
          }
          return function() {
            if (preventDropOnDocument) {
              document.removeEventListener("dragover", onDocumentDragOver);
              document.removeEventListener("drop", onDocumentDrop);
            }
          };
        }, [rootRef, preventDropOnDocument]);
        react.exports.useEffect(function() {
          if (!disabled && autoFocus && rootRef.current) {
            rootRef.current.focus();
          }
          return function() {
          };
        }, [rootRef, autoFocus, disabled]);
        var onErrCb = react.exports.useCallback(function(e2) {
          if (onError) {
            onError(e2);
          } else {
            console.error(e2);
          }
        }, [onError]);
        var onDragEnterCb = react.exports.useCallback(function(event) {
          event.preventDefault();
          event.persist();
          stopPropagation(event);
          dragTargetsRef.current = [].concat(_toConsumableArray(dragTargetsRef.current), [event.target]);
          if (isEvtWithFiles(event)) {
            Promise.resolve(getFilesFromEvent(event)).then(function(files) {
              if (isPropagationStopped(event) && !noDragEventsBubbling) {
                return;
              }
              var fileCount = files.length;
              var isDragAccept = fileCount > 0 && allFilesAccepted({
                files,
                accept: acceptAttr,
                minSize,
                maxSize,
                multiple,
                maxFiles,
                validator
              });
              var isDragReject = fileCount > 0 && !isDragAccept;
              dispatch({
                isDragAccept,
                isDragReject,
                isDragActive: true,
                type: "setDraggedFiles"
              });
              if (onDragEnter) {
                onDragEnter(event);
              }
            }).catch(function(e2) {
              return onErrCb(e2);
            });
          }
        }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
        var onDragOverCb = react.exports.useCallback(function(event) {
          event.preventDefault();
          event.persist();
          stopPropagation(event);
          var hasFiles = isEvtWithFiles(event);
          if (hasFiles && event.dataTransfer) {
            try {
              event.dataTransfer.dropEffect = "copy";
            } catch (_unused) {
            }
          }
          if (hasFiles && onDragOver) {
            onDragOver(event);
          }
          return false;
        }, [onDragOver, noDragEventsBubbling]);
        var onDragLeaveCb = react.exports.useCallback(function(event) {
          event.preventDefault();
          event.persist();
          stopPropagation(event);
          var targets = dragTargetsRef.current.filter(function(target) {
            return rootRef.current && rootRef.current.contains(target);
          });
          var targetIdx = targets.indexOf(event.target);
          if (targetIdx !== -1) {
            targets.splice(targetIdx, 1);
          }
          dragTargetsRef.current = targets;
          if (targets.length > 0) {
            return;
          }
          dispatch({
            type: "setDraggedFiles",
            isDragActive: false,
            isDragAccept: false,
            isDragReject: false
          });
          if (isEvtWithFiles(event) && onDragLeave) {
            onDragLeave(event);
          }
        }, [rootRef, onDragLeave, noDragEventsBubbling]);
        var setFiles = react.exports.useCallback(function(files, event) {
          var acceptedFiles = [];
          var fileRejections = [];
          files.forEach(function(file) {
            var _fileAccepted = fileAccepted(file, acceptAttr), _fileAccepted2 = _slicedToArray(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
            var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
            var customErrors = validator ? validator(file) : null;
            if (accepted && sizeMatch && !customErrors) {
              acceptedFiles.push(file);
            } else {
              var errors = [acceptError, sizeError];
              if (customErrors) {
                errors = errors.concat(customErrors);
              }
              fileRejections.push({
                file,
                errors: errors.filter(function(e2) {
                  return e2;
                })
              });
            }
          });
          if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
            acceptedFiles.forEach(function(file) {
              fileRejections.push({
                file,
                errors: [TOO_MANY_FILES_REJECTION]
              });
            });
            acceptedFiles.splice(0);
          }
          dispatch({
            acceptedFiles,
            fileRejections,
            type: "setFiles"
          });
          if (onDrop) {
            onDrop(acceptedFiles, fileRejections, event);
          }
          if (fileRejections.length > 0 && onDropRejected) {
            onDropRejected(fileRejections, event);
          }
          if (acceptedFiles.length > 0 && onDropAccepted) {
            onDropAccepted(acceptedFiles, event);
          }
        }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
        var onDropCb = react.exports.useCallback(function(event) {
          event.preventDefault();
          event.persist();
          stopPropagation(event);
          dragTargetsRef.current = [];
          if (isEvtWithFiles(event)) {
            Promise.resolve(getFilesFromEvent(event)).then(function(files) {
              if (isPropagationStopped(event) && !noDragEventsBubbling) {
                return;
              }
              setFiles(files, event);
            }).catch(function(e2) {
              return onErrCb(e2);
            });
          }
          dispatch({
            type: "reset"
          });
        }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]);
        var openFileDialog = react.exports.useCallback(function() {
          if (fsAccessApiWorksRef.current) {
            dispatch({
              type: "openDialog"
            });
            onFileDialogOpenCb();
            var opts = {
              multiple,
              types: pickerTypes
            };
            window.showOpenFilePicker(opts).then(function(handles) {
              return getFilesFromEvent(handles);
            }).then(function(files) {
              setFiles(files, null);
              dispatch({
                type: "closeDialog"
              });
            }).catch(function(e2) {
              if (isAbort(e2)) {
                onFileDialogCancelCb(e2);
                dispatch({
                  type: "closeDialog"
                });
              } else if (isSecurityError(e2)) {
                fsAccessApiWorksRef.current = false;
                if (inputRef.current) {
                  inputRef.current.value = null;
                  inputRef.current.click();
                } else {
                  onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
                }
              } else {
                onErrCb(e2);
              }
            });
            return;
          }
          if (inputRef.current) {
            dispatch({
              type: "openDialog"
            });
            onFileDialogOpenCb();
            inputRef.current.value = null;
            inputRef.current.click();
          }
        }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]);
        var onKeyDownCb = react.exports.useCallback(function(event) {
          if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
            return;
          }
          if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
            event.preventDefault();
            openFileDialog();
          }
        }, [rootRef, openFileDialog]);
        var onFocusCb = react.exports.useCallback(function() {
          dispatch({
            type: "focus"
          });
        }, []);
        var onBlurCb = react.exports.useCallback(function() {
          dispatch({
            type: "blur"
          });
        }, []);
        var onClickCb = react.exports.useCallback(function() {
          if (noClick) {
            return;
          }
          if (isIeOrEdge()) {
            setTimeout(openFileDialog, 0);
          } else {
            openFileDialog();
          }
        }, [noClick, openFileDialog]);
        var composeHandler = function composeHandler2(fn2) {
          return disabled ? null : fn2;
        };
        var composeKeyboardHandler = function composeKeyboardHandler2(fn2) {
          return noKeyboard ? null : composeHandler(fn2);
        };
        var composeDragHandler = function composeDragHandler2(fn2) {
          return noDrag ? null : composeHandler(fn2);
        };
        var stopPropagation = function stopPropagation2(event) {
          if (noDragEventsBubbling) {
            event.stopPropagation();
          }
        };
        var getRootProps = react.exports.useMemo(function() {
          return function() {
            var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter2 = _ref2.onDragEnter, onDragOver2 = _ref2.onDragOver, onDragLeave2 = _ref2.onDragLeave, onDrop2 = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded3);
            return _objectSpread(_objectSpread(_defineProperty({
              onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
              onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
              onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
              onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
              onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter2, onDragEnterCb)),
              onDragOver: composeDragHandler(composeEventHandlers(onDragOver2, onDragOverCb)),
              onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave2, onDragLeaveCb)),
              onDrop: composeDragHandler(composeEventHandlers(onDrop2, onDropCb)),
              role: typeof role === "string" && role !== "" ? role : "presentation"
            }, refKey, rootRef), !disabled && !noKeyboard ? {
              tabIndex: 0
            } : {}), rest);
          };
        }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
        var onInputElementClick = react.exports.useCallback(function(event) {
          event.stopPropagation();
        }, []);
        var getInputProps = react.exports.useMemo(function() {
          return function() {
            var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);
            var inputProps = _defineProperty({
              accept: acceptAttr,
              multiple,
              type: "file",
              style: {
                display: "none"
              },
              onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
              onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
              tabIndex: -1
            }, refKey, inputRef);
            return _objectSpread(_objectSpread({}, inputProps), rest);
          };
        }, [inputRef, accept, multiple, onDropCb, disabled]);
        return _objectSpread(_objectSpread({}, state), {}, {
          isFocused: isFocused && !disabled,
          getRootProps,
          getInputProps,
          rootRef,
          inputRef,
          open: composeHandler(openFileDialog)
        });
      }
      function reducer(state, action) {
        switch (action.type) {
          case "focus":
            return _objectSpread(_objectSpread({}, state), {}, {
              isFocused: true
            });
          case "blur":
            return _objectSpread(_objectSpread({}, state), {}, {
              isFocused: false
            });
          case "openDialog":
            return _objectSpread(_objectSpread({}, initialState), {}, {
              isFileDialogActive: true
            });
          case "closeDialog":
            return _objectSpread(_objectSpread({}, state), {}, {
              isFileDialogActive: false
            });
          case "setDraggedFiles":
            return _objectSpread(_objectSpread({}, state), {}, {
              isDragActive: action.isDragActive,
              isDragAccept: action.isDragAccept,
              isDragReject: action.isDragReject
            });
          case "setFiles":
            return _objectSpread(_objectSpread({}, state), {}, {
              acceptedFiles: action.acceptedFiles,
              fileRejections: action.fileRejections
            });
          case "reset":
            return _objectSpread({}, initialState);
          default:
            return state;
        }
      }
      function noop() {
      }
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a2, b2) {
        return Object.prototype.hasOwnProperty.call(a2, b2);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k2;
          for (k2 in obj) {
            if (hasOwnProp(obj, k2)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn2) {
        var res = [], i2, arrLen = arr.length;
        for (i2 = 0; i2 < arrLen; ++i2) {
          res.push(fn2(arr[i2], i2));
        }
        return res;
      }
      function extend(a2, b2) {
        for (var i2 in b2) {
          if (hasOwnProp(b2, i2)) {
            a2[i2] = b2[i2];
          }
        }
        if (hasOwnProp(b2, "toString")) {
          a2.toString = b2.toString;
        }
        if (hasOwnProp(b2, "valueOf")) {
          a2.valueOf = b2.valueOf;
        }
        return a2;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m2) {
        if (m2._pf == null) {
          m2._pf = defaultParsingFlags();
        }
        return m2._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t2 = Object(this), len = t2.length >>> 0, i2;
          for (i2 = 0; i2 < len; i2++) {
            if (i2 in t2 && fun.call(this, t2[i2], i2, t2)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m2) {
        if (m2._isValid == null) {
          var flags = getParsingFlags(m2), parsedParts = some.call(flags.parsedDateParts, function(i2) {
            return i2 != null;
          }), isNowValid = !isNaN(m2._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m2._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m2)) {
            m2._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m2._isValid;
      }
      function createInvalid(flags) {
        var m2 = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m2), flags);
        } else {
          getParsingFlags(m2).userInvalidated = true;
        }
        return m2;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i2, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i2 = 0; i2 < momentPropertiesLen; i2++) {
            prop = momentProperties[i2];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config22) {
        copyConfig(this, config22);
        this._d = new Date(config22._d != null ? config22._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn2) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i2, key, argLen = arguments.length;
            for (i2 = 0; i2 < argLen; i2++) {
              arg = "";
              if (typeof arguments[i2] === "object") {
                arg += "\n[" + i2 + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i2];
              }
              args.push(arg);
            }
            warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
            firstTime = false;
          }
          return fn2.apply(this, arguments);
        }, fn2);
      }
      var deprecations = {};
      function deprecateSimple(name2, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name2, msg);
        }
        if (!deprecations[name2]) {
          warn(msg);
          deprecations[name2] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config22) {
        var prop, i2;
        for (i2 in config22) {
          if (hasOwnProp(config22, i2)) {
            prop = config22[i2];
            if (isFunction(prop)) {
              this[i2] = prop;
            } else {
              this["_" + i2] = prop;
            }
          }
        }
        this._config = config22;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config22) {
        if (config22 != null) {
          this.set(config22);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i2, res = [];
          for (i2 in obj) {
            if (hasOwnProp(obj, i2)) {
              res.push(i2);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token2);
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i2, length;
        for (i2 = 0, length = array.length; i2 < length; i2++) {
          if (formatTokenFunctions[array[i2]]) {
            array[i2] = formatTokenFunctions[array[i2]];
          } else {
            array[i2] = removeFormattingTokens(array[i2]);
          }
        }
        return function(mom) {
          var output = "", i3;
          for (i3 = 0; i3 < length; i3++) {
            output += isFunction(array[i3]) ? array[i3].call(mom, format2) : array[i3];
          }
          return output;
        };
      }
      function formatMoment(m2, format2) {
        if (!m2.isValid()) {
          return m2.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m2.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m2);
      }
      function expandFormat(format2, locale2) {
        var i2 = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i2 >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i2 -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string2, isFuture) {
        var output = this._relativeTime[string2];
        return isFunction(output) ? output(number, withoutSuffix, string2, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u2;
        for (u2 in unitsObj) {
          if (hasOwnProp(unitsObj, u2)) {
            units.push({ unit: u2, priority: priorities[u2] });
          }
        }
        units.sort(function(a2, b2) {
          return a2.priority - b2.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
          for (i2 = 0; i2 < prioritizedLen; i2++) {
            this[prioritized[i2].unit](units[prioritized[i2].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config22) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config22._strict, config22._locale);
      }
      function unescapeFormat(s2) {
        return regexEscape(s2.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }
      function regexEscape(s2) {
        return s2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i2, func = callback, tokenLen;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token2.length;
        for (i2 = 0; i2 < tokenLen; i2++) {
          tokens[token2[i2]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config22, token3) {
          config22._w = config22._w || {};
          callback(input, config22._w, config22, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config22) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config22._a, config22, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n2, x2) {
        return (n2 % x2 + x2) % x2;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o2) {
          var i2;
          for (i2 = 0; i2 < this.length; ++i2) {
            if (this[i2] === o2) {
              return i2;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config22, token2) {
        var month = config22._locale.monthsParse(input, token2, config22._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config22).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m2, format2) {
        if (!m2) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m2.month()];
      }
      function localeMonthsShort(m2, format2) {
        if (!m2) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m2.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i2, ii2, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i2 = 0; i2 < 12; ++i2) {
            mom = createUTC([2e3, i2]);
            this._shortMonthsParse[i2] = this.monthsShort(mom, "").toLocaleLowerCase();
            this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii2 = indexOf.call(this._shortMonthsParse, llc);
            return ii2 !== -1 ? ii2 : null;
          } else {
            ii2 = indexOf.call(this._longMonthsParse, llc);
            return ii2 !== -1 ? ii2 : null;
          }
        } else {
          if (format2 === "MMM") {
            ii2 = indexOf.call(this._shortMonthsParse, llc);
            if (ii2 !== -1) {
              return ii2;
            }
            ii2 = indexOf.call(this._longMonthsParse, llc);
            return ii2 !== -1 ? ii2 : null;
          } else {
            ii2 = indexOf.call(this._longMonthsParse, llc);
            if (ii2 !== -1) {
              return ii2;
            }
            ii2 = indexOf.call(this._shortMonthsParse, llc);
            return ii2 !== -1 ? ii2 : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i2, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i2 = 0; i2 < 12; i2++) {
          mom = createUTC([2e3, i2]);
          if (strict && !this._longMonthsParse[i2]) {
            this._longMonthsParse[i2] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
            this._shortMonthsParse[i2] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
          }
          if (!strict && !this._monthsParse[i2]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
            return i2;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
            return i2;
          } else if (!strict && this._monthsParse[i2].test(monthName)) {
            return i2;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a2, b2) {
          return b2.length - a2.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
        for (i2 = 0; i2 < 12; i2++) {
          mom = createUTC([2e3, i2]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i2 = 0; i2 < 12; i2++) {
          shortPieces[i2] = regexEscape(shortPieces[i2]);
          longPieces[i2] = regexEscape(longPieces[i2]);
        }
        for (i2 = 0; i2 < 24; i2++) {
          mixedPieces[i2] = regexEscape(mixedPieces[i2]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
      }
      addFormatToken("Y", 0, 0, function() {
        var y2 = this.year();
        return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y2, m2, d2, h2, M2, s2, ms) {
        var date;
        if (y2 < 100 && y2 >= 0) {
          date = new Date(y2 + 400, m2, d2, h2, M2, s2, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y2);
          }
        } else {
          date = new Date(y2, m2, d2, h2, M2, s2, ms);
        }
        return date;
      }
      function createUTCDate(y2) {
        var date, args;
        if (y2 < 100 && y2 >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y2 + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y2);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config22, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      });
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        doy: 6
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config22, token2) {
        var weekday = config22._locale.weekdaysParse(input, token2, config22._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config22).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config22, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n2) {
        return ws.slice(n2, 7).concat(ws.slice(0, n2));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m2, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
      }
      function localeWeekdaysShort(m2) {
        return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m2) {
        return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i2, ii2, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i2 = 0; i2 < 7; ++i2) {
            mom = createUTC([2e3, 1]).day(i2);
            this._minWeekdaysParse[i2] = this.weekdaysMin(mom, "").toLocaleLowerCase();
            this._shortWeekdaysParse[i2] = this.weekdaysShort(mom, "").toLocaleLowerCase();
            this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii2 = indexOf.call(this._weekdaysParse, llc);
            return ii2 !== -1 ? ii2 : null;
          } else if (format2 === "ddd") {
            ii2 = indexOf.call(this._shortWeekdaysParse, llc);
            return ii2 !== -1 ? ii2 : null;
          } else {
            ii2 = indexOf.call(this._minWeekdaysParse, llc);
            return ii2 !== -1 ? ii2 : null;
          }
        } else {
          if (format2 === "dddd") {
            ii2 = indexOf.call(this._weekdaysParse, llc);
            if (ii2 !== -1) {
              return ii2;
            }
            ii2 = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii2 !== -1) {
              return ii2;
            }
            ii2 = indexOf.call(this._minWeekdaysParse, llc);
            return ii2 !== -1 ? ii2 : null;
          } else if (format2 === "ddd") {
            ii2 = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii2 !== -1) {
              return ii2;
            }
            ii2 = indexOf.call(this._weekdaysParse, llc);
            if (ii2 !== -1) {
              return ii2;
            }
            ii2 = indexOf.call(this._minWeekdaysParse, llc);
            return ii2 !== -1 ? ii2 : null;
          } else {
            ii2 = indexOf.call(this._minWeekdaysParse, llc);
            if (ii2 !== -1) {
              return ii2;
            }
            ii2 = indexOf.call(this._weekdaysParse, llc);
            if (ii2 !== -1) {
              return ii2;
            }
            ii2 = indexOf.call(this._shortWeekdaysParse, llc);
            return ii2 !== -1 ? ii2 : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i2, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i2 = 0; i2 < 7; i2++) {
          mom = createUTC([2e3, 1]).day(i2);
          if (strict && !this._fullWeekdaysParse[i2]) {
            this._fullWeekdaysParse[i2] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
            this._shortWeekdaysParse[i2] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
            this._minWeekdaysParse[i2] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
          }
          if (!this._weekdaysParse[i2]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
            return i2;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a2, b2) {
          return b2.length - a2.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
        for (i2 = 0; i2 < 7; i2++) {
          mom = createUTC([2e3, 1]).day(i2);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config22) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config22) {
        config22._isPm = config22._locale.isPM(input);
        config22._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config22) {
        array[HOUR] = toInt(input);
        getParsingFlags(config22).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config22) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config22).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config22) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config22).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config22) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config22) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i2, minl = Math.min(arr1.length, arr2.length);
        for (i2 = 0; i2 < minl; i2 += 1) {
          if (arr1[i2] !== arr2[i2]) {
            return i2;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i2 = 0, j2, next, locale2, split;
        while (i2 < names.length) {
          split = normalizeLocale(names[i2]).split("-");
          j2 = split.length;
          next = normalizeLocale(names[i2 + 1]);
          next = next ? next.split("-") : null;
          while (j2 > 0) {
            locale2 = loadLocale(split.slice(0, j2).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j2 && commonPrefix(split, next) >= j2 - 1) {
              break;
            }
            j2--;
          }
          i2++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name2) {
        return name2.match("^[^/\\\\]*$") != null;
      }
      function loadLocale(name2) {
        var oldLocale = null, aliasedRequire;
        if (locales[name2] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name2)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = __require;
            aliasedRequire("./locale/" + name2);
            getSetGlobalLocale(oldLocale);
          } catch (e2) {
            locales[name2] = null;
          }
        }
        return locales[name2];
      }
      function getSetGlobalLocale(key, values2) {
        var data;
        if (key) {
          if (isUndefined(values2)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values2);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn("Locale " + key + " not found. Did you forget to load it?");
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name2, config22) {
        if (config22 !== null) {
          var locale2, parentConfig = baseConfig;
          config22.abbr = name2;
          if (locales[name2] != null) {
            deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
            parentConfig = locales[name2]._config;
          } else if (config22.parentLocale != null) {
            if (locales[config22.parentLocale] != null) {
              parentConfig = locales[config22.parentLocale]._config;
            } else {
              locale2 = loadLocale(config22.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config22.parentLocale]) {
                  localeFamilies[config22.parentLocale] = [];
                }
                localeFamilies[config22.parentLocale].push({
                  name: name2,
                  config: config22
                });
                return null;
              }
            }
          }
          locales[name2] = new Locale(mergeConfigs(parentConfig, config22));
          if (localeFamilies[name2]) {
            localeFamilies[name2].forEach(function(x2) {
              defineLocale(x2.name, x2.config);
            });
          }
          getSetGlobalLocale(name2);
          return locales[name2];
        } else {
          delete locales[name2];
          return null;
        }
      }
      function updateLocale(name2, config22) {
        if (config22 != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name2] != null && locales[name2].parentLocale != null) {
            locales[name2].set(mergeConfigs(locales[name2]._config, config22));
          } else {
            tmpLocale = loadLocale(name2);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config22 = mergeConfigs(parentConfig, config22);
            if (tmpLocale == null) {
              config22.abbr = name2;
            }
            locale2 = new Locale(config22);
            locale2.parentLocale = locales[name2];
            locales[name2] = locale2;
          }
          getSetGlobalLocale(name2);
        } else {
          if (locales[name2] != null) {
            if (locales[name2].parentLocale != null) {
              locales[name2] = locales[name2].parentLocale;
              if (name2 === getSetGlobalLocale()) {
                getSetGlobalLocale(name2);
              }
            } else if (locales[name2] != null) {
              delete locales[name2];
            }
          }
        }
        return locales[name2];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m2) {
        var overflow, a2 = m2._a;
        if (a2 && getParsingFlags(m2).overflow === -2) {
          overflow = a2[MONTH] < 0 || a2[MONTH] > 11 ? MONTH : a2[DATE] < 1 || a2[DATE] > daysInMonth(a2[YEAR], a2[MONTH]) ? DATE : a2[HOUR] < 0 || a2[HOUR] > 24 || a2[HOUR] === 24 && (a2[MINUTE] !== 0 || a2[SECOND] !== 0 || a2[MILLISECOND] !== 0) ? HOUR : a2[MINUTE] < 0 || a2[MINUTE] > 59 ? MINUTE : a2[SECOND] < 0 || a2[SECOND] > 59 ? SECOND : a2[MILLISECOND] < 0 || a2[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m2)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m2)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m2)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m2).overflow = overflow;
        }
        return m2;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config22) {
        var i2, l2, string2 = config22._i, match5 = extendedIsoRegex.exec(string2) || basicIsoRegex.exec(string2), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match5) {
          getParsingFlags(config22).iso = true;
          for (i2 = 0, l2 = isoDatesLen; i2 < l2; i2++) {
            if (isoDates[i2][1].exec(match5[1])) {
              dateFormat = isoDates[i2][0];
              allowTime = isoDates[i2][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config22._isValid = false;
            return;
          }
          if (match5[3]) {
            for (i2 = 0, l2 = isoTimesLen; i2 < l2; i2++) {
              if (isoTimes[i2][1].exec(match5[3])) {
                timeFormat = (match5[2] || " ") + isoTimes[i2][0];
                break;
              }
            }
            if (timeFormat == null) {
              config22._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config22._isValid = false;
            return;
          }
          if (match5[4]) {
            if (tzRegex.exec(match5[4])) {
              tzFormat = "Z";
            } else {
              config22._isValid = false;
              return;
            }
          }
          config22._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config22);
        } else {
          config22._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s2) {
        return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config22) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config22).weekdayMismatch = true;
            config22._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m2 = hm % 100, h2 = (hm - m2) / 100;
          return h2 * 60 + m2;
        }
      }
      function configFromRFC2822(config22) {
        var match5 = rfc2822.exec(preprocessRFC2822(config22._i)), parsedArray;
        if (match5) {
          parsedArray = extractFromRFC2822Strings(match5[4], match5[3], match5[2], match5[5], match5[6], match5[7]);
          if (!checkWeekday(match5[1], parsedArray, config22)) {
            return;
          }
          config22._a = parsedArray;
          config22._tzm = calculateOffset(match5[8], match5[9], match5[10]);
          config22._d = createUTCDate.apply(null, config22._a);
          config22._d.setUTCMinutes(config22._d.getUTCMinutes() - config22._tzm);
          getParsingFlags(config22).rfc2822 = true;
        } else {
          config22._isValid = false;
        }
      }
      function configFromString(config22) {
        var matched = aspNetJsonRegex.exec(config22._i);
        if (matched !== null) {
          config22._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config22);
        if (config22._isValid === false) {
          delete config22._isValid;
        } else {
          return;
        }
        configFromRFC2822(config22);
        if (config22._isValid === false) {
          delete config22._isValid;
        } else {
          return;
        }
        if (config22._strict) {
          config22._isValid = false;
        } else {
          hooks.createFromInputFallback(config22);
        }
      }
      hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config22) {
        config22._d = new Date(config22._i + (config22._useUTC ? " UTC" : ""));
      });
      function defaults(a2, b2, c2) {
        if (a2 != null) {
          return a2;
        }
        if (b2 != null) {
          return b2;
        }
        return c2;
      }
      function currentDateArray(config22) {
        var nowValue = new Date(hooks.now());
        if (config22._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config22) {
        var i2, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config22._d) {
          return;
        }
        currentDate = currentDateArray(config22);
        if (config22._w && config22._a[DATE] == null && config22._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config22);
        }
        if (config22._dayOfYear != null) {
          yearToUse = defaults(config22._a[YEAR], currentDate[YEAR]);
          if (config22._dayOfYear > daysInYear(yearToUse) || config22._dayOfYear === 0) {
            getParsingFlags(config22)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config22._dayOfYear);
          config22._a[MONTH] = date.getUTCMonth();
          config22._a[DATE] = date.getUTCDate();
        }
        for (i2 = 0; i2 < 3 && config22._a[i2] == null; ++i2) {
          config22._a[i2] = input[i2] = currentDate[i2];
        }
        for (; i2 < 7; i2++) {
          config22._a[i2] = input[i2] = config22._a[i2] == null ? i2 === 2 ? 1 : 0 : config22._a[i2];
        }
        if (config22._a[HOUR] === 24 && config22._a[MINUTE] === 0 && config22._a[SECOND] === 0 && config22._a[MILLISECOND] === 0) {
          config22._nextDay = true;
          config22._a[HOUR] = 0;
        }
        config22._d = (config22._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config22._useUTC ? config22._d.getUTCDay() : config22._d.getDay();
        if (config22._tzm != null) {
          config22._d.setUTCMinutes(config22._d.getUTCMinutes() - config22._tzm);
        }
        if (config22._nextDay) {
          config22._a[HOUR] = 24;
        }
        if (config22._w && typeof config22._w.d !== "undefined" && config22._w.d !== expectedWeekday) {
          getParsingFlags(config22).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config22) {
        var w2, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w2 = config22._w;
        if (w2.GG != null || w2.W != null || w2.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(w2.GG, config22._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w2.W, 1);
          weekday = defaults(w2.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config22._locale._week.dow;
          doy = config22._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w2.gg, config22._a[YEAR], curWeek.year);
          week = defaults(w2.w, curWeek.week);
          if (w2.d != null) {
            weekday = w2.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w2.e != null) {
            weekday = w2.e + dow;
            if (w2.e < 0 || w2.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config22)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config22)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config22._a[YEAR] = temp.year;
          config22._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config22) {
        if (config22._f === hooks.ISO_8601) {
          configFromISO(config22);
          return;
        }
        if (config22._f === hooks.RFC_2822) {
          configFromRFC2822(config22);
          return;
        }
        config22._a = [];
        getParsingFlags(config22).empty = true;
        var string2 = "" + config22._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string2.length, totalParsedInputLength = 0, era, tokenLen;
        tokens2 = expandFormat(config22._f, config22._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i2 = 0; i2 < tokenLen; i2++) {
          token2 = tokens2[i2];
          parsedInput = (string2.match(getParseRegexForToken(token2, config22)) || [])[0];
          if (parsedInput) {
            skipped = string2.substr(0, string2.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config22).unusedInput.push(skipped);
            }
            string2 = string2.slice(string2.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config22).empty = false;
            } else {
              getParsingFlags(config22).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config22);
          } else if (config22._strict && !parsedInput) {
            getParsingFlags(config22).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config22).charsLeftOver = stringLength - totalParsedInputLength;
        if (string2.length > 0) {
          getParsingFlags(config22).unusedInput.push(string2);
        }
        if (config22._a[HOUR] <= 12 && getParsingFlags(config22).bigHour === true && config22._a[HOUR] > 0) {
          getParsingFlags(config22).bigHour = void 0;
        }
        getParsingFlags(config22).parsedDateParts = config22._a.slice(0);
        getParsingFlags(config22).meridiem = config22._meridiem;
        config22._a[HOUR] = meridiemFixWrap(config22._locale, config22._a[HOUR], config22._meridiem);
        era = getParsingFlags(config22).era;
        if (era !== null) {
          config22._a[YEAR] = config22._locale.erasConvertYear(era, config22._a[YEAR]);
        }
        configFromArray(config22);
        checkOverflow(config22);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config22) {
        var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config22._f.length;
        if (configfLen === 0) {
          getParsingFlags(config22).invalidFormat = true;
          config22._d = new Date(NaN);
          return;
        }
        for (i2 = 0; i2 < configfLen; i2++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config22);
          if (config22._useUTC != null) {
            tempConfig._useUTC = config22._useUTC;
          }
          tempConfig._f = config22._f[i2];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config22, bestMoment || tempConfig);
      }
      function configFromObject(config22) {
        if (config22._d) {
          return;
        }
        var i2 = normalizeObjectUnits(config22._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
        config22._a = map([i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond], function(obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config22);
      }
      function createFromConfig(config22) {
        var res = new Moment(checkOverflow(prepareConfig(config22)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config22) {
        var input = config22._i, format2 = config22._f;
        config22._locale = config22._locale || getLocale(config22._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config22._i = input = config22._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config22._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config22);
        } else if (format2) {
          configFromStringAndFormat(config22);
        } else {
          configFromInput(config22);
        }
        if (!isValid(config22)) {
          config22._d = null;
        }
        return config22;
      }
      function configFromInput(config22) {
        var input = config22._i;
        if (isUndefined(input)) {
          config22._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config22._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config22);
        } else if (isArray(input)) {
          config22._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config22);
        } else if (isObject(input)) {
          configFromObject(config22);
        } else if (isNumber(input)) {
          config22._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config22);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c2 = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c2._isAMomentObject = true;
        c2._useUTC = c2._isUTC = isUTC;
        c2._l = locale2;
        c2._i = input;
        c2._f = format2;
        c2._strict = strict;
        return createFromConfig(c2);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      });
      function pickBy(fn2, moments) {
        var res, i2;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i2 = 1; i2 < moments.length; ++i2) {
          if (!moments[i2].isValid() || moments[i2][fn2](res)) {
            res = moments[i2];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m2) {
        var key, unitHasDecimal = false, i2, orderLen = ordering.length;
        for (key in m2) {
          if (hasOwnProp(m2, key) && !(indexOf.call(ordering, key) !== -1 && (m2[key] == null || !isNaN(m2[key])))) {
            return false;
          }
        }
        for (i2 = 0; i2 < orderLen; ++i2) {
          if (m2[ordering[i2]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m2[ordering[i2]]) !== toInt(m2[ordering[i2]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
        for (i2 = 0; i2 < len; i2++) {
          if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array2[i2])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config22) {
        config22._useUTC = true;
        config22._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string2) {
        var matches = (string2 || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m2) {
        return -Math.round(m2._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset2, "m"), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c2 = {}, other;
        copyConfig(c2, this);
        c2 = prepareConfig(c2);
        if (c2._a) {
          other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
          this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match5 = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match5 = aspNetRegex.exec(input)) {
          sign2 = match5[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match5[DATE]) * sign2,
            h: toInt(match5[HOUR]) * sign2,
            m: toInt(match5[MINUTE]) * sign2,
            s: toInt(match5[SECOND]) * sign2,
            ms: toInt(absRound(match5[MILLISECOND] * 1e3)) * sign2
          };
        } else if (match5 = isoRegex.exec(input)) {
          sign2 = match5[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match5[2], sign2),
            M: parseIso(match5[3], sign2),
            w: parseIso(match5[4], sign2),
            d: parseIso(match5[5], sign2),
            h: parseIso(match5[6], sign2),
            m: parseIso(match5[7], sign2),
            s: parseIso(match5[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name2) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name2, "moment()." + name2 + "(period, number) is deprecated. Please use moment()." + name2 + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i2, property2, propertyLen = properties.length;
        for (i2 = 0; i2 < propertyLen; i2 += 1) {
          property2 = properties[i2];
          propertyTest = propertyTest || hasOwnProp(input, property2);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i2, property2;
        for (i2 = 0; i2 < properties.length; i2 += 1) {
          property2 = properties[i2];
          propertyTest = propertyTest || hasOwnProp(input, property2);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a2, b2) {
        if (a2.date() < b2.date()) {
          return -monthDiff(b2, a2);
        }
        var wholeMonthDiff = (b2.year() - a2.year()) * 12 + (b2.month() - a2.month()), anchor = a2.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b2 - anchor < 0) {
          anchor2 = a2.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b2 - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a2.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b2 - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
        if (m2.year() < 0 || m2.year() > 9999) {
          return formatMoment(m2, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
          }
        }
        return formatMoment(m2, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y2, m2, d2) {
        if (y2 < 100 && y2 >= 0) {
          return new Date(y2 + 400, m2, d2) - MS_PER_400_YEARS;
        } else {
          return new Date(y2, m2, d2).valueOf();
        }
      }
      function utcStartOfDate(y2, m2, d2) {
        if (y2 < 100 && y2 >= 0) {
          return Date.UTC(y2 + 400, m2, d2) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y2, m2, d2);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m2 = this;
        return [
          m2.year(),
          m2.month(),
          m2.date(),
          m2.hour(),
          m2.minute(),
          m2.second(),
          m2.millisecond()
        ];
      }
      function toObject() {
        var m2 = this;
        return {
          years: m2.year(),
          months: m2.month(),
          date: m2.date(),
          hours: m2.hours(),
          minutes: m2.minutes(),
          seconds: m2.seconds(),
          milliseconds: m2.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config22, token2) {
        var era = config22._locale.erasParse(input, token2, config22._strict);
        if (era) {
          getParsingFlags(config22).era = era;
        } else {
          getParsingFlags(config22).invalidEra = input;
        }
      });
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config22, token2) {
        var match5;
        if (config22._locale._eraYearOrdinalRegex) {
          match5 = input.match(config22._locale._eraYearOrdinalRegex);
        }
        if (config22._locale.eraYearOrdinalParse) {
          array[YEAR] = config22._locale.eraYearOrdinalParse(input, match5);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m2, format2) {
        var i2, l2, date, eras = this._eras || getLocale("en")._eras;
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          switch (typeof eras[i2].since) {
            case "string":
              date = hooks(eras[i2].since).startOf("day");
              eras[i2].since = date.valueOf();
              break;
          }
          switch (typeof eras[i2].until) {
            case "undefined":
              eras[i2].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i2].until).startOf("day").valueOf();
              eras[i2].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i2, l2, eras = this.eras(), name2, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          name2 = eras[i2].name.toUpperCase();
          abbr = eras[i2].abbr.toUpperCase();
          narrow = eras[i2].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i2];
                }
                break;
              case "NNNN":
                if (name2 === eraName) {
                  return eras[i2];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i2];
                }
                break;
            }
          } else if ([name2, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i2];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i2, l2, val, eras = this.localeData().eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].name;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i2, l2, val, eras = this.localeData().eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].narrow;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i2, l2, val, eras = this.localeData().eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].abbr;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i2, l2, dir, val, eras = this.localeData().eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          dir = eras[i2].since <= eras[i2].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
            return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l2, eras = this.eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          namePieces.push(regexEscape(eras[i2].name));
          abbrPieces.push(regexEscape(eras[i2].abbr));
          narrowPieces.push(regexEscape(eras[i2].narrow));
          mixedPieces.push(regexEscape(eras[i2].name));
          mixedPieces.push(regexEscape(eras[i2].abbr));
          mixedPieces.push(regexEscape(eras[i2].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config22, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(["gg", "GG"], function(input, week, config22, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config22) {
        config22._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
      proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
      proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
      proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
      proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string2) {
        return string2;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index2, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index2);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index2, field) {
        if (isNumber(format2)) {
          index2 = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index2 != null) {
          return get$1(format2, index2, field, "month");
        }
        var i2, out = [];
        for (i2 = 0; i2 < 12; i2++) {
          out[i2] = get$1(format2, i2, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index2, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index2 = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index2 = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index2 = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
        if (index2 != null) {
          return get$1(format2, (index2 + shift) % 7, field, "day");
        }
        for (i2 = 0; i2 < 7; i2++) {
          out[i2] = get$1(format2, (i2 + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index2) {
        return listMonthsImpl(format2, index2, "months");
      }
      function listMonthsShort(format2, index2) {
        return listMonthsImpl(format2, index2, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index2) {
        return listWeekdaysImpl(localeSorted, format2, index2, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index2) {
        return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index2) {
        return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b2 = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
      hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name2) {
        return function() {
          return this.isValid() ? this._data[name2] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
      };
      function substituteTimeAgo(string2, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string2, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a2 = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a2 = a2 || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a2 = a2 || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a2[2] = withoutSuffix;
        a2[3] = +posNegDuration > 0;
        a2[4] = locale2;
        return substituteTimeAgo.apply(null, a2);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th2 = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th2 = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th2.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th2, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x2) {
        return (x2 > 0) - (x2 < 0) || +x2;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s2, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s2 = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s2 + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config22) {
        config22._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config22) {
        config22._d = new Date(toInt(input));
      });
      hooks.version = "2.29.4";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
      };
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o2, p2) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
          o3.__proto__ = p3;
          return o3;
        };
        return _setPrototypeOf(o2, p2);
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i2;
        for (i2 = 0; i2 < sourceKeys.length; i2++) {
          key = sourceKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function isNodeFound(current, componentNode, ignoreClass) {
        if (current === componentNode) {
          return true;
        }
        if (current.correspondingElement) {
          return current.correspondingElement.classList.contains(ignoreClass);
        }
        return current.classList.contains(ignoreClass);
      }
      function findHighest(current, componentNode, ignoreClass) {
        if (current === componentNode) {
          return true;
        }
        while (current.parentNode || current.host) {
          if (current.parentNode && isNodeFound(current, componentNode, ignoreClass)) {
            return true;
          }
          current = current.parentNode || current.host;
        }
        return current;
      }
      function clickedScrollbar(evt) {
        return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;
      }
      var testPassiveEventSupport = function testPassiveEventSupport2() {
        if (typeof window === "undefined" || typeof window.addEventListener !== "function") {
          return;
        }
        var passive = false;
        var options = Object.defineProperty({}, "passive", {
          get: function get2() {
            passive = true;
          }
        });
        var noop2 = function noop3() {
        };
        window.addEventListener("testPassiveEventSupport", noop2, options);
        window.removeEventListener("testPassiveEventSupport", noop2, options);
        return passive;
      };
      function autoInc(seed) {
        if (seed === void 0) {
          seed = 0;
        }
        return function() {
          return ++seed;
        };
      }
      var uid = autoInc();
      var passiveEventSupport;
      var handlersMap = {};
      var enabledInstances = {};
      var touchEvents = ["touchstart", "touchmove"];
      var IGNORE_CLASS_NAME = "ignore-react-onclickoutside";
      function getEventHandlerOptions(instance, eventName) {
        var handlerOptions = null;
        var isTouchEvent2 = touchEvents.indexOf(eventName) !== -1;
        if (isTouchEvent2 && passiveEventSupport) {
          handlerOptions = {
            passive: !instance.props.preventDefault
          };
        }
        return handlerOptions;
      }
      function onClickOutsideHOC(WrappedComponent, config22) {
        var _class, _temp;
        var componentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
        return _temp = _class = function(_Component) {
          _inheritsLoose(onClickOutside, _Component);
          function onClickOutside(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.__outsideClickHandler = function(event) {
              if (typeof _this.__clickOutsideHandlerProp === "function") {
                _this.__clickOutsideHandlerProp(event);
                return;
              }
              var instance = _this.getInstance();
              if (typeof instance.props.handleClickOutside === "function") {
                instance.props.handleClickOutside(event);
                return;
              }
              if (typeof instance.handleClickOutside === "function") {
                instance.handleClickOutside(event);
                return;
              }
              throw new Error("WrappedComponent: " + componentName + " lacks a handleClickOutside(event) function for processing outside click events.");
            };
            _this.__getComponentNode = function() {
              var instance = _this.getInstance();
              if (config22 && typeof config22.setClickOutsideRef === "function") {
                return config22.setClickOutsideRef()(instance);
              }
              if (typeof instance.setClickOutsideRef === "function") {
                return instance.setClickOutsideRef();
              }
              return reactDom.exports.findDOMNode(instance);
            };
            _this.enableOnClickOutside = function() {
              if (typeof document === "undefined" || enabledInstances[_this._uid]) {
                return;
              }
              if (typeof passiveEventSupport === "undefined") {
                passiveEventSupport = testPassiveEventSupport();
              }
              enabledInstances[_this._uid] = true;
              var events = _this.props.eventTypes;
              if (!events.forEach) {
                events = [events];
              }
              handlersMap[_this._uid] = function(event) {
                if (_this.componentNode === null)
                  return;
                if (_this.props.preventDefault) {
                  event.preventDefault();
                }
                if (_this.props.stopPropagation) {
                  event.stopPropagation();
                }
                if (_this.props.excludeScrollbar && clickedScrollbar(event))
                  return;
                var current = event.composed && event.composedPath && event.composedPath().shift() || event.target;
                if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) {
                  return;
                }
                _this.__outsideClickHandler(event);
              };
              events.forEach(function(eventName) {
                document.addEventListener(eventName, handlersMap[_this._uid], getEventHandlerOptions(_assertThisInitialized(_this), eventName));
              });
            };
            _this.disableOnClickOutside = function() {
              delete enabledInstances[_this._uid];
              var fn2 = handlersMap[_this._uid];
              if (fn2 && typeof document !== "undefined") {
                var events = _this.props.eventTypes;
                if (!events.forEach) {
                  events = [events];
                }
                events.forEach(function(eventName) {
                  return document.removeEventListener(eventName, fn2, getEventHandlerOptions(_assertThisInitialized(_this), eventName));
                });
                delete handlersMap[_this._uid];
              }
            };
            _this.getRef = function(ref) {
              return _this.instanceRef = ref;
            };
            _this._uid = uid();
            return _this;
          }
          var _proto = onClickOutside.prototype;
          _proto.getInstance = function getInstance() {
            if (WrappedComponent.prototype && !WrappedComponent.prototype.isReactComponent) {
              return this;
            }
            var ref = this.instanceRef;
            return ref.getInstance ? ref.getInstance() : ref;
          };
          _proto.componentDidMount = function componentDidMount() {
            if (typeof document === "undefined" || !document.createElement) {
              return;
            }
            var instance = this.getInstance();
            if (config22 && typeof config22.handleClickOutside === "function") {
              this.__clickOutsideHandlerProp = config22.handleClickOutside(instance);
              if (typeof this.__clickOutsideHandlerProp !== "function") {
                throw new Error("WrappedComponent: " + componentName + " lacks a function for processing outside click events specified by the handleClickOutside config option.");
              }
            }
            this.componentNode = this.__getComponentNode();
            if (this.props.disableOnClickOutside)
              return;
            this.enableOnClickOutside();
          };
          _proto.componentDidUpdate = function componentDidUpdate() {
            this.componentNode = this.__getComponentNode();
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            this.disableOnClickOutside();
          };
          _proto.render = function render2() {
            var _this$props = this.props;
            _this$props.excludeScrollbar;
            var props = _objectWithoutPropertiesLoose(_this$props, ["excludeScrollbar"]);
            if (WrappedComponent.prototype && WrappedComponent.prototype.isReactComponent) {
              props.ref = this.getRef;
            } else {
              props.wrappedRef = this.getRef;
            }
            props.disableOnClickOutside = this.disableOnClickOutside;
            props.enableOnClickOutside = this.enableOnClickOutside;
            return react.exports.createElement(WrappedComponent, props);
          };
          return onClickOutside;
        }(react.exports.Component), _class.displayName = "OnClickOutside(" + componentName + ")", _class.defaultProps = {
          eventTypes: ["mousedown", "touchstart"],
          excludeScrollbar: config22 && config22.excludeScrollbar || false,
          outsideClickIgnoreClass: IGNORE_CLASS_NAME,
          preventDefault: false,
          stopPropagation: false
        }, _class.getClass = function() {
          return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;
        }, _temp;
      }
      const LOCALSTORAGEKEY = "tina.isEditing";
      const isSSR = typeof window === "undefined";
      const isEditing = () => {
        if (!isSSR) {
          const isEdit = window.localStorage && window.localStorage.getItem(LOCALSTORAGEKEY);
          return isEdit && isEdit === "true";
        }
        return false;
      };
      React__default.createContext({
        edit: isEditing(),
        setEdit: void 0,
        formsRegistering: false,
        setFormsRegistering: void 0
      });
      React__default.createContext({
        state: {
          payload: {}
        },
        setRequest: () => {
        },
        isLoading: false,
        isDummyContainer: true
      });
      var __defProp2 = Object.defineProperty;
      var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
      var __publicField = (obj, key, value) => {
        __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
        return value;
      };
      const ModalContainerContext = react.exports.createContext(null);
      function useModalContainer() {
        const modalContainer = react.exports.useContext(ModalContainerContext);
        if (!modalContainer) {
          throw new Error("No Modal Container context provided");
        }
        return modalContainer;
      }
      const ModalOverlay = ({ children }) => {
        return react.exports.createElement("div", {
          className: "fixed inset-0 z-modal w-screen h-screen overflow-y-auto"
        }, children, react.exports.createElement("div", {
          className: "fixed -z-1 inset-0 opacity-80 bg-gradient-to-br from-gray-800 via-gray-900 to-black"
        }));
      };
      const Modal = (props) => {
        const { portalNode } = useModalContainer();
        if (!portalNode)
          return null;
        return reactDom.exports.createPortal(react.exports.createElement(ModalOverlay, null, react.exports.createElement("div", {
          ...props
        })), portalNode);
      };
      const ModalActions = ({ children }) => {
        return react.exports.createElement("div", {
          className: "w-full flex justify-between gap-4 items-center px-5 pb-5 rounded-b-md"
        }, children);
      };
      const ModalBody = ({ className = "", padded = false, ...props }) => React__default.createElement("div", {
        className: `${padded ? "p-5" : "p-0"} m-0 overflow-hidden flex flex-col min-h-[160px] [&:last-child]:rounded-[0_0_5px_5px] ${className}`,
        ...props
      });
      const CloseIcon = ({ ...props }) => react.exports.createElement("svg", {
        viewBox: "0 0 32 32",
        fill: "inherit",
        xmlns: "http://www.w3.org/2000/svg",
        ...props
      }, react.exports.createElement("path", {
        d: "M5 6.2684L24.7316 26L26 24.7316L6.2684 5L5 6.2684Z"
      }), react.exports.createElement("path", {
        d: "M6.2684 26L26 6.2684L24.7316 5L5 24.7316L6.2684 26Z"
      }));
      const LeftArrowIcon = ({ ...props }) => react.exports.createElement("svg", {
        viewBox: "0 0 32 32",
        fill: "inherit",
        xmlns: "http://www.w3.org/2000/svg",
        ...props
      }, react.exports.createElement("path", {
        d: "M21 7.208L19.7346 6L10.5227 14.7939C9.82527 15.4597 9.82626 16.5412 10.5227 17.2061L19.7346 26L21 24.792L11.7901 16L21 7.208Z"
      }));
      const TrashIcon2 = ({ ...props }) => react.exports.createElement("svg", {
        viewBox: "0 0 32 32",
        fill: "inherit",
        xmlns: "http://www.w3.org/2000/svg",
        ...props
      }, react.exports.createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M16.9 4.2V6.9H25V8.7H7V6.9H15.1V4.2H16.9ZM7.77201 10.5H24.2279L22.4102 24.1332C22.2853 25.0698 21.4406 25.8 20.4977 25.8H11.5022C10.5561 25.8 9.71404 25.0653 9.58977 24.1332L7.77201 10.5ZM22.172 12.3H9.82791L11.3739 23.8953C11.3788 23.9318 11.4569 24 11.5022 24H20.4977C20.5432 24 20.6209 23.9328 20.6259 23.8953L22.172 12.3Z"
      }));
      const ModalHeader = ({ children, close }) => {
        return react.exports.createElement("div", {
          className: "h-14 flex items-center justify-between px-5 border-b border-gray-200 m-0"
        }, react.exports.createElement(ModalTitle, null, children), close && react.exports.createElement("div", {
          onClick: close,
          className: "flex items-center fill-gray-400 cursor-pointer transition-colors duration-100 ease-out hover:fill-gray-700"
        }, react.exports.createElement(CloseIcon, {
          className: "w-6 h-auto"
        })));
      };
      const ModalTitle = ({ children }) => {
        return react.exports.createElement("h2", {
          className: "text-gray-600 font-sans font-medium text-base leading-none m-0 block truncate"
        }, children);
      };
      const PopupModal = ({ className = "", style = {}, ...props }) => React__default.createElement("div", {
        className: `block z-0 overflow-visible bg-gray-50 rounded-[5px] my-10 mx-auto w-[460px] max-w-[90%] ${className}`,
        style: {
          animation: "popup-down 150ms ease-out 1",
          ...style
        },
        ...props
      });
      const ERROR_MISSING_CMS = `useCMS could not find an instance of CMS`;
      const CMSContext = react.exports.createContext(null);
      function useCMS$1() {
        const cms = react.exports.useContext(CMSContext);
        if (!cms) {
          throw new Error(ERROR_MISSING_CMS);
        }
        const [, setEnabled] = react.exports.useState(cms.enabled);
        react.exports.useEffect(() => {
          return cms.events.subscribe("cms", () => {
            setEnabled(cms.enabled);
          });
        }, [cms]);
        return cms;
      }
      function ChevronDownIcon2(props, svgRef) {
        return react.exports.createElement("svg", Object.assign({
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 20 20",
          fill: "currentColor",
          "aria-hidden": "true",
          ref: svgRef
        }, props), react.exports.createElement("path", {
          fillRule: "evenodd",
          d: "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z",
          clipRule: "evenodd"
        }));
      }
      react.exports.forwardRef(ChevronDownIcon2);
      loader.config({
        paths: { vs: "https://cdn.jsdelivr.net/npm/monaco-editor@0.31.1/min/vs" }
      });
      react.exports.createContext(false);
      ({
        name: PropTypes.string,
        type: PropTypes.string,
        Component: PropTypes.any.isRequired,
        children: PropTypes.any
      });
      const Button = ({
        variant = "secondary",
        as: Tag2 = "button",
        size = "medium",
        busy,
        disabled,
        rounded = "full",
        children,
        className,
        ...props
      }) => {
        const baseClasses = "icon-parent border-0 inline-flex items-center font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center inline-flex justify-center transition-all duration-150 ease-out ";
        const variantClasses = {
          primary: `shadow text-white bg-blue-500 hover:bg-blue-600 focus:ring-blue-500`,
          secondary: `shadow text-gray-500 hover:text-blue-500 bg-gray-50 hover:bg-white border border-gray-200`,
          white: `shadow text-gray-500 hover:text-blue-500 bg-white hover:bg-gray-50 border border-gray-200`,
          ghost: `text-gray-500 hover:text-blue-500 hover:shadow border border-transparent hover:border-gray-200 bg-transparent`,
          danger: `shadow text-white bg-red-500 hover:bg-red-600 focus:ring-red-500`
        };
        const state = busy ? `busy` : disabled ? `disabled` : `default`;
        const stateClasses = {
          disabled: `pointer-events-none	opacity-30 cursor-not-allowed`,
          busy: `pointer-events-none opacity-70 cursor-wait`,
          default: ``
        };
        const roundedClasses = {
          full: `rounded-full`,
          left: `rounded-l-full`,
          right: `rounded-r-full`
        };
        const sizeClasses = {
          small: `text-xs h-8 px-3`,
          medium: `text-sm h-10 px-4`,
          custom: ``
        };
        return react.exports.createElement(Tag2, {
          className: `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${stateClasses[state]} ${roundedClasses[rounded]} ${className}`,
          ...props
        }, children);
      };
      const IconButton = ({
        variant = "secondary",
        size = "medium",
        busy,
        disabled,
        children,
        className,
        ...props
      }) => {
        const baseClasses = "icon-parent inline-flex items-center border border-transparent text-sm font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center inline-flex justify-center transition-all duration-150 ease-out rounded-full ";
        const variantClasses = {
          primary: `shadow text-white bg-blue-500 hover:bg-blue-600 focus:ring-blue-500`,
          secondary: `shadow text-gray-500 hover:text-blue-500 bg-gray-50 hover:bg-white border border-gray-200`,
          white: `shadow text-gray-500 hover:text-blue-500 bg-white hover:bg-gray-50 border border-gray-200`,
          ghost: `text-gray-500 hover:text-blue-500 hover:shadow border border-transparent hover:border-gray-200 bg-transparent`
        };
        const state = busy ? `busy` : disabled ? `disabled` : `default`;
        const stateClasses = {
          disabled: `pointer-events-none	opacity-30 cursor-not-allowed`,
          busy: `pointer-events-none opacity-70 cursor-wait`,
          default: ``
        };
        const sizeClasses = {
          small: `h-7 w-7`,
          medium: `h-9 w-9`,
          custom: ``
        };
        return react.exports.createElement("button", {
          className: `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${stateClasses[state]} ${className}`,
          ...props
        }, children);
      };
      var keyframes$1 = "@keyframes loading-dots-scale-up-and-down {\n  0% {\n    transform: scale(0.1);\n  }\n\n  50% {\n    transform: scale(1);\n  }\n\n  90% {\n    transform: scale(0.1);\n  }\n\n  100% {\n    transform: scale(0.1);\n  }\n}\n";
      const LoadingDots = ({
        dotSize = 8,
        color = "white"
      }) => {
        return react.exports.createElement("div", null, react.exports.createElement("style", null, keyframes$1), react.exports.createElement(SingleDot, {
          dotSize,
          color
        }), react.exports.createElement(SingleDot, {
          dotSize,
          color,
          delay: 0.3
        }), react.exports.createElement(SingleDot, {
          dotSize,
          color,
          delay: 0.5
        }));
      };
      const SingleDot = ({ delay = 0, color, dotSize }) => react.exports.createElement("span", {
        className: "inline-block mr-1",
        style: {
          animation: "loading-dots-scale-up-and-down 2s linear infinite",
          animationDelay: `${delay}s`,
          background: color,
          width: dotSize,
          height: dotSize,
          borderRadius: dotSize
        }
      });
      react.exports.createContext(() => {
        return null;
      });
      var DefaultContext2 = {
        color: void 0,
        size: void 0,
        className: void 0,
        style: void 0,
        attr: void 0
      };
      var IconContext2 = React__default.createContext && React__default.createContext(DefaultContext2);
      var __assign2 = globalThis && globalThis.__assign || function() {
        __assign2 = Object.assign || function(t2) {
          for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
            s2 = arguments[i2];
            for (var p2 in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p2))
                t2[p2] = s2[p2];
          }
          return t2;
        };
        return __assign2.apply(this, arguments);
      };
      var __rest2 = globalThis && globalThis.__rest || function(s2, e2) {
        var t2 = {};
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
            t2[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
            if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
              t2[p2[i2]] = s2[p2[i2]];
          }
        return t2;
      };
      function Tree2Element2(tree) {
        return tree && tree.map(function(node, i2) {
          return React__default.createElement(node.tag, __assign2({
            key: i2
          }, node.attr), Tree2Element2(node.child));
        });
      }
      function GenIcon2(data) {
        return function(props) {
          return React__default.createElement(IconBase2, __assign2({
            attr: __assign2({}, data.attr)
          }, props), Tree2Element2(data.child));
        };
      }
      function IconBase2(props) {
        var elem = function(conf) {
          var attr = props.attr, size = props.size, title = props.title, svgProps = __rest2(props, ["attr", "size", "title"]);
          var computedSize = size || conf.size || "1em";
          var className;
          if (conf.className)
            className = conf.className;
          if (props.className)
            className = (className ? className + " " : "") + props.className;
          return React__default.createElement("svg", __assign2({
            stroke: "currentColor",
            fill: "currentColor",
            strokeWidth: "0"
          }, conf.attr, attr, svgProps, {
            className,
            style: __assign2(__assign2({
              color: props.color || conf.color
            }, conf.style), props.style),
            height: computedSize,
            width: computedSize,
            xmlns: "http://www.w3.org/2000/svg"
          }), title && React__default.createElement("title", null, title), props.children);
        };
        return IconContext2 !== void 0 ? React__default.createElement(IconContext2.Consumer, null, function(conf) {
          return elem(conf);
        }) : elem(DefaultContext2);
      }
      function BiArrowToBottom(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M6 18h12v2H6zm5-14v8.586L6.707 8.293 5.293 9.707 12 16.414l6.707-6.707-1.414-1.414L13 12.586V4z" } }] })(props);
      }
      function BiCloudUpload(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M13 19v-4h3l-4-5-4 5h3v4z" } }, { "tag": "path", "attr": { "d": "M7 19h2v-2H7c-1.654 0-3-1.346-3-3 0-1.404 1.199-2.756 2.673-3.015l.581-.102.192-.558C8.149 8.274 9.895 7 12 7c2.757 0 5 2.243 5 5v1h1c1.103 0 2 .897 2 2s-.897 2-2 2h-3v2h3c2.206 0 4-1.794 4-4a4.01 4.01 0 0 0-3.056-3.888C18.507 7.67 15.56 5 12 5 9.244 5 6.85 6.611 5.757 9.15 3.609 9.792 2 11.82 2 14c0 2.757 2.243 5 5 5z" } }] })(props);
      }
      function BiCopyAlt(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z" } }, { "tag": "path", "attr": { "d": "M6 12h6v2H6zm0 4h6v2H6z" } }] })(props);
      }
      function BiFile(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M19.903 8.586a.997.997 0 0 0-.196-.293l-6-6a.997.997 0 0 0-.293-.196c-.03-.014-.062-.022-.094-.033a.991.991 0 0 0-.259-.051C13.04 2.011 13.021 2 13 2H6c-1.103 0-2 .897-2 2v16c0 1.103.897 2 2 2h12c1.103 0 2-.897 2-2V9c0-.021-.011-.04-.013-.062a.952.952 0 0 0-.051-.259c-.01-.032-.019-.063-.033-.093zM16.586 8H14V5.414L16.586 8zM6 20V4h6v5a1 1 0 0 0 1 1h5l.002 10H6z" } }, { "tag": "path", "attr": { "d": "M8 12h8v2H8zm0 4h8v2H8zm0-8h2v2H8z" } }] })(props);
      }
      function BiFolder(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M20 5h-8.586L9.707 3.293A.997.997 0 0 0 9 3H4c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h16c1.103 0 2-.897 2-2V7c0-1.103-.897-2-2-2zM4 19V7h16l.002 12H4z" } }] })(props);
      }
      function BiGridAlt(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M10 3H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM9 9H5V5h4v4zm5 2h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1zm1-6h4v4h-4V5zM3 20a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v6zm2-5h4v4H5v-4zm8 5a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6zm2-5h4v4h-4v-4z" } }] })(props);
      }
      function BiLeftArrowAlt(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12.707 17.293 8.414 13H18v-2H8.414l4.293-4.293-1.414-1.414L4.586 12l6.707 6.707z" } }] })(props);
      }
      function BiListUl(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M4 6h2v2H4zm0 5h2v2H4zm0 5h2v2H4zm16-8V6H8.023v2H18.8zM8 11h12v2H8zm0 5h12v2H8z" } }] })(props);
      }
      function BiRightArrowAlt2(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z" } }] })(props);
      }
      function BiX(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m16.192 6.344-4.243 4.242-4.242-4.242-1.414 1.414L10.535 12l-4.242 4.242 1.414 1.414 4.242-4.242 4.243 4.242 1.414-1.414L13.364 12l4.242-4.242z" } }] })(props);
      }
      function IoMdSync(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 93.09V32l-80 81.454 80 81.456v-61.093c65.996 0 120 54.982 120 122.183 0 20.363-5 39.714-14.004 57.016L391 342.547c15.996-25.457 25-54.988 25-86.547 0-89.599-72.002-162.91-160-162.91zm0 285.094c-66.001 0-120-54.988-120-122.184 0-20.363 5-39.709 13.999-57.02L121 169.454C104.999 193.89 96 224.436 96 256c0 89.599 72.002 162.91 160 162.91V480l80-81.453-80-81.457v61.094z" } }] })(props);
      }
      React__default.createContext({
        rawMode: false,
        setRawMode: () => {
        },
        templates: []
      });
      const createCodeBlockPlugin = createPluginFactory({
        key: "code_block",
        isElement: true,
        isVoid: true,
        isInline: false
      });
      const createHTMLBlockPlugin = createPluginFactory({
        key: "html",
        isElement: true,
        isVoid: true,
        isInline: false
      });
      const createHTMLInlinePlugin = createPluginFactory({
        key: "html_inline",
        isElement: true,
        isVoid: true,
        isInline: true
      });
      function MdOutlinePhotoLibrary(props) {
        return GenIcon2({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" } }, { "tag": "path", "attr": { "d": "M20 4v12H8V4h12m0-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 9.67l1.69 2.26 2.48-3.1L19 15H9zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z" } }] })(props);
      }
      function useCMS() {
        return useCMS$1();
      }
      const supportedFileTypes = [
        "text/*",
        "application/pdf",
        "application/octet-stream",
        "application/json",
        "application/ld+json",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "image/*"
      ];
      const DEFAULT_MEDIA_UPLOAD_TYPES = supportedFileTypes.join(",");
      const dropzoneAcceptFromString = (str) => {
        return Object.assign({}, ...(str || DEFAULT_MEDIA_UPLOAD_TYPES).split(",").map((x2) => ({ [x2]: [] })));
      };
      const isImage = (filename) => {
        return /\.(gif|jpg|jpeg|tiff|png|svg|webp)(\?.*)?$/i.test(filename);
      };
      const absoluteImgURL = (str) => {
        if (str.startsWith("http"))
          return str;
        return `${window.location.origin}${str}`;
      };
      const onKeyDownSoftBreak = (editor, { options: { rules = [] } }) => (event) => {
        const entry = getBlockAbove(editor);
        if (!entry)
          return;
        rules.forEach(({ hotkey, query }) => {
          if (_default$4(hotkey, event) && queryNode(entry, query)) {
            event.preventDefault();
            event.stopPropagation();
            insertNodes(editor, [
              { type: KEY_SOFT_BREAK, children: [{ text: "" }] },
              { type: "text", text: "" }
            ], { select: true });
          }
        });
      };
      const KEY_SOFT_BREAK = "break";
      const createSoftBreakPlugin = createPluginFactory({
        key: KEY_SOFT_BREAK,
        isElement: true,
        isInline: true,
        isVoid: true,
        component: (props) => {
          return React__default.createElement(React__default.Fragment, null, React__default.createElement("br", {
            className: props.className,
            ...props.attributes
          }), props.children);
        },
        handlers: {
          onKeyDown: onKeyDownSoftBreak
        },
        options: {
          rules: [{ hotkey: "shift+enter" }]
        }
      });
      const preFormat = (editor) => unwrapList(editor);
      const format$1 = (editor, customFormatting) => {
        if (editor.selection) {
          const parentEntry = getParentNode(editor, editor.selection);
          if (!parentEntry)
            return;
          const [node] = parentEntry;
          if (isElement(node) && !isType(editor, node, ELEMENT_CODE_BLOCK) && !isType(editor, node, ELEMENT_CODE_LINE)) {
            customFormatting();
          }
        }
      };
      const formatList = (editor, elementType) => {
        format$1(editor, () => toggleList(editor, {
          type: elementType
        }));
      };
      const insertEmptyCodeBlock = (editor) => {
        const matchCodeElements = (node2) => node2.type === getPluginType(editor, ELEMENT_CODE_BLOCK);
        if (someNode(editor, {
          match: matchCodeElements
        })) {
          return;
        }
        const node = {
          type: ELEMENT_CODE_BLOCK,
          value: "",
          lang: "javascript",
          children: [{ type: "text", text: "" }]
        };
        if (isSelectionAtBlockStart(editor)) {
          setElements(editor, node);
        } else {
          insertNode(editor, node);
        }
      };
      const autoformatBlocks = [
        {
          mode: "block",
          type: ELEMENT_H1,
          match: "# ",
          preFormat
        },
        {
          mode: "block",
          type: ELEMENT_H2,
          match: "## ",
          preFormat
        },
        {
          mode: "block",
          type: ELEMENT_H3,
          match: "### ",
          preFormat
        },
        {
          mode: "block",
          type: ELEMENT_H4,
          match: "#### ",
          preFormat
        },
        {
          mode: "block",
          type: ELEMENT_H5,
          match: "##### ",
          preFormat
        },
        {
          mode: "block",
          type: ELEMENT_H6,
          match: "###### ",
          preFormat
        },
        {
          mode: "block",
          type: ELEMENT_BLOCKQUOTE,
          match: "> ",
          preFormat
        },
        {
          mode: "block",
          type: ELEMENT_CODE_BLOCK,
          match: "```",
          triggerAtBlockStart: false,
          preFormat,
          format: (editor) => {
            insertEmptyCodeBlock(editor);
          }
        },
        {
          mode: "block",
          type: ELEMENT_HR,
          match: ["---", "\u2014-", "___ "],
          format: (editor) => {
            setNodes(editor, { type: ELEMENT_HR });
            insertNodes(editor, {
              type: ELEMENT_DEFAULT,
              children: [{ text: "" }]
            });
          }
        }
      ];
      const autoformatLists = [
        {
          mode: "block",
          type: ELEMENT_LI,
          match: ["* ", "- "],
          preFormat,
          format: (editor) => formatList(editor, ELEMENT_UL)
        },
        {
          mode: "block",
          type: ELEMENT_LI,
          match: ["1. ", "1) "],
          preFormat,
          format: (editor) => formatList(editor, ELEMENT_OL)
        },
        {
          mode: "block",
          type: ELEMENT_TODO_LI,
          match: "[] "
        },
        {
          mode: "block",
          type: ELEMENT_TODO_LI,
          match: "[x] ",
          format: (editor) => setNodes(editor, { type: ELEMENT_TODO_LI, checked: true }, {
            match: (n2) => isBlock(editor, n2)
          })
        }
      ];
      const autoformatMarks = [
        {
          mode: "mark",
          type: [MARK_BOLD$1, MARK_ITALIC$1],
          match: "***"
        },
        {
          mode: "mark",
          type: MARK_BOLD$1,
          match: "**"
        },
        {
          mode: "mark",
          type: MARK_ITALIC$1,
          match: "*"
        },
        {
          mode: "mark",
          type: MARK_ITALIC$1,
          match: "_"
        },
        {
          mode: "mark",
          type: MARK_CODE$1,
          match: "`"
        }
      ];
      const autoformatRules = [
        ...autoformatBlocks,
        ...autoformatLists,
        ...autoformatMarks
      ];
      const withCorrectVoidBehavior = (editor) => {
        const { deleteBackward: deleteBackward2, insertBreak } = editor;
        editor.insertBreak = () => {
          if (!editor.selection || !Range.isCollapsed(editor.selection)) {
            return insertBreak();
          }
          const selectedNodePath = Path.parent(editor.selection.anchor.path);
          const selectedNode = Node$1.get(editor, selectedNodePath);
          if (Editor$1.isVoid(editor, selectedNode)) {
            Editor$1.insertNode(editor, {
              type: "p",
              children: [{ text: "" }]
            });
            return;
          }
          insertBreak();
        };
        editor.deleteBackward = (unit) => {
          if (!editor.selection || !Range.isCollapsed(editor.selection) || editor.selection.anchor.offset !== 0) {
            return deleteBackward2(unit);
          }
          const parentPath = Path.parent(editor.selection.anchor.path);
          const parentNode = Node$1.get(editor, parentPath);
          const parentIsEmpty = Node$1.string(parentNode).length === 0;
          if (parentIsEmpty && Path.hasPrevious(parentPath)) {
            const prevNodePath = Path.previous(parentPath);
            const prevNode = Node$1.get(editor, prevNodePath);
            if (Editor$1.isVoid(editor, prevNode)) {
              Transforms.removeNodes(editor);
              Editor$1.normalize(editor, { force: true });
              return;
            }
          }
          deleteBackward2(unit);
        };
        return editor;
      };
      const resetBlockTypesCommonRule = {
        types: [
          ELEMENT_BLOCKQUOTE,
          ELEMENT_H1,
          ELEMENT_H2,
          ELEMENT_H3,
          ELEMENT_H3,
          ELEMENT_H4,
          ELEMENT_H5,
          ELEMENT_H6
        ],
        defaultType: ELEMENT_PARAGRAPH
      };
      const createCorrectNodeBehaviorPlugin = createPluginFactory({
        key: "WITH_CORRECT_NODE_BEHAVIOR",
        withOverrides: withCorrectVoidBehavior
      });
      [
        createTrailingBlockPlugin(),
        createCorrectNodeBehaviorPlugin(),
        createAutoformatPlugin({
          options: {
            rules: autoformatRules
          }
        }),
        createExitBreakPlugin({
          options: {
            rules: [
              {
                hotkey: "mod+enter"
              },
              {
                hotkey: "mod+shift+enter",
                before: true
              },
              {
                hotkey: "enter",
                query: {
                  start: true,
                  end: true,
                  allow: KEYS_HEADING
                }
              }
            ]
          }
        }),
        createResetNodePlugin({
          options: {
            rules: [
              {
                ...resetBlockTypesCommonRule,
                hotkey: "Enter",
                predicate: isBlockAboveEmpty
              },
              {
                ...resetBlockTypesCommonRule,
                hotkey: "Backspace",
                predicate: isSelectionAtBlockStart
              }
            ]
          }
        }),
        createSoftBreakPlugin({
          options: {
            rules: [
              { hotkey: "shift+enter" },
              {
                hotkey: "enter",
                query: {
                  allow: [ELEMENT_CODE_BLOCK, ELEMENT_BLOCKQUOTE]
                }
              }
            ]
          }
        })
      ];
      [
        createHeadingPlugin(),
        createParagraphPlugin(),
        createCodeBlockPlugin(),
        createHTMLBlockPlugin(),
        createHTMLInlinePlugin(),
        createBlockquotePlugin(),
        createBoldPlugin$1(),
        createItalicPlugin$1(),
        createUnderlinePlugin$1(),
        createCodePlugin$1(),
        createListPlugin(),
        createHorizontalRulePlugin(),
        createNodeIdPlugin()
      ];
      class MediaListError$1 extends Error {
        constructor(config22) {
          super(config22.message);
          this.ERR_TYPE = "MediaListError";
          this.title = config22.title;
          this.docsLink = config22.docsLink;
        }
      }
      new MediaListError$1({
        title: "Unauthorized",
        message: "You don't have access to this resource.",
        docsLink: "https://tina.io/docs/reference/media/overview"
      });
      new MediaListError$1({
        title: "Bad Route",
        message: "The Cloudinary API route is missing or misconfigured.",
        docsLink: "https://tina.io/docs/reference/media/external/authentication/"
      });
      new MediaListError$1({
        title: "An Error Occurred",
        message: "Something went wrong accessing your media from Tina Cloud.",
        docsLink: ""
      });
      function createScreen({
        Component,
        props,
        ...options
      }) {
        return {
          __type: "screen",
          layout: "popup",
          ...options,
          Component(screenProps) {
            return React__default.createElement(Component, {
              ...screenProps,
              ...props
            });
          }
        };
      }
      function ViewNavigation({
        onClickPrev,
        onClickSwitch,
        onClickNext,
        switchContent,
        switchColSpan,
        switchProps
      }) {
        return React__default.createElement("tr", null, React__default.createElement("th", {
          className: "rdtPrev",
          onClick: onClickPrev
        }, React__default.createElement("span", null, "\u2039")), React__default.createElement("th", {
          className: "rdtSwitch",
          colSpan: switchColSpan,
          onClick: onClickSwitch,
          ...switchProps
        }, switchContent), React__default.createElement("th", {
          className: "rdtNext",
          onClick: onClickNext
        }, React__default.createElement("span", null, "\u203A")));
      }
      class DaysView extends React__default.Component {
        constructor() {
          super(...arguments);
          __publicField(this, "_setDate", (e2) => {
            this.props.updateDate(e2);
          });
        }
        render() {
          return React__default.createElement("div", {
            className: "rdtDays"
          }, React__default.createElement("table", null, React__default.createElement("thead", null, this.renderNavigation(), this.renderDayHeaders()), React__default.createElement("tbody", null, this.renderDays()), this.renderFooter()));
        }
        renderNavigation() {
          const date = this.props.viewDate;
          const locale2 = date.localeData();
          return React__default.createElement(ViewNavigation, {
            onClickPrev: () => this.props.navigate(-1, "months"),
            onClickSwitch: () => this.props.showView("months"),
            onClickNext: () => this.props.navigate(1, "months"),
            switchContent: locale2.months(date) + " " + date.year(),
            switchColSpan: 5,
            switchProps: { "data-value": this.props.viewDate.month() }
          });
        }
        renderDayHeaders() {
          const locale2 = this.props.viewDate.localeData();
          let dayItems = getDaysOfWeek(locale2).map((day, index2) => React__default.createElement("th", {
            key: day + index2,
            className: "dow"
          }, day));
          return React__default.createElement("tr", null, dayItems);
        }
        renderDays() {
          const date = this.props.viewDate;
          const startOfMonth = date.clone().startOf("month");
          const endOfMonth = date.clone().endOf("month");
          let rows = [[], [], [], [], [], []];
          let startDate = date.clone().subtract(1, "months");
          startDate.date(startDate.daysInMonth()).startOf("week");
          let endDate = startDate.clone().add(42, "d");
          let i2 = 0;
          while (startDate.isBefore(endDate)) {
            let row = getRow$2(rows, i2++);
            row.push(this.renderDay(startDate, startOfMonth, endOfMonth));
            startDate.add(1, "d");
          }
          return rows.map((r2, i22) => React__default.createElement("tr", {
            key: `${endDate.month()}_${i22}`
          }, r2));
        }
        renderDay(date, startOfMonth, endOfMonth) {
          let selectedDate = this.props.selectedDate;
          let dayProps = {
            key: date.format("M_D"),
            "data-value": date.date(),
            "data-month": date.month(),
            "data-year": date.year()
          };
          let className = "rdtDay";
          if (date.isBefore(startOfMonth)) {
            className += " rdtOld";
          } else if (date.isAfter(endOfMonth)) {
            className += " rdtNew";
          }
          if (selectedDate && date.isSame(selectedDate, "day")) {
            className += " rdtActive";
          }
          if (date.isSame(this.props.moment(), "day")) {
            className += " rdtToday";
          }
          if (this.props.isValidDate(date)) {
            dayProps.onClick = this._setDate;
          } else {
            className += " rdtDisabled";
          }
          dayProps.className = className;
          return this.props.renderDay(dayProps, date.clone(), selectedDate && selectedDate.clone());
        }
        renderFooter() {
          if (!this.props.timeFormat)
            return;
          const date = this.props.viewDate;
          return React__default.createElement("tfoot", null, React__default.createElement("tr", null, React__default.createElement("td", {
            onClick: () => this.props.showView("time"),
            colSpan: 7,
            className: "rdtTimeToggle"
          }, date.format(this.props.timeFormat))));
        }
      }
      __publicField(DaysView, "defaultProps", {
        isValidDate: () => true,
        renderDay: (props, date) => React__default.createElement("td", {
          ...props
        }, date.date())
      });
      function getRow$2(rows, day) {
        return rows[Math.floor(day / 7)];
      }
      function getDaysOfWeek(locale2) {
        const first = locale2.firstDayOfWeek();
        let dow = [];
        let i2 = 0;
        locale2._weekdaysMin.forEach(function(day) {
          dow[(7 + i2++ - first) % 7] = day;
        });
        return dow;
      }
      class MonthsView extends React__default.Component {
        constructor() {
          super(...arguments);
          __publicField(this, "_updateSelectedMonth", (event) => {
            this.props.updateDate(event);
          });
        }
        render() {
          return React__default.createElement("div", {
            className: "rdtMonths"
          }, React__default.createElement("table", null, React__default.createElement("thead", null, this.renderNavigation())), React__default.createElement("table", null, React__default.createElement("tbody", null, this.renderMonths())));
        }
        renderNavigation() {
          let year = this.props.viewDate.year();
          return React__default.createElement(ViewNavigation, {
            onClickPrev: () => this.props.navigate(-1, "years"),
            onClickSwitch: () => this.props.showView("years"),
            onClickNext: () => this.props.navigate(1, "years"),
            switchContent: year,
            switchColSpan: "2"
          });
        }
        renderMonths() {
          let rows = [[], [], []];
          for (let month = 0; month < 12; month++) {
            let row = getRow$1(rows, month);
            row.push(this.renderMonth(month));
          }
          return rows.map((months2, i2) => React__default.createElement("tr", {
            key: i2
          }, months2));
        }
        renderMonth(month) {
          const selectedDate = this.props.selectedDate;
          let className = "rdtMonth";
          let onClick;
          if (this.isDisabledMonth(month)) {
            className += " rdtDisabled";
          } else {
            onClick = this._updateSelectedMonth;
          }
          if (selectedDate && selectedDate.year() === this.props.viewDate.year() && selectedDate.month() === month) {
            className += " rdtActive";
          }
          let props = { key: month, className, "data-value": month, onClick };
          if (this.props.renderMonth) {
            return this.props.renderMonth(props, month, this.props.viewDate.year(), this.props.selectedDate && this.props.selectedDate.clone());
          }
          return React__default.createElement("td", {
            ...props
          }, this.getMonthText(month));
        }
        isDisabledMonth(month) {
          let isValidDate = this.props.isValidDate;
          if (!isValidDate) {
            return false;
          }
          let date = this.props.viewDate.clone().set({ month });
          let day = date.endOf("month").date() + 1;
          while (day-- > 1) {
            if (isValidDate(date.date(day))) {
              return false;
            }
          }
          return true;
        }
        getMonthText(month) {
          const localMoment = this.props.viewDate;
          const monthStr = localMoment.localeData().monthsShort(localMoment.month(month));
          return capitalize(monthStr.substring(0, 3));
        }
      }
      function getRow$1(rows, year) {
        if (year < 4) {
          return rows[0];
        }
        if (year < 8) {
          return rows[1];
        }
        return rows[2];
      }
      function capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      }
      class YearsView extends React__default.Component {
        constructor() {
          super(...arguments);
          __publicField(this, "disabledYearsCache", {});
          __publicField(this, "_updateSelectedYear", (event) => {
            this.props.updateDate(event);
          });
        }
        render() {
          return React__default.createElement("div", {
            className: "rdtYears"
          }, React__default.createElement("table", null, React__default.createElement("thead", null, this.renderNavigation())), React__default.createElement("table", null, React__default.createElement("tbody", null, this.renderYears())));
        }
        renderNavigation() {
          const viewYear = this.getViewYear();
          return React__default.createElement(ViewNavigation, {
            onClickPrev: () => this.props.navigate(-10, "years"),
            onClickSwitch: () => this.props.showView("years"),
            onClickNext: () => this.props.navigate(10, "years"),
            switchContent: `${viewYear}-${viewYear + 9}`
          });
        }
        renderYears() {
          const viewYear = this.getViewYear();
          let rows = [[], [], []];
          for (let year = viewYear - 1; year < viewYear + 11; year++) {
            let row = getRow(rows, year - viewYear);
            row.push(this.renderYear(year));
          }
          return rows.map((years2, i2) => React__default.createElement("tr", {
            key: i2
          }, years2));
        }
        renderYear(year) {
          const selectedYear = this.getSelectedYear();
          let className = "rdtYear";
          let onClick;
          if (this.isDisabledYear(year)) {
            className += " rdtDisabled";
          } else {
            onClick = this._updateSelectedYear;
          }
          if (selectedYear === year) {
            className += " rdtActive";
          }
          let props = { key: year, className, "data-value": year, onClick };
          return this.props.renderYear(props, year, this.props.selectedDate && this.props.selectedDate.clone());
        }
        getViewYear() {
          return parseInt(this.props.viewDate.year() / 10, 10) * 10;
        }
        getSelectedYear() {
          return this.props.selectedDate && this.props.selectedDate.year();
        }
        isDisabledYear(year) {
          let cache = this.disabledYearsCache;
          if (cache[year] !== void 0) {
            return cache[year];
          }
          let isValidDate = this.props.isValidDate;
          if (!isValidDate) {
            return false;
          }
          let date = this.props.viewDate.clone().set({ year });
          let day = date.endOf("year").dayOfYear() + 1;
          while (day-- > 1) {
            if (isValidDate(date.dayOfYear(day))) {
              cache[year] = false;
              return false;
            }
          }
          cache[year] = true;
          return true;
        }
      }
      __publicField(YearsView, "defaultProps", {
        renderYear: (props, year) => React__default.createElement("td", {
          ...props
        }, year)
      });
      function getRow(rows, year) {
        if (year < 3) {
          return rows[0];
        }
        if (year < 7) {
          return rows[1];
        }
        return rows[2];
      }
      const timeConstraints = {
        hours: {
          min: 0,
          max: 23,
          step: 1
        },
        minutes: {
          min: 0,
          max: 59,
          step: 1
        },
        seconds: {
          min: 0,
          max: 59,
          step: 1
        },
        milliseconds: {
          min: 0,
          max: 999,
          step: 1
        }
      };
      function createConstraints(overrideTimeConstraints) {
        let constraints = {};
        Object.keys(timeConstraints).forEach((type) => {
          constraints[type] = {
            ...timeConstraints[type],
            ...overrideTimeConstraints[type] || {}
          };
        });
        return constraints;
      }
      class TimeView extends React__default.Component {
        constructor(props) {
          super(props);
          this.constraints = createConstraints(props.timeConstraints);
          this.state = this.getTimeParts(props.selectedDate || props.viewDate);
        }
        render() {
          let items = [];
          const timeParts = this.state;
          this.getCounters().forEach((c2, i2) => {
            if (i2 && c2 !== "ampm") {
              items.push(React__default.createElement("div", {
                key: `sep${i2}`,
                className: "rdtCounterSeparator"
              }, ":"));
            }
            items.push(this.renderCounter(c2, timeParts[c2]));
          });
          return React__default.createElement("div", {
            className: "rdtTime"
          }, React__default.createElement("table", null, this.renderHeader(), React__default.createElement("tbody", null, React__default.createElement("tr", null, React__default.createElement("td", null, React__default.createElement("div", {
            className: "rdtCounters"
          }, items))))));
        }
        renderCounter(type, value) {
          if (type === "hours" && this.isAMPM()) {
            value = (value - 1) % 12 + 1;
            if (value === 0) {
              value = 12;
            }
          }
          if (type === "ampm") {
            if (this.props.timeFormat.indexOf(" A") !== -1) {
              value = this.props.viewDate.format("A");
            } else {
              value = this.props.viewDate.format("a");
            }
          }
          return React__default.createElement("div", {
            key: type,
            className: "rdtCounter"
          }, React__default.createElement("span", {
            className: "rdtBtn",
            onMouseDown: (e2) => this.onStartClicking(e2, "increase", type)
          }, "\u25B2"), React__default.createElement("div", {
            className: "rdtCount"
          }, value), React__default.createElement("span", {
            className: "rdtBtn",
            onMouseDown: (e2) => this.onStartClicking(e2, "decrease", type)
          }, "\u25BC"));
        }
        renderHeader() {
          if (!this.props.dateFormat)
            return;
          const date = this.props.selectedDate || this.props.viewDate;
          return React__default.createElement("thead", null, React__default.createElement("tr", null, React__default.createElement("td", {
            className: "rdtSwitch",
            colSpan: "4",
            onClick: () => this.props.showView("days")
          }, date.format(this.props.dateFormat))));
        }
        onStartClicking(e2, action, type) {
          if (e2 && e2.button && e2.button !== 0) {
            return;
          }
          if (type === "ampm")
            return this.toggleDayPart();
          let update = {};
          let body = document.body;
          update[type] = this[action](type);
          this.setState(update);
          this.timer = setTimeout(() => {
            this.increaseTimer = setInterval(() => {
              update[type] = this[action](type);
              this.setState(update);
            }, 70);
          }, 500);
          this.mouseUpListener = () => {
            clearTimeout(this.timer);
            clearInterval(this.increaseTimer);
            this.props.setTime(type, parseInt(this.state[type], 10));
            body.removeEventListener("mouseup", this.mouseUpListener);
            body.removeEventListener("touchend", this.mouseUpListener);
          };
          body.addEventListener("mouseup", this.mouseUpListener);
          body.addEventListener("touchend", this.mouseUpListener);
        }
        toggleDayPart() {
          let hours2 = parseInt(this.state.hours, 10);
          if (hours2 >= 12) {
            hours2 -= 12;
          } else {
            hours2 += 12;
          }
          this.props.setTime("hours", hours2);
        }
        increase(type) {
          const tc2 = this.constraints[type];
          let value = parseInt(this.state[type], 10) + tc2.step;
          if (value > tc2.max)
            value = tc2.min + (value - (tc2.max + 1));
          return pad(type, value);
        }
        decrease(type) {
          const tc2 = this.constraints[type];
          let value = parseInt(this.state[type], 10) - tc2.step;
          if (value < tc2.min)
            value = tc2.max + 1 - (tc2.min - value);
          return pad(type, value);
        }
        getCounters() {
          let counters = [];
          let format2 = this.props.timeFormat;
          if (format2.toLowerCase().indexOf("h") !== -1) {
            counters.push("hours");
            if (format2.indexOf("m") !== -1) {
              counters.push("minutes");
              if (format2.indexOf("s") !== -1) {
                counters.push("seconds");
                if (format2.indexOf("S") !== -1) {
                  counters.push("milliseconds");
                }
              }
            }
          }
          if (this.isAMPM()) {
            counters.push("ampm");
          }
          return counters;
        }
        isAMPM() {
          return this.props.timeFormat.toLowerCase().indexOf(" a") !== -1;
        }
        getTimeParts(date) {
          const hours2 = date.hours();
          return {
            hours: pad("hours", hours2),
            minutes: pad("minutes", date.minutes()),
            seconds: pad("seconds", date.seconds()),
            milliseconds: pad("milliseconds", date.milliseconds()),
            ampm: hours2 < 12 ? "am" : "pm"
          };
        }
        componentDidUpdate(prevProps) {
          if (this.props.selectedDate) {
            if (this.props.selectedDate !== prevProps.selectedDate) {
              this.setState(this.getTimeParts(this.props.selectedDate));
            }
          } else if (prevProps.viewDate !== this.props.viewDate) {
            this.setState(this.getTimeParts(this.props.viewDate));
          }
        }
      }
      function pad(type, value) {
        const padValues = {
          hours: 1,
          minutes: 2,
          seconds: 2,
          milliseconds: 3
        };
        let str = value + "";
        while (str.length < padValues[type])
          str = "0" + str;
        return str;
      }
      const viewModes = {
        YEARS: "years",
        MONTHS: "months",
        DAYS: "days",
        TIME: "time"
      };
      const TYPES = PropTypes;
      const nofn = function() {
      };
      const datetype = TYPES.oneOfType([
        TYPES.instanceOf(hooks),
        TYPES.instanceOf(Date),
        TYPES.string
      ]);
      class Datetime extends React__default.Component {
        constructor(props) {
          super(props);
          __publicField(this, "_renderCalendar", () => {
            const props2 = this.props;
            const state = this.state;
            let viewProps = {
              viewDate: state.viewDate.clone(),
              selectedDate: this.getSelectedDate(),
              isValidDate: props2.isValidDate,
              updateDate: this._updateDate,
              navigate: this._viewNavigate,
              moment: hooks,
              showView: this._showView
            };
            switch (state.currentView) {
              case viewModes.YEARS:
                viewProps.renderYear = props2.renderYear;
                return React__default.createElement(YearsView, {
                  ...viewProps
                });
              case viewModes.MONTHS:
                viewProps.renderMonth = props2.renderMonth;
                return React__default.createElement(MonthsView, {
                  ...viewProps
                });
              case viewModes.DAYS:
                viewProps.renderDay = props2.renderDay;
                viewProps.timeFormat = this.getFormat("time");
                return React__default.createElement(DaysView, {
                  ...viewProps
                });
              default:
                viewProps.dateFormat = this.getFormat("date");
                viewProps.timeFormat = this.getFormat("time");
                viewProps.timeConstraints = props2.timeConstraints;
                viewProps.setTime = this._setTime;
                return React__default.createElement(TimeView, {
                  ...viewProps
                });
            }
          });
          __publicField(this, "_showView", (view, date) => {
            const d2 = (date || this.state.viewDate).clone();
            const nextView = this.props.onBeforeNavigate(view, this.state.currentView, d2);
            if (nextView && this.state.currentView !== nextView) {
              this.props.onNavigate(nextView);
              this.setState({ currentView: nextView });
            }
          });
          __publicField(this, "viewToMethod", { days: "date", months: "month", years: "year" });
          __publicField(this, "nextView", { days: "time", months: "days", years: "months" });
          __publicField(this, "_updateDate", (e2) => {
            let state = this.state;
            let currentView = state.currentView;
            let updateOnView = this.getUpdateOn(this.getFormat("date"));
            let viewDate = this.state.viewDate.clone();
            viewDate[this.viewToMethod[currentView]](parseInt(e2.target.getAttribute("data-value"), 10));
            if (currentView === "days") {
              viewDate.month(parseInt(e2.target.getAttribute("data-month"), 10));
              viewDate.year(parseInt(e2.target.getAttribute("data-year"), 10));
            }
            let update = { viewDate };
            if (currentView === updateOnView) {
              update.selectedDate = viewDate.clone();
              update.inputValue = viewDate.format(this.getFormat("datetime"));
              if (this.props.open === void 0 && this.props.input && this.props.closeOnSelect) {
                this._closeCalendar();
              }
              this.props.onChange(viewDate.clone());
            } else {
              this._showView(this.nextView[currentView], viewDate);
            }
            this.setState(update);
          });
          __publicField(this, "_viewNavigate", (modifier, unit) => {
            let viewDate = this.state.viewDate.clone();
            viewDate.add(modifier, unit);
            if (modifier > 0) {
              this.props.onNavigateForward(modifier, unit);
            } else {
              this.props.onNavigateBack(-modifier, unit);
            }
            this.setState({ viewDate });
          });
          __publicField(this, "_setTime", (type, value) => {
            let date = (this.getSelectedDate() || this.state.viewDate).clone();
            date[type](value);
            if (!this.props.value) {
              this.setState({
                selectedDate: date,
                viewDate: date.clone(),
                inputValue: date.format(this.getFormat("datetime"))
              });
            }
            this.props.onChange(date);
          });
          __publicField(this, "_openCalendar", () => {
            if (this.isOpen())
              return;
            this.setState({ open: true }, this.props.onOpen);
          });
          __publicField(this, "_closeCalendar", () => {
            if (!this.isOpen())
              return;
            this.setState({ open: false }, () => {
              this.props.onClose(this.state.selectedDate || this.state.inputValue);
            });
          });
          __publicField(this, "_handleClickOutside", () => {
            let props2 = this.props;
            if (props2.input && this.state.open && props2.open === void 0 && props2.closeOnClickOutside) {
              this._closeCalendar();
            }
          });
          __publicField(this, "_onInputFocus", (e2) => {
            if (!this.callHandler(this.props.inputProps.onFocus, e2))
              return;
            this._openCalendar();
          });
          __publicField(this, "_onInputChange", (e2) => {
            if (!this.callHandler(this.props.inputProps.onChange, e2))
              return;
            const value = e2.target ? e2.target.value : e2;
            const localMoment = this.localMoment(value, this.getFormat("datetime"));
            let update = { inputValue: value };
            if (localMoment.isValid()) {
              update.selectedDate = localMoment;
              update.viewDate = localMoment.clone().startOf("month");
            } else {
              update.selectedDate = null;
            }
            this.setState(update, () => {
              this.props.onChange(localMoment.isValid() ? localMoment : this.state.inputValue);
            });
          });
          __publicField(this, "_onInputKeyDown", (e2) => {
            if (!this.callHandler(this.props.inputProps.onKeyDown, e2))
              return;
            if (e2.which === 9 && this.props.closeOnTab) {
              this._closeCalendar();
            }
          });
          __publicField(this, "_onInputClick", (e2) => {
            if (!this.callHandler(this.props.inputProps.onClick, e2))
              return;
            this._openCalendar();
          });
          this.state = this.getInitialState();
        }
        render() {
          return React__default.createElement(ClickableWrapper, {
            className: this.getClassName(),
            onClickOut: this._handleClickOutside
          }, this.renderInput(), React__default.createElement("div", {
            className: "rdtPicker"
          }, this.renderView()));
        }
        renderInput() {
          if (!this.props.input)
            return;
          const finalInputProps = {
            type: "text",
            className: "form-control",
            value: this.getInputValue(),
            ...this.props.inputProps,
            onFocus: this._onInputFocus,
            onChange: this._onInputChange,
            onKeyDown: this._onInputKeyDown,
            onClick: this._onInputClick
          };
          if (this.props.renderInput) {
            return React__default.createElement("div", null, this.props.renderInput(finalInputProps, this._openCalendar, this._closeCalendar));
          }
          return React__default.createElement("input", {
            ...finalInputProps
          });
        }
        renderView() {
          return this.props.renderView(this.state.currentView, this._renderCalendar);
        }
        getInitialState() {
          let props = this.props;
          let inputFormat = this.getFormat("datetime");
          let selectedDate = this.parseDate(props.value || props.initialValue, inputFormat);
          this.checkTZ();
          return {
            open: !props.input,
            currentView: props.initialViewMode || this.getInitialView(),
            viewDate: this.getInitialViewDate(selectedDate),
            selectedDate: selectedDate && selectedDate.isValid() ? selectedDate : void 0,
            inputValue: this.getInitialInputValue(selectedDate)
          };
        }
        getInitialViewDate(selectedDate) {
          const propDate = this.props.initialViewDate;
          let viewDate;
          if (propDate) {
            viewDate = this.parseDate(propDate, this.getFormat("datetime"));
            if (viewDate && viewDate.isValid()) {
              return viewDate;
            } else {
              log('The initialViewDated given "' + propDate + '" is not valid. Using current date instead.');
            }
          } else if (selectedDate && selectedDate.isValid()) {
            return selectedDate.clone();
          }
          return this.getInitialDate();
        }
        getInitialDate() {
          let m2 = this.localMoment();
          m2.hour(0).minute(0).second(0).millisecond(0);
          return m2;
        }
        getInitialView() {
          const dateFormat = this.getFormat("date");
          return dateFormat ? this.getUpdateOn(dateFormat) : viewModes.TIME;
        }
        parseDate(date, dateFormat) {
          let parsedDate;
          if (date && typeof date === "string")
            parsedDate = this.localMoment(date, dateFormat);
          else if (date)
            parsedDate = this.localMoment(date);
          if (parsedDate && !parsedDate.isValid())
            parsedDate = null;
          return parsedDate;
        }
        getClassName() {
          let cn = "rdt";
          let props = this.props;
          let propCn = props.className;
          if (Array.isArray(propCn)) {
            cn += " " + propCn.join(" ");
          } else if (propCn) {
            cn += " " + propCn;
          }
          if (!props.input) {
            cn += " rdtStatic";
          }
          if (this.isOpen()) {
            cn += " rdtOpen";
          }
          return cn;
        }
        isOpen() {
          return !this.props.input || (this.props.open === void 0 ? this.state.open : this.props.open);
        }
        getUpdateOn(dateFormat) {
          if (this.props.updateOnView) {
            return this.props.updateOnView;
          }
          if (dateFormat.match(/[lLD]/)) {
            return viewModes.DAYS;
          }
          if (dateFormat.indexOf("M") !== -1) {
            return viewModes.MONTHS;
          }
          if (dateFormat.indexOf("Y") !== -1) {
            return viewModes.YEARS;
          }
          return viewModes.DAYS;
        }
        getLocaleData() {
          let p2 = this.props;
          return this.localMoment(p2.value || p2.defaultValue || new Date()).localeData();
        }
        getDateFormat() {
          const locale2 = this.getLocaleData();
          let format2 = this.props.dateFormat;
          if (format2 === true)
            return locale2.longDateFormat("L");
          if (format2)
            return format2;
          return "";
        }
        getTimeFormat() {
          const locale2 = this.getLocaleData();
          let format2 = this.props.timeFormat;
          if (format2 === true) {
            return locale2.longDateFormat("LT");
          }
          return format2 || "";
        }
        getFormat(type) {
          if (type === "date") {
            return this.getDateFormat();
          } else if (type === "time") {
            return this.getTimeFormat();
          }
          let dateFormat = this.getDateFormat();
          let timeFormat = this.getTimeFormat();
          return dateFormat && timeFormat ? dateFormat + " " + timeFormat : dateFormat || timeFormat;
        }
        updateTime(op, amount, type, toSelected) {
          let update = {};
          const date = toSelected ? "selectedDate" : "viewDate";
          update[date] = this.state[date].clone()[op](amount, type);
          this.setState(update);
        }
        localMoment(date, format2, props) {
          props = props || this.props;
          let m2 = null;
          if (props.utc) {
            m2 = hooks.utc(date, format2, props.strictParsing);
          } else if (props.displayTimeZone) {
            m2 = hooks.tz(date, format2, props.displayTimeZone);
          } else {
            m2 = hooks(date, format2, props.strictParsing);
          }
          if (props.locale)
            m2.locale(props.locale);
          return m2;
        }
        checkTZ() {
          const { displayTimeZone } = this.props;
          if (displayTimeZone && !this.tzWarning && !hooks.tz) {
            this.tzWarning = true;
            log('displayTimeZone prop with value "' + displayTimeZone + '" is used but moment.js timezone is not loaded.', "error");
          }
        }
        componentDidUpdate(prevProps) {
          if (prevProps === this.props)
            return;
          let needsUpdate = false;
          let thisProps = this.props;
          ["locale", "utc", "displayZone", "dateFormat", "timeFormat"].forEach(function(p2) {
            prevProps[p2] !== thisProps[p2] && (needsUpdate = true);
          });
          if (needsUpdate) {
            this.regenerateDates();
          }
          if (thisProps.value && thisProps.value !== prevProps.value) {
            this.setViewDate(thisProps.value);
          }
          this.checkTZ();
        }
        regenerateDates() {
          const props = this.props;
          let viewDate = this.state.viewDate.clone();
          let selectedDate = this.state.selectedDate && this.state.selectedDate.clone();
          if (props.locale) {
            viewDate.locale(props.locale);
            selectedDate && selectedDate.locale(props.locale);
          }
          if (props.utc) {
            viewDate.utc();
            selectedDate && selectedDate.utc();
          } else if (props.displayTimeZone) {
            viewDate.tz(props.displayTimeZone);
            selectedDate && selectedDate.tz(props.displayTimeZone);
          } else {
            viewDate.locale();
            selectedDate && selectedDate.locale();
          }
          let update = { viewDate, selectedDate };
          if (selectedDate && selectedDate.isValid()) {
            update.inputValue = selectedDate.format(this.getFormat("datetime"));
          }
          this.setState(update);
        }
        getSelectedDate() {
          if (this.props.value === void 0)
            return this.state.selectedDate;
          let selectedDate = this.parseDate(this.props.value, this.getFormat("datetime"));
          return selectedDate && selectedDate.isValid() ? selectedDate : false;
        }
        getInitialInputValue(selectedDate) {
          const props = this.props;
          if (props.inputProps.value)
            return props.inputProps.value;
          if (selectedDate && selectedDate.isValid())
            return selectedDate.format(this.getFormat("datetime"));
          if (props.value && typeof props.value === "string")
            return props.value;
          if (props.initialValue && typeof props.initialValue === "string")
            return props.initialValue;
          return "";
        }
        getInputValue() {
          let selectedDate = this.getSelectedDate();
          return selectedDate ? selectedDate.format(this.getFormat("datetime")) : this.state.inputValue;
        }
        setViewDate(date) {
          let logError = function() {
            return log("Invalid date passed to the `setViewDate` method: " + date);
          };
          if (!date)
            return logError();
          let viewDate;
          if (typeof date === "string") {
            viewDate = this.localMoment(date, this.getFormat("datetime"));
          } else {
            viewDate = this.localMoment(date);
          }
          if (!viewDate || !viewDate.isValid())
            return logError();
          this.setState({ viewDate });
        }
        navigate(mode) {
          this._showView(mode);
        }
        callHandler(method, e2) {
          if (!method)
            return true;
          return method(e2) !== false;
        }
      }
      __publicField(Datetime, "propTypes", {
        value: datetype,
        initialValue: datetype,
        initialViewDate: datetype,
        initialViewMode: TYPES.oneOf([
          viewModes.YEARS,
          viewModes.MONTHS,
          viewModes.DAYS,
          viewModes.TIME
        ]),
        onOpen: TYPES.func,
        onClose: TYPES.func,
        onChange: TYPES.func,
        onNavigate: TYPES.func,
        onBeforeNavigate: TYPES.func,
        onNavigateBack: TYPES.func,
        onNavigateForward: TYPES.func,
        updateOnView: TYPES.string,
        locale: TYPES.string,
        utc: TYPES.bool,
        displayTimeZone: TYPES.string,
        input: TYPES.bool,
        dateFormat: TYPES.oneOfType([TYPES.string, TYPES.bool]),
        timeFormat: TYPES.oneOfType([TYPES.string, TYPES.bool]),
        inputProps: TYPES.object,
        timeConstraints: TYPES.object,
        isValidDate: TYPES.func,
        open: TYPES.bool,
        strictParsing: TYPES.bool,
        closeOnSelect: TYPES.bool,
        closeOnTab: TYPES.bool,
        renderView: TYPES.func,
        renderInput: TYPES.func,
        renderDay: TYPES.func,
        renderMonth: TYPES.func,
        renderYear: TYPES.func
      });
      __publicField(Datetime, "defaultProps", {
        onOpen: nofn,
        onClose: nofn,
        onCalendarOpen: nofn,
        onCalendarClose: nofn,
        onChange: nofn,
        onNavigate: nofn,
        onBeforeNavigate: function(next) {
          return next;
        },
        onNavigateBack: nofn,
        onNavigateForward: nofn,
        dateFormat: true,
        timeFormat: true,
        utc: false,
        className: "",
        input: true,
        inputProps: {},
        timeConstraints: {},
        isValidDate: function() {
          return true;
        },
        strictParsing: true,
        closeOnSelect: false,
        closeOnTab: true,
        closeOnClickOutside: true,
        renderView: (_2, renderFunc) => renderFunc()
      });
      __publicField(Datetime, "moment", hooks);
      function log(message2, method) {
        let con = typeof window !== "undefined" && window.console;
        if (!con)
          return;
        if (!method) {
          method = "warn";
        }
        con[method]("***react-datetime:" + message2);
      }
      class ClickOutBase extends React__default.Component {
        constructor() {
          super(...arguments);
          __publicField(this, "container", React__default.createRef());
        }
        render() {
          return React__default.createElement("div", {
            className: this.props.className,
            ref: this.container
          }, this.props.children);
        }
        handleClickOutside(e2) {
          this.props.onClickOut(e2);
        }
        setClickOutsideRef() {
          return this.container.current;
        }
      }
      const ClickableWrapper = onClickOutsideHOC(ClickOutBase);
      react.exports.createContext({
        currentBranch: null,
        setCurrentBranch: (branch) => {
          console.warn("BranchContext not initialized");
        }
      });
      function CursorPaginator({
        navigateNext,
        navigatePrev,
        hasNext,
        hasPrev,
        variant = "white"
      }) {
        return React__default.createElement("div", {
          className: "w-full flex flex-shrink-0 justify-end gap-2 items-center"
        }, React__default.createElement(Button, {
          variant,
          disabled: !hasPrev,
          onClick: navigatePrev
        }, React__default.createElement(BiLeftArrowAlt, {
          className: "w-6 h-full mr-2 opacity-70"
        }), " Previous"), React__default.createElement(Button, {
          variant,
          disabled: !hasNext,
          onClick: navigateNext
        }, "Next ", React__default.createElement(BiRightArrowAlt2, {
          className: "w-6 h-full ml-2 opacity-70"
        })));
      }
      function ListMediaItem({ item, onClick, active: active2 }) {
        const FileIcon = item.type === "dir" ? BiFolder : BiFile;
        const thumbnail = item.thumbnails["75x75"];
        return React__default.createElement("li", {
          className: `flex shrink-0 gap-3 items-center py-2 pl-2 pr-3 transition duration-150 ease-out cursor-pointer border-b border-gray-150 ${active2 ? "bg-gradient-to-r from-white to-gray-50/50 text-blue-500 hover:bg-gray-50" : "bg-white hover:bg-gray-50/50"}`,
          onClick: () => {
            if (!active2) {
              onClick(item);
            } else {
              onClick(false);
            }
          }
        }, React__default.createElement("div", {
          className: "w-20 h-20 bg-gray-50 shadow border border-gray-100 rounded overflow-hidden flex justify-center flex-shrink-0"
        }, isImage(thumbnail) ? React__default.createElement("img", {
          className: "object-cover w-full h-full object-center",
          src: thumbnail,
          alt: item.filename
        }) : React__default.createElement(FileIcon, {
          className: "w-3/5 h-full fill-gray-300"
        })), React__default.createElement("span", {
          className: "text-base flex-grow w-full break-words truncate"
        }, item.filename));
      }
      function GridMediaItem({ item, active: active2, onClick }) {
        const FileIcon = item.type === "dir" ? BiFolder : BiFile;
        const thumbnail = item.thumbnails["400x400"];
        return React__default.createElement("li", {
          className: `relative pb-[100%] h-0 block border border-gray-100 rounded-md overflow-hidden flex justify-center shrink-0 w-full transition duration-150 ease-out ${active2 ? "shadow-outline" : "shadow hover:shadow-md hover:scale-103 hover:border-gray-150"} ${item.type === "dir" ? "cursor-pointer" : ""}`
        }, React__default.createElement("button", {
          className: "absolute w-full h-full flex items-center justify-center bg-white",
          onClick: () => {
            if (!active2) {
              onClick(item);
            } else {
              onClick(false);
            }
          }
        }, isImage(thumbnail) ? React__default.createElement("img", {
          className: "object-cover w-full h-full object-center",
          src: thumbnail,
          alt: item.filename
        }) : React__default.createElement("div", {
          className: "p-4 w-full flex flex-col gap-4 items-center justify-center"
        }, React__default.createElement(FileIcon, {
          className: "w-[30%] h-auto fill-gray-300"
        }), React__default.createElement("span", {
          className: "block text-base text-gray-600 w-full break-words truncate"
        }, item.filename))));
      }
      function dirname(path) {
        var _a, _b;
        const pattern = new RegExp("(?<prevDir>.*)/");
        return (_b = (_a = path.match(pattern)) == null ? void 0 : _a.groups) == null ? void 0 : _b.prevDir;
      }
      const BreadcrumbButton = ({ className = "", ...props }) => React__default.createElement("button", {
        className: "capitalize transition-colors duration-150 border-0 bg-transparent hover:text-blue-500 " + className,
        ...props
      });
      function Breadcrumb({ directory = "", setDirectory }) {
        directory = directory.replace(/^\/|\/$/g, "");
        let prevDir = dirname(directory) || "";
        if (prevDir === ".") {
          prevDir = "";
        }
        return React__default.createElement("div", {
          className: "w-full flex items-center text-[16px] text-gray-300"
        }, directory !== "" && React__default.createElement(IconButton, {
          variant: "ghost",
          className: "mr-2",
          onClick: () => setDirectory(prevDir)
        }, React__default.createElement(LeftArrowIcon, {
          className: `w-7 h-auto fill-gray-300 hover:fill-gray-900 transition duration-150 ease-out`
        })), React__default.createElement(BreadcrumbButton, {
          onClick: () => setDirectory(""),
          className: directory === "" ? "text-gray-500 font-bold" : "text-gray-300 font-medium after:pl-1.5 after:content-['/']"
        }, "Media"), directory && directory.split("/").map((part, index2, parts) => {
          const currentDir = parts.slice(0, index2 + 1).join("/");
          return React__default.createElement(BreadcrumbButton, {
            className: "pl-1.5 " + (index2 + 1 === parts.length ? "text-gray-500 font-bold" : "text-gray-300 font-medium after:pl-1.5 after:content-['/']"),
            key: currentDir,
            onClick: () => {
              setDirectory(currentDir);
            }
          }, part);
        }));
      }
      const DeleteModal = ({
        close,
        deleteFunc,
        filename
      }) => {
        return React__default.createElement(Modal, null, React__default.createElement(PopupModal, null, React__default.createElement(ModalHeader, {
          close
        }, "Delete ", filename), React__default.createElement(ModalBody, {
          padded: true
        }, React__default.createElement("p", null, "Are you sure you want to delete ", React__default.createElement("strong", null, filename), "?")), React__default.createElement(ModalActions, null, React__default.createElement(Button, {
          style: { flexGrow: 2 },
          onClick: close
        }, "Cancel"), React__default.createElement(Button, {
          style: { flexGrow: 3 },
          variant: "danger",
          onClick: () => {
            deleteFunc();
            close();
          }
        }, "Delete"))));
      };
      const SyncModal = ({ close, syncFunc, folder, branch }) => {
        return React__default.createElement(Modal, null, React__default.createElement(PopupModal, null, React__default.createElement(ModalHeader, {
          close
        }, "Sync Media"), React__default.createElement(ModalBody, {
          padded: true
        }, React__default.createElement("p", null, `This will copy media assets from the \`${folder}\` folder on branch \`${branch}\` in your git repository to Tina Cloud's asset service. This will allow you to use these assets in your site with Tina Cloud`)), React__default.createElement(ModalActions, null, React__default.createElement(Button, {
          style: { flexGrow: 2 },
          onClick: close
        }, "Cancel"), React__default.createElement(Button, {
          style: { flexGrow: 3 },
          variant: "primary",
          onClick: async () => {
            await syncFunc();
            close();
          }
        }, "Sync Media"))));
      };
      const CopyField = ({ label, description, value }) => {
        const [copied, setCopied] = React__default.useState(false);
        const [fadeOut, setFadeOut] = React__default.useState(false);
        return React__default.createElement("div", {
          className: "w-full"
        }, label && React__default.createElement("label", {
          className: "w-full mb-1 block flex-1  text-sm font-bold leading-5 text-gray-700"
        }, label), React__default.createElement("span", {
          onClick: () => {
            if (copied === true)
              return;
            setCopied(true);
            setTimeout(() => {
              setFadeOut(true);
            }, 2500);
            setTimeout(() => {
              setCopied(false);
              setFadeOut(false);
            }, 3e3);
            navigator.clipboard.writeText(value);
          },
          className: `shadow-inner text-base leading-5 whitespace-normal break-all px-3 py-2 text-gray-600 w-full bg-gray-50 border border-gray-200 transition-all ease-out duration-150 rounded-md relative overflow-hidden appearance-none flex items-center w-full cursor-pointer hover:bg-white hover:text-blue-500  ${copied ? `pointer-events-none` : ``}`
        }, React__default.createElement(BiCopyAlt, {
          className: "relative text-blue-500 shrink-0 w-5 h-auto mr-1.5 -ml-0.5 z-20"
        }), " ", value, " ", copied && React__default.createElement("span", {
          className: `${fadeOut ? `opacity-0` : `opacity-100`} text-blue-500 transition-opacity	duration-500 absolute right-0 w-full h-full px-3 py-2 bg-white bg-opacity-90 flex items-center justify-center text-center tracking-wide font-medium z-10`
        }, React__default.createElement("span", null, "Copied to clipboard!"))), description && React__default.createElement("p", {
          className: "mt-2 text-sm text-gray-500"
        }, description));
      };
      async function poll(fn2, timeout, interval) {
        const endTime = Number(new Date()) + (timeout || 2e3);
        interval = interval || 100;
        const checkCondition = async function(resolve, reject) {
          const result = await fn2();
          if (result.complete) {
            resolve(result);
          } else if (Number(new Date()) < endTime) {
            setTimeout(checkCondition, interval, resolve, reject);
          } else {
            reject(new Error("Time out error"));
          }
        };
        return new Promise(checkCondition);
      }
      const join = function(...parts) {
        const [first, last2, slash] = [0, parts.length - 1, "/"];
        const matchLeadingSlash = new RegExp("^" + slash);
        const matchTrailingSlash = new RegExp(slash + "$");
        parts = parts.map(function(part, index2) {
          if (index2 === first && part === "file://")
            return part;
          if (index2 > first)
            part = part.replace(matchLeadingSlash, "");
          if (index2 < last2)
            part = part.replace(matchTrailingSlash, "");
          return part;
        });
        return parts.join(slash);
      };
      const defaultListError = new MediaListError$1({
        title: "Error fetching media",
        message: "Something went wrong while requesting the resource.",
        docsLink: "https://tina.io/docs/media/#media-store"
      });
      function MediaPicker({
        allowDelete,
        onSelect,
        close,
        ...props
      }) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
        const cms = useCMS();
        const [listState, setListState] = react.exports.useState(() => {
          if (cms.media.isConfigured)
            return "loading";
          return "not-configured";
        });
        const [deleteModalOpen, setDeleteModalOpen] = React__default.useState(false);
        const [listError, setListError] = react.exports.useState(defaultListError);
        const [directory, setDirectory] = react.exports.useState(props.directory);
        const [list2, setList] = react.exports.useState({
          items: [],
          nextOffset: void 0
        });
        const [showSync, setShowSync] = react.exports.useState(false);
        const [viewMode, setViewMode] = react.exports.useState("grid");
        const [activeItem, setActiveItem] = react.exports.useState(false);
        const closePreview = () => setActiveItem(false);
        const [offsetHistory, setOffsetHistory] = react.exports.useState([]);
        const [loadingText, setLoadingText] = react.exports.useState("");
        const offset2 = offsetHistory[offsetHistory.length - 1];
        const resetOffset = () => setOffsetHistory([]);
        const navigateNext = () => {
          if (!list2.nextOffset)
            return;
          setOffsetHistory([...offsetHistory, list2.nextOffset]);
        };
        const navigatePrev = () => {
          const offsets = offsetHistory.slice(0, offsetHistory.length - 1);
          setOffsetHistory(offsets);
        };
        const hasPrev = offsetHistory.length > 0;
        const hasNext = !!list2.nextOffset;
        const isLocal2 = cms.api.tina.isLocalMode;
        const hasTinaMedia = Object.keys(((_c = (_b = (_a = cms.api.tina.schema.schema) == null ? void 0 : _a.config) == null ? void 0 : _b.media) == null ? void 0 : _c.tina) || {}).includes("mediaRoot") && Object.keys(((_f = (_e = (_d = cms.api.tina.schema.schema) == null ? void 0 : _d.config) == null ? void 0 : _e.media) == null ? void 0 : _f.tina) || {}).includes("publicFolder");
        const folder = hasTinaMedia ? join((_i = (_h = (_g = cms.api.tina.schema.schema) == null ? void 0 : _g.config) == null ? void 0 : _h.media) == null ? void 0 : _i.tina.publicFolder, (_l = (_k = (_j = cms.api.tina.schema.schema) == null ? void 0 : _j.config) == null ? void 0 : _k.media) == null ? void 0 : _l.tina.mediaRoot) : "";
        const branch = (_m = cms.api.tina) == null ? void 0 : _m.branch;
        function loadMedia() {
          setListState("loading");
          cms.media.list({
            offset: offset2,
            limit: cms.media.pageSize,
            directory,
            thumbnailSizes: [
              { w: 75, h: 75 },
              { w: 400, h: 400 },
              { w: 1e3, h: 1e3 }
            ]
          }).then((list22) => {
            setList(list22);
            setListState("loaded");
          }).catch((e2) => {
            console.error(e2);
            if (e2.ERR_TYPE === "MediaListError") {
              setListError(e2);
            } else {
              setListError(defaultListError);
            }
            setListState("error");
          });
        }
        react.exports.useEffect(() => {
          if (!cms.media.isConfigured)
            return;
          loadMedia();
          return cms.events.subscribe(["media:upload:success", "media:delete:success", "media:pageSize"], loadMedia);
        }, [offset2, directory, cms.media.isConfigured]);
        const onClickMediaItem = (item) => {
          if (!item) {
            setActiveItem(false);
          } else if (item.type === "dir") {
            setDirectory(item.directory === "." || item.directory === "" ? item.filename : join(item.directory, item.filename));
            resetOffset();
          } else {
            setActiveItem(item);
          }
        };
        let deleteMediaItem;
        if (allowDelete) {
          deleteMediaItem = (item) => {
            cms.media.delete(item);
          };
        }
        let selectMediaItem;
        if (onSelect) {
          selectMediaItem = (item) => {
            onSelect(item);
            if (close)
              close();
          };
        }
        const [uploading, setUploading] = react.exports.useState(false);
        const { getRootProps, getInputProps, isDragActive } = useDropzone({
          accept: dropzoneAcceptFromString(cms.media.accept || DEFAULT_MEDIA_UPLOAD_TYPES),
          multiple: true,
          onDrop: async (files) => {
            try {
              setUploading(true);
              await cms.media.persist(files.map((file) => {
                return {
                  directory: directory || "/",
                  file
                };
              }));
            } catch {
            }
            setUploading(false);
          }
        });
        const syncMedia = async () => {
          if (hasTinaMedia) {
            const res = await cms.api.tina.syncTinaMedia();
            if (res == null ? void 0 : res.assetsSyncing) {
              try {
                setListState("loading");
                await poll(async () => {
                  var _a2, _b2;
                  const status = await cms.api.tina.checkSyncStatus({
                    assetsSyncing: res.assetsSyncing
                  });
                  const totalDone = (_a2 = Object.values(status.status).filter(Boolean)) == null ? void 0 : _a2.length;
                  const total = (_b2 = Object.keys(status.status)) == null ? void 0 : _b2.length;
                  setLoadingText(`${totalDone}/${total} Media items loaded`);
                  return status;
                }, 6e4, 3e3);
                setLoadingText("");
                loadMedia();
              } catch (e2) {
                cms.alerts.error("Error in syncing media, check console for more details");
                console.error("'Error in syncing media, check below for more details");
                console.error(e2);
              }
            } else {
              cms.alerts.warn("Whoops, Looks media is not set up correctly in Tina Cloud. Check console for more details");
              console.warn("Whoops, Looks media is not set up correctly. Check below for more details");
              console.warn(res);
            }
          }
        };
        const { onClick, ...rootProps } = getRootProps();
        function disableScrollBody() {
          const body = document == null ? void 0 : document.body;
          body.style.overflow = "hidden";
          return () => {
            body.style.overflow = "auto";
          };
        }
        react.exports.useEffect(disableScrollBody, []);
        if (listState === "loading" || uploading) {
          return React__default.createElement(LoadingMediaList, {
            extraText: loadingText
          });
        }
        if (listState === "not-configured") {
          return React__default.createElement(DocsLink, {
            title: "No Media Store Configured",
            message: "To use the media manager, you need to configure a Media Store.",
            docsLink: "https://tina.io/docs/reference/media/overview/"
          });
        }
        if (listState === "error") {
          const { title, message: message2, docsLink } = listError;
          return React__default.createElement(DocsLink, {
            title,
            message: message2,
            docsLink
          });
        }
        return React__default.createElement(React__default.Fragment, null, deleteModalOpen && React__default.createElement(DeleteModal, {
          filename: activeItem ? activeItem.filename : "",
          deleteFunc: () => {
            if (activeItem) {
              deleteMediaItem(activeItem);
              setActiveItem(false);
            }
          },
          close: () => setDeleteModalOpen(false)
        }), React__default.createElement(MediaPickerWrap, null, React__default.createElement("div", {
          className: "flex items-center bg-gray-50 border-b border-gray-150 gap-x-4 py-3 px-5 shadow-sm flex-shrink-0"
        }, React__default.createElement("div", {
          className: `grow-0 flex divide-x divide-gray-150 shadow-inner bg-gray-50 border border-gray-150 justify-between rounded-md`
        }, React__default.createElement("button", {
          className: `relative whitespace-nowrap flex items-center justify-center flex-1 block font-medium text-base px-2.5 py-1 transition-all ease-out duration-150 rounded-l-md ${viewMode === "grid" ? "bg-white text-blue-500 shadow" : "text-gray-400"}`,
          onClick: () => {
            setViewMode("grid");
          }
        }, React__default.createElement(BiGridAlt, {
          className: "w-6 h-full opacity-70"
        })), React__default.createElement("button", {
          className: `relative whitespace-nowrap flex items-center justify-center flex-1 block font-medium text-base px-2 py-1 transition-all ease-out duration-150 rounded-r-md ${viewMode === "list" ? "bg-white text-blue-500 shadow" : "text-gray-400"}`,
          onClick: () => {
            setViewMode("list");
          }
        }, React__default.createElement(BiListUl, {
          className: "w-8 h-full opacity-70"
        }))), React__default.createElement(Breadcrumb, {
          directory,
          setDirectory
        }), !isLocal2 && hasTinaMedia && React__default.createElement(Button, {
          busy: false,
          variant: "white",
          onClick: () => {
            setShowSync(true);
          }
        }, "Sync ", React__default.createElement(IoMdSync, {
          className: "w-6 h-full ml-2 opacity-70"
        })), React__default.createElement(UploadButton, {
          onClick,
          uploading
        })), React__default.createElement("div", {
          className: "flex h-full overflow-hidden bg-white"
        }, React__default.createElement("div", {
          className: "flex w-full flex-col h-full @container"
        }, React__default.createElement("ul", {
          ...rootProps,
          className: `h-full grow overflow-y-auto transition duration-150 ease-out bg-gradient-to-b from-gray-50/50 to-gray-50 ${list2.items.length === 0 || viewMode === "list" && "w-full flex flex-1 flex-col justify-start -mb-px"} ${list2.items.length > 0 && viewMode === "grid" && "w-full p-4 gap-4 grid grid-cols-1 @sm:grid-cols-2 @lg:grid-cols-3 @2xl:grid-cols-4 @4xl:grid-cols-6 @6xl:grid-cols-8 auto-rows-auto content-start justify-start"} ${isDragActive ? `border-2 border-blue-500 rounded-lg` : ``}`
        }, React__default.createElement("input", {
          ...getInputProps()
        }), listState === "loaded" && list2.items.length === 0 && React__default.createElement(EmptyMediaList, {
          hasTinaMedia
        }), viewMode === "list" && list2.items.map((item) => React__default.createElement(ListMediaItem, {
          key: item.id,
          item,
          onClick: onClickMediaItem,
          active: activeItem && activeItem.id === item.id
        })), viewMode === "grid" && list2.items.map((item) => React__default.createElement(GridMediaItem, {
          key: item.id,
          item,
          onClick: onClickMediaItem,
          active: activeItem && activeItem.id === item.id
        }))), React__default.createElement("div", {
          className: "bg-gradient-to-r to-gray-50/50 from-gray-50 shrink-0 grow-0 border-t border-gray-150 py-3 px-5 shadow-sm z-10"
        }, React__default.createElement(CursorPaginator, {
          hasNext,
          navigateNext,
          hasPrev,
          navigatePrev
        }))), React__default.createElement(ActiveItemPreview, {
          activeItem,
          close: closePreview,
          selectMediaItem,
          allowDelete,
          deleteMediaItem: () => {
            setDeleteModalOpen(true);
          }
        }))), showSync && React__default.createElement(SyncModal, {
          folder,
          branch,
          syncFunc: syncMedia,
          close: () => {
            setShowSync(false);
          }
        }));
      }
      const ActiveItemPreview = ({
        activeItem,
        close,
        selectMediaItem,
        deleteMediaItem,
        allowDelete
      }) => {
        const thumbnail = activeItem ? activeItem.thumbnails["1000x1000"] : "";
        return React__default.createElement("div", {
          className: `shrink-0 h-full flex flex-col items-start gap-3 overflow-y-auto bg-white border-l border-gray-100 bg-white shadow-md transition ease-out duration-150 ${activeItem ? `p-4 opacity-100 w-[35%] max-w-[560px] min-w-[240px]` : `translate-x-8 opacity-0 w-[0px]`}`
        }, activeItem && React__default.createElement(React__default.Fragment, null, React__default.createElement("div", {
          className: "flex grow-0 shrink-0 gap-2 w-full items-center justify-between"
        }, React__default.createElement("h3", {
          className: "text-lg text-gray-600 w-full max-w-full break-words block truncate flex-1"
        }, activeItem.filename), React__default.createElement(IconButton, {
          variant: "ghost",
          className: "group grow-0 shrink-0",
          onClick: close
        }, React__default.createElement(BiX, {
          className: `w-7 h-auto text-gray-500 opacity-50 group-hover:opacity-100 transition duration-150 ease-out`
        }))), isImage(thumbnail) ? React__default.createElement("div", {
          className: "w-full max-h-[75%]"
        }, React__default.createElement("img", {
          className: "block border border-gray-100 rounded-md overflow-hidden max-w-full max-h-full object-fit h-auto shadow",
          src: thumbnail,
          alt: activeItem.filename
        })) : React__default.createElement("span", {
          className: "p-3 border border-gray-100 rounded-md overflow-hidden bg-gray-50 shadow"
        }, React__default.createElement(BiFile, {
          className: "w-14 h-auto fill-gray-300"
        })), React__default.createElement("div", {
          className: "grow h-full w-full shrink flex flex-col gap-3 items-start justify-start"
        }, React__default.createElement(CopyField, {
          value: absoluteImgURL(activeItem.src),
          label: "URL"
        })), React__default.createElement("div", {
          className: "shrink-0 w-full flex flex-col justify-end items-start"
        }, React__default.createElement("div", {
          className: "flex w-full gap-3"
        }, selectMediaItem && React__default.createElement(Button, {
          size: "medium",
          variant: "primary",
          className: "grow",
          onClick: () => selectMediaItem(activeItem)
        }, "Insert", React__default.createElement(BiArrowToBottom, {
          className: "ml-1 -mr-0.5 w-6 h-auto text-white opacity-70"
        })), allowDelete && React__default.createElement(Button, {
          variant: "white",
          size: "medium",
          className: "grow max-w-[40%]",
          onClick: deleteMediaItem
        }, "Delete", React__default.createElement(TrashIcon2, {
          className: "ml-1 -mr-0.5 w-6 h-auto text-red-500 opacity-70"
        }))))));
      };
      const UploadButton = ({ onClick, uploading }) => {
        return React__default.createElement(Button, {
          variant: "primary",
          size: "custom",
          className: "text-sm h-10 px-6",
          busy: uploading,
          onClick
        }, uploading ? React__default.createElement(LoadingDots, null) : React__default.createElement(React__default.Fragment, null, "Upload ", React__default.createElement(BiCloudUpload, {
          className: "w-6 h-full ml-2 opacity-70"
        })));
      };
      const LoadingMediaList = (props) => {
        return React__default.createElement("div", {
          className: "w-full h-full flex flex-col items-center justify-center",
          ...props
        }, props.extraText && React__default.createElement("p", null, props.extraText), React__default.createElement(LoadingDots, {
          color: "var(--tina-color-primary)"
        }));
      };
      const MediaPickerWrap = ({ children }) => {
        return React__default.createElement("div", {
          className: "h-full flex-1 text-gray-700 flex flex-col relative bg-gray-50 outline-none active:outline-none focus:outline-none"
        }, children);
      };
      const EmptyMediaList = (props) => {
        return React__default.createElement("div", {
          className: `p-12 text-xl opacity-50 text-center`,
          ...props
        }, "Drag and drop assets here", props.hasTinaMedia && " or click 'Sync' to sync your media to Tina Cloud.");
      };
      const DocsLink = ({ title, message: message2, docsLink, ...props }) => {
        return React__default.createElement("div", {
          className: "h-3/4 text-center flex flex-col justify-center",
          ...props
        }, React__default.createElement("h2", {
          className: "mb-3 text-xl text-gray-600"
        }, title), React__default.createElement("div", {
          className: "mb-3 text-base text-gray-700"
        }, message2), React__default.createElement("a", {
          href: docsLink,
          target: "_blank",
          rel: "noreferrer noopener",
          className: "font-bold text-blue-500 hover:text-blue-600 hover:underline transition-all ease-out duration-150"
        }, "Learn More"));
      };
      createScreen({
        name: "Media Manager",
        Component: MediaPicker,
        Icon: MdOutlinePhotoLibrary,
        layout: "fullscreen",
        props: {
          allowDelete: true
        }
      });
      react.exports.createContext(-1);
      react.exports.createContext(null);
      class MediaListError extends Error {
        constructor(config22) {
          super(config22.message);
          this.ERR_TYPE = "MediaListError";
          this.title = config22.title;
          this.docsLink = config22.docsLink;
        }
      }
      const E_DEFAULT = new MediaListError({
        title: "An Error Occurred",
        message: "Something went wrong fetching your media from Cloudinary.",
        docsLink: "https://tina.io/docs/reference/media/external/cloudinary"
      });
      const E_UNAUTHORIZED = new MediaListError({
        title: "Unauthorized",
        message: "You don't have access to this resource.",
        docsLink: "https://tina.io/docs/reference/media/external/cloudinary/#set-up-api-routes-nextjs-example"
      });
      const E_CONFIG = new MediaListError({
        title: "Missing Credentials",
        message: "Unable to connect to Cloudinary because one or more environment variables are missing.",
        docsLink: "https://tina.io/docs/media-cloudinary/"
      });
      const E_KEY_FAIL = new MediaListError({
        title: "Bad Credentials",
        message: "Unable to connect to Cloudinary because one or more environment variables are misconfigured.",
        docsLink: "https://tina.io/docs/media-cloudinary/"
      });
      const E_BAD_ROUTE = new MediaListError({
        title: "Bad Route",
        message: "The Cloudinary API route is missing or misconfigured.",
        docsLink: "https://tina.io/docs/reference/media/external/cloudinary/#set-up-api-routes-nextjs-example"
      });
      const interpretErrorMessage = (message2) => {
        switch (message2) {
          case "Must supply cloud_name":
          case "Must supply api_key":
          case "Must supply api_secret":
            return E_CONFIG;
          case "unknown api_key":
            return E_KEY_FAIL;
          default:
            return E_DEFAULT;
        }
      };
      class CloudinaryMediaStore {
        constructor() {
          this.fetchFunction = (input, init2) => {
            return fetch(input, init2);
          };
          this.accept = DEFAULT_MEDIA_UPLOAD_TYPES;
          this.parse = (img) => {
            return img.src;
          };
        }
        async persist(media) {
          const newFiles = [];
          for (const item of media) {
            const { file, directory } = item;
            const formData = new FormData();
            formData.append("file", file);
            formData.append("directory", directory);
            formData.append("filename", file.name);
            const res = await this.fetchFunction(`/api/cloudinary/media`, {
              method: "POST",
              body: formData
            });
            if (res.status != 200) {
              const responseData = await res.json();
              throw new Error(responseData.message);
            }
            const fileRes = await res.json();
            await new Promise((resolve) => {
              setTimeout(resolve, 2e3);
            });
            const parsedRes = {
              type: "file",
              id: fileRes.public_id,
              filename: fileRes.original_filename,
              directory: "/",
              thumbnails: {
                "75x75": fileRes.url,
                "400x400": fileRes.url,
                "1000x1000": fileRes.url
              },
              src: fileRes.url
            };
            newFiles.push(parsedRes);
          }
          return newFiles;
        }
        async delete(media) {
          await this.fetchFunction(`/api/cloudinary/media/${encodeURIComponent(media.id)}`, {
            method: "DELETE"
          });
        }
        async list(options) {
          const query = this.buildQuery(options);
          const response = await this.fetchFunction("/api/cloudinary/media" + query);
          if (response.status == 401) {
            throw E_UNAUTHORIZED;
          }
          if (response.status == 404) {
            throw E_BAD_ROUTE;
          }
          if (response.status >= 500) {
            const { e: e2 } = await response.json();
            const error = interpretErrorMessage(e2);
            throw error;
          }
          const { items, offset: offset2 } = await response.json();
          return {
            items: items.map((item) => item),
            nextOffset: offset2
          };
        }
        buildQuery(options) {
          const params = Object.keys(options).filter((key) => options[key] !== "" && options[key] !== void 0).map((key) => `${key}=${options[key]}`).join("&");
          return `?${params}`;
        }
      }
      class TinaCloudCloudinaryMediaStore extends CloudinaryMediaStore {
        constructor(client) {
          super();
          this.client = client;
          this.fetchFunction = async (input, init2) => {
            try {
              const url = input.toString();
              const query = `${url.includes("?") ? "&" : "?"}clientID=${client.clientId}`;
              const res = client.fetchWithToken(url + query, init2);
              return res;
            } catch (error) {
              console.error(error);
            }
          };
        }
      }
      exports2.CloudinaryMediaStore = CloudinaryMediaStore;
      exports2.TinaCloudCloudinaryMediaStore = TinaCloudCloudinaryMediaStore;
      Object.defineProperties(exports2, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
    });
  }
});

// .tina/config.tsx
import { defineConfig } from "tinacms";

// components/layout/layout.tsx
import Head from "next/head";

// components/layout/header.tsx
import React231 from "react";
import Link from "next/link";
import { useRouter } from "next/router";

// node_modules/@heroicons/react/outline/esm/AcademicCapIcon.js
import * as React from "react";
function AcademicCapIcon(props, svgRef) {
  return React.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React.createElement("path", {
    d: "M12 14l9-5-9-5-9 5 9 5z"
  }), React.createElement("path", {
    d: "M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"
  }), React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"
  }));
}
var ForwardRef = React.forwardRef(AcademicCapIcon);

// node_modules/@heroicons/react/outline/esm/AdjustmentsIcon.js
import * as React2 from "react";
function AdjustmentsIcon(props, svgRef) {
  return React2.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React2.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
  }));
}
var ForwardRef2 = React2.forwardRef(AdjustmentsIcon);

// node_modules/@heroicons/react/outline/esm/AnnotationIcon.js
import * as React3 from "react";
function AnnotationIcon(props, svgRef) {
  return React3.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React3.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"
  }));
}
var ForwardRef3 = React3.forwardRef(AnnotationIcon);

// node_modules/@heroicons/react/outline/esm/ArchiveIcon.js
import * as React4 from "react";
function ArchiveIcon(props, svgRef) {
  return React4.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React4.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"
  }));
}
var ForwardRef4 = React4.forwardRef(ArchiveIcon);

// node_modules/@heroicons/react/outline/esm/ArrowCircleDownIcon.js
import * as React5 from "react";
function ArrowCircleDownIcon(props, svgRef) {
  return React5.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React5.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 13l-3 3m0 0l-3-3m3 3V8m0 13a9 9 0 110-18 9 9 0 010 18z"
  }));
}
var ForwardRef5 = React5.forwardRef(ArrowCircleDownIcon);

// node_modules/@heroicons/react/outline/esm/ArrowCircleLeftIcon.js
import * as React6 from "react";
function ArrowCircleLeftIcon(props, svgRef) {
  return React6.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React6.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z"
  }));
}
var ForwardRef6 = React6.forwardRef(ArrowCircleLeftIcon);

// node_modules/@heroicons/react/outline/esm/ArrowCircleRightIcon.js
import * as React7 from "react";
function ArrowCircleRightIcon(props, svgRef) {
  return React7.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React7.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef7 = React7.forwardRef(ArrowCircleRightIcon);

// node_modules/@heroicons/react/outline/esm/ArrowCircleUpIcon.js
import * as React8 from "react";
function ArrowCircleUpIcon(props, svgRef) {
  return React8.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React8.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 11l3-3m0 0l3 3m-3-3v8m0-13a9 9 0 110 18 9 9 0 010-18z"
  }));
}
var ForwardRef8 = React8.forwardRef(ArrowCircleUpIcon);

// node_modules/@heroicons/react/outline/esm/ArrowDownIcon.js
import * as React9 from "react";
function ArrowDownIcon(props, svgRef) {
  return React9.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React9.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19 14l-7 7m0 0l-7-7m7 7V3"
  }));
}
var ForwardRef9 = React9.forwardRef(ArrowDownIcon);

// node_modules/@heroicons/react/outline/esm/ArrowLeftIcon.js
import * as React10 from "react";
function ArrowLeftIcon(props, svgRef) {
  return React10.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React10.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10 19l-7-7m0 0l7-7m-7 7h18"
  }));
}
var ForwardRef10 = React10.forwardRef(ArrowLeftIcon);

// node_modules/@heroicons/react/outline/esm/ArrowNarrowDownIcon.js
import * as React11 from "react";
function ArrowNarrowDownIcon(props, svgRef) {
  return React11.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React11.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 17l-4 4m0 0l-4-4m4 4V3"
  }));
}
var ForwardRef11 = React11.forwardRef(ArrowNarrowDownIcon);

// node_modules/@heroicons/react/outline/esm/ArrowNarrowLeftIcon.js
import * as React12 from "react";
function ArrowNarrowLeftIcon(props, svgRef) {
  return React12.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React12.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 16l-4-4m0 0l4-4m-4 4h18"
  }));
}
var ForwardRef12 = React12.forwardRef(ArrowNarrowLeftIcon);

// node_modules/@heroicons/react/outline/esm/ArrowNarrowRightIcon.js
import * as React13 from "react";
function ArrowNarrowRightIcon(props, svgRef) {
  return React13.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React13.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 8l4 4m0 0l-4 4m4-4H3"
  }));
}
var ForwardRef13 = React13.forwardRef(ArrowNarrowRightIcon);

// node_modules/@heroicons/react/outline/esm/ArrowNarrowUpIcon.js
import * as React14 from "react";
function ArrowNarrowUpIcon(props, svgRef) {
  return React14.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React14.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 7l4-4m0 0l4 4m-4-4v18"
  }));
}
var ForwardRef14 = React14.forwardRef(ArrowNarrowUpIcon);

// node_modules/@heroicons/react/outline/esm/ArrowRightIcon.js
import * as React15 from "react";
function ArrowRightIcon(props, svgRef) {
  return React15.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React15.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M14 5l7 7m0 0l-7 7m7-7H3"
  }));
}
var ForwardRef15 = React15.forwardRef(ArrowRightIcon);

// node_modules/@heroicons/react/outline/esm/ArrowSmDownIcon.js
import * as React16 from "react";
function ArrowSmDownIcon(props, svgRef) {
  return React16.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React16.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 13l-5 5m0 0l-5-5m5 5V6"
  }));
}
var ForwardRef16 = React16.forwardRef(ArrowSmDownIcon);

// node_modules/@heroicons/react/outline/esm/ArrowSmLeftIcon.js
import * as React17 from "react";
function ArrowSmLeftIcon(props, svgRef) {
  return React17.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React17.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 17l-5-5m0 0l5-5m-5 5h12"
  }));
}
var ForwardRef17 = React17.forwardRef(ArrowSmLeftIcon);

// node_modules/@heroicons/react/outline/esm/ArrowSmRightIcon.js
import * as React18 from "react";
function ArrowSmRightIcon(props, svgRef) {
  return React18.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React18.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 7l5 5m0 0l-5 5m5-5H6"
  }));
}
var ForwardRef18 = React18.forwardRef(ArrowSmRightIcon);

// node_modules/@heroicons/react/outline/esm/ArrowSmUpIcon.js
import * as React19 from "react";
function ArrowSmUpIcon(props, svgRef) {
  return React19.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React19.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 11l5-5m0 0l5 5m-5-5v12"
  }));
}
var ForwardRef19 = React19.forwardRef(ArrowSmUpIcon);

// node_modules/@heroicons/react/outline/esm/ArrowUpIcon.js
import * as React20 from "react";
function ArrowUpIcon(props, svgRef) {
  return React20.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React20.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 10l7-7m0 0l7 7m-7-7v18"
  }));
}
var ForwardRef20 = React20.forwardRef(ArrowUpIcon);

// node_modules/@heroicons/react/outline/esm/ArrowsExpandIcon.js
import * as React21 from "react";
function ArrowsExpandIcon(props, svgRef) {
  return React21.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React21.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"
  }));
}
var ForwardRef21 = React21.forwardRef(ArrowsExpandIcon);

// node_modules/@heroicons/react/outline/esm/AtSymbolIcon.js
import * as React22 from "react";
function AtSymbolIcon(props, svgRef) {
  return React22.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React22.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"
  }));
}
var ForwardRef22 = React22.forwardRef(AtSymbolIcon);

// node_modules/@heroicons/react/outline/esm/BackspaceIcon.js
import * as React23 from "react";
function BackspaceIcon(props, svgRef) {
  return React23.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React23.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M3 12l6.414 6.414a2 2 0 001.414.586H19a2 2 0 002-2V7a2 2 0 00-2-2h-8.172a2 2 0 00-1.414.586L3 12z"
  }));
}
var ForwardRef23 = React23.forwardRef(BackspaceIcon);

// node_modules/@heroicons/react/outline/esm/BadgeCheckIcon.js
import * as React24 from "react";
function BadgeCheckIcon(props, svgRef) {
  return React24.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React24.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"
  }));
}
var ForwardRef24 = React24.forwardRef(BadgeCheckIcon);

// node_modules/@heroicons/react/outline/esm/BanIcon.js
import * as React25 from "react";
function BanIcon(props, svgRef) {
  return React25.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React25.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636"
  }));
}
var ForwardRef25 = React25.forwardRef(BanIcon);

// node_modules/@heroicons/react/outline/esm/BeakerIcon.js
import * as React26 from "react";
function BeakerIcon(props, svgRef) {
  return React26.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React26.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z"
  }));
}
var ForwardRef26 = React26.forwardRef(BeakerIcon);

// node_modules/@heroicons/react/outline/esm/BellIcon.js
import * as React27 from "react";
function BellIcon(props, svgRef) {
  return React27.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React27.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"
  }));
}
var ForwardRef27 = React27.forwardRef(BellIcon);

// node_modules/@heroicons/react/outline/esm/BookOpenIcon.js
import * as React28 from "react";
function BookOpenIcon(props, svgRef) {
  return React28.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React28.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
  }));
}
var ForwardRef28 = React28.forwardRef(BookOpenIcon);

// node_modules/@heroicons/react/outline/esm/BookmarkAltIcon.js
import * as React29 from "react";
function BookmarkAltIcon(props, svgRef) {
  return React29.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React29.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 4v12l-4-2-4 2V4M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
  }));
}
var ForwardRef29 = React29.forwardRef(BookmarkAltIcon);

// node_modules/@heroicons/react/outline/esm/BookmarkIcon.js
import * as React30 from "react";
function BookmarkIcon(props, svgRef) {
  return React30.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React30.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"
  }));
}
var ForwardRef30 = React30.forwardRef(BookmarkIcon);

// node_modules/@heroicons/react/outline/esm/BriefcaseIcon.js
import * as React31 from "react";
function BriefcaseIcon(props, svgRef) {
  return React31.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React31.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
  }));
}
var ForwardRef31 = React31.forwardRef(BriefcaseIcon);

// node_modules/@heroicons/react/outline/esm/CakeIcon.js
import * as React32 from "react";
function CakeIcon(props, svgRef) {
  return React32.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React32.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 15.546c-.523 0-1.046.151-1.5.454a2.704 2.704 0 01-3 0 2.704 2.704 0 00-3 0 2.704 2.704 0 01-3 0 2.704 2.704 0 00-3 0 2.704 2.704 0 01-3 0 2.701 2.701 0 00-1.5-.454M9 6v2m3-2v2m3-2v2M9 3h.01M12 3h.01M15 3h.01M21 21v-7a2 2 0 00-2-2H5a2 2 0 00-2 2v7h18zm-3-9v-2a2 2 0 00-2-2H8a2 2 0 00-2 2v2h12z"
  }));
}
var ForwardRef32 = React32.forwardRef(CakeIcon);

// node_modules/@heroicons/react/outline/esm/CalculatorIcon.js
import * as React33 from "react";
function CalculatorIcon(props, svgRef) {
  return React33.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React33.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"
  }));
}
var ForwardRef33 = React33.forwardRef(CalculatorIcon);

// node_modules/@heroicons/react/outline/esm/CalendarIcon.js
import * as React34 from "react";
function CalendarIcon(props, svgRef) {
  return React34.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React34.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
  }));
}
var ForwardRef34 = React34.forwardRef(CalendarIcon);

// node_modules/@heroicons/react/outline/esm/CameraIcon.js
import * as React35 from "react";
function CameraIcon(props, svgRef) {
  return React35.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React35.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"
  }), React35.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 13a3 3 0 11-6 0 3 3 0 016 0z"
  }));
}
var ForwardRef35 = React35.forwardRef(CameraIcon);

// node_modules/@heroicons/react/outline/esm/CashIcon.js
import * as React36 from "react";
function CashIcon(props, svgRef) {
  return React36.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React36.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"
  }));
}
var ForwardRef36 = React36.forwardRef(CashIcon);

// node_modules/@heroicons/react/outline/esm/ChartBarIcon.js
import * as React37 from "react";
function ChartBarIcon(props, svgRef) {
  return React37.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React37.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
  }));
}
var ForwardRef37 = React37.forwardRef(ChartBarIcon);

// node_modules/@heroicons/react/outline/esm/ChartPieIcon.js
import * as React38 from "react";
function ChartPieIcon(props, svgRef) {
  return React38.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React38.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z"
  }), React38.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z"
  }));
}
var ForwardRef38 = React38.forwardRef(ChartPieIcon);

// node_modules/@heroicons/react/outline/esm/ChartSquareBarIcon.js
import * as React39 from "react";
function ChartSquareBarIcon(props, svgRef) {
  return React39.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React39.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
  }));
}
var ForwardRef39 = React39.forwardRef(ChartSquareBarIcon);

// node_modules/@heroicons/react/outline/esm/ChatAlt2Icon.js
import * as React40 from "react";
function ChatAlt2Icon(props, svgRef) {
  return React40.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React40.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z"
  }));
}
var ForwardRef40 = React40.forwardRef(ChatAlt2Icon);

// node_modules/@heroicons/react/outline/esm/ChatAltIcon.js
import * as React41 from "react";
function ChatAltIcon(props, svgRef) {
  return React41.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React41.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
  }));
}
var ForwardRef41 = React41.forwardRef(ChatAltIcon);

// node_modules/@heroicons/react/outline/esm/ChatIcon.js
import * as React42 from "react";
function ChatIcon(props, svgRef) {
  return React42.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React42.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
  }));
}
var ForwardRef42 = React42.forwardRef(ChatIcon);

// node_modules/@heroicons/react/outline/esm/CheckCircleIcon.js
import * as React43 from "react";
function CheckCircleIcon(props, svgRef) {
  return React43.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React43.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef43 = React43.forwardRef(CheckCircleIcon);

// node_modules/@heroicons/react/outline/esm/CheckIcon.js
import * as React44 from "react";
function CheckIcon(props, svgRef) {
  return React44.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React44.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 13l4 4L19 7"
  }));
}
var ForwardRef44 = React44.forwardRef(CheckIcon);

// node_modules/@heroicons/react/outline/esm/ChevronDoubleDownIcon.js
import * as React45 from "react";
function ChevronDoubleDownIcon(props, svgRef) {
  return React45.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React45.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19 13l-7 7-7-7m14-8l-7 7-7-7"
  }));
}
var ForwardRef45 = React45.forwardRef(ChevronDoubleDownIcon);

// node_modules/@heroicons/react/outline/esm/ChevronDoubleLeftIcon.js
import * as React46 from "react";
function ChevronDoubleLeftIcon(props, svgRef) {
  return React46.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React46.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 19l-7-7 7-7m8 14l-7-7 7-7"
  }));
}
var ForwardRef46 = React46.forwardRef(ChevronDoubleLeftIcon);

// node_modules/@heroicons/react/outline/esm/ChevronDoubleRightIcon.js
import * as React47 from "react";
function ChevronDoubleRightIcon(props, svgRef) {
  return React47.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React47.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 5l7 7-7 7M5 5l7 7-7 7"
  }));
}
var ForwardRef47 = React47.forwardRef(ChevronDoubleRightIcon);

// node_modules/@heroicons/react/outline/esm/ChevronDoubleUpIcon.js
import * as React48 from "react";
function ChevronDoubleUpIcon(props, svgRef) {
  return React48.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React48.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 11l7-7 7 7M5 19l7-7 7 7"
  }));
}
var ForwardRef48 = React48.forwardRef(ChevronDoubleUpIcon);

// node_modules/@heroicons/react/outline/esm/ChevronDownIcon.js
import * as React49 from "react";
function ChevronDownIcon(props, svgRef) {
  return React49.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React49.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19 9l-7 7-7-7"
  }));
}
var ForwardRef49 = React49.forwardRef(ChevronDownIcon);

// node_modules/@heroicons/react/outline/esm/ChevronLeftIcon.js
import * as React50 from "react";
function ChevronLeftIcon(props, svgRef) {
  return React50.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React50.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 19l-7-7 7-7"
  }));
}
var ForwardRef50 = React50.forwardRef(ChevronLeftIcon);

// node_modules/@heroicons/react/outline/esm/ChevronRightIcon.js
import * as React51 from "react";
function ChevronRightIcon(props, svgRef) {
  return React51.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React51.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 5l7 7-7 7"
  }));
}
var ForwardRef51 = React51.forwardRef(ChevronRightIcon);

// node_modules/@heroicons/react/outline/esm/ChevronUpIcon.js
import * as React52 from "react";
function ChevronUpIcon(props, svgRef) {
  return React52.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React52.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 15l7-7 7 7"
  }));
}
var ForwardRef52 = React52.forwardRef(ChevronUpIcon);

// node_modules/@heroicons/react/outline/esm/ChipIcon.js
import * as React53 from "react";
function ChipIcon(props, svgRef) {
  return React53.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React53.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"
  }));
}
var ForwardRef53 = React53.forwardRef(ChipIcon);

// node_modules/@heroicons/react/outline/esm/ClipboardCheckIcon.js
import * as React54 from "react";
function ClipboardCheckIcon(props, svgRef) {
  return React54.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React54.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"
  }));
}
var ForwardRef54 = React54.forwardRef(ClipboardCheckIcon);

// node_modules/@heroicons/react/outline/esm/ClipboardCopyIcon.js
import * as React55 from "react";
function ClipboardCopyIcon(props, svgRef) {
  return React55.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React55.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"
  }));
}
var ForwardRef55 = React55.forwardRef(ClipboardCopyIcon);

// node_modules/@heroicons/react/outline/esm/ClipboardListIcon.js
import * as React56 from "react";
function ClipboardListIcon(props, svgRef) {
  return React56.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React56.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"
  }));
}
var ForwardRef56 = React56.forwardRef(ClipboardListIcon);

// node_modules/@heroicons/react/outline/esm/ClipboardIcon.js
import * as React57 from "react";
function ClipboardIcon(props, svgRef) {
  return React57.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React57.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
  }));
}
var ForwardRef57 = React57.forwardRef(ClipboardIcon);

// node_modules/@heroicons/react/outline/esm/ClockIcon.js
import * as React58 from "react";
function ClockIcon(props, svgRef) {
  return React58.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React58.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef58 = React58.forwardRef(ClockIcon);

// node_modules/@heroicons/react/outline/esm/CloudDownloadIcon.js
import * as React59 from "react";
function CloudDownloadIcon(props, svgRef) {
  return React59.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React59.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"
  }));
}
var ForwardRef59 = React59.forwardRef(CloudDownloadIcon);

// node_modules/@heroicons/react/outline/esm/CloudUploadIcon.js
import * as React60 from "react";
function CloudUploadIcon(props, svgRef) {
  return React60.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React60.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
  }));
}
var ForwardRef60 = React60.forwardRef(CloudUploadIcon);

// node_modules/@heroicons/react/outline/esm/CloudIcon.js
import * as React61 from "react";
function CloudIcon(props, svgRef) {
  return React61.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React61.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"
  }));
}
var ForwardRef61 = React61.forwardRef(CloudIcon);

// node_modules/@heroicons/react/outline/esm/CodeIcon.js
import * as React62 from "react";
function CodeIcon(props, svgRef) {
  return React62.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React62.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"
  }));
}
var ForwardRef62 = React62.forwardRef(CodeIcon);

// node_modules/@heroicons/react/outline/esm/CogIcon.js
import * as React63 from "react";
function CogIcon(props, svgRef) {
  return React63.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React63.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
  }), React63.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 12a3 3 0 11-6 0 3 3 0 016 0z"
  }));
}
var ForwardRef63 = React63.forwardRef(CogIcon);

// node_modules/@heroicons/react/outline/esm/CollectionIcon.js
import * as React64 from "react";
function CollectionIcon(props, svgRef) {
  return React64.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React64.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
  }));
}
var ForwardRef64 = React64.forwardRef(CollectionIcon);

// node_modules/@heroicons/react/outline/esm/ColorSwatchIcon.js
import * as React65 from "react";
function ColorSwatchIcon(props, svgRef) {
  return React65.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React65.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"
  }));
}
var ForwardRef65 = React65.forwardRef(ColorSwatchIcon);

// node_modules/@heroicons/react/outline/esm/CreditCardIcon.js
import * as React66 from "react";
function CreditCardIcon(props, svgRef) {
  return React66.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React66.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"
  }));
}
var ForwardRef66 = React66.forwardRef(CreditCardIcon);

// node_modules/@heroicons/react/outline/esm/CubeTransparentIcon.js
import * as React67 from "react";
function CubeTransparentIcon(props, svgRef) {
  return React67.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React67.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5"
  }));
}
var ForwardRef67 = React67.forwardRef(CubeTransparentIcon);

// node_modules/@heroicons/react/outline/esm/CubeIcon.js
import * as React68 from "react";
function CubeIcon(props, svgRef) {
  return React68.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React68.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
  }));
}
var ForwardRef68 = React68.forwardRef(CubeIcon);

// node_modules/@heroicons/react/outline/esm/CurrencyBangladeshiIcon.js
import * as React69 from "react";
function CurrencyBangladeshiIcon(props, svgRef) {
  return React69.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React69.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 11V9a2 2 0 00-2-2m2 4v4a2 2 0 104 0v-1m-4-3H9m2 0h4m6 1a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef69 = React69.forwardRef(CurrencyBangladeshiIcon);

// node_modules/@heroicons/react/outline/esm/CurrencyDollarIcon.js
import * as React70 from "react";
function CurrencyDollarIcon(props, svgRef) {
  return React70.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React70.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef70 = React70.forwardRef(CurrencyDollarIcon);

// node_modules/@heroicons/react/outline/esm/CurrencyEuroIcon.js
import * as React71 from "react";
function CurrencyEuroIcon(props, svgRef) {
  return React71.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React71.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M14.121 15.536c-1.171 1.952-3.07 1.952-4.242 0-1.172-1.953-1.172-5.119 0-7.072 1.171-1.952 3.07-1.952 4.242 0M8 10.5h4m-4 3h4m9-1.5a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef71 = React71.forwardRef(CurrencyEuroIcon);

// node_modules/@heroicons/react/outline/esm/CurrencyPoundIcon.js
import * as React72 from "react";
function CurrencyPoundIcon(props, svgRef) {
  return React72.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React72.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 9a2 2 0 10-4 0v5a2 2 0 01-2 2h6m-6-4h4m8 0a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef72 = React72.forwardRef(CurrencyPoundIcon);

// node_modules/@heroicons/react/outline/esm/CurrencyRupeeIcon.js
import * as React73 from "react";
function CurrencyRupeeIcon(props, svgRef) {
  return React73.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React73.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 8h6m-5 0a3 3 0 110 6H9l3 3m-3-6h6m6 1a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef73 = React73.forwardRef(CurrencyRupeeIcon);

// node_modules/@heroicons/react/outline/esm/CurrencyYenIcon.js
import * as React74 from "react";
function CurrencyYenIcon(props, svgRef) {
  return React74.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React74.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 8l3 5m0 0l3-5m-3 5v4m-3-5h6m-6 3h6m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef74 = React74.forwardRef(CurrencyYenIcon);

// node_modules/@heroicons/react/outline/esm/CursorClickIcon.js
import * as React75 from "react";
function CursorClickIcon(props, svgRef) {
  return React75.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React75.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"
  }));
}
var ForwardRef75 = React75.forwardRef(CursorClickIcon);

// node_modules/@heroicons/react/outline/esm/DatabaseIcon.js
import * as React76 from "react";
function DatabaseIcon(props, svgRef) {
  return React76.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React76.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4"
  }));
}
var ForwardRef76 = React76.forwardRef(DatabaseIcon);

// node_modules/@heroicons/react/outline/esm/DesktopComputerIcon.js
import * as React77 from "react";
function DesktopComputerIcon(props, svgRef) {
  return React77.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React77.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
  }));
}
var ForwardRef77 = React77.forwardRef(DesktopComputerIcon);

// node_modules/@heroicons/react/outline/esm/DeviceMobileIcon.js
import * as React78 from "react";
function DeviceMobileIcon(props, svgRef) {
  return React78.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React78.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"
  }));
}
var ForwardRef78 = React78.forwardRef(DeviceMobileIcon);

// node_modules/@heroicons/react/outline/esm/DeviceTabletIcon.js
import * as React79 from "react";
function DeviceTabletIcon(props, svgRef) {
  return React79.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React79.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 18h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"
  }));
}
var ForwardRef79 = React79.forwardRef(DeviceTabletIcon);

// node_modules/@heroicons/react/outline/esm/DocumentAddIcon.js
import * as React80 from "react";
function DocumentAddIcon(props, svgRef) {
  return React80.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React80.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
  }));
}
var ForwardRef80 = React80.forwardRef(DocumentAddIcon);

// node_modules/@heroicons/react/outline/esm/DocumentDownloadIcon.js
import * as React81 from "react";
function DocumentDownloadIcon(props, svgRef) {
  return React81.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React81.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
  }));
}
var ForwardRef81 = React81.forwardRef(DocumentDownloadIcon);

// node_modules/@heroicons/react/outline/esm/DocumentDuplicateIcon.js
import * as React82 from "react";
function DocumentDuplicateIcon(props, svgRef) {
  return React82.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React82.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"
  }));
}
var ForwardRef82 = React82.forwardRef(DocumentDuplicateIcon);

// node_modules/@heroicons/react/outline/esm/DocumentRemoveIcon.js
import * as React83 from "react";
function DocumentRemoveIcon(props, svgRef) {
  return React83.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React83.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 13h6m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
  }));
}
var ForwardRef83 = React83.forwardRef(DocumentRemoveIcon);

// node_modules/@heroicons/react/outline/esm/DocumentReportIcon.js
import * as React84 from "react";
function DocumentReportIcon(props, svgRef) {
  return React84.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React84.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
  }));
}
var ForwardRef84 = React84.forwardRef(DocumentReportIcon);

// node_modules/@heroicons/react/outline/esm/DocumentSearchIcon.js
import * as React85 from "react";
function DocumentSearchIcon(props, svgRef) {
  return React85.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React85.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10 21h7a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v11m0 5l4.879-4.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242z"
  }));
}
var ForwardRef85 = React85.forwardRef(DocumentSearchIcon);

// node_modules/@heroicons/react/outline/esm/DocumentTextIcon.js
import * as React86 from "react";
function DocumentTextIcon(props, svgRef) {
  return React86.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React86.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
  }));
}
var ForwardRef86 = React86.forwardRef(DocumentTextIcon);

// node_modules/@heroicons/react/outline/esm/DocumentIcon.js
import * as React87 from "react";
function DocumentIcon(props, svgRef) {
  return React87.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React87.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"
  }));
}
var ForwardRef87 = React87.forwardRef(DocumentIcon);

// node_modules/@heroicons/react/outline/esm/DotsCircleHorizontalIcon.js
import * as React88 from "react";
function DotsCircleHorizontalIcon(props, svgRef) {
  return React88.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React88.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 12h.01M12 12h.01M16 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef88 = React88.forwardRef(DotsCircleHorizontalIcon);

// node_modules/@heroicons/react/outline/esm/DotsHorizontalIcon.js
import * as React89 from "react";
function DotsHorizontalIcon(props, svgRef) {
  return React89.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React89.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"
  }));
}
var ForwardRef89 = React89.forwardRef(DotsHorizontalIcon);

// node_modules/@heroicons/react/outline/esm/DotsVerticalIcon.js
import * as React90 from "react";
function DotsVerticalIcon(props, svgRef) {
  return React90.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React90.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"
  }));
}
var ForwardRef90 = React90.forwardRef(DotsVerticalIcon);

// node_modules/@heroicons/react/outline/esm/DownloadIcon.js
import * as React91 from "react";
function DownloadIcon(props, svgRef) {
  return React91.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React91.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
  }));
}
var ForwardRef91 = React91.forwardRef(DownloadIcon);

// node_modules/@heroicons/react/outline/esm/DuplicateIcon.js
import * as React92 from "react";
function DuplicateIcon(props, svgRef) {
  return React92.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React92.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
  }));
}
var ForwardRef92 = React92.forwardRef(DuplicateIcon);

// node_modules/@heroicons/react/outline/esm/EmojiHappyIcon.js
import * as React93 from "react";
function EmojiHappyIcon(props, svgRef) {
  return React93.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React93.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef93 = React93.forwardRef(EmojiHappyIcon);

// node_modules/@heroicons/react/outline/esm/EmojiSadIcon.js
import * as React94 from "react";
function EmojiSadIcon(props, svgRef) {
  return React94.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React94.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef94 = React94.forwardRef(EmojiSadIcon);

// node_modules/@heroicons/react/outline/esm/ExclamationCircleIcon.js
import * as React95 from "react";
function ExclamationCircleIcon(props, svgRef) {
  return React95.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React95.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef95 = React95.forwardRef(ExclamationCircleIcon);

// node_modules/@heroicons/react/outline/esm/ExclamationIcon.js
import * as React96 from "react";
function ExclamationIcon(props, svgRef) {
  return React96.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React96.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
  }));
}
var ForwardRef96 = React96.forwardRef(ExclamationIcon);

// node_modules/@heroicons/react/outline/esm/ExternalLinkIcon.js
import * as React97 from "react";
function ExternalLinkIcon(props, svgRef) {
  return React97.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React97.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
  }));
}
var ForwardRef97 = React97.forwardRef(ExternalLinkIcon);

// node_modules/@heroicons/react/outline/esm/EyeOffIcon.js
import * as React98 from "react";
function EyeOffIcon(props, svgRef) {
  return React98.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React98.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"
  }));
}
var ForwardRef98 = React98.forwardRef(EyeOffIcon);

// node_modules/@heroicons/react/outline/esm/EyeIcon.js
import * as React99 from "react";
function EyeIcon(props, svgRef) {
  return React99.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React99.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 12a3 3 0 11-6 0 3 3 0 016 0z"
  }), React99.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
  }));
}
var ForwardRef99 = React99.forwardRef(EyeIcon);

// node_modules/@heroicons/react/outline/esm/FastForwardIcon.js
import * as React100 from "react";
function FastForwardIcon(props, svgRef) {
  return React100.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React100.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11.933 12.8a1 1 0 000-1.6L6.6 7.2A1 1 0 005 8v8a1 1 0 001.6.8l5.333-4zM19.933 12.8a1 1 0 000-1.6l-5.333-4A1 1 0 0013 8v8a1 1 0 001.6.8l5.333-4z"
  }));
}
var ForwardRef100 = React100.forwardRef(FastForwardIcon);

// node_modules/@heroicons/react/outline/esm/FilmIcon.js
import * as React101 from "react";
function FilmIcon(props, svgRef) {
  return React101.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React101.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 4v16M17 4v16M3 8h4m10 0h4M3 12h18M3 16h4m10 0h4M4 20h16a1 1 0 001-1V5a1 1 0 00-1-1H4a1 1 0 00-1 1v14a1 1 0 001 1z"
  }));
}
var ForwardRef101 = React101.forwardRef(FilmIcon);

// node_modules/@heroicons/react/outline/esm/FilterIcon.js
import * as React102 from "react";
function FilterIcon(props, svgRef) {
  return React102.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React102.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
  }));
}
var ForwardRef102 = React102.forwardRef(FilterIcon);

// node_modules/@heroicons/react/outline/esm/FingerPrintIcon.js
import * as React103 from "react";
function FingerPrintIcon(props, svgRef) {
  return React103.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React103.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4"
  }));
}
var ForwardRef103 = React103.forwardRef(FingerPrintIcon);

// node_modules/@heroicons/react/outline/esm/FireIcon.js
import * as React104 from "react";
function FireIcon(props, svgRef) {
  return React104.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React104.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z"
  }), React104.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z"
  }));
}
var ForwardRef104 = React104.forwardRef(FireIcon);

// node_modules/@heroicons/react/outline/esm/FlagIcon.js
import * as React105 from "react";
function FlagIcon(props, svgRef) {
  return React105.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React105.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 1H21l-3 6 3 6h-8.5l-1-1H5a2 2 0 00-2 2zm9-13.5V9"
  }));
}
var ForwardRef105 = React105.forwardRef(FlagIcon);

// node_modules/@heroicons/react/outline/esm/FolderAddIcon.js
import * as React106 from "react";
function FolderAddIcon(props, svgRef) {
  return React106.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React106.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"
  }));
}
var ForwardRef106 = React106.forwardRef(FolderAddIcon);

// node_modules/@heroicons/react/outline/esm/FolderDownloadIcon.js
import * as React107 from "react";
function FolderDownloadIcon(props, svgRef) {
  return React107.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React107.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"
  }));
}
var ForwardRef107 = React107.forwardRef(FolderDownloadIcon);

// node_modules/@heroicons/react/outline/esm/FolderOpenIcon.js
import * as React108 from "react";
function FolderOpenIcon(props, svgRef) {
  return React108.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React108.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"
  }));
}
var ForwardRef108 = React108.forwardRef(FolderOpenIcon);

// node_modules/@heroicons/react/outline/esm/FolderRemoveIcon.js
import * as React109 from "react";
function FolderRemoveIcon(props, svgRef) {
  return React109.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React109.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 13h6M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z"
  }));
}
var ForwardRef109 = React109.forwardRef(FolderRemoveIcon);

// node_modules/@heroicons/react/outline/esm/FolderIcon.js
import * as React110 from "react";
function FolderIcon(props, svgRef) {
  return React110.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React110.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"
  }));
}
var ForwardRef110 = React110.forwardRef(FolderIcon);

// node_modules/@heroicons/react/outline/esm/GiftIcon.js
import * as React111 from "react";
function GiftIcon(props, svgRef) {
  return React111.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React111.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7"
  }));
}
var ForwardRef111 = React111.forwardRef(GiftIcon);

// node_modules/@heroicons/react/outline/esm/GlobeAltIcon.js
import * as React112 from "react";
function GlobeAltIcon(props, svgRef) {
  return React112.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React112.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"
  }));
}
var ForwardRef112 = React112.forwardRef(GlobeAltIcon);

// node_modules/@heroicons/react/outline/esm/GlobeIcon.js
import * as React113 from "react";
function GlobeIcon(props, svgRef) {
  return React113.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React113.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef113 = React113.forwardRef(GlobeIcon);

// node_modules/@heroicons/react/outline/esm/HandIcon.js
import * as React114 from "react";
function HandIcon(props, svgRef) {
  return React114.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React114.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 00-3 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11m0-5.5a1.5 1.5 0 013 0v3m0 0V11"
  }));
}
var ForwardRef114 = React114.forwardRef(HandIcon);

// node_modules/@heroicons/react/outline/esm/HashtagIcon.js
import * as React115 from "react";
function HashtagIcon(props, svgRef) {
  return React115.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React115.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 20l4-16m2 16l4-16M6 9h14M4 15h14"
  }));
}
var ForwardRef115 = React115.forwardRef(HashtagIcon);

// node_modules/@heroicons/react/outline/esm/HeartIcon.js
import * as React116 from "react";
function HeartIcon(props, svgRef) {
  return React116.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React116.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
  }));
}
var ForwardRef116 = React116.forwardRef(HeartIcon);

// node_modules/@heroicons/react/outline/esm/HomeIcon.js
import * as React117 from "react";
function HomeIcon(props, svgRef) {
  return React117.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React117.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
  }));
}
var ForwardRef117 = React117.forwardRef(HomeIcon);

// node_modules/@heroicons/react/outline/esm/IdentificationIcon.js
import * as React118 from "react";
function IdentificationIcon(props, svgRef) {
  return React118.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React118.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"
  }));
}
var ForwardRef118 = React118.forwardRef(IdentificationIcon);

// node_modules/@heroicons/react/outline/esm/InboxInIcon.js
import * as React119 from "react";
function InboxInIcon(props, svgRef) {
  return React119.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React119.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 4H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293h3.172a1 1 0 00.707-.293l2.414-2.414a1 1 0 01.707-.293H20"
  }));
}
var ForwardRef119 = React119.forwardRef(InboxInIcon);

// node_modules/@heroicons/react/outline/esm/InboxIcon.js
import * as React120 from "react";
function InboxIcon(props, svgRef) {
  return React120.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React120.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
  }));
}
var ForwardRef120 = React120.forwardRef(InboxIcon);

// node_modules/@heroicons/react/outline/esm/InformationCircleIcon.js
import * as React121 from "react";
function InformationCircleIcon(props, svgRef) {
  return React121.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React121.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef121 = React121.forwardRef(InformationCircleIcon);

// node_modules/@heroicons/react/outline/esm/KeyIcon.js
import * as React122 from "react";
function KeyIcon(props, svgRef) {
  return React122.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React122.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"
  }));
}
var ForwardRef122 = React122.forwardRef(KeyIcon);

// node_modules/@heroicons/react/outline/esm/LibraryIcon.js
import * as React123 from "react";
function LibraryIcon(props, svgRef) {
  return React123.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React123.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z"
  }));
}
var ForwardRef123 = React123.forwardRef(LibraryIcon);

// node_modules/@heroicons/react/outline/esm/LightBulbIcon.js
import * as React124 from "react";
function LightBulbIcon(props, svgRef) {
  return React124.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React124.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
  }));
}
var ForwardRef124 = React124.forwardRef(LightBulbIcon);

// node_modules/@heroicons/react/outline/esm/LightningBoltIcon.js
import * as React125 from "react";
function LightningBoltIcon(props, svgRef) {
  return React125.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React125.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 10V3L4 14h7v7l9-11h-7z"
  }));
}
var ForwardRef125 = React125.forwardRef(LightningBoltIcon);

// node_modules/@heroicons/react/outline/esm/LinkIcon.js
import * as React126 from "react";
function LinkIcon(props, svgRef) {
  return React126.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React126.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
  }));
}
var ForwardRef126 = React126.forwardRef(LinkIcon);

// node_modules/@heroicons/react/outline/esm/LocationMarkerIcon.js
import * as React127 from "react";
function LocationMarkerIcon(props, svgRef) {
  return React127.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React127.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
  }), React127.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 11a3 3 0 11-6 0 3 3 0 016 0z"
  }));
}
var ForwardRef127 = React127.forwardRef(LocationMarkerIcon);

// node_modules/@heroicons/react/outline/esm/LockClosedIcon.js
import * as React128 from "react";
function LockClosedIcon(props, svgRef) {
  return React128.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React128.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
  }));
}
var ForwardRef128 = React128.forwardRef(LockClosedIcon);

// node_modules/@heroicons/react/outline/esm/LockOpenIcon.js
import * as React129 from "react";
function LockOpenIcon(props, svgRef) {
  return React129.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React129.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z"
  }));
}
var ForwardRef129 = React129.forwardRef(LockOpenIcon);

// node_modules/@heroicons/react/outline/esm/LoginIcon.js
import * as React130 from "react";
function LoginIcon(props, svgRef) {
  return React130.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React130.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"
  }));
}
var ForwardRef130 = React130.forwardRef(LoginIcon);

// node_modules/@heroicons/react/outline/esm/LogoutIcon.js
import * as React131 from "react";
function LogoutIcon(props, svgRef) {
  return React131.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React131.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
  }));
}
var ForwardRef131 = React131.forwardRef(LogoutIcon);

// node_modules/@heroicons/react/outline/esm/MailOpenIcon.js
import * as React132 from "react";
function MailOpenIcon(props, svgRef) {
  return React132.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React132.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 19v-8.93a2 2 0 01.89-1.664l7-4.666a2 2 0 012.22 0l7 4.666A2 2 0 0121 10.07V19M3 19a2 2 0 002 2h14a2 2 0 002-2M3 19l6.75-4.5M21 19l-6.75-4.5M3 10l6.75 4.5M21 10l-6.75 4.5m0 0l-1.14.76a2 2 0 01-2.22 0l-1.14-.76"
  }));
}
var ForwardRef132 = React132.forwardRef(MailOpenIcon);

// node_modules/@heroicons/react/outline/esm/MailIcon.js
import * as React133 from "react";
function MailIcon(props, svgRef) {
  return React133.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React133.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
  }));
}
var ForwardRef133 = React133.forwardRef(MailIcon);

// node_modules/@heroicons/react/outline/esm/MapIcon.js
import * as React134 from "react";
function MapIcon(props, svgRef) {
  return React134.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React134.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"
  }));
}
var ForwardRef134 = React134.forwardRef(MapIcon);

// node_modules/@heroicons/react/outline/esm/MenuAlt1Icon.js
import * as React135 from "react";
function MenuAlt1Icon(props, svgRef) {
  return React135.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React135.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 6h16M4 12h8m-8 6h16"
  }));
}
var ForwardRef135 = React135.forwardRef(MenuAlt1Icon);

// node_modules/@heroicons/react/outline/esm/MenuAlt2Icon.js
import * as React136 from "react";
function MenuAlt2Icon(props, svgRef) {
  return React136.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React136.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 6h16M4 12h16M4 18h7"
  }));
}
var ForwardRef136 = React136.forwardRef(MenuAlt2Icon);

// node_modules/@heroicons/react/outline/esm/MenuAlt3Icon.js
import * as React137 from "react";
function MenuAlt3Icon(props, svgRef) {
  return React137.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React137.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 6h16M4 12h16m-7 6h7"
  }));
}
var ForwardRef137 = React137.forwardRef(MenuAlt3Icon);

// node_modules/@heroicons/react/outline/esm/MenuAlt4Icon.js
import * as React138 from "react";
function MenuAlt4Icon(props, svgRef) {
  return React138.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React138.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 8h16M4 16h16"
  }));
}
var ForwardRef138 = React138.forwardRef(MenuAlt4Icon);

// node_modules/@heroicons/react/outline/esm/MenuIcon.js
import * as React139 from "react";
function MenuIcon(props, svgRef) {
  return React139.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React139.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 6h16M4 12h16M4 18h16"
  }));
}
var ForwardRef139 = React139.forwardRef(MenuIcon);

// node_modules/@heroicons/react/outline/esm/MicrophoneIcon.js
import * as React140 from "react";
function MicrophoneIcon(props, svgRef) {
  return React140.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React140.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"
  }));
}
var ForwardRef140 = React140.forwardRef(MicrophoneIcon);

// node_modules/@heroicons/react/outline/esm/MinusCircleIcon.js
import * as React141 from "react";
function MinusCircleIcon(props, svgRef) {
  return React141.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React141.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef141 = React141.forwardRef(MinusCircleIcon);

// node_modules/@heroicons/react/outline/esm/MinusSmIcon.js
import * as React142 from "react";
function MinusSmIcon(props, svgRef) {
  return React142.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React142.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M18 12H6"
  }));
}
var ForwardRef142 = React142.forwardRef(MinusSmIcon);

// node_modules/@heroicons/react/outline/esm/MinusIcon.js
import * as React143 from "react";
function MinusIcon(props, svgRef) {
  return React143.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React143.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M20 12H4"
  }));
}
var ForwardRef143 = React143.forwardRef(MinusIcon);

// node_modules/@heroicons/react/outline/esm/MoonIcon.js
import * as React144 from "react";
function MoonIcon(props, svgRef) {
  return React144.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React144.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
  }));
}
var ForwardRef144 = React144.forwardRef(MoonIcon);

// node_modules/@heroicons/react/outline/esm/MusicNoteIcon.js
import * as React145 from "react";
function MusicNoteIcon(props, svgRef) {
  return React145.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React145.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"
  }));
}
var ForwardRef145 = React145.forwardRef(MusicNoteIcon);

// node_modules/@heroicons/react/outline/esm/NewspaperIcon.js
import * as React146 from "react";
function NewspaperIcon(props, svgRef) {
  return React146.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React146.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"
  }));
}
var ForwardRef146 = React146.forwardRef(NewspaperIcon);

// node_modules/@heroicons/react/outline/esm/OfficeBuildingIcon.js
import * as React147 from "react";
function OfficeBuildingIcon(props, svgRef) {
  return React147.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React147.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
  }));
}
var ForwardRef147 = React147.forwardRef(OfficeBuildingIcon);

// node_modules/@heroicons/react/outline/esm/PaperAirplaneIcon.js
import * as React148 from "react";
function PaperAirplaneIcon(props, svgRef) {
  return React148.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React148.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
  }));
}
var ForwardRef148 = React148.forwardRef(PaperAirplaneIcon);

// node_modules/@heroicons/react/outline/esm/PaperClipIcon.js
import * as React149 from "react";
function PaperClipIcon(props, svgRef) {
  return React149.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React149.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"
  }));
}
var ForwardRef149 = React149.forwardRef(PaperClipIcon);

// node_modules/@heroicons/react/outline/esm/PauseIcon.js
import * as React150 from "react";
function PauseIcon(props, svgRef) {
  return React150.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React150.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef150 = React150.forwardRef(PauseIcon);

// node_modules/@heroicons/react/outline/esm/PencilAltIcon.js
import * as React151 from "react";
function PencilAltIcon(props, svgRef) {
  return React151.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React151.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
  }));
}
var ForwardRef151 = React151.forwardRef(PencilAltIcon);

// node_modules/@heroicons/react/outline/esm/PencilIcon.js
import * as React152 from "react";
function PencilIcon(props, svgRef) {
  return React152.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React152.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
  }));
}
var ForwardRef152 = React152.forwardRef(PencilIcon);

// node_modules/@heroicons/react/outline/esm/PhoneIncomingIcon.js
import * as React153 from "react";
function PhoneIncomingIcon(props, svgRef) {
  return React153.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React153.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 3l-6 6m0 0V4m0 5h5M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z"
  }));
}
var ForwardRef153 = React153.forwardRef(PhoneIncomingIcon);

// node_modules/@heroicons/react/outline/esm/PhoneMissedCallIcon.js
import * as React154 from "react";
function PhoneMissedCallIcon(props, svgRef) {
  return React154.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React154.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 8l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z"
  }));
}
var ForwardRef154 = React154.forwardRef(PhoneMissedCallIcon);

// node_modules/@heroicons/react/outline/esm/PhoneOutgoingIcon.js
import * as React155 from "react";
function PhoneOutgoingIcon(props, svgRef) {
  return React155.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React155.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 3h5m0 0v5m0-5l-6 6M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z"
  }));
}
var ForwardRef155 = React155.forwardRef(PhoneOutgoingIcon);

// node_modules/@heroicons/react/outline/esm/PhoneIcon.js
import * as React156 from "react";
function PhoneIcon(props, svgRef) {
  return React156.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React156.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
  }));
}
var ForwardRef156 = React156.forwardRef(PhoneIcon);

// node_modules/@heroicons/react/outline/esm/PhotographIcon.js
import * as React157 from "react";
function PhotographIcon(props, svgRef) {
  return React157.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React157.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
  }));
}
var ForwardRef157 = React157.forwardRef(PhotographIcon);

// node_modules/@heroicons/react/outline/esm/PlayIcon.js
import * as React158 from "react";
function PlayIcon(props, svgRef) {
  return React158.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React158.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
  }), React158.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef158 = React158.forwardRef(PlayIcon);

// node_modules/@heroicons/react/outline/esm/PlusCircleIcon.js
import * as React159 from "react";
function PlusCircleIcon(props, svgRef) {
  return React159.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React159.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef159 = React159.forwardRef(PlusCircleIcon);

// node_modules/@heroicons/react/outline/esm/PlusSmIcon.js
import * as React160 from "react";
function PlusSmIcon(props, svgRef) {
  return React160.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React160.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 6v6m0 0v6m0-6h6m-6 0H6"
  }));
}
var ForwardRef160 = React160.forwardRef(PlusSmIcon);

// node_modules/@heroicons/react/outline/esm/PlusIcon.js
import * as React161 from "react";
function PlusIcon(props, svgRef) {
  return React161.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React161.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 4v16m8-8H4"
  }));
}
var ForwardRef161 = React161.forwardRef(PlusIcon);

// node_modules/@heroicons/react/outline/esm/PresentationChartBarIcon.js
import * as React162 from "react";
function PresentationChartBarIcon(props, svgRef) {
  return React162.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React162.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 13v-1m4 1v-3m4 3V8M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"
  }));
}
var ForwardRef162 = React162.forwardRef(PresentationChartBarIcon);

// node_modules/@heroicons/react/outline/esm/PresentationChartLineIcon.js
import * as React163 from "react";
function PresentationChartLineIcon(props, svgRef) {
  return React163.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React163.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"
  }));
}
var ForwardRef163 = React163.forwardRef(PresentationChartLineIcon);

// node_modules/@heroicons/react/outline/esm/PrinterIcon.js
import * as React164 from "react";
function PrinterIcon(props, svgRef) {
  return React164.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React164.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"
  }));
}
var ForwardRef164 = React164.forwardRef(PrinterIcon);

// node_modules/@heroicons/react/outline/esm/PuzzleIcon.js
import * as React165 from "react";
function PuzzleIcon(props, svgRef) {
  return React165.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React165.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 4a2 2 0 114 0v1a1 1 0 001 1h3a1 1 0 011 1v3a1 1 0 01-1 1h-1a2 2 0 100 4h1a1 1 0 011 1v3a1 1 0 01-1 1h-3a1 1 0 01-1-1v-1a2 2 0 10-4 0v1a1 1 0 01-1 1H7a1 1 0 01-1-1v-3a1 1 0 00-1-1H4a2 2 0 110-4h1a1 1 0 001-1V7a1 1 0 011-1h3a1 1 0 001-1V4z"
  }));
}
var ForwardRef165 = React165.forwardRef(PuzzleIcon);

// node_modules/@heroicons/react/outline/esm/QrcodeIcon.js
import * as React166 from "react";
function QrcodeIcon(props, svgRef) {
  return React166.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React166.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"
  }));
}
var ForwardRef166 = React166.forwardRef(QrcodeIcon);

// node_modules/@heroicons/react/outline/esm/QuestionMarkCircleIcon.js
import * as React167 from "react";
function QuestionMarkCircleIcon(props, svgRef) {
  return React167.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React167.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef167 = React167.forwardRef(QuestionMarkCircleIcon);

// node_modules/@heroicons/react/outline/esm/ReceiptRefundIcon.js
import * as React168 from "react";
function ReceiptRefundIcon(props, svgRef) {
  return React168.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React168.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 15v-1a4 4 0 00-4-4H8m0 0l3 3m-3-3l3-3m9 14V5a2 2 0 00-2-2H6a2 2 0 00-2 2v16l4-2 4 2 4-2 4 2z"
  }));
}
var ForwardRef168 = React168.forwardRef(ReceiptRefundIcon);

// node_modules/@heroicons/react/outline/esm/ReceiptTaxIcon.js
import * as React169 from "react";
function ReceiptTaxIcon(props, svgRef) {
  return React169.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React169.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 14l6-6m-5.5.5h.01m4.99 5h.01M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16l3.5-2 3.5 2 3.5-2 3.5 2zM10 8.5a.5.5 0 11-1 0 .5.5 0 011 0zm5 5a.5.5 0 11-1 0 .5.5 0 011 0z"
  }));
}
var ForwardRef169 = React169.forwardRef(ReceiptTaxIcon);

// node_modules/@heroicons/react/outline/esm/RefreshIcon.js
import * as React170 from "react";
function RefreshIcon(props, svgRef) {
  return React170.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React170.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
  }));
}
var ForwardRef170 = React170.forwardRef(RefreshIcon);

// node_modules/@heroicons/react/outline/esm/ReplyIcon.js
import * as React171 from "react";
function ReplyIcon(props, svgRef) {
  return React171.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React171.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"
  }));
}
var ForwardRef171 = React171.forwardRef(ReplyIcon);

// node_modules/@heroicons/react/outline/esm/RewindIcon.js
import * as React172 from "react";
function RewindIcon(props, svgRef) {
  return React172.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React172.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0019 16V8a1 1 0 00-1.6-.8l-5.333 4zM4.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0011 16V8a1 1 0 00-1.6-.8l-5.334 4z"
  }));
}
var ForwardRef172 = React172.forwardRef(RewindIcon);

// node_modules/@heroicons/react/outline/esm/RssIcon.js
import * as React173 from "react";
function RssIcon(props, svgRef) {
  return React173.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React173.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M6 5c7.18 0 13 5.82 13 13M6 11a7 7 0 017 7m-6 0a1 1 0 11-2 0 1 1 0 012 0z"
  }));
}
var ForwardRef173 = React173.forwardRef(RssIcon);

// node_modules/@heroicons/react/outline/esm/SaveAsIcon.js
import * as React174 from "react";
function SaveAsIcon(props, svgRef) {
  return React174.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React174.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2h2m3-4H9a2 2 0 00-2 2v7a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-1m-1 4l-3 3m0 0l-3-3m3 3V3"
  }));
}
var ForwardRef174 = React174.forwardRef(SaveAsIcon);

// node_modules/@heroicons/react/outline/esm/SaveIcon.js
import * as React175 from "react";
function SaveIcon(props, svgRef) {
  return React175.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React175.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"
  }));
}
var ForwardRef175 = React175.forwardRef(SaveIcon);

// node_modules/@heroicons/react/outline/esm/ScaleIcon.js
import * as React176 from "react";
function ScaleIcon(props, svgRef) {
  return React176.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React176.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3"
  }));
}
var ForwardRef176 = React176.forwardRef(ScaleIcon);

// node_modules/@heroicons/react/outline/esm/ScissorsIcon.js
import * as React177 from "react";
function ScissorsIcon(props, svgRef) {
  return React177.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React177.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M14.121 14.121L19 19m-7-7l7-7m-7 7l-2.879 2.879M12 12L9.121 9.121m0 5.758a3 3 0 10-4.243 4.243 3 3 0 004.243-4.243zm0-5.758a3 3 0 10-4.243-4.243 3 3 0 004.243 4.243z"
  }));
}
var ForwardRef177 = React177.forwardRef(ScissorsIcon);

// node_modules/@heroicons/react/outline/esm/SearchCircleIcon.js
import * as React178 from "react";
function SearchCircleIcon(props, svgRef) {
  return React178.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React178.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef178 = React178.forwardRef(SearchCircleIcon);

// node_modules/@heroicons/react/outline/esm/SearchIcon.js
import * as React179 from "react";
function SearchIcon(props, svgRef) {
  return React179.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React179.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
  }));
}
var ForwardRef179 = React179.forwardRef(SearchIcon);

// node_modules/@heroicons/react/outline/esm/SelectorIcon.js
import * as React180 from "react";
function SelectorIcon(props, svgRef) {
  return React180.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React180.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 9l4-4 4 4m0 6l-4 4-4-4"
  }));
}
var ForwardRef180 = React180.forwardRef(SelectorIcon);

// node_modules/@heroicons/react/outline/esm/ServerIcon.js
import * as React181 from "react";
function ServerIcon(props, svgRef) {
  return React181.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React181.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"
  }));
}
var ForwardRef181 = React181.forwardRef(ServerIcon);

// node_modules/@heroicons/react/outline/esm/ShareIcon.js
import * as React182 from "react";
function ShareIcon(props, svgRef) {
  return React182.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React182.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"
  }));
}
var ForwardRef182 = React182.forwardRef(ShareIcon);

// node_modules/@heroicons/react/outline/esm/ShieldCheckIcon.js
import * as React183 from "react";
function ShieldCheckIcon(props, svgRef) {
  return React183.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React183.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
  }));
}
var ForwardRef183 = React183.forwardRef(ShieldCheckIcon);

// node_modules/@heroicons/react/outline/esm/ShieldExclamationIcon.js
import * as React184 from "react";
function ShieldExclamationIcon(props, svgRef) {
  return React184.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React184.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M20.618 5.984A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016zM12 9v2m0 4h.01"
  }));
}
var ForwardRef184 = React184.forwardRef(ShieldExclamationIcon);

// node_modules/@heroicons/react/outline/esm/ShoppingBagIcon.js
import * as React185 from "react";
function ShoppingBagIcon(props, svgRef) {
  return React185.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React185.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"
  }));
}
var ForwardRef185 = React185.forwardRef(ShoppingBagIcon);

// node_modules/@heroicons/react/outline/esm/ShoppingCartIcon.js
import * as React186 from "react";
function ShoppingCartIcon(props, svgRef) {
  return React186.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React186.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
  }));
}
var ForwardRef186 = React186.forwardRef(ShoppingCartIcon);

// node_modules/@heroicons/react/outline/esm/SortAscendingIcon.js
import * as React187 from "react";
function SortAscendingIcon(props, svgRef) {
  return React187.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React187.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12"
  }));
}
var ForwardRef187 = React187.forwardRef(SortAscendingIcon);

// node_modules/@heroicons/react/outline/esm/SortDescendingIcon.js
import * as React188 from "react";
function SortDescendingIcon(props, svgRef) {
  return React188.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React188.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4"
  }));
}
var ForwardRef188 = React188.forwardRef(SortDescendingIcon);

// node_modules/@heroicons/react/outline/esm/SparklesIcon.js
import * as React189 from "react";
function SparklesIcon(props, svgRef) {
  return React189.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React189.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"
  }));
}
var ForwardRef189 = React189.forwardRef(SparklesIcon);

// node_modules/@heroicons/react/outline/esm/SpeakerphoneIcon.js
import * as React190 from "react";
function SpeakerphoneIcon(props, svgRef) {
  return React190.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React190.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"
  }));
}
var ForwardRef190 = React190.forwardRef(SpeakerphoneIcon);

// node_modules/@heroicons/react/outline/esm/StarIcon.js
import * as React191 from "react";
function StarIcon(props, svgRef) {
  return React191.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React191.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
  }));
}
var ForwardRef191 = React191.forwardRef(StarIcon);

// node_modules/@heroicons/react/outline/esm/StatusOfflineIcon.js
import * as React192 from "react";
function StatusOfflineIcon(props, svgRef) {
  return React192.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React192.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M18.364 5.636a9 9 0 010 12.728m0 0l-2.829-2.829m2.829 2.829L21 21M15.536 8.464a5 5 0 010 7.072m0 0l-2.829-2.829m-4.243 2.829a4.978 4.978 0 01-1.414-2.83m-1.414 5.658a9 9 0 01-2.167-9.238m7.824 2.167a1 1 0 111.414 1.414m-1.414-1.414L3 3m8.293 8.293l1.414 1.414"
  }));
}
var ForwardRef192 = React192.forwardRef(StatusOfflineIcon);

// node_modules/@heroicons/react/outline/esm/StatusOnlineIcon.js
import * as React193 from "react";
function StatusOnlineIcon(props, svgRef) {
  return React193.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React193.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5.636 18.364a9 9 0 010-12.728m12.728 0a9 9 0 010 12.728m-9.9-2.829a5 5 0 010-7.07m7.072 0a5 5 0 010 7.07M13 12a1 1 0 11-2 0 1 1 0 012 0z"
  }));
}
var ForwardRef193 = React193.forwardRef(StatusOnlineIcon);

// node_modules/@heroicons/react/outline/esm/StopIcon.js
import * as React194 from "react";
function StopIcon(props, svgRef) {
  return React194.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React194.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
  }), React194.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z"
  }));
}
var ForwardRef194 = React194.forwardRef(StopIcon);

// node_modules/@heroicons/react/outline/esm/SunIcon.js
import * as React195 from "react";
function SunIcon(props, svgRef) {
  return React195.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React195.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
  }));
}
var ForwardRef195 = React195.forwardRef(SunIcon);

// node_modules/@heroicons/react/outline/esm/SupportIcon.js
import * as React196 from "react";
function SupportIcon(props, svgRef) {
  return React196.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React196.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192l-3.536 3.536M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z"
  }));
}
var ForwardRef196 = React196.forwardRef(SupportIcon);

// node_modules/@heroicons/react/outline/esm/SwitchHorizontalIcon.js
import * as React197 from "react";
function SwitchHorizontalIcon(props, svgRef) {
  return React197.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React197.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"
  }));
}
var ForwardRef197 = React197.forwardRef(SwitchHorizontalIcon);

// node_modules/@heroicons/react/outline/esm/SwitchVerticalIcon.js
import * as React198 from "react";
function SwitchVerticalIcon(props, svgRef) {
  return React198.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React198.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"
  }));
}
var ForwardRef198 = React198.forwardRef(SwitchVerticalIcon);

// node_modules/@heroicons/react/outline/esm/TableIcon.js
import * as React199 from "react";
function TableIcon(props, svgRef) {
  return React199.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React199.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
  }));
}
var ForwardRef199 = React199.forwardRef(TableIcon);

// node_modules/@heroicons/react/outline/esm/TagIcon.js
import * as React200 from "react";
function TagIcon(props, svgRef) {
  return React200.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React200.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
  }));
}
var ForwardRef200 = React200.forwardRef(TagIcon);

// node_modules/@heroicons/react/outline/esm/TemplateIcon.js
import * as React201 from "react";
function TemplateIcon(props, svgRef) {
  return React201.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React201.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z"
  }));
}
var ForwardRef201 = React201.forwardRef(TemplateIcon);

// node_modules/@heroicons/react/outline/esm/TerminalIcon.js
import * as React202 from "react";
function TerminalIcon(props, svgRef) {
  return React202.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React202.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
  }));
}
var ForwardRef202 = React202.forwardRef(TerminalIcon);

// node_modules/@heroicons/react/outline/esm/ThumbDownIcon.js
import * as React203 from "react";
function ThumbDownIcon(props, svgRef) {
  return React203.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React203.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.736 3h4.018a2 2 0 01.485.06l3.76.94m-7 10v5a2 2 0 002 2h.096c.5 0 .905-.405.905-.904 0-.715.211-1.413.608-2.008L17 13V4m-7 10h2m5-10h2a2 2 0 012 2v6a2 2 0 01-2 2h-2.5"
  }));
}
var ForwardRef203 = React203.forwardRef(ThumbDownIcon);

// node_modules/@heroicons/react/outline/esm/ThumbUpIcon.js
import * as React204 from "react";
function ThumbUpIcon(props, svgRef) {
  return React204.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React204.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5"
  }));
}
var ForwardRef204 = React204.forwardRef(ThumbUpIcon);

// node_modules/@heroicons/react/outline/esm/TicketIcon.js
import * as React205 from "react";
function TicketIcon(props, svgRef) {
  return React205.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React205.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"
  }));
}
var ForwardRef205 = React205.forwardRef(TicketIcon);

// node_modules/@heroicons/react/outline/esm/TranslateIcon.js
import * as React206 from "react";
function TranslateIcon(props, svgRef) {
  return React206.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React206.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"
  }));
}
var ForwardRef206 = React206.forwardRef(TranslateIcon);

// node_modules/@heroicons/react/outline/esm/TrashIcon.js
import * as React207 from "react";
function TrashIcon(props, svgRef) {
  return React207.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React207.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
  }));
}
var ForwardRef207 = React207.forwardRef(TrashIcon);

// node_modules/@heroicons/react/outline/esm/TrendingDownIcon.js
import * as React208 from "react";
function TrendingDownIcon(props, svgRef) {
  return React208.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React208.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"
  }));
}
var ForwardRef208 = React208.forwardRef(TrendingDownIcon);

// node_modules/@heroicons/react/outline/esm/TrendingUpIcon.js
import * as React209 from "react";
function TrendingUpIcon(props, svgRef) {
  return React209.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React209.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
  }));
}
var ForwardRef209 = React209.forwardRef(TrendingUpIcon);

// node_modules/@heroicons/react/outline/esm/TruckIcon.js
import * as React210 from "react";
function TruckIcon(props, svgRef) {
  return React210.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React210.createElement("path", {
    d: "M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z"
  }), React210.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l3.414 3.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0m-4 0a2 2 0 114 0m6 0a2 2 0 104 0m-4 0a2 2 0 114 0"
  }));
}
var ForwardRef210 = React210.forwardRef(TruckIcon);

// node_modules/@heroicons/react/outline/esm/UploadIcon.js
import * as React211 from "react";
function UploadIcon(props, svgRef) {
  return React211.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React211.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
  }));
}
var ForwardRef211 = React211.forwardRef(UploadIcon);

// node_modules/@heroicons/react/outline/esm/UserAddIcon.js
import * as React212 from "react";
function UserAddIcon(props, svgRef) {
  return React212.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React212.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"
  }));
}
var ForwardRef212 = React212.forwardRef(UserAddIcon);

// node_modules/@heroicons/react/outline/esm/UserCircleIcon.js
import * as React213 from "react";
function UserCircleIcon(props, svgRef) {
  return React213.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React213.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef213 = React213.forwardRef(UserCircleIcon);

// node_modules/@heroicons/react/outline/esm/UserGroupIcon.js
import * as React214 from "react";
function UserGroupIcon(props, svgRef) {
  return React214.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React214.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
  }));
}
var ForwardRef214 = React214.forwardRef(UserGroupIcon);

// node_modules/@heroicons/react/outline/esm/UserRemoveIcon.js
import * as React215 from "react";
function UserRemoveIcon(props, svgRef) {
  return React215.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React215.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M13 7a4 4 0 11-8 0 4 4 0 018 0zM9 14a6 6 0 00-6 6v1h12v-1a6 6 0 00-6-6zM21 12h-6"
  }));
}
var ForwardRef215 = React215.forwardRef(UserRemoveIcon);

// node_modules/@heroicons/react/outline/esm/UserIcon.js
import * as React216 from "react";
function UserIcon(props, svgRef) {
  return React216.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React216.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
  }));
}
var ForwardRef216 = React216.forwardRef(UserIcon);

// node_modules/@heroicons/react/outline/esm/UsersIcon.js
import * as React217 from "react";
function UsersIcon(props, svgRef) {
  return React217.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React217.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"
  }));
}
var ForwardRef217 = React217.forwardRef(UsersIcon);

// node_modules/@heroicons/react/outline/esm/VariableIcon.js
import * as React218 from "react";
function VariableIcon(props, svgRef) {
  return React218.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React218.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4.871 4A17.926 17.926 0 003 12c0 2.874.673 5.59 1.871 8m14.13 0a17.926 17.926 0 001.87-8c0-2.874-.673-5.59-1.87-8M9 9h1.246a1 1 0 01.961.725l1.586 5.55a1 1 0 00.961.725H15m1-7h-.08a2 2 0 00-1.519.698L9.6 15.302A2 2 0 018.08 16H8"
  }));
}
var ForwardRef218 = React218.forwardRef(VariableIcon);

// node_modules/@heroicons/react/outline/esm/VideoCameraIcon.js
import * as React219 from "react";
function VideoCameraIcon(props, svgRef) {
  return React219.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React219.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
  }));
}
var ForwardRef219 = React219.forwardRef(VideoCameraIcon);

// node_modules/@heroicons/react/outline/esm/ViewBoardsIcon.js
import * as React220 from "react";
function ViewBoardsIcon(props, svgRef) {
  return React220.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React220.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2"
  }));
}
var ForwardRef220 = React220.forwardRef(ViewBoardsIcon);

// node_modules/@heroicons/react/outline/esm/ViewGridAddIcon.js
import * as React221 from "react";
function ViewGridAddIcon(props, svgRef) {
  return React221.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React221.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 14v6m-3-3h6M6 10h2a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2zm10 0h2a2 2 0 002-2V6a2 2 0 00-2-2h-2a2 2 0 00-2 2v2a2 2 0 002 2zM6 20h2a2 2 0 002-2v-2a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2z"
  }));
}
var ForwardRef221 = React221.forwardRef(ViewGridAddIcon);

// node_modules/@heroicons/react/outline/esm/ViewGridIcon.js
import * as React222 from "react";
function ViewGridIcon(props, svgRef) {
  return React222.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React222.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
  }));
}
var ForwardRef222 = React222.forwardRef(ViewGridIcon);

// node_modules/@heroicons/react/outline/esm/ViewListIcon.js
import * as React223 from "react";
function ViewListIcon(props, svgRef) {
  return React223.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React223.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M4 6h16M4 10h16M4 14h16M4 18h16"
  }));
}
var ForwardRef223 = React223.forwardRef(ViewListIcon);

// node_modules/@heroicons/react/outline/esm/VolumeOffIcon.js
import * as React224 from "react";
function VolumeOffIcon(props, svgRef) {
  return React224.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React224.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z",
    clipRule: "evenodd"
  }), React224.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"
  }));
}
var ForwardRef224 = React224.forwardRef(VolumeOffIcon);

// node_modules/@heroicons/react/outline/esm/VolumeUpIcon.js
import * as React225 from "react";
function VolumeUpIcon(props, svgRef) {
  return React225.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React225.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"
  }));
}
var ForwardRef225 = React225.forwardRef(VolumeUpIcon);

// node_modules/@heroicons/react/outline/esm/WifiIcon.js
import * as React226 from "react";
function WifiIcon(props, svgRef) {
  return React226.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React226.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0"
  }));
}
var ForwardRef226 = React226.forwardRef(WifiIcon);

// node_modules/@heroicons/react/outline/esm/XCircleIcon.js
import * as React227 from "react";
function XCircleIcon(props, svgRef) {
  return React227.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React227.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
  }));
}
var ForwardRef227 = React227.forwardRef(XCircleIcon);

// node_modules/@heroicons/react/outline/esm/XIcon.js
import * as React228 from "react";
function XIcon(props, svgRef) {
  return React228.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React228.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M6 18L18 6M6 6l12 12"
  }));
}
var ForwardRef228 = React228.forwardRef(XIcon);

// node_modules/@heroicons/react/outline/esm/ZoomInIcon.js
import * as React229 from "react";
function ZoomInIcon(props, svgRef) {
  return React229.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React229.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"
  }));
}
var ForwardRef229 = React229.forwardRef(ZoomInIcon);

// node_modules/@heroicons/react/outline/esm/ZoomOutIcon.js
import * as React230 from "react";
function ZoomOutIcon(props, svgRef) {
  return React230.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: 2,
    stroke: "currentColor",
    "aria-hidden": "true",
    ref: svgRef
  }, props), React230.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM13 10H7"
  }));
}
var ForwardRef230 = React230.forwardRef(ZoomOutIcon);

// components/layout/header.tsx
import { useState } from "react";

// components/layout/footer/footer.tsx
import React234 from "react";
import Link2 from "next/link";

// node_modules/react-icons/lib/esm/iconBase.js
import React233 from "react";

// node_modules/react-icons/lib/esm/iconContext.js
import React232 from "react";
var DefaultContext = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var IconContext = React232.createContext && React232.createContext(DefaultContext);

// node_modules/react-icons/lib/esm/iconBase.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function Tree2Element(tree) {
  return tree && tree.map(function(node, i) {
    return React233.createElement(node.tag, __assign({
      key: i
    }, node.attr), Tree2Element(node.child));
  });
}
function GenIcon(data) {
  return function(props) {
    return React233.createElement(IconBase, __assign({
      attr: __assign({}, data.attr)
    }, props), Tree2Element(data.child));
  };
}
function IconBase(props) {
  var elem = function(conf) {
    var attr = props.attr, size = props.size, title = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
    var computedSize = size || conf.size || "1em";
    var className;
    if (conf.className)
      className = conf.className;
    if (props.className)
      className = (className ? className + " " : "") + props.className;
    return React233.createElement("svg", __assign({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr, svgProps, {
      className,
      style: __assign(__assign({
        color: props.color || conf.color
      }, conf.style), props.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title && React233.createElement("title", null, title), props.children);
  };
  return IconContext !== void 0 ? React233.createElement(IconContext.Consumer, null, function(conf) {
    return elem(conf);
  }) : elem(DefaultContext);
}

// node_modules/react-icons/fa/index.esm.js
function FaChevronDown(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z" } }] })(props);
}
function FaChevronLeft(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 320 512" }, "child": [{ "tag": "path", "attr": { "d": "M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z" } }] })(props);
}
function FaChevronRight(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 320 512" }, "child": [{ "tag": "path", "attr": { "d": "M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z" } }] })(props);
}
function FaChevronUp(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z" } }] })(props);
}
function FaPlusCircle(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z" } }] })(props);
}
function FaTrashAlt(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z" } }] })(props);
}

// content/global/index.json
var global_default = {
  header: {
    name: "All About Momma",
    color: "default",
    nav: [
      {
        href: "",
        label: "Home"
      },
      {
        href: "category/pregnancy",
        label: "Pregnancy"
      },
      {
        href: "category/baby",
        label: "Baby"
      },
      {
        href: "category/toddler",
        label: "Toddler"
      },
      {
        href: "category/travel",
        label: "Travel"
      },
      {
        href: "about",
        label: "About"
      },
      {
        href: "contact",
        label: "Contact"
      }
    ]
  },
  footer: {
    color: "default",
    nav: [
      {
        href: "/about",
        label: "About"
      },
      {
        href: "/contact",
        label: "Contact"
      }
    ],
    social: {
      facebook: "/",
      twitter: "",
      instagram: "/",
      pinterest: "/"
    }
  },
  theme: {
    color: "gray_400",
    font: "montserrat",
    darkMode: "light"
  }
};

// components/layout/theme.tsx
import * as React235 from "react";
var ThemeContext = React235.createContext(global_default.theme);

// components/blocks/content.tsx
import { TinaMarkdown } from "tinacms/dist/rich-text";
var contentBlockSchema = {
  name: "content",
  label: "Content",
  ui: {
    defaultItem: {
      body: "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede."
    }
  },
  fields: [
    {
      type: "rich-text",
      label: "Body",
      name: "body"
    },
    {
      type: "string",
      label: "Color",
      name: "color",
      options: [
        { label: "Default", value: "default" },
        { label: "Tint", value: "tint" },
        { label: "Primary", value: "primary" }
      ]
    }
  ]
};

// components/util/actions.tsx
import Link3 from "next/link";

// components/blocks/features.tsx
import Link4 from "next/link";
var defaultFeature = {
  title: "Here's Another Feature",
  text: "This is where you might talk about the feature, if this wasn't just filler text."
};
var featureBlockSchema = {
  name: "features",
  label: "Features",
  ui: {
    defaultItem: {
      items: [defaultFeature, defaultFeature, defaultFeature]
    }
  },
  fields: [
    {
      type: "string",
      label: "Title",
      name: "title"
    },
    {
      type: "object",
      label: "Feature Items",
      name: "items",
      list: true,
      ui: {
        itemProps: (item) => {
          return {
            label: item?.title
          };
        },
        defaultItem: {
          ...defaultFeature
        }
      },
      fields: [
        {
          type: "string",
          label: "Title",
          name: "title"
        },
        {
          type: "string",
          label: "Text",
          name: "text",
          ui: {
            component: "textarea"
          }
        },
        {
          type: "image",
          name: "image",
          label: "Image"
        },
        {
          type: "string",
          name: "url",
          label: "Link URL"
        },
        {
          type: "boolean",
          name: "imageBackground",
          label: "Use image as background"
        }
      ]
    },
    {
      type: "string",
      label: "Color",
      name: "color",
      options: [
        { label: "Default", value: "default" },
        { label: "Tint", value: "tint" },
        { label: "Primary", value: "primary" }
      ]
    }
  ]
};

// components/blocks/featuredPosts.tsx
var featuredPostsBlockSchema = {
  name: "featuredPosts",
  label: "Featured Posts",
  ui: {},
  fields: [
    {
      type: "string",
      label: "Title",
      name: "title"
    },
    {
      type: "object",
      label: "Featured Posts",
      name: "items",
      list: true,
      ui: {
        itemProps: (item) => {
          return {
            label: item?.postLocation
          };
        }
      },
      fields: [
        {
          type: "string",
          label: "Post Location",
          name: "postLocation"
        }
      ]
    },
    {
      type: "string",
      label: "Color",
      name: "color",
      options: [
        { label: "Default", value: "default" },
        { label: "Tint", value: "tint" },
        { label: "Primary", value: "primary" }
      ]
    }
  ]
};

// components/blocks/paginatedPosts.tsx
import { useState as useState3, useEffect as useEffect2 } from "react";
var paginatedPostsBlockSchema = {
  name: "paginatedPosts",
  label: "Paginated Posts",
  ui: {},
  fields: [
    {
      type: "string",
      label: "Title",
      name: "title"
    },
    {
      type: "string",
      label: "Color",
      name: "color",
      options: [
        { label: "Default", value: "default" },
        { label: "Tint", value: "tint" },
        { label: "Primary", value: "primary" }
      ]
    }
  ]
};

// components/blocks/hero.tsx
import { TinaMarkdown as TinaMarkdown2 } from "tinacms/dist/rich-text";
var heroBlockSchema = {
  name: "hero",
  label: "Hero",
  ui: {
    defaultItem: {
      tagline: "Here's some text above the other text",
      headline: "This Big Text is Totally Awesome",
      text: "Phasellus scelerisque, libero eu finibus rutrum, risus risus accumsan libero, nec molestie urna dui a leo."
    }
  },
  fields: [
    {
      type: "string",
      label: "Tagline",
      name: "tagline"
    },
    {
      type: "string",
      label: "Headline",
      name: "headline"
    },
    {
      label: "Text",
      name: "text",
      type: "rich-text"
    },
    {
      label: "Actions",
      name: "actions",
      type: "object",
      list: true,
      ui: {
        defaultItem: {
          label: "Action Label",
          type: "button",
          icon: true,
          link: "/"
        },
        itemProps: (item) => ({ label: item.label })
      },
      fields: [
        {
          label: "Label",
          name: "label",
          type: "string"
        },
        {
          label: "Type",
          name: "type",
          type: "string",
          options: [
            { label: "Button", value: "button" },
            { label: "Link", value: "link" }
          ]
        },
        {
          label: "Icon",
          name: "icon",
          type: "boolean"
        },
        {
          label: "Link",
          name: "link",
          type: "string"
        }
      ]
    },
    {
      type: "object",
      label: "Image",
      name: "image",
      fields: [
        {
          name: "src",
          label: "Image Source",
          type: "image"
        },
        {
          name: "alt",
          label: "Alt Text",
          type: "string"
        }
      ]
    },
    {
      type: "string",
      label: "Color",
      name: "color",
      options: [
        { label: "Default", value: "default" },
        { label: "Tint", value: "tint" },
        { label: "Primary", value: "primary" }
      ]
    }
  ]
};

// components/blocks/testimonial.tsx
var testimonialBlockSchema = {
  name: "testimonial",
  label: "Testimonial",
  ui: {
    defaultItem: {
      quote: "There are only two hard things in Computer Science: cache invalidation and naming things.",
      author: "Phil Karlton",
      color: "primary"
    }
  },
  fields: [
    {
      type: "string",
      ui: {
        component: "textarea"
      },
      label: "Quote",
      name: "quote"
    },
    {
      type: "string",
      label: "Author",
      name: "author"
    },
    {
      type: "string",
      label: "Color",
      name: "color",
      options: [
        { label: "Default", value: "default" },
        { label: "Tint", value: "tint" },
        { label: "Primary", value: "primary" }
      ]
    }
  ]
};

// components/fields/color.tsx
import { wrapFieldsWithMeta } from "tinacms";
var colorOptions = [
  "blue",
  "teal",
  "green",
  "yellow",
  "orange",
  "red",
  "pink",
  "purple",
  "white",
  "gray_400",
  "gray_600"
];
var ColorPickerInput = wrapFieldsWithMeta(({ input }) => {
  const inputClasses = {
    blue: "bg-blue-500 border-blue-600",
    teal: "bg-teal-500 border-teal-600",
    green: "bg-green-500 border-green-600",
    yellow: "bg-yellow-500 border-yellow-600",
    orange: "bg-orange-500 border-orange-600",
    red: "bg-red-500 border-red-600",
    pink: "bg-pink-500 border-pink-600",
    purple: "bg-purple-500 border-purple-600",
    white: "bg-white border-gray-150",
    gray_400: "bg-gray-400 border-gray-600",
    gray_600: "bg-gray-600 border-gray-800"
  };
  return <>
    <input type="text" id={input.name} className="hidden" {...input} />
    <div className="flex gap-2 flex-wrap">{colorOptions.map((color) => {
      return <button
        className={`w-9 h-9 rounded-full shadow border ${inputClasses[color]} ${input.value === color ? "ring-[3px] ring-offset-2 ring-blue-400" : ""}`}
        onClick={() => {
          input.onChange(color);
        }}
      />;
    })}</div>
  </>;
});

// components/fields/table.tsx
import * as React237 from "react";
import { wrapFieldsWithMeta as wrapFieldsWithMeta2 } from "tinacms";
var TableInput = wrapFieldsWithMeta2(
  ({ input }) => {
    const jsonData = input.value.replace(/'/g, '"');
    const parsedData = jsonData && jsonData.length > 0 ? JSON.parse(jsonData) : {};
    const onChange = input.onChange;
    const headers = parsedData.headers;
    const rows = parsedData.rows;
    const [cellModes, setCellModes] = React237.useState([]);
    const initializeCellModes = () => {
      if (!rows || rows.length === 0 || !headers || headers.length === 0) {
        setCellModes([]);
        return;
      }
      const initialModes = rows.map(() => Array(headers.length).fill("text"));
      setCellModes(initialModes);
    };
    React237.useEffect(() => {
      initializeCellModes();
    }, [headers, rows]);
    const toggleCellMode = (rowIndex, cellIndex) => {
      if (cellModes.length === 0)
        return;
      const updatedModes = cellModes.map(
        (row, index) => index === rowIndex ? [...row.slice(0, cellIndex), row[cellIndex] === "text" ? "affiliate" : "text", ...row.slice(cellIndex + 1)] : row
      );
      setCellModes(updatedModes);
    };
    const updateData = (newData) => {
      const dataString = JSON.stringify(newData);
      const escapedString = dataString.replace(/"/g, "'");
      onChange(escapedString);
    };
    const handleAddRow = () => {
      const newRow = Array(headers.length).fill("");
      const updatedRows = [...rows, newRow];
      updateData({ headers, rows: updatedRows });
    };
    const handleAddColumn = () => {
      let updatedHeaders;
      let updatedRows;
      if ((!headers || headers.length === 0) && (!rows || rows.length === 0)) {
        updatedHeaders = [""];
        updatedRows = [[""]];
      } else if (!headers || headers.length === 0) {
        updatedHeaders = [""];
        updatedRows = rows.map((row) => [...row, ""]);
      } else {
        updatedHeaders = [...headers, ""];
        updatedRows = rows.map((row) => [...row, ""]);
      }
      updateData({ headers: updatedHeaders, rows: updatedRows });
    };
    const handleRemoveColumn = (columnIndex) => {
      const updatedHeaders = headers.filter((_, index) => index !== columnIndex);
      const updatedRows = rows.map((row) => row.filter((_, index) => index !== columnIndex));
      updateData({ headers: updatedHeaders, rows: updatedRows });
    };
    const handleMoveColumnLeft = (columnIndex) => {
      if (columnIndex > 0) {
        const updatedHeaders = [...headers];
        const updatedRows = rows.map((row) => {
          const updatedRow = [...row];
          const temp = updatedRow[columnIndex - 1];
          updatedRow[columnIndex - 1] = updatedRow[columnIndex];
          updatedRow[columnIndex] = temp;
          return updatedRow;
        });
        updateData({ headers: updatedHeaders, rows: updatedRows });
      }
    };
    const handleMoveColumnRight = (columnIndex) => {
      if (columnIndex < headers.length - 1) {
        const updatedHeaders = [...headers];
        const updatedRows = rows.map((row) => {
          const updatedRow = [...row];
          const temp = updatedRow[columnIndex + 1];
          updatedRow[columnIndex + 1] = updatedRow[columnIndex];
          updatedRow[columnIndex] = temp;
          return updatedRow;
        });
        updateData({ headers: updatedHeaders, rows: updatedRows });
      }
    };
    const handleMoveRowUp = (rowIndex) => {
      if (rowIndex > 0) {
        const updatedRows = [...rows];
        const temp = updatedRows[rowIndex - 1];
        updatedRows[rowIndex - 1] = updatedRows[rowIndex];
        updatedRows[rowIndex] = temp;
        updateData({ headers, rows: updatedRows });
      }
    };
    const handleMoveRowDown = (rowIndex) => {
      if (rowIndex < rows.length - 1) {
        const updatedRows = [...rows];
        const temp = updatedRows[rowIndex + 1];
        updatedRows[rowIndex + 1] = updatedRows[rowIndex];
        updatedRows[rowIndex] = temp;
        updateData({ headers, rows: updatedRows });
      }
    };
    const handleRemoveRow = (rowIndex) => {
      const updatedRows = rows.filter((_, index) => index !== rowIndex);
      updateData({ headers, rows: updatedRows });
    };
    const handleLinkUrlChange = (rowIndex, cellIndex, value) => {
      const updatedRows = rows.map(
        (row, index) => index === rowIndex ? [...row.slice(0, cellIndex), { ...row[cellIndex], linkUrl: value }, ...row.slice(cellIndex + 1)] : row
      );
      onChange({ headers, rows: updatedRows });
    };
    const handleImageUrlChange = (rowIndex, cellIndex, value) => {
      const updatedRows = rows.map(
        (row, index) => index === rowIndex ? [...row.slice(0, cellIndex), { ...row[cellIndex], productUrl: value }, ...row.slice(cellIndex + 1)] : row
      );
      onChange({ headers, rows: updatedRows });
    };
    const handleHeaderValueChange = (columnIndex, value) => {
      const updatedHeaders = headers.map(
        (header, index) => index === columnIndex ? value : header
      );
      updateData({ headers: updatedHeaders, rows });
    };
    return <div><table>
      <thead><tr>
        <div />
        {headers && headers.length > 0 && headers.map((header, columnIndex) => <th key={columnIndex}>
          <input
            type="text"
            value={header}
            onChange={(e) => handleHeaderValueChange(columnIndex, e.target.value)}
          />
          <div className="flex items-center mt-1">
            <button className="mr-1" onClick={() => handleMoveColumnLeft(columnIndex)}><FaChevronLeft className="text-gray-500" /></button>
            <button className="mr-1" onClick={() => handleMoveColumnRight(columnIndex)}><FaChevronRight className="text-gray-500" /></button>
            <button onClick={() => handleRemoveColumn(columnIndex)}><FaTrashAlt className="text-gray-500" /></button>
          </div>
        </th>)}
        <button className="mr-2" onClick={handleAddColumn}><FaPlusCircle className="text-blue-500" /></button>
      </tr></thead>
      <tbody>
        {rows && rows.length > 0 && rows.map((row, rowIndex) => <tr key={rowIndex}>
          <div>
            <button className="mb-1" onClick={() => handleMoveRowUp(rowIndex)}><FaChevronUp className="text-gray-500" /></button>
            <button onClick={() => handleMoveRowDown(rowIndex)}><FaChevronDown className="text-gray-500" /></button>
            <button onClick={() => handleRemoveRow(rowIndex)}><FaTrashAlt className="text-gray-500" /></button>
          </div>
          {row.length > 0 && row.map((cell, columnIndex) => <td key={columnIndex} className="border-2 px-4 py-2">
            {cellModes[rowIndex][columnIndex] === "text" && <div className="whitespace-pre-wrap items-top">{cell.content && cell.content}</div>}
            {cellModes[rowIndex][columnIndex] === "affiliate" && <div className="flex flex-col">
              <input
                type="text"
                value={cell.linkUrl || ""}
                onChange={(e) => handleLinkUrlChange(rowIndex, columnIndex, e.target.value)}
                placeholder="Link URL"
              />
              <input
                type="text"
                value={cell.productUrl || ""}
                onChange={(e) => handleImageUrlChange(rowIndex, columnIndex, e.target.value)}
                placeholder="Product URL"
              />
            </div>}
            <div className="flex items-center justify-end"><button onClick={() => toggleCellMode(rowIndex, columnIndex)}>{cellModes[rowIndex][columnIndex] === "text" ? <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-blue-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            ><path
              fillRule="evenodd"
              d="M9.707 3.293A1 1 0 0111 4.586l2 2V8a1 1 0 01-2 0V6.414l-1.293 1.293a1 1 0 01-1.414-1.414l3-3zM4 10a1 1 0 011-1h2.586l-1.293-1.293a1 1 0 011.414-1.414l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414L7.586 11H5a1 1 0 01-1-1zm12-1a1 1 0 011 1v6a1 1 0 01-1 1h-4a1 1 0 010-2h3V10h-3a1 1 0 010-2h4zm-2-8H6a3 3 0 00-3 3v8a3 3 0 003 3h8a3 3 0 003-3V4a3 3 0 00-3-3zm1 11a1 1 0 01-1 1H6a1 1 0 01-1-1v-5h10v5z"
              clipRule="evenodd"
            /></svg> : <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-gray-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            ><path
              fillRule="evenodd"
              d="M15.293 3.293a1 1 0 010 1.414L13.414 6l1.88 1.88a1 1 0 11-1.414 1.414L12 7.414l-1.88 1.88a1 1 0 11-1.414-1.414L10.586 6l-1.88-1.88a1 1 0 111.414-1.414L12 4.586l1.88-1.88a1 1 0 111.414 1.414L13.414 6l1.879-1.88a1 1 0 011.414 0z"
              clipRule="evenodd"
            /></svg>}</button></div>
          </td>)}
        </tr>)}
        {headers && headers.length > 0 && <button className="mr-2" onClick={handleAddRow}><FaPlusCircle className="text-blue-500" /></button>}
      </tbody>
    </table></div>;
  }
);

// .tina/config.tsx
var config = defineConfig({
  clientId: process.env.NEXT_PUBLIC_TINA_CLIENT_ID,
  branch: process.env.NEXT_PUBLIC_TINA_BRANCH || process.env.NEXT_PUBLIC_VERCEL_GIT_COMMIT_REF || process.env.HEAD,
  token: process.env.TINA_TOKEN,
  media: {
    loadCustomStore: async () => {
      const pack = await Promise.resolve().then(() => __toESM(require_dist()));
      return pack.TinaCloudCloudinaryMediaStore;
    }
  },
  build: {
    publicFolder: "public",
    outputFolder: "admin"
  },
  schema: {
    collections: [
      {
        label: "Blog Posts",
        name: "post",
        path: "content/posts",
        format: "mdx",
        fields: [
          {
            type: "string",
            label: "Title",
            name: "title",
            isTitle: true,
            required: true
          },
          {
            type: "string",
            label: "Description",
            name: "description"
          },
          {
            type: "string",
            name: "categories",
            label: "Categories",
            list: true
          },
          {
            type: "image",
            name: "heroImg",
            label: "Hero Image"
          },
          {
            type: "rich-text",
            label: "Excerpt",
            name: "excerpt"
          },
          {
            type: "reference",
            label: "Author",
            name: "author",
            collections: ["author"]
          },
          {
            type: "datetime",
            label: "Posted Date",
            name: "date",
            ui: {
              dateFormat: "MMMM DD YYYY",
              timeFormat: "hh:mm A"
            }
          },
          {
            type: "rich-text",
            label: "Body",
            name: "_body",
            templates: [
              {
                name: "DateTime",
                label: "Date & Time",
                inline: true,
                fields: [
                  {
                    name: "format",
                    label: "Format",
                    type: "string",
                    options: ["utc", "iso", "local"]
                  }
                ]
              },
              {
                name: "BlockQuote",
                label: "Block Quote",
                fields: [
                  {
                    name: "children",
                    label: "Quote",
                    type: "rich-text"
                  },
                  {
                    name: "authorName",
                    label: "Author",
                    type: "string"
                  }
                ]
              },
              {
                name: "NewsletterSignup",
                label: "Newsletter Sign Up",
                fields: [
                  {
                    name: "children",
                    label: "CTA",
                    type: "rich-text"
                  },
                  {
                    name: "placeholder",
                    label: "Placeholder",
                    type: "string"
                  },
                  {
                    name: "buttonText",
                    label: "Button Text",
                    type: "string"
                  },
                  {
                    name: "disclaimer",
                    label: "Disclaimer",
                    type: "rich-text"
                  }
                ],
                ui: {
                  defaultItem: {
                    placeholder: "Enter your email",
                    buttonText: "Notify Me"
                  }
                }
              },
              {
                name: "AffiliateLink",
                label: "Affiliate Link",
                fields: [
                  {
                    name: "altText",
                    label: "Alt Text",
                    type: "string"
                  },
                  {
                    name: "affiliateURLs",
                    label: "Affiliate URLs",
                    type: "object",
                    fields: [
                      {
                        name: "linkURL",
                        type: "string"
                      },
                      {
                        name: "imageURL",
                        type: "string"
                      }
                    ],
                    ui: {
                      parse: (val) => {
                        if (val.snippet) {
                          const imageMatch = val.snippet.match(/<img.*?src="(.*?)"/);
                          const imageSnippet = imageMatch ? imageMatch[1].replace(/&amp;/g, "&") : null;
                          const linkMatch = val.snippet.match(/<a.*?href="(.*?)"/);
                          const linkSnippet = linkMatch ? linkMatch[1].replace(/&amp;/g, "&") : null;
                          return {
                            linkURL: linkSnippet,
                            imageURL: imageSnippet
                          };
                        } else {
                          const updatedValue = {};
                          if (val.linkURL) {
                            updatedValue.linkURL = val.linkURL;
                          }
                          if (val.imageURL) {
                            updatedValue.imageURL = val.imageURL;
                          }
                          return {
                            ...val,
                            ...updatedValue
                          };
                        }
                      },
                      component: ({ field, input, meta }) => {
                        const handleInputChange = (field2, value, input2, onChange) => {
                          let updatedValue = {};
                          switch (field2) {
                            case "snippet":
                              updatedValue = { snippet: value };
                              break;
                            case "linkURL":
                              updatedValue = { linkURL: value };
                              break;
                            case "imageURL":
                              updatedValue = { imageURL: value };
                              break;
                            default:
                              break;
                          }
                          const mergedValue = { ...input2.value, ...updatedValue };
                          onChange(mergedValue);
                        };
                        return <div>
                          <label className="block font-sans text-xs font-semibold text-gray-700 whitespace-normal mb-2 undefined">{field.label}</label>
                          <label className="text-xs">Affiliate Snippet</label>
                          <input
                            className="shadow-inner focus:shadow-outline focus:border-blue-500 focus:outline-none block text-base placeholder:text-gray-300 px-3 py-2 text-gray-600 w-full bg-white border border-gray-200 transition-all ease-out duration-150 focus:text-gray-900 rounded-md  undefined"
                            name="Snippet"
                            id="snippet"
                            type="string"
                            onChange={(e) => handleInputChange("snippet", e.target.value, input, input.onChange)}
                          />
                          <label className="text-xs">Affiliate Image URL</label>
                          <input
                            className="shadow-inner focus:shadow-outline focus:border-blue-500 focus:outline-none block text-base placeholder:text-gray-300 px-3 py-2 text-gray-600 w-full bg-white border border-gray-200 transition-all ease-out duration-150 focus:text-gray-900 rounded-md  undefined"
                            name="ImageURL"
                            id="imageURL"
                            type="string"
                            value={input.value.imageURL}
                            onChange={(e) => handleInputChange("imageURL", e.target.value, input, input.onChange)}
                          />
                          <label className="text-xs">Affiliate Link URL</label>
                          <input
                            className="shadow-inner focus:shadow-outline focus:border-blue-500 focus:outline-none block text-base placeholder:text-gray-300 px-3 py-2 text-gray-600 w-full bg-white border border-gray-200 transition-all ease-out duration-150 focus:text-gray-900 rounded-md  undefined"
                            name="LinkURL"
                            id="linkURL"
                            type="string"
                            value={input.value.linkURL}
                            onChange={(e) => handleInputChange("linkURL", e.target.value, input, input.onChange)}
                          />
                        </div>;
                      }
                    }
                  },
                  {
                    name: "image",
                    label: "Image",
                    type: "image"
                  },
                  {
                    label: "Button",
                    name: "button",
                    type: "boolean"
                  },
                  {
                    label: "Caption",
                    name: "caption",
                    type: "string"
                  },
                  {
                    label: "Float Left",
                    name: "floatLeft",
                    type: "boolean"
                  }
                ]
              },
              {
                name: "TableOfContents",
                label: "Table Of Contents",
                fields: [
                  {
                    name: "title",
                    label: "Title",
                    type: "string"
                  },
                  {
                    name: "hLevel",
                    label: "Heading Level",
                    type: "string"
                  }
                ],
                ui: {
                  defaultItem: {
                    title: "In this Article:",
                    hLevel: "H1"
                  }
                }
              },
              {
                name: "Table",
                label: "Table",
                fields: [
                  {
                    name: "headers",
                    label: "Column Headers",
                    type: "string",
                    list: true
                  },
                  {
                    name: "rows",
                    label: "Rows",
                    type: "object",
                    list: true,
                    fields: [
                      {
                        name: "cells",
                        label: "Cells",
                        type: "object",
                        list: true,
                        fields: [
                          {
                            name: "content",
                            label: "Content",
                            type: "string",
                            ui: {
                              component: "textarea"
                            }
                          },
                          {
                            name: "affiliateSnippet",
                            label: "Affiliate Snippet",
                            type: "object",
                            fields: [
                              {
                                name: "linkURL",
                                type: "string"
                              },
                              {
                                name: "imageURL",
                                type: "string"
                              }
                            ],
                            ui: {
                              parse: (val) => {
                                const imageMatch = val.match(/<img.*?src="(.*?)"/);
                                const imageSnippet = imageMatch ? imageMatch[1].replace(/&amp;/g, "&") : null;
                                const linkMatch = val.match(/<a.*?href="(.*?)"/);
                                const linkSnippet = linkMatch ? linkMatch[1].replace(/&amp;/g, "&") : null;
                                return {
                                  "linkURL": linkSnippet,
                                  "imageURL": imageSnippet
                                };
                              },
                              component: ({ field, input, meta }) => {
                                return <div>
                                  <label className="block font-sans text-xs font-semibold text-gray-700 whitespace-normal mb-2 undefined">{field.label}</label>
                                  <input
                                    name="Snippet"
                                    id="snippet"
                                    type="string"
                                    onChange={input.onChange}
                                  />
                                  <label>Link URL</label>
                                  <p>{input.value.linkURL}</p>
                                  <label>Image URL</label>
                                  <p>{input.value.imageURL}</p>
                                </div>;
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                ui: {
                  defaultItem: {
                    headers: [
                      "Product",
                      "Category",
                      "Features"
                    ],
                    rows: []
                  }
                }
              },
              {
                name: "table2",
                label: "Table2",
                fields: [
                  {
                    name: "data",
                    label: "Table",
                    type: "string",
                    ui: {
                      component: TableInput
                    }
                  }
                ]
              }
            ],
            isBody: true
          }
        ]
      },
      {
        label: "Global",
        name: "global",
        path: "content/global",
        format: "json",
        ui: {
          global: true
        },
        fields: [
          {
            type: "object",
            label: "Header",
            name: "header",
            fields: [
              {
                type: "string",
                label: "Name",
                name: "name"
              },
              {
                type: "string",
                label: "Color",
                name: "color",
                options: [
                  { label: "Default", value: "default" },
                  { label: "Primary", value: "primary" }
                ]
              },
              {
                type: "object",
                label: "Nav Links",
                name: "nav",
                list: true,
                ui: {
                  itemProps: (item) => {
                    return { label: item?.label };
                  },
                  defaultItem: {
                    href: "home",
                    label: "Home"
                  }
                },
                fields: [
                  {
                    type: "string",
                    label: "Link",
                    name: "href"
                  },
                  {
                    type: "string",
                    label: "Label",
                    name: "label"
                  }
                ]
              }
            ]
          },
          {
            type: "object",
            label: "Footer",
            name: "footer",
            fields: [
              {
                type: "string",
                label: "Color",
                name: "color",
                options: [
                  { label: "Default", value: "default" },
                  { label: "Primary", value: "primary" }
                ]
              },
              {
                type: "object",
                label: "Nav Links",
                name: "nav",
                list: true,
                ui: {
                  itemProps: (item) => {
                    return { label: item?.label };
                  }
                },
                fields: [
                  {
                    type: "string",
                    label: "Link",
                    name: "href"
                  },
                  {
                    type: "string",
                    label: "Label",
                    name: "label"
                  }
                ]
              },
              {
                type: "object",
                label: "Social Links",
                name: "social",
                fields: [
                  {
                    type: "string",
                    label: "Facebook",
                    name: "facebook"
                  },
                  {
                    type: "string",
                    label: "Twitter",
                    name: "twitter"
                  },
                  {
                    type: "string",
                    label: "Instagram",
                    name: "instagram"
                  },
                  {
                    type: "string",
                    label: "Pintreest",
                    name: "pinterest"
                  }
                ]
              }
            ]
          },
          {
            type: "object",
            label: "Theme",
            name: "theme",
            fields: [
              {
                type: "string",
                label: "Primary Color",
                name: "color",
                ui: {
                  component: ColorPickerInput
                }
              },
              {
                type: "string",
                name: "font",
                label: "Font Family",
                options: [
                  {
                    label: "System Sans",
                    value: "sans"
                  },
                  {
                    label: "Nunito",
                    value: "nunito"
                  },
                  {
                    label: "Lato",
                    value: "lato"
                  },
                  {
                    label: "Montserrat",
                    value: "montserrat"
                  },
                  {
                    label: "Veranda",
                    value: "veranda"
                  }
                ]
              },
              {
                type: "string",
                name: "darkMode",
                label: "Dark Mode",
                options: [
                  {
                    label: "System",
                    value: "system"
                  },
                  {
                    label: "Light",
                    value: "light"
                  },
                  {
                    label: "Dark",
                    value: "dark"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        label: "Authors",
        name: "author",
        path: "content/authors",
        format: "md",
        fields: [
          {
            type: "string",
            label: "Name",
            name: "name",
            isTitle: true,
            required: true
          },
          {
            type: "string",
            label: "Avatar",
            name: "avatar"
          }
        ]
      },
      {
        label: "Pages",
        name: "page",
        path: "content/pages",
        ui: {
          router: ({ document: document2 }) => {
            if (document2._sys.filename === "home") {
              return `/`;
            }
            if (document2._sys.filename === "about") {
              return `/about`;
            }
            return void 0;
          }
        },
        fields: [
          {
            type: "string",
            label: "Title",
            name: "title",
            description: "The title of the page. This is used to display the title in the CMS",
            isTitle: true,
            required: true
          },
          {
            type: "string",
            label: "Description",
            name: "description"
          },
          {
            type: "object",
            list: true,
            name: "blocks",
            label: "Sections",
            ui: {
              visualSelector: true
            },
            templates: [
              heroBlockSchema,
              featureBlockSchema,
              featuredPostsBlockSchema,
              paginatedPostsBlockSchema,
              contentBlockSchema,
              testimonialBlockSchema
            ]
          }
        ]
      },
      {
        label: "Categories",
        name: "category",
        path: "content/categories",
        format: "mdx",
        fields: [
          {
            type: "string",
            label: "Title",
            name: "title",
            isTitle: true,
            required: true
          },
          {
            type: "string",
            label: "Description",
            name: "description"
          },
          {
            type: "string",
            label: "Category",
            name: "category",
            required: true
          },
          {
            type: "image",
            name: "heroImg",
            label: "Hero Image"
          },
          {
            type: "rich-text",
            label: "Body",
            name: "_body",
            templates: [
              {
                name: "DateTime",
                label: "Date & Time",
                inline: true,
                fields: [
                  {
                    name: "format",
                    label: "Format",
                    type: "string",
                    options: ["utc", "iso", "local"]
                  }
                ]
              },
              {
                name: "BlockQuote",
                label: "Block Quote",
                fields: [
                  {
                    name: "children",
                    label: "Quote",
                    type: "rich-text"
                  },
                  {
                    name: "authorName",
                    label: "Author",
                    type: "string"
                  }
                ]
              },
              {
                name: "NewsletterSignup",
                label: "Newsletter Sign Up",
                fields: [
                  {
                    name: "children",
                    label: "CTA",
                    type: "rich-text"
                  },
                  {
                    name: "placeholder",
                    label: "Placeholder",
                    type: "string"
                  },
                  {
                    name: "buttonText",
                    label: "Button Text",
                    type: "string"
                  },
                  {
                    name: "disclaimer",
                    label: "Disclaimer",
                    type: "rich-text"
                  }
                ],
                ui: {
                  defaultItem: {
                    placeholder: "Enter your email",
                    buttonText: "Notify Me"
                  }
                }
              }
            ],
            isBody: true
          }
        ]
      }
    ]
  },
  search: {
    tina: {
      indexerToken: process.env.TINA_SEARCH_TOKEN,
      stopwordLanguages: ["eng"]
    },
    indexBatchSize: 100,
    maxSearchIndexFieldLength: 100
  }
});
var config_default = config;
export {
  config_default as default
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* @license
Papa Parse
v5.3.2
https://github.com/mholt/PapaParse
License: MIT
*/
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom-server.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! moment.js
//! momentjs.com
//! version : 2.29.4
